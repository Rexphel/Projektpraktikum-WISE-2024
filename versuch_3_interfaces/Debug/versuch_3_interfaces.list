
versuch_3_interfaces.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc3c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  0800bdf0  0800bdf0  0000cdf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c288  0800c288  0000e1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c288  0800c288  0000d288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c290  0800c290  0000e1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c290  0800c290  0000d290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c294  0800c294  0000d294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800c298  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e1d4  2**0
                  CONTENTS
 10 .bss          00000a2c  200001d4  200001d4  0000e1d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000c00  20000c00  0000e1d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e1d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018400  00000000  00000000  0000e204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003305  00000000  00000000  00026604  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001400  00000000  00000000  00029910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f96  00000000  00000000  0002ad10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027cbb  00000000  00000000  0002bca6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000180ec  00000000  00000000  00053961  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed468  00000000  00000000  0006ba4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00158eb5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006b04  00000000  00000000  00158ef8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  0015f9fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001d4 	.word	0x200001d4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800bdd4 	.word	0x0800bdd4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	0800bdd4 	.word	0x0800bdd4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_ldivmod>:
 8000ca8:	b97b      	cbnz	r3, 8000cca <__aeabi_ldivmod+0x22>
 8000caa:	b972      	cbnz	r2, 8000cca <__aeabi_ldivmod+0x22>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bfbe      	ittt	lt
 8000cb0:	2000      	movlt	r0, #0
 8000cb2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000cb6:	e006      	blt.n	8000cc6 <__aeabi_ldivmod+0x1e>
 8000cb8:	bf08      	it	eq
 8000cba:	2800      	cmpeq	r0, #0
 8000cbc:	bf1c      	itt	ne
 8000cbe:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000cc2:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cc6:	f000 b9eb 	b.w	80010a0 <__aeabi_idiv0>
 8000cca:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cce:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	db09      	blt.n	8000cea <__aeabi_ldivmod+0x42>
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	db1a      	blt.n	8000d10 <__aeabi_ldivmod+0x68>
 8000cda:	f000 f883 	bl	8000de4 <__udivmoddi4>
 8000cde:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce6:	b004      	add	sp, #16
 8000ce8:	4770      	bx	lr
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	db1b      	blt.n	8000d2c <__aeabi_ldivmod+0x84>
 8000cf4:	f000 f876 	bl	8000de4 <__udivmoddi4>
 8000cf8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d00:	b004      	add	sp, #16
 8000d02:	4240      	negs	r0, r0
 8000d04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d08:	4252      	negs	r2, r2
 8000d0a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d0e:	4770      	bx	lr
 8000d10:	4252      	negs	r2, r2
 8000d12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d16:	f000 f865 	bl	8000de4 <__udivmoddi4>
 8000d1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d22:	b004      	add	sp, #16
 8000d24:	4240      	negs	r0, r0
 8000d26:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d2a:	4770      	bx	lr
 8000d2c:	4252      	negs	r2, r2
 8000d2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d32:	f000 f857 	bl	8000de4 <__udivmoddi4>
 8000d36:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d3e:	b004      	add	sp, #16
 8000d40:	4252      	negs	r2, r2
 8000d42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d46:	4770      	bx	lr

08000d48 <__aeabi_uldivmod>:
 8000d48:	b953      	cbnz	r3, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4a:	b94a      	cbnz	r2, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4c:	2900      	cmp	r1, #0
 8000d4e:	bf08      	it	eq
 8000d50:	2800      	cmpeq	r0, #0
 8000d52:	bf1c      	itt	ne
 8000d54:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000d58:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000d5c:	f000 b9a0 	b.w	80010a0 <__aeabi_idiv0>
 8000d60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d68:	f000 f83c 	bl	8000de4 <__udivmoddi4>
 8000d6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d74:	b004      	add	sp, #16
 8000d76:	4770      	bx	lr

08000d78 <__aeabi_d2lz>:
 8000d78:	b538      	push	{r3, r4, r5, lr}
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	4604      	mov	r4, r0
 8000d80:	460d      	mov	r5, r1
 8000d82:	f7ff febb 	bl	8000afc <__aeabi_dcmplt>
 8000d86:	b928      	cbnz	r0, 8000d94 <__aeabi_d2lz+0x1c>
 8000d88:	4620      	mov	r0, r4
 8000d8a:	4629      	mov	r1, r5
 8000d8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d90:	f000 b80a 	b.w	8000da8 <__aeabi_d2ulz>
 8000d94:	4620      	mov	r0, r4
 8000d96:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d9a:	f000 f805 	bl	8000da8 <__aeabi_d2ulz>
 8000d9e:	4240      	negs	r0, r0
 8000da0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000da4:	bd38      	pop	{r3, r4, r5, pc}
 8000da6:	bf00      	nop

08000da8 <__aeabi_d2ulz>:
 8000da8:	b5d0      	push	{r4, r6, r7, lr}
 8000daa:	4b0c      	ldr	r3, [pc, #48]	@ (8000ddc <__aeabi_d2ulz+0x34>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	4606      	mov	r6, r0
 8000db0:	460f      	mov	r7, r1
 8000db2:	f7ff fc31 	bl	8000618 <__aeabi_dmul>
 8000db6:	f7ff ff07 	bl	8000bc8 <__aeabi_d2uiz>
 8000dba:	4604      	mov	r4, r0
 8000dbc:	f7ff fbb2 	bl	8000524 <__aeabi_ui2d>
 8000dc0:	4b07      	ldr	r3, [pc, #28]	@ (8000de0 <__aeabi_d2ulz+0x38>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f7ff fc28 	bl	8000618 <__aeabi_dmul>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	460b      	mov	r3, r1
 8000dcc:	4630      	mov	r0, r6
 8000dce:	4639      	mov	r1, r7
 8000dd0:	f7ff fa6a 	bl	80002a8 <__aeabi_dsub>
 8000dd4:	f7ff fef8 	bl	8000bc8 <__aeabi_d2uiz>
 8000dd8:	4621      	mov	r1, r4
 8000dda:	bdd0      	pop	{r4, r6, r7, pc}
 8000ddc:	3df00000 	.word	0x3df00000
 8000de0:	41f00000 	.word	0x41f00000

08000de4 <__udivmoddi4>:
 8000de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000de8:	9d08      	ldr	r5, [sp, #32]
 8000dea:	460c      	mov	r4, r1
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d14e      	bne.n	8000e8e <__udivmoddi4+0xaa>
 8000df0:	4694      	mov	ip, r2
 8000df2:	458c      	cmp	ip, r1
 8000df4:	4686      	mov	lr, r0
 8000df6:	fab2 f282 	clz	r2, r2
 8000dfa:	d962      	bls.n	8000ec2 <__udivmoddi4+0xde>
 8000dfc:	b14a      	cbz	r2, 8000e12 <__udivmoddi4+0x2e>
 8000dfe:	f1c2 0320 	rsb	r3, r2, #32
 8000e02:	4091      	lsls	r1, r2
 8000e04:	fa20 f303 	lsr.w	r3, r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	4319      	orrs	r1, r3
 8000e0e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e16:	fa1f f68c 	uxth.w	r6, ip
 8000e1a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e22:	fb07 1114 	mls	r1, r7, r4, r1
 8000e26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e2a:	fb04 f106 	mul.w	r1, r4, r6
 8000e2e:	4299      	cmp	r1, r3
 8000e30:	d90a      	bls.n	8000e48 <__udivmoddi4+0x64>
 8000e32:	eb1c 0303 	adds.w	r3, ip, r3
 8000e36:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000e3a:	f080 8112 	bcs.w	8001062 <__udivmoddi4+0x27e>
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	f240 810f 	bls.w	8001062 <__udivmoddi4+0x27e>
 8000e44:	3c02      	subs	r4, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1a59      	subs	r1, r3, r1
 8000e4a:	fa1f f38e 	uxth.w	r3, lr
 8000e4e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e52:	fb07 1110 	mls	r1, r7, r0, r1
 8000e56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e5a:	fb00 f606 	mul.w	r6, r0, r6
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	d90a      	bls.n	8000e78 <__udivmoddi4+0x94>
 8000e62:	eb1c 0303 	adds.w	r3, ip, r3
 8000e66:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000e6a:	f080 80fc 	bcs.w	8001066 <__udivmoddi4+0x282>
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	f240 80f9 	bls.w	8001066 <__udivmoddi4+0x282>
 8000e74:	4463      	add	r3, ip
 8000e76:	3802      	subs	r0, #2
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e7e:	2100      	movs	r1, #0
 8000e80:	b11d      	cbz	r5, 8000e8a <__udivmoddi4+0xa6>
 8000e82:	40d3      	lsrs	r3, r2
 8000e84:	2200      	movs	r2, #0
 8000e86:	e9c5 3200 	strd	r3, r2, [r5]
 8000e8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d905      	bls.n	8000e9e <__udivmoddi4+0xba>
 8000e92:	b10d      	cbz	r5, 8000e98 <__udivmoddi4+0xb4>
 8000e94:	e9c5 0100 	strd	r0, r1, [r5]
 8000e98:	2100      	movs	r1, #0
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e7f5      	b.n	8000e8a <__udivmoddi4+0xa6>
 8000e9e:	fab3 f183 	clz	r1, r3
 8000ea2:	2900      	cmp	r1, #0
 8000ea4:	d146      	bne.n	8000f34 <__udivmoddi4+0x150>
 8000ea6:	42a3      	cmp	r3, r4
 8000ea8:	d302      	bcc.n	8000eb0 <__udivmoddi4+0xcc>
 8000eaa:	4290      	cmp	r0, r2
 8000eac:	f0c0 80f0 	bcc.w	8001090 <__udivmoddi4+0x2ac>
 8000eb0:	1a86      	subs	r6, r0, r2
 8000eb2:	eb64 0303 	sbc.w	r3, r4, r3
 8000eb6:	2001      	movs	r0, #1
 8000eb8:	2d00      	cmp	r5, #0
 8000eba:	d0e6      	beq.n	8000e8a <__udivmoddi4+0xa6>
 8000ebc:	e9c5 6300 	strd	r6, r3, [r5]
 8000ec0:	e7e3      	b.n	8000e8a <__udivmoddi4+0xa6>
 8000ec2:	2a00      	cmp	r2, #0
 8000ec4:	f040 8090 	bne.w	8000fe8 <__udivmoddi4+0x204>
 8000ec8:	eba1 040c 	sub.w	r4, r1, ip
 8000ecc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed0:	fa1f f78c 	uxth.w	r7, ip
 8000ed4:	2101      	movs	r1, #1
 8000ed6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000eda:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ede:	fb08 4416 	mls	r4, r8, r6, r4
 8000ee2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ee6:	fb07 f006 	mul.w	r0, r7, r6
 8000eea:	4298      	cmp	r0, r3
 8000eec:	d908      	bls.n	8000f00 <__udivmoddi4+0x11c>
 8000eee:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef2:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000ef6:	d202      	bcs.n	8000efe <__udivmoddi4+0x11a>
 8000ef8:	4298      	cmp	r0, r3
 8000efa:	f200 80cd 	bhi.w	8001098 <__udivmoddi4+0x2b4>
 8000efe:	4626      	mov	r6, r4
 8000f00:	1a1c      	subs	r4, r3, r0
 8000f02:	fa1f f38e 	uxth.w	r3, lr
 8000f06:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f0a:	fb08 4410 	mls	r4, r8, r0, r4
 8000f0e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f12:	fb00 f707 	mul.w	r7, r0, r7
 8000f16:	429f      	cmp	r7, r3
 8000f18:	d908      	bls.n	8000f2c <__udivmoddi4+0x148>
 8000f1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000f22:	d202      	bcs.n	8000f2a <__udivmoddi4+0x146>
 8000f24:	429f      	cmp	r7, r3
 8000f26:	f200 80b0 	bhi.w	800108a <__udivmoddi4+0x2a6>
 8000f2a:	4620      	mov	r0, r4
 8000f2c:	1bdb      	subs	r3, r3, r7
 8000f2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f32:	e7a5      	b.n	8000e80 <__udivmoddi4+0x9c>
 8000f34:	f1c1 0620 	rsb	r6, r1, #32
 8000f38:	408b      	lsls	r3, r1
 8000f3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000f3e:	431f      	orrs	r7, r3
 8000f40:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f44:	fa04 f301 	lsl.w	r3, r4, r1
 8000f48:	ea43 030c 	orr.w	r3, r3, ip
 8000f4c:	40f4      	lsrs	r4, r6
 8000f4e:	fa00 f801 	lsl.w	r8, r0, r1
 8000f52:	0c38      	lsrs	r0, r7, #16
 8000f54:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f58:	fbb4 fef0 	udiv	lr, r4, r0
 8000f5c:	fa1f fc87 	uxth.w	ip, r7
 8000f60:	fb00 441e 	mls	r4, r0, lr, r4
 8000f64:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f68:	fb0e f90c 	mul.w	r9, lr, ip
 8000f6c:	45a1      	cmp	r9, r4
 8000f6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f72:	d90a      	bls.n	8000f8a <__udivmoddi4+0x1a6>
 8000f74:	193c      	adds	r4, r7, r4
 8000f76:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000f7a:	f080 8084 	bcs.w	8001086 <__udivmoddi4+0x2a2>
 8000f7e:	45a1      	cmp	r9, r4
 8000f80:	f240 8081 	bls.w	8001086 <__udivmoddi4+0x2a2>
 8000f84:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f88:	443c      	add	r4, r7
 8000f8a:	eba4 0409 	sub.w	r4, r4, r9
 8000f8e:	fa1f f983 	uxth.w	r9, r3
 8000f92:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f96:	fb00 4413 	mls	r4, r0, r3, r4
 8000f9a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f9e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000fa2:	45a4      	cmp	ip, r4
 8000fa4:	d907      	bls.n	8000fb6 <__udivmoddi4+0x1d2>
 8000fa6:	193c      	adds	r4, r7, r4
 8000fa8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000fac:	d267      	bcs.n	800107e <__udivmoddi4+0x29a>
 8000fae:	45a4      	cmp	ip, r4
 8000fb0:	d965      	bls.n	800107e <__udivmoddi4+0x29a>
 8000fb2:	3b02      	subs	r3, #2
 8000fb4:	443c      	add	r4, r7
 8000fb6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000fba:	fba0 9302 	umull	r9, r3, r0, r2
 8000fbe:	eba4 040c 	sub.w	r4, r4, ip
 8000fc2:	429c      	cmp	r4, r3
 8000fc4:	46ce      	mov	lr, r9
 8000fc6:	469c      	mov	ip, r3
 8000fc8:	d351      	bcc.n	800106e <__udivmoddi4+0x28a>
 8000fca:	d04e      	beq.n	800106a <__udivmoddi4+0x286>
 8000fcc:	b155      	cbz	r5, 8000fe4 <__udivmoddi4+0x200>
 8000fce:	ebb8 030e 	subs.w	r3, r8, lr
 8000fd2:	eb64 040c 	sbc.w	r4, r4, ip
 8000fd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000fda:	40cb      	lsrs	r3, r1
 8000fdc:	431e      	orrs	r6, r3
 8000fde:	40cc      	lsrs	r4, r1
 8000fe0:	e9c5 6400 	strd	r6, r4, [r5]
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	e750      	b.n	8000e8a <__udivmoddi4+0xa6>
 8000fe8:	f1c2 0320 	rsb	r3, r2, #32
 8000fec:	fa20 f103 	lsr.w	r1, r0, r3
 8000ff0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ff4:	fa24 f303 	lsr.w	r3, r4, r3
 8000ff8:	4094      	lsls	r4, r2
 8000ffa:	430c      	orrs	r4, r1
 8000ffc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001000:	fa00 fe02 	lsl.w	lr, r0, r2
 8001004:	fa1f f78c 	uxth.w	r7, ip
 8001008:	fbb3 f0f8 	udiv	r0, r3, r8
 800100c:	fb08 3110 	mls	r1, r8, r0, r3
 8001010:	0c23      	lsrs	r3, r4, #16
 8001012:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001016:	fb00 f107 	mul.w	r1, r0, r7
 800101a:	4299      	cmp	r1, r3
 800101c:	d908      	bls.n	8001030 <__udivmoddi4+0x24c>
 800101e:	eb1c 0303 	adds.w	r3, ip, r3
 8001022:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8001026:	d22c      	bcs.n	8001082 <__udivmoddi4+0x29e>
 8001028:	4299      	cmp	r1, r3
 800102a:	d92a      	bls.n	8001082 <__udivmoddi4+0x29e>
 800102c:	3802      	subs	r0, #2
 800102e:	4463      	add	r3, ip
 8001030:	1a5b      	subs	r3, r3, r1
 8001032:	b2a4      	uxth	r4, r4
 8001034:	fbb3 f1f8 	udiv	r1, r3, r8
 8001038:	fb08 3311 	mls	r3, r8, r1, r3
 800103c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001040:	fb01 f307 	mul.w	r3, r1, r7
 8001044:	42a3      	cmp	r3, r4
 8001046:	d908      	bls.n	800105a <__udivmoddi4+0x276>
 8001048:	eb1c 0404 	adds.w	r4, ip, r4
 800104c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8001050:	d213      	bcs.n	800107a <__udivmoddi4+0x296>
 8001052:	42a3      	cmp	r3, r4
 8001054:	d911      	bls.n	800107a <__udivmoddi4+0x296>
 8001056:	3902      	subs	r1, #2
 8001058:	4464      	add	r4, ip
 800105a:	1ae4      	subs	r4, r4, r3
 800105c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001060:	e739      	b.n	8000ed6 <__udivmoddi4+0xf2>
 8001062:	4604      	mov	r4, r0
 8001064:	e6f0      	b.n	8000e48 <__udivmoddi4+0x64>
 8001066:	4608      	mov	r0, r1
 8001068:	e706      	b.n	8000e78 <__udivmoddi4+0x94>
 800106a:	45c8      	cmp	r8, r9
 800106c:	d2ae      	bcs.n	8000fcc <__udivmoddi4+0x1e8>
 800106e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001072:	eb63 0c07 	sbc.w	ip, r3, r7
 8001076:	3801      	subs	r0, #1
 8001078:	e7a8      	b.n	8000fcc <__udivmoddi4+0x1e8>
 800107a:	4631      	mov	r1, r6
 800107c:	e7ed      	b.n	800105a <__udivmoddi4+0x276>
 800107e:	4603      	mov	r3, r0
 8001080:	e799      	b.n	8000fb6 <__udivmoddi4+0x1d2>
 8001082:	4630      	mov	r0, r6
 8001084:	e7d4      	b.n	8001030 <__udivmoddi4+0x24c>
 8001086:	46d6      	mov	lr, sl
 8001088:	e77f      	b.n	8000f8a <__udivmoddi4+0x1a6>
 800108a:	4463      	add	r3, ip
 800108c:	3802      	subs	r0, #2
 800108e:	e74d      	b.n	8000f2c <__udivmoddi4+0x148>
 8001090:	4606      	mov	r6, r0
 8001092:	4623      	mov	r3, r4
 8001094:	4608      	mov	r0, r1
 8001096:	e70f      	b.n	8000eb8 <__udivmoddi4+0xd4>
 8001098:	3e02      	subs	r6, #2
 800109a:	4463      	add	r3, ip
 800109c:	e730      	b.n	8000f00 <__udivmoddi4+0x11c>
 800109e:	bf00      	nop

080010a0 <__aeabi_idiv0>:
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop

080010a4 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2203      	movs	r2, #3
 80010b0:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2200      	movs	r2, #0
 80010b6:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2203      	movs	r2, #3
 80010bc:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2203      	movs	r2, #3
 80010c2:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2203      	movs	r2, #3
 80010c8:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2203      	movs	r2, #3
 80010ce:	715a      	strb	r2, [r3, #5]
}
 80010d0:	bf00      	nop
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <spi_select_chip>:

void spi_select_chip()
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
	//TODO select the chip using SPI chip select line
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 80010e0:	2200      	movs	r2, #0
 80010e2:	2110      	movs	r1, #16
 80010e4:	4802      	ldr	r0, [pc, #8]	@ (80010f0 <spi_select_chip+0x14>)
 80010e6:	f003 fa4d 	bl	8004584 <HAL_GPIO_WritePin>
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40020000 	.word	0x40020000

080010f4 <spi_deselect_chip>:

void spi_deselect_chip()
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
	//TODO undo spi_select_chip()
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 80010f8:	2201      	movs	r2, #1
 80010fa:	2110      	movs	r1, #16
 80010fc:	4802      	ldr	r0, [pc, #8]	@ (8001108 <spi_deselect_chip+0x14>)
 80010fe:	f003 fa41 	bl	8004584 <HAL_GPIO_WritePin>

}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40020000 	.word	0x40020000

0800110c <read_register16>:


static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	460b      	mov	r3, r1
 8001116:	607a      	str	r2, [r7, #4]
 8001118:	72fb      	strb	r3, [r7, #11]
	spi_select_chip();
 800111a:	f7ff ffdf 	bl	80010dc <spi_select_chip>
	//
	//read the HAL documentation about the generic SPI driver on how to communicate using SPI.
	//SPI is a full-duplex protocol. The bmp280 doesn't use that capability.
	//You can simply send what you need to send and receive your answer afterwards.
	//Write the result into *value.
	int status = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	617b      	str	r3, [r7, #20]
	uint8_t buff[2];
	status = status | HAL_SPI_Transmit(dev->spi, &addr, 1, HAL_MAX_DELAY);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8001126:	f107 010b 	add.w	r1, r7, #11
 800112a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800112e:	2201      	movs	r2, #1
 8001130:	f004 feb9 	bl	8005ea6 <HAL_SPI_Transmit>
 8001134:	4603      	mov	r3, r0
 8001136:	461a      	mov	r2, r3
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	4313      	orrs	r3, r2
 800113c:	617b      	str	r3, [r7, #20]
	status = status | HAL_SPI_Receive(dev->spi, buff, sizeof(buff), HAL_MAX_DELAY);
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8001142:	f107 0110 	add.w	r1, r7, #16
 8001146:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800114a:	2202      	movs	r2, #2
 800114c:	f004 ffef 	bl	800612e <HAL_SPI_Receive>
 8001150:	4603      	mov	r3, r0
 8001152:	461a      	mov	r2, r3
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	4313      	orrs	r3, r2
 8001158:	617b      	str	r3, [r7, #20]
	*value = (buff[1] << 8) | buff[0];
 800115a:	7c7b      	ldrb	r3, [r7, #17]
 800115c:	021b      	lsls	r3, r3, #8
 800115e:	b21a      	sxth	r2, r3
 8001160:	7c3b      	ldrb	r3, [r7, #16]
 8001162:	b21b      	sxth	r3, r3
 8001164:	4313      	orrs	r3, r2
 8001166:	b21b      	sxth	r3, r3
 8001168:	b29a      	uxth	r2, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	801a      	strh	r2, [r3, #0]
	spi_deselect_chip();
 800116e:	f7ff ffc1 	bl	80010f4 <spi_deselect_chip>
	//return true if it worked, false if an error was encountered
	return status==0 ? true : false;
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	2b00      	cmp	r3, #0
 8001176:	bf0c      	ite	eq
 8001178:	2301      	moveq	r3, #1
 800117a:	2300      	movne	r3, #0
 800117c:	b2db      	uxtb	r3, r3
}
 800117e:	4618      	mov	r0, r3
 8001180:	3718      	adds	r7, #24
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 8001186:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800118a:	b08a      	sub	sp, #40	@ 0x28
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	607a      	str	r2, [r7, #4]
 8001192:	461a      	mov	r2, r3
 8001194:	460b      	mov	r3, r1
 8001196:	72fb      	strb	r3, [r7, #11]
 8001198:	4613      	mov	r3, r2
 800119a:	72bb      	strb	r3, [r7, #10]
 800119c:	466b      	mov	r3, sp
 800119e:	469a      	mov	sl, r3
	spi_select_chip();
 80011a0:	f7ff ff9c 	bl	80010dc <spi_select_chip>
	//TODO read len bytes of data from the bmp280, and put them into *value
	int status = 0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	623b      	str	r3, [r7, #32]

	uint8_t buffer[len];
 80011a8:	7abe      	ldrb	r6, [r7, #10]
 80011aa:	4633      	mov	r3, r6
 80011ac:	3b01      	subs	r3, #1
 80011ae:	61fb      	str	r3, [r7, #28]
 80011b0:	b2f3      	uxtb	r3, r6
 80011b2:	2200      	movs	r2, #0
 80011b4:	4698      	mov	r8, r3
 80011b6:	4691      	mov	r9, r2
 80011b8:	f04f 0200 	mov.w	r2, #0
 80011bc:	f04f 0300 	mov.w	r3, #0
 80011c0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80011c4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80011c8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80011cc:	b2f3      	uxtb	r3, r6
 80011ce:	2200      	movs	r2, #0
 80011d0:	461c      	mov	r4, r3
 80011d2:	4615      	mov	r5, r2
 80011d4:	f04f 0200 	mov.w	r2, #0
 80011d8:	f04f 0300 	mov.w	r3, #0
 80011dc:	00eb      	lsls	r3, r5, #3
 80011de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80011e2:	00e2      	lsls	r2, r4, #3
 80011e4:	4633      	mov	r3, r6
 80011e6:	3307      	adds	r3, #7
 80011e8:	08db      	lsrs	r3, r3, #3
 80011ea:	00db      	lsls	r3, r3, #3
 80011ec:	ebad 0d03 	sub.w	sp, sp, r3
 80011f0:	466b      	mov	r3, sp
 80011f2:	3300      	adds	r3, #0
 80011f4:	61bb      	str	r3, [r7, #24]
	//uint8_t writeAddr = (addr | (uint8_t)0b10000000);
	uint8_t writeAddr = addr;
 80011f6:	7afb      	ldrb	r3, [r7, #11]
 80011f8:	75fb      	strb	r3, [r7, #23]
	status = status | HAL_SPI_Transmit(dev->spi, &writeAddr, 1, HAL_MAX_DELAY);
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80011fe:	f107 0117 	add.w	r1, r7, #23
 8001202:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001206:	2201      	movs	r2, #1
 8001208:	f004 fe4d 	bl	8005ea6 <HAL_SPI_Transmit>
 800120c:	4603      	mov	r3, r0
 800120e:	461a      	mov	r2, r3
 8001210:	6a3b      	ldr	r3, [r7, #32]
 8001212:	4313      	orrs	r3, r2
 8001214:	623b      	str	r3, [r7, #32]
	status = status | HAL_SPI_Receive(dev->spi, buffer, sizeof(buffer), HAL_MAX_DELAY);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800121a:	4632      	mov	r2, r6
 800121c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001220:	69b9      	ldr	r1, [r7, #24]
 8001222:	f004 ff84 	bl	800612e <HAL_SPI_Receive>
 8001226:	4603      	mov	r3, r0
 8001228:	461a      	mov	r2, r3
 800122a:	6a3b      	ldr	r3, [r7, #32]
 800122c:	4313      	orrs	r3, r2
 800122e:	623b      	str	r3, [r7, #32]

	for (int i = 0; i < len; i++){
 8001230:	2300      	movs	r3, #0
 8001232:	627b      	str	r3, [r7, #36]	@ 0x24
 8001234:	e00a      	b.n	800124c <read_data+0xc6>
		value[i] = buffer[i];
 8001236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	4413      	add	r3, r2
 800123c:	69b9      	ldr	r1, [r7, #24]
 800123e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001240:	440a      	add	r2, r1
 8001242:	7812      	ldrb	r2, [r2, #0]
 8001244:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < len; i++){
 8001246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001248:	3301      	adds	r3, #1
 800124a:	627b      	str	r3, [r7, #36]	@ 0x24
 800124c:	7abb      	ldrb	r3, [r7, #10]
 800124e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001250:	429a      	cmp	r2, r3
 8001252:	dbf0      	blt.n	8001236 <read_data+0xb0>
	}
	spi_deselect_chip();
 8001254:	f7ff ff4e 	bl	80010f4 <spi_deselect_chip>
	//return 0 if it worked, and 1 if you encountered an error
	return status;
 8001258:	6a3b      	ldr	r3, [r7, #32]
 800125a:	46d5      	mov	sp, sl
}
 800125c:	4618      	mov	r0, r3
 800125e:	3728      	adds	r7, #40	@ 0x28
 8001260:	46bd      	mov	sp, r7
 8001262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001266 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8001266:	b580      	push	{r7, lr}
 8001268:	b084      	sub	sp, #16
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
 800126e:	460b      	mov	r3, r1
 8001270:	70fb      	strb	r3, [r7, #3]
 8001272:	4613      	mov	r3, r2
 8001274:	70bb      	strb	r3, [r7, #2]
	spi_select_chip();
 8001276:	f7ff ff31 	bl	80010dc <spi_select_chip>
	//TODO write value into the register addr of the bmp280
	int status = 0;
 800127a:	2300      	movs	r3, #0
 800127c:	60fb      	str	r3, [r7, #12]
	//uint8_t buff[2] = {addr & (uint8_t)0b01111111, value};
	uint8_t buff[2] = {addr, value};
 800127e:	78fb      	ldrb	r3, [r7, #3]
 8001280:	723b      	strb	r3, [r7, #8]
 8001282:	78bb      	ldrb	r3, [r7, #2]
 8001284:	727b      	strb	r3, [r7, #9]
	status = status | HAL_SPI_Transmit(dev->spi, buff, 2, HAL_MAX_DELAY);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800128a:	f107 0108 	add.w	r1, r7, #8
 800128e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001292:	2202      	movs	r2, #2
 8001294:	f004 fe07 	bl	8005ea6 <HAL_SPI_Transmit>
 8001298:	4603      	mov	r3, r0
 800129a:	461a      	mov	r2, r3
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	4313      	orrs	r3, r2
 80012a0:	60fb      	str	r3, [r7, #12]
	spi_deselect_chip();
 80012a2:	f7ff ff27 	bl	80010f4 <spi_deselect_chip>
	//return 0 if it worked, and 1 if you encountered an error
	return status==0 ? 0 : 1;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	bf14      	ite	ne
 80012ac:	2301      	movne	r3, #1
 80012ae:	2300      	moveq	r3, #0
 80012b0:	b2db      	uxtb	r3, r3
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	461a      	mov	r2, r3
 80012c6:	2188      	movs	r1, #136	@ 0x88
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f7ff ff1f 	bl	800110c <read_register16>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d06f      	beq.n	80013b4 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	3302      	adds	r3, #2
 80012d8:	461a      	mov	r2, r3
 80012da:	218a      	movs	r1, #138	@ 0x8a
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff ff15 	bl	800110c <read_register16>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d065      	beq.n	80013b4 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	3304      	adds	r3, #4
 80012ec:	461a      	mov	r2, r3
 80012ee:	218c      	movs	r1, #140	@ 0x8c
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f7ff ff0b 	bl	800110c <read_register16>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d05b      	beq.n	80013b4 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	3306      	adds	r3, #6
 8001300:	461a      	mov	r2, r3
 8001302:	218e      	movs	r1, #142	@ 0x8e
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff ff01 	bl	800110c <read_register16>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d051      	beq.n	80013b4 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3308      	adds	r3, #8
 8001314:	461a      	mov	r2, r3
 8001316:	2190      	movs	r1, #144	@ 0x90
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f7ff fef7 	bl	800110c <read_register16>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d047      	beq.n	80013b4 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	330a      	adds	r3, #10
 8001328:	461a      	mov	r2, r3
 800132a:	2192      	movs	r1, #146	@ 0x92
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f7ff feed 	bl	800110c <read_register16>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d03d      	beq.n	80013b4 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	330c      	adds	r3, #12
 800133c:	461a      	mov	r2, r3
 800133e:	2194      	movs	r1, #148	@ 0x94
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f7ff fee3 	bl	800110c <read_register16>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d033      	beq.n	80013b4 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	330e      	adds	r3, #14
 8001350:	461a      	mov	r2, r3
 8001352:	2196      	movs	r1, #150	@ 0x96
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f7ff fed9 	bl	800110c <read_register16>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d029      	beq.n	80013b4 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	3310      	adds	r3, #16
 8001364:	461a      	mov	r2, r3
 8001366:	2198      	movs	r1, #152	@ 0x98
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f7ff fecf 	bl	800110c <read_register16>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d01f      	beq.n	80013b4 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3312      	adds	r3, #18
 8001378:	461a      	mov	r2, r3
 800137a:	219a      	movs	r1, #154	@ 0x9a
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f7ff fec5 	bl	800110c <read_register16>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d015      	beq.n	80013b4 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	3314      	adds	r3, #20
 800138c:	461a      	mov	r2, r3
 800138e:	219c      	movs	r1, #156	@ 0x9c
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f7ff febb 	bl	800110c <read_register16>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d00b      	beq.n	80013b4 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 80013a0:	461a      	mov	r2, r3
 80013a2:	219e      	movs	r1, #158	@ 0x9e
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f7ff feb1 	bl	800110c <read_register16>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <read_calibration_data+0xfa>

		return true;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e000      	b.n	80013b6 <read_calibration_data+0xfc>
	}

	return false;
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 80013be:	b580      	push	{r7, lr}
 80013c0:	b084      	sub	sp, #16
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f103 0218 	add.w	r2, r3, #24
 80013cc:	2301      	movs	r3, #1
 80013ce:	21a1      	movs	r1, #161	@ 0xa1
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f7ff fed8 	bl	8001186 <read_data>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d14b      	bne.n	8001474 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	331a      	adds	r3, #26
 80013e0:	461a      	mov	r2, r3
 80013e2:	21e1      	movs	r1, #225	@ 0xe1
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f7ff fe91 	bl	800110c <read_register16>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d041      	beq.n	8001474 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f103 021c 	add.w	r2, r3, #28
 80013f6:	2301      	movs	r3, #1
 80013f8:	21e3      	movs	r1, #227	@ 0xe3
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f7ff fec3 	bl	8001186 <read_data>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d136      	bne.n	8001474 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 8001406:	f107 030e 	add.w	r3, r7, #14
 800140a:	461a      	mov	r2, r3
 800140c:	21e4      	movs	r1, #228	@ 0xe4
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f7ff fe7c 	bl	800110c <read_register16>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d02c      	beq.n	8001474 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 800141a:	f107 030c 	add.w	r3, r7, #12
 800141e:	461a      	mov	r2, r3
 8001420:	21e5      	movs	r1, #229	@ 0xe5
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f7ff fe72 	bl	800110c <read_register16>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d022      	beq.n	8001474 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 8001434:	2301      	movs	r3, #1
 8001436:	21e7      	movs	r1, #231	@ 0xe7
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f7ff fea4 	bl	8001186 <read_data>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d117      	bne.n	8001474 <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 8001444:	89fb      	ldrh	r3, [r7, #14]
 8001446:	011b      	lsls	r3, r3, #4
 8001448:	b21b      	sxth	r3, r3
 800144a:	f403 637f 	and.w	r3, r3, #4080	@ 0xff0
 800144e:	b21a      	sxth	r2, r3
 8001450:	89fb      	ldrh	r3, [r7, #14]
 8001452:	121b      	asrs	r3, r3, #8
 8001454:	b21b      	sxth	r3, r3
 8001456:	f003 030f 	and.w	r3, r3, #15
 800145a:	b21b      	sxth	r3, r3
 800145c:	4313      	orrs	r3, r2
 800145e:	b21a      	sxth	r2, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 8001464:	89bb      	ldrh	r3, [r7, #12]
 8001466:	091b      	lsrs	r3, r3, #4
 8001468:	b29b      	uxth	r3, r3
 800146a:	b21a      	sxth	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	841a      	strh	r2, [r3, #32]

		return true;
 8001470:	2301      	movs	r3, #1
 8001472:	e000      	b.n	8001476 <read_hum_calibration_data+0xb8>
	}

	return false;
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3710      	adds	r7, #16
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 800147e:	b580      	push	{r7, lr}
 8001480:	b084      	sub	sp, #16
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
 8001486:	6039      	str	r1, [r7, #0]

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f103 022e 	add.w	r2, r3, #46	@ 0x2e
 800148e:	2301      	movs	r3, #1
 8001490:	21d0      	movs	r1, #208	@ 0xd0
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff fe77 	bl	8001186 <read_data>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <bmp280_init+0x24>
		return false;
 800149e:	2300      	movs	r3, #0
 80014a0:	e08c      	b.n	80015bc <bmp280_init+0x13e>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80014a8:	2b58      	cmp	r3, #88	@ 0x58
 80014aa:	d006      	beq.n	80014ba <bmp280_init+0x3c>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80014b2:	2b60      	cmp	r3, #96	@ 0x60
 80014b4:	d001      	beq.n	80014ba <bmp280_init+0x3c>

		return false;
 80014b6:	2300      	movs	r3, #0
 80014b8:	e080      	b.n	80015bc <bmp280_init+0x13e>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 80014ba:	22b6      	movs	r2, #182	@ 0xb6
 80014bc:	21e0      	movs	r1, #224	@ 0xe0
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f7ff fed1 	bl	8001266 <write_register8>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <bmp280_init+0x50>
		return false;
 80014ca:	2300      	movs	r3, #0
 80014cc:	e076      	b.n	80015bc <bmp280_init+0x13e>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 80014ce:	f107 020c 	add.w	r2, r7, #12
 80014d2:	2301      	movs	r3, #1
 80014d4:	21f3      	movs	r1, #243	@ 0xf3
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f7ff fe55 	bl	8001186 <read_data>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d1f5      	bne.n	80014ce <bmp280_init+0x50>
				&& (status & 1) == 0)
 80014e2:	7b3b      	ldrb	r3, [r7, #12]
 80014e4:	f003 0301 	and.w	r3, r3, #1
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d1f0      	bne.n	80014ce <bmp280_init+0x50>
			break;
	}

	if (!read_calibration_data(dev)) {
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f7ff fee4 	bl	80012ba <read_calibration_data>
 80014f2:	4603      	mov	r3, r0
 80014f4:	f083 0301 	eor.w	r3, r3, #1
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d100      	bne.n	8001500 <bmp280_init+0x82>
 80014fe:	e001      	b.n	8001504 <bmp280_init+0x86>
		return false;
 8001500:	2300      	movs	r3, #0
 8001502:	e05b      	b.n	80015bc <bmp280_init+0x13e>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800150a:	2b60      	cmp	r3, #96	@ 0x60
 800150c:	d10a      	bne.n	8001524 <bmp280_init+0xa6>
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f7ff ff55 	bl	80013be <read_hum_calibration_data>
 8001514:	4603      	mov	r3, r0
 8001516:	f083 0301 	eor.w	r3, r3, #1
 800151a:	b2db      	uxtb	r3, r3
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <bmp280_init+0xa6>
		return false;
 8001520:	2300      	movs	r3, #0
 8001522:	e04b      	b.n	80015bc <bmp280_init+0x13e>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	795b      	ldrb	r3, [r3, #5]
 8001528:	015b      	lsls	r3, r3, #5
 800152a:	b25a      	sxtb	r2, r3
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	785b      	ldrb	r3, [r3, #1]
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	b25b      	sxtb	r3, r3
 8001534:	4313      	orrs	r3, r2
 8001536:	b25b      	sxtb	r3, r3
 8001538:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 800153a:	7bfb      	ldrb	r3, [r7, #15]
 800153c:	461a      	mov	r2, r3
 800153e:	21f5      	movs	r1, #245	@ 0xf5
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f7ff fe90 	bl	8001266 <write_register8>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <bmp280_init+0xd2>
		return false;
 800154c:	2300      	movs	r3, #0
 800154e:	e035      	b.n	80015bc <bmp280_init+0x13e>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d102      	bne.n	800155e <bmp280_init+0xe0>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	2200      	movs	r2, #0
 800155c:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	78db      	ldrb	r3, [r3, #3]
 8001562:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 8001564:	b25a      	sxtb	r2, r3
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	789b      	ldrb	r3, [r3, #2]
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	b25b      	sxtb	r3, r3
 800156e:	4313      	orrs	r3, r2
 8001570:	b25a      	sxtb	r2, r3
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	b25b      	sxtb	r3, r3
 8001578:	4313      	orrs	r3, r2
 800157a:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 800157c:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001584:	2b60      	cmp	r3, #96	@ 0x60
 8001586:	d10d      	bne.n	80015a4 <bmp280_init+0x126>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	791b      	ldrb	r3, [r3, #4]
 800158c:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 800158e:	7b7b      	ldrb	r3, [r7, #13]
 8001590:	461a      	mov	r2, r3
 8001592:	21f2      	movs	r1, #242	@ 0xf2
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f7ff fe66 	bl	8001266 <write_register8>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <bmp280_init+0x126>
			return false;
 80015a0:	2300      	movs	r3, #0
 80015a2:	e00b      	b.n	80015bc <bmp280_init+0x13e>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 80015a4:	7bbb      	ldrb	r3, [r7, #14]
 80015a6:	461a      	mov	r2, r3
 80015a8:	21f4      	movs	r1, #244	@ 0xf4
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f7ff fe5b 	bl	8001266 <write_register8>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <bmp280_init+0x13c>
		return false;
 80015b6:	2300      	movs	r3, #0
 80015b8:	e000      	b.n	80015bc <bmp280_init+0x13e>
	}

	return true;
 80015ba:	2301      	movs	r3, #1
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3710      	adds	r7, #16
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 80015c4:	b480      	push	{r7}
 80015c6:	b087      	sub	sp, #28
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	60f8      	str	r0, [r7, #12]
 80015cc:	60b9      	str	r1, [r7, #8]
 80015ce:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	10da      	asrs	r2, r3, #3
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	881b      	ldrh	r3, [r3, #0]
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 80015dc:	68fa      	ldr	r2, [r7, #12]
 80015de:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80015e2:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80015e6:	12db      	asrs	r3, r3, #11
 80015e8:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	111b      	asrs	r3, r3, #4
 80015ee:	68fa      	ldr	r2, [r7, #12]
 80015f0:	8812      	ldrh	r2, [r2, #0]
 80015f2:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 80015f4:	68ba      	ldr	r2, [r7, #8]
 80015f6:	1112      	asrs	r2, r2, #4
 80015f8:	68f9      	ldr	r1, [r7, #12]
 80015fa:	8809      	ldrh	r1, [r1, #0]
 80015fc:	1a52      	subs	r2, r2, r1
 80015fe:	fb02 f303 	mul.w	r3, r2, r3
 8001602:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8001604:	68fa      	ldr	r2, [r7, #12]
 8001606:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800160a:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 800160e:	139b      	asrs	r3, r3, #14
 8001610:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8001612:	697a      	ldr	r2, [r7, #20]
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	441a      	add	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	4613      	mov	r3, r2
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	4413      	add	r3, r2
 8001626:	3380      	adds	r3, #128	@ 0x80
 8001628:	121b      	asrs	r3, r3, #8
}
 800162a:	4618      	mov	r0, r3
 800162c:	371c      	adds	r7, #28
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr

08001636 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8001636:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800163a:	b0cc      	sub	sp, #304	@ 0x130
 800163c:	af00      	add	r7, sp, #0
 800163e:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
 8001642:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
 8001646:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 800164a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800164e:	17da      	asrs	r2, r3, #31
 8001650:	461c      	mov	r4, r3
 8001652:	4615      	mov	r5, r2
 8001654:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 8001658:	f145 3bff 	adc.w	fp, r5, #4294967295	@ 0xffffffff
 800165c:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	@ 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8001660:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001664:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001668:	fb03 f102 	mul.w	r1, r3, r2
 800166c:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001670:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001674:	fb02 f303 	mul.w	r3, r2, r3
 8001678:	18ca      	adds	r2, r1, r3
 800167a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800167e:	fba3 8903 	umull	r8, r9, r3, r3
 8001682:	eb02 0309 	add.w	r3, r2, r9
 8001686:	4699      	mov	r9, r3
 8001688:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800168c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001690:	b21b      	sxth	r3, r3
 8001692:	17da      	asrs	r2, r3, #31
 8001694:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001698:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800169c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80016a0:	4603      	mov	r3, r0
 80016a2:	fb03 f209 	mul.w	r2, r3, r9
 80016a6:	460b      	mov	r3, r1
 80016a8:	fb08 f303 	mul.w	r3, r8, r3
 80016ac:	4413      	add	r3, r2
 80016ae:	4602      	mov	r2, r0
 80016b0:	fba8 1202 	umull	r1, r2, r8, r2
 80016b4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80016b8:	460a      	mov	r2, r1
 80016ba:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 80016be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80016c2:	4413      	add	r3, r2
 80016c4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80016c8:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 80016cc:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
 80016d0:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 80016d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80016d8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80016dc:	b21b      	sxth	r3, r3
 80016de:	17da      	asrs	r2, r3, #31
 80016e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80016e4:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80016e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80016ec:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 80016f0:	462a      	mov	r2, r5
 80016f2:	fb02 f203 	mul.w	r2, r2, r3
 80016f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80016fa:	4621      	mov	r1, r4
 80016fc:	fb01 f303 	mul.w	r3, r1, r3
 8001700:	441a      	add	r2, r3
 8001702:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001706:	4621      	mov	r1, r4
 8001708:	fba3 1301 	umull	r1, r3, r3, r1
 800170c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001710:	460b      	mov	r3, r1
 8001712:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8001716:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800171a:	18d3      	adds	r3, r2, r3
 800171c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001720:	f04f 0000 	mov.w	r0, #0
 8001724:	f04f 0100 	mov.w	r1, #0
 8001728:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 800172c:	462b      	mov	r3, r5
 800172e:	0459      	lsls	r1, r3, #17
 8001730:	4623      	mov	r3, r4
 8001732:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001736:	4623      	mov	r3, r4
 8001738:	0458      	lsls	r0, r3, #17
 800173a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800173e:	1814      	adds	r4, r2, r0
 8001740:	643c      	str	r4, [r7, #64]	@ 0x40
 8001742:	414b      	adcs	r3, r1
 8001744:	647b      	str	r3, [r7, #68]	@ 0x44
 8001746:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 800174a:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 800174e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001752:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001756:	b21b      	sxth	r3, r3
 8001758:	17da      	asrs	r2, r3, #31
 800175a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800175e:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001762:	f04f 0000 	mov.w	r0, #0
 8001766:	f04f 0100 	mov.w	r1, #0
 800176a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800176e:	00d9      	lsls	r1, r3, #3
 8001770:	2000      	movs	r0, #0
 8001772:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001776:	1814      	adds	r4, r2, r0
 8001778:	63bc      	str	r4, [r7, #56]	@ 0x38
 800177a:	414b      	adcs	r3, r1
 800177c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800177e:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8001782:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001786:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800178a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800178e:	fb03 f102 	mul.w	r1, r3, r2
 8001792:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001796:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800179a:	fb02 f303 	mul.w	r3, r2, r3
 800179e:	18ca      	adds	r2, r1, r3
 80017a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80017a4:	fba3 1303 	umull	r1, r3, r3, r3
 80017a8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80017ac:	460b      	mov	r3, r1
 80017ae:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80017b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80017b6:	18d3      	adds	r3, r2, r3
 80017b8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80017bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80017c0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80017c4:	b21b      	sxth	r3, r3
 80017c6:	17da      	asrs	r2, r3, #31
 80017c8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80017cc:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80017d0:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 80017d4:	462b      	mov	r3, r5
 80017d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80017da:	4642      	mov	r2, r8
 80017dc:	fb02 f203 	mul.w	r2, r2, r3
 80017e0:	464b      	mov	r3, r9
 80017e2:	4621      	mov	r1, r4
 80017e4:	fb01 f303 	mul.w	r3, r1, r3
 80017e8:	4413      	add	r3, r2
 80017ea:	4622      	mov	r2, r4
 80017ec:	4641      	mov	r1, r8
 80017ee:	fba2 1201 	umull	r1, r2, r2, r1
 80017f2:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 80017f6:	460a      	mov	r2, r1
 80017f8:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 80017fc:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8001800:	4413      	add	r3, r2
 8001802:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001806:	f04f 0000 	mov.w	r0, #0
 800180a:	f04f 0100 	mov.w	r1, #0
 800180e:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8001812:	4623      	mov	r3, r4
 8001814:	0a18      	lsrs	r0, r3, #8
 8001816:	462b      	mov	r3, r5
 8001818:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800181c:	462b      	mov	r3, r5
 800181e:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8001820:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001824:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001828:	b21b      	sxth	r3, r3
 800182a:	17da      	asrs	r2, r3, #31
 800182c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001830:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001834:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001838:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 800183c:	464a      	mov	r2, r9
 800183e:	fb02 f203 	mul.w	r2, r2, r3
 8001842:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001846:	4644      	mov	r4, r8
 8001848:	fb04 f303 	mul.w	r3, r4, r3
 800184c:	441a      	add	r2, r3
 800184e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001852:	4644      	mov	r4, r8
 8001854:	fba3 4304 	umull	r4, r3, r3, r4
 8001858:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800185c:	4623      	mov	r3, r4
 800185e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001862:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001866:	18d3      	adds	r3, r2, r3
 8001868:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800186c:	f04f 0200 	mov.w	r2, #0
 8001870:	f04f 0300 	mov.w	r3, #0
 8001874:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8001878:	464c      	mov	r4, r9
 800187a:	0323      	lsls	r3, r4, #12
 800187c:	4644      	mov	r4, r8
 800187e:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001882:	4644      	mov	r4, r8
 8001884:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001886:	1884      	adds	r4, r0, r2
 8001888:	633c      	str	r4, [r7, #48]	@ 0x30
 800188a:	eb41 0303 	adc.w	r3, r1, r3
 800188e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001890:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001894:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8001898:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800189c:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 80018a0:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 80018a4:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80018a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80018ac:	88db      	ldrh	r3, [r3, #6]
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	2200      	movs	r2, #0
 80018b2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80018b6:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80018ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80018be:	462b      	mov	r3, r5
 80018c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80018c4:	4642      	mov	r2, r8
 80018c6:	fb02 f203 	mul.w	r2, r2, r3
 80018ca:	464b      	mov	r3, r9
 80018cc:	4621      	mov	r1, r4
 80018ce:	fb01 f303 	mul.w	r3, r1, r3
 80018d2:	4413      	add	r3, r2
 80018d4:	4622      	mov	r2, r4
 80018d6:	4641      	mov	r1, r8
 80018d8:	fba2 1201 	umull	r1, r2, r2, r1
 80018dc:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 80018e0:	460a      	mov	r2, r1
 80018e2:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 80018e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80018ea:	4413      	add	r3, r2
 80018ec:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80018f0:	f04f 0200 	mov.w	r2, #0
 80018f4:	f04f 0300 	mov.w	r3, #0
 80018f8:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 80018fc:	4629      	mov	r1, r5
 80018fe:	104a      	asrs	r2, r1, #1
 8001900:	4629      	mov	r1, r5
 8001902:	17cb      	asrs	r3, r1, #31
 8001904:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

	if (var1 == 0) {
 8001908:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800190c:	4313      	orrs	r3, r2
 800190e:	d101      	bne.n	8001914 <compensate_pressure+0x2de>
		return 0;  // avoid exception caused by division by zero
 8001910:	2300      	movs	r3, #0
 8001912:	e148      	b.n	8001ba6 <compensate_pressure+0x570>
	}

	p = 1048576 - adc_press;
 8001914:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001918:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 800191c:	17da      	asrs	r2, r3, #31
 800191e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001920:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001922:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8001926:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 800192a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800192e:	105b      	asrs	r3, r3, #1
 8001930:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001934:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001938:	07db      	lsls	r3, r3, #31
 800193a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800193e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001942:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8001946:	4621      	mov	r1, r4
 8001948:	1a89      	subs	r1, r1, r2
 800194a:	67b9      	str	r1, [r7, #120]	@ 0x78
 800194c:	4629      	mov	r1, r5
 800194e:	eb61 0303 	sbc.w	r3, r1, r3
 8001952:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001954:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001958:	4622      	mov	r2, r4
 800195a:	462b      	mov	r3, r5
 800195c:	1891      	adds	r1, r2, r2
 800195e:	6239      	str	r1, [r7, #32]
 8001960:	415b      	adcs	r3, r3
 8001962:	627b      	str	r3, [r7, #36]	@ 0x24
 8001964:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001968:	4621      	mov	r1, r4
 800196a:	1851      	adds	r1, r2, r1
 800196c:	61b9      	str	r1, [r7, #24]
 800196e:	4629      	mov	r1, r5
 8001970:	414b      	adcs	r3, r1
 8001972:	61fb      	str	r3, [r7, #28]
 8001974:	f04f 0200 	mov.w	r2, #0
 8001978:	f04f 0300 	mov.w	r3, #0
 800197c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001980:	4649      	mov	r1, r9
 8001982:	018b      	lsls	r3, r1, #6
 8001984:	4641      	mov	r1, r8
 8001986:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800198a:	4641      	mov	r1, r8
 800198c:	018a      	lsls	r2, r1, #6
 800198e:	4641      	mov	r1, r8
 8001990:	1889      	adds	r1, r1, r2
 8001992:	6139      	str	r1, [r7, #16]
 8001994:	4649      	mov	r1, r9
 8001996:	eb43 0101 	adc.w	r1, r3, r1
 800199a:	6179      	str	r1, [r7, #20]
 800199c:	f04f 0200 	mov.w	r2, #0
 80019a0:	f04f 0300 	mov.w	r3, #0
 80019a4:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80019a8:	4649      	mov	r1, r9
 80019aa:	008b      	lsls	r3, r1, #2
 80019ac:	4641      	mov	r1, r8
 80019ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80019b2:	4641      	mov	r1, r8
 80019b4:	008a      	lsls	r2, r1, #2
 80019b6:	4610      	mov	r0, r2
 80019b8:	4619      	mov	r1, r3
 80019ba:	4603      	mov	r3, r0
 80019bc:	4622      	mov	r2, r4
 80019be:	189b      	adds	r3, r3, r2
 80019c0:	60bb      	str	r3, [r7, #8]
 80019c2:	460b      	mov	r3, r1
 80019c4:	462a      	mov	r2, r5
 80019c6:	eb42 0303 	adc.w	r3, r2, r3
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	f04f 0200 	mov.w	r2, #0
 80019d0:	f04f 0300 	mov.w	r3, #0
 80019d4:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80019d8:	4649      	mov	r1, r9
 80019da:	008b      	lsls	r3, r1, #2
 80019dc:	4641      	mov	r1, r8
 80019de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80019e2:	4641      	mov	r1, r8
 80019e4:	008a      	lsls	r2, r1, #2
 80019e6:	4610      	mov	r0, r2
 80019e8:	4619      	mov	r1, r3
 80019ea:	4603      	mov	r3, r0
 80019ec:	4622      	mov	r2, r4
 80019ee:	189b      	adds	r3, r3, r2
 80019f0:	673b      	str	r3, [r7, #112]	@ 0x70
 80019f2:	462b      	mov	r3, r5
 80019f4:	460a      	mov	r2, r1
 80019f6:	eb42 0303 	adc.w	r3, r2, r3
 80019fa:	677b      	str	r3, [r7, #116]	@ 0x74
 80019fc:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001a00:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001a04:	f7ff f950 	bl	8000ca8 <__aeabi_ldivmod>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8001a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001a14:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001a18:	b21b      	sxth	r3, r3
 8001a1a:	17da      	asrs	r2, r3, #31
 8001a1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001a1e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001a20:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001a24:	f04f 0000 	mov.w	r0, #0
 8001a28:	f04f 0100 	mov.w	r1, #0
 8001a2c:	0b50      	lsrs	r0, r2, #13
 8001a2e:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001a32:	1359      	asrs	r1, r3, #13
 8001a34:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001a38:	462b      	mov	r3, r5
 8001a3a:	fb00 f203 	mul.w	r2, r0, r3
 8001a3e:	4623      	mov	r3, r4
 8001a40:	fb03 f301 	mul.w	r3, r3, r1
 8001a44:	4413      	add	r3, r2
 8001a46:	4622      	mov	r2, r4
 8001a48:	fba2 1200 	umull	r1, r2, r2, r0
 8001a4c:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001a50:	460a      	mov	r2, r1
 8001a52:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001a56:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001a5a:	4413      	add	r3, r2
 8001a5c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001a60:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001a64:	f04f 0000 	mov.w	r0, #0
 8001a68:	f04f 0100 	mov.w	r1, #0
 8001a6c:	0b50      	lsrs	r0, r2, #13
 8001a6e:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001a72:	1359      	asrs	r1, r3, #13
 8001a74:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001a78:	462b      	mov	r3, r5
 8001a7a:	fb00 f203 	mul.w	r2, r0, r3
 8001a7e:	4623      	mov	r3, r4
 8001a80:	fb03 f301 	mul.w	r3, r3, r1
 8001a84:	4413      	add	r3, r2
 8001a86:	4622      	mov	r2, r4
 8001a88:	fba2 1200 	umull	r1, r2, r2, r0
 8001a8c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001a90:	460a      	mov	r2, r1
 8001a92:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8001a96:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001a9a:	4413      	add	r3, r2
 8001a9c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001aa0:	f04f 0200 	mov.w	r2, #0
 8001aa4:	f04f 0300 	mov.w	r3, #0
 8001aa8:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001aac:	4621      	mov	r1, r4
 8001aae:	0e4a      	lsrs	r2, r1, #25
 8001ab0:	4629      	mov	r1, r5
 8001ab2:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001ab6:	4629      	mov	r1, r5
 8001ab8:	164b      	asrs	r3, r1, #25
 8001aba:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8001abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001ac2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001ac6:	b21b      	sxth	r3, r3
 8001ac8:	17da      	asrs	r2, r3, #31
 8001aca:	663b      	str	r3, [r7, #96]	@ 0x60
 8001acc:	667a      	str	r2, [r7, #100]	@ 0x64
 8001ace:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001ad2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001ad6:	462a      	mov	r2, r5
 8001ad8:	fb02 f203 	mul.w	r2, r2, r3
 8001adc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001ae0:	4621      	mov	r1, r4
 8001ae2:	fb01 f303 	mul.w	r3, r1, r3
 8001ae6:	4413      	add	r3, r2
 8001ae8:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001aec:	4621      	mov	r1, r4
 8001aee:	fba2 1201 	umull	r1, r2, r2, r1
 8001af2:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8001af6:	460a      	mov	r2, r1
 8001af8:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8001afc:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001b00:	4413      	add	r3, r2
 8001b02:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001b06:	f04f 0200 	mov.w	r2, #0
 8001b0a:	f04f 0300 	mov.w	r3, #0
 8001b0e:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001b12:	4621      	mov	r1, r4
 8001b14:	0cca      	lsrs	r2, r1, #19
 8001b16:	4629      	mov	r1, r5
 8001b18:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001b1c:	4629      	mov	r1, r5
 8001b1e:	14cb      	asrs	r3, r1, #19
 8001b20:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8001b24:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 8001b28:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001b2c:	1884      	adds	r4, r0, r2
 8001b2e:	65bc      	str	r4, [r7, #88]	@ 0x58
 8001b30:	eb41 0303 	adc.w	r3, r1, r3
 8001b34:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001b36:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001b3a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001b3e:	4621      	mov	r1, r4
 8001b40:	1889      	adds	r1, r1, r2
 8001b42:	6539      	str	r1, [r7, #80]	@ 0x50
 8001b44:	4629      	mov	r1, r5
 8001b46:	eb43 0101 	adc.w	r1, r3, r1
 8001b4a:	6579      	str	r1, [r7, #84]	@ 0x54
 8001b4c:	f04f 0000 	mov.w	r0, #0
 8001b50:	f04f 0100 	mov.w	r1, #0
 8001b54:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8001b58:	4623      	mov	r3, r4
 8001b5a:	0a18      	lsrs	r0, r3, #8
 8001b5c:	462b      	mov	r3, r5
 8001b5e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001b62:	462b      	mov	r3, r5
 8001b64:	1219      	asrs	r1, r3, #8
 8001b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001b6a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001b6e:	b21b      	sxth	r3, r3
 8001b70:	17da      	asrs	r2, r3, #31
 8001b72:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001b74:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001b76:	f04f 0200 	mov.w	r2, #0
 8001b7a:	f04f 0300 	mov.w	r3, #0
 8001b7e:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8001b82:	464c      	mov	r4, r9
 8001b84:	0123      	lsls	r3, r4, #4
 8001b86:	4644      	mov	r4, r8
 8001b88:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001b8c:	4644      	mov	r4, r8
 8001b8e:	0122      	lsls	r2, r4, #4
 8001b90:	1884      	adds	r4, r0, r2
 8001b92:	603c      	str	r4, [r7, #0]
 8001b94:	eb41 0303 	adc.w	r3, r1, r3
 8001b98:	607b      	str	r3, [r7, #4]
 8001b9a:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001b9e:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	return p;
 8001ba2:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8001bac:	46bd      	mov	sp, r7
 8001bae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001bb2 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8001bb2:	b480      	push	{r7}
 8001bb4:	b087      	sub	sp, #28
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	60f8      	str	r0, [r7, #12]
 8001bba:	60b9      	str	r1, [r7, #8]
 8001bbc:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8001bc4:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	039a      	lsls	r2, r3, #14
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001bd0:	051b      	lsls	r3, r3, #20
 8001bd2:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001bda:	4619      	mov	r1, r3
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	fb01 f303 	mul.w	r3, r1, r3
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001be8:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8001bea:	68fa      	ldr	r2, [r7, #12]
 8001bec:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 8001bf0:	4611      	mov	r1, r2
 8001bf2:	697a      	ldr	r2, [r7, #20]
 8001bf4:	fb01 f202 	mul.w	r2, r1, r2
 8001bf8:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001bfa:	68f9      	ldr	r1, [r7, #12]
 8001bfc:	7f09      	ldrb	r1, [r1, #28]
 8001bfe:	4608      	mov	r0, r1
 8001c00:	6979      	ldr	r1, [r7, #20]
 8001c02:	fb00 f101 	mul.w	r1, r0, r1
 8001c06:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001c08:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001c0c:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001c10:	1292      	asrs	r2, r2, #10
 8001c12:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8001c16:	68f9      	ldr	r1, [r7, #12]
 8001c18:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001c1c:	fb01 f202 	mul.w	r2, r1, r2
 8001c20:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001c24:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001c26:	fb02 f303 	mul.w	r3, r2, r3
 8001c2a:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	13db      	asrs	r3, r3, #15
 8001c30:	697a      	ldr	r2, [r7, #20]
 8001c32:	13d2      	asrs	r2, r2, #15
 8001c34:	fb02 f303 	mul.w	r3, r2, r3
 8001c38:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	7e12      	ldrb	r2, [r2, #24]
 8001c3e:	fb02 f303 	mul.w	r3, r2, r3
 8001c42:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8001c44:	697a      	ldr	r2, [r7, #20]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001c50:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8001c58:	bfa8      	it	ge
 8001c5a:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 8001c5e:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	131b      	asrs	r3, r3, #12
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	371c      	adds	r7, #28
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b08c      	sub	sp, #48	@ 0x30
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
 8001c7c:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8001c84:	2b60      	cmp	r3, #96	@ 0x60
 8001c86:	d007      	beq.n	8001c98 <bmp280_read_fixed+0x28>
		if (humidity)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d002      	beq.n	8001c94 <bmp280_read_fixed+0x24>
			*humidity = 0;
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8001c94:	2300      	movs	r3, #0
 8001c96:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <bmp280_read_fixed+0x32>
 8001c9e:	2308      	movs	r3, #8
 8001ca0:	e000      	b.n	8001ca4 <bmp280_read_fixed+0x34>
 8001ca2:	2306      	movs	r3, #6
 8001ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8001ca6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	f107 0218 	add.w	r2, r7, #24
 8001cae:	21f7      	movs	r1, #247	@ 0xf7
 8001cb0:	68f8      	ldr	r0, [r7, #12]
 8001cb2:	f7ff fa68 	bl	8001186 <read_data>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <bmp280_read_fixed+0x50>
		return false;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	e038      	b.n	8001d32 <bmp280_read_fixed+0xc2>
	}


	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001cc0:	7e3b      	ldrb	r3, [r7, #24]
 8001cc2:	031a      	lsls	r2, r3, #12
 8001cc4:	7e7b      	ldrb	r3, [r7, #25]
 8001cc6:	011b      	lsls	r3, r3, #4
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	7eba      	ldrb	r2, [r7, #26]
 8001ccc:	0912      	lsrs	r2, r2, #4
 8001cce:	b2d2      	uxtb	r2, r2
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	62bb      	str	r3, [r7, #40]	@ 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001cd4:	7efb      	ldrb	r3, [r7, #27]
 8001cd6:	031a      	lsls	r2, r3, #12
 8001cd8:	7f3b      	ldrb	r3, [r7, #28]
 8001cda:	011b      	lsls	r3, r3, #4
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	7f7a      	ldrb	r2, [r7, #29]
 8001ce0:	0912      	lsrs	r2, r2, #4
 8001ce2:	b2d2      	uxtb	r2, r2
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	627b      	str	r3, [r7, #36]	@ 0x24
	//adc_pressure = (((data[0] << 8) | data[1])<<8 | (data[2]>>4)) >> 4;
	//adc_temp = (((data[3] << 8) | data[4])<<8 | (data[5]>>4)) >> 4;


	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8001ce8:	f107 0314 	add.w	r3, r7, #20
 8001cec:	461a      	mov	r2, r3
 8001cee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001cf0:	68f8      	ldr	r0, [r7, #12]
 8001cf2:	f7ff fc67 	bl	80015c4 <compensate_temperature>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001d02:	68f8      	ldr	r0, [r7, #12]
 8001d04:	f7ff fc97 	bl	8001636 <compensate_pressure>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d00d      	beq.n	8001d30 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8001d14:	7fbb      	ldrb	r3, [r7, #30]
 8001d16:	021b      	lsls	r3, r3, #8
 8001d18:	7ffa      	ldrb	r2, [r7, #31]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	461a      	mov	r2, r3
 8001d22:	6a39      	ldr	r1, [r7, #32]
 8001d24:	68f8      	ldr	r0, [r7, #12]
 8001d26:	f7ff ff44 	bl	8001bb2 <compensate_humidity>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	601a      	str	r2, [r3, #0]
	}

	return true;
 8001d30:	2301      	movs	r3, #1
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3730      	adds	r7, #48	@ 0x30
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
	...

08001d3c <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b088      	sub	sp, #32
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
 8001d48:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d002      	beq.n	8001d56 <bmp280_read_float+0x1a>
 8001d50:	f107 0314 	add.w	r3, r7, #20
 8001d54:	e000      	b.n	8001d58 <bmp280_read_float+0x1c>
 8001d56:	2300      	movs	r3, #0
 8001d58:	f107 0218 	add.w	r2, r7, #24
 8001d5c:	f107 011c 	add.w	r1, r7, #28
 8001d60:	68f8      	ldr	r0, [r7, #12]
 8001d62:	f7ff ff85 	bl	8001c70 <bmp280_read_fixed>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d028      	beq.n	8001dbe <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	ee07 3a90 	vmov	s15, r3
 8001d72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d76:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8001dc8 <bmp280_read_float+0x8c>
 8001d7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	ee07 3a90 	vmov	s15, r3
 8001d8a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d8e:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8001dcc <bmp280_read_float+0x90>
 8001d92:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d00b      	beq.n	8001dba <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	ee07 3a90 	vmov	s15, r3
 8001da8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001dac:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8001dd0 <bmp280_read_float+0x94>
 8001db0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e000      	b.n	8001dc0 <bmp280_read_float+0x84>
	}

	return false;
 8001dbe:	2300      	movs	r3, #0
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3720      	adds	r7, #32
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	42c80000 	.word	0x42c80000
 8001dcc:	43800000 	.word	0x43800000
 8001dd0:	44800000 	.word	0x44800000

08001dd4 <_LCD_SendInternal>:
#define LCD_I2C_TIMEOUT 200

#define COLUMNS 16
#define ROWS 2

HAL_StatusTypeDef _LCD_SendInternal(LCD_HandleTypeDef *dev, uint8_t data, uint8_t flags) {
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b088      	sub	sp, #32
 8001dd8:	af02      	add	r7, sp, #8
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	460b      	mov	r3, r1
 8001dde:	70fb      	strb	r3, [r7, #3]
 8001de0:	4613      	mov	r3, r2
 8001de2:	70bb      	strb	r3, [r7, #2]
    HAL_StatusTypeDef res;
    for(int i=0;i<5;i++) {
 8001de4:	2300      	movs	r3, #0
 8001de6:	613b      	str	r3, [r7, #16]
 8001de8:	e010      	b.n	8001e0c <_LCD_SendInternal+0x38>
        res = HAL_I2C_IsDeviceReady(dev->i2c, dev->i2c_addr, 1, LCD_I2C_TIMEOUT);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6858      	ldr	r0, [r3, #4]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	4619      	mov	r1, r3
 8001df4:	23c8      	movs	r3, #200	@ 0xc8
 8001df6:	2201      	movs	r2, #1
 8001df8:	f002 fe20 	bl	8004a3c <HAL_I2C_IsDeviceReady>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	75fb      	strb	r3, [r7, #23]
        if(res == HAL_OK)
 8001e00:	7dfb      	ldrb	r3, [r7, #23]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d006      	beq.n	8001e14 <_LCD_SendInternal+0x40>
    for(int i=0;i<5;i++) {
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	613b      	str	r3, [r7, #16]
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	2b04      	cmp	r3, #4
 8001e10:	ddeb      	ble.n	8001dea <_LCD_SendInternal+0x16>
 8001e12:	e000      	b.n	8001e16 <_LCD_SendInternal+0x42>
            break;
 8001e14:	bf00      	nop
    }
    if(res!=HAL_OK) {
 8001e16:	7dfb      	ldrb	r3, [r7, #23]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <_LCD_SendInternal+0x4c>
    	return res;
 8001e1c:	7dfb      	ldrb	r3, [r7, #23]
 8001e1e:	e043      	b.n	8001ea8 <_LCD_SendInternal+0xd4>
    }


    uint8_t up = data & 0xF0;
 8001e20:	78fb      	ldrb	r3, [r7, #3]
 8001e22:	f023 030f 	bic.w	r3, r3, #15
 8001e26:	73fb      	strb	r3, [r7, #15]
    uint8_t lo = (data << 4) & 0xF0;
 8001e28:	78fb      	ldrb	r3, [r7, #3]
 8001e2a:	011b      	lsls	r3, r3, #4
 8001e2c:	73bb      	strb	r3, [r7, #14]
    uint8_t backlight = dev->backlight_enable?BACKLIGHT:0;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	7a1b      	ldrb	r3, [r3, #8]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <_LCD_SendInternal+0x66>
 8001e36:	2308      	movs	r3, #8
 8001e38:	e000      	b.n	8001e3c <_LCD_SendInternal+0x68>
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	737b      	strb	r3, [r7, #13]

    uint8_t data_arr[4];
    data_arr[0] = up|flags|backlight|PIN_EN;
 8001e3e:	7bfa      	ldrb	r2, [r7, #15]
 8001e40:	78bb      	ldrb	r3, [r7, #2]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	b2da      	uxtb	r2, r3
 8001e46:	7b7b      	ldrb	r3, [r7, #13]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	f043 0304 	orr.w	r3, r3, #4
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	723b      	strb	r3, [r7, #8]
    data_arr[1] = up|flags|backlight;
 8001e54:	7bfa      	ldrb	r2, [r7, #15]
 8001e56:	78bb      	ldrb	r3, [r7, #2]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	b2da      	uxtb	r2, r3
 8001e5c:	7b7b      	ldrb	r3, [r7, #13]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	727b      	strb	r3, [r7, #9]
    data_arr[2] = lo|flags|backlight|PIN_EN;
 8001e64:	7bba      	ldrb	r2, [r7, #14]
 8001e66:	78bb      	ldrb	r3, [r7, #2]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	b2da      	uxtb	r2, r3
 8001e6c:	7b7b      	ldrb	r3, [r7, #13]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	f043 0304 	orr.w	r3, r3, #4
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	72bb      	strb	r3, [r7, #10]
    data_arr[3] = lo|flags|backlight;
 8001e7a:	7bba      	ldrb	r2, [r7, #14]
 8001e7c:	78bb      	ldrb	r3, [r7, #2]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	b2da      	uxtb	r2, r3
 8001e82:	7b7b      	ldrb	r3, [r7, #13]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	72fb      	strb	r3, [r7, #11]

    //TODO send data_arr to the device
    HAL_I2C_Master_Transmit(dev->i2c, LCD_DEFAULT_ADDR, data_arr, 4, HAL_MAX_DELAY);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6858      	ldr	r0, [r3, #4]
 8001e8e:	f107 0208 	add.w	r2, r7, #8
 8001e92:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e96:	9300      	str	r3, [sp, #0]
 8001e98:	2304      	movs	r3, #4
 8001e9a:	214e      	movs	r1, #78	@ 0x4e
 8001e9c:	f002 fcd0 	bl	8004840 <HAL_I2C_Master_Transmit>

    HAL_Delay(LCD_DELAY_MS); //delay afterwards to not overwhelm display
 8001ea0:	2005      	movs	r0, #5
 8001ea2:	f001 f88f 	bl	8002fc4 <HAL_Delay>
    return res;
 8001ea6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3718      	adds	r7, #24
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <_LCD_SendCommand>:

HAL_StatusTypeDef _LCD_SendCommand(LCD_HandleTypeDef *dev, uint8_t cmd) {
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	460b      	mov	r3, r1
 8001eba:	70fb      	strb	r3, [r7, #3]
    return _LCD_SendInternal(dev, cmd, 0);
 8001ebc:	78fb      	ldrb	r3, [r7, #3]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f7ff ff86 	bl	8001dd4 <_LCD_SendInternal>
 8001ec8:	4603      	mov	r3, r0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <_LCD_SendData>:

HAL_StatusTypeDef _LCD_SendData(LCD_HandleTypeDef *dev, uint8_t data) {
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b082      	sub	sp, #8
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
 8001eda:	460b      	mov	r3, r1
 8001edc:	70fb      	strb	r3, [r7, #3]
    return _LCD_SendInternal(dev, data, PIN_RS);
 8001ede:	78fb      	ldrb	r3, [r7, #3]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f7ff ff75 	bl	8001dd4 <_LCD_SendInternal>
 8001eea:	4603      	mov	r3, r0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <LCD_Print>:

#define RETURN_IF_NOT_OK if(status!=HAL_OK)return status;

HAL_StatusTypeDef LCD_Print(LCD_HandleTypeDef *dev, const char *str) {
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status;
    while(*str) {
 8001efe:	e00f      	b.n	8001f20 <LCD_Print+0x2c>
    	status = _LCD_SendData(dev, (uint8_t)(*str));
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	4619      	mov	r1, r3
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f7ff ffe3 	bl	8001ed2 <_LCD_SendData>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	73fb      	strb	r3, [r7, #15]
        RETURN_IF_NOT_OK;
 8001f10:	7bfb      	ldrb	r3, [r7, #15]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <LCD_Print+0x26>
 8001f16:	7bfb      	ldrb	r3, [r7, #15]
 8001f18:	e007      	b.n	8001f2a <LCD_Print+0x36>
        str++;
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	603b      	str	r3, [r7, #0]
    while(*str) {
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d1eb      	bne.n	8001f00 <LCD_Print+0xc>
    }
    return HAL_OK;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3710      	adds	r7, #16
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
	...

08001f34 <LCD_Test>:

HAL_StatusTypeDef LCD_Test(LCD_HandleTypeDef *dev) {
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;
    // set address to 0x00
    status = _LCD_SendCommand(dev, 0b10000000);
 8001f3c:	2180      	movs	r1, #128	@ 0x80
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f7ff ffb6 	bl	8001eb0 <_LCD_SendCommand>
 8001f44:	4603      	mov	r3, r0
 8001f46:	73fb      	strb	r3, [r7, #15]
    RETURN_IF_NOT_OK;
 8001f48:	7bfb      	ldrb	r3, [r7, #15]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <LCD_Test+0x1e>
 8001f4e:	7bfb      	ldrb	r3, [r7, #15]
 8001f50:	e01c      	b.n	8001f8c <LCD_Test+0x58>
    status = LCD_Print(dev, "1602 LCD ready");
 8001f52:	4910      	ldr	r1, [pc, #64]	@ (8001f94 <LCD_Test+0x60>)
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f7ff ffcd 	bl	8001ef4 <LCD_Print>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	73fb      	strb	r3, [r7, #15]
    RETURN_IF_NOT_OK;
 8001f5e:	7bfb      	ldrb	r3, [r7, #15]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <LCD_Test+0x34>
 8001f64:	7bfb      	ldrb	r3, [r7, #15]
 8001f66:	e011      	b.n	8001f8c <LCD_Test+0x58>

    // set address to 0x40
    status = _LCD_SendCommand(dev, 0b11000000);
 8001f68:	21c0      	movs	r1, #192	@ 0xc0
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f7ff ffa0 	bl	8001eb0 <_LCD_SendCommand>
 8001f70:	4603      	mov	r3, r0
 8001f72:	73fb      	strb	r3, [r7, #15]
    RETURN_IF_NOT_OK;
 8001f74:	7bfb      	ldrb	r3, [r7, #15]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <LCD_Test+0x4a>
 8001f7a:	7bfb      	ldrb	r3, [r7, #15]
 8001f7c:	e006      	b.n	8001f8c <LCD_Test+0x58>
    status = LCD_Print(dev, " !!! ");
 8001f7e:	4906      	ldr	r1, [pc, #24]	@ (8001f98 <LCD_Test+0x64>)
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f7ff ffb7 	bl	8001ef4 <LCD_Print>
 8001f86:	4603      	mov	r3, r0
 8001f88:	73fb      	strb	r3, [r7, #15]
    return status;
 8001f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3710      	adds	r7, #16
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	0800bdf0 	.word	0x0800bdf0
 8001f98:	0800be00 	.word	0x0800be00

08001f9c <LCD_Begin>:

HAL_StatusTypeDef LCD_Begin(LCD_HandleTypeDef *dev) {
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
	dev->backlight_enable=true;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	721a      	strb	r2, [r3, #8]
	HAL_StatusTypeDef status;

    // 4-bit mode, 2 lines, 5x7 format
    status = _LCD_SendCommand(dev, 0b00110000);
 8001faa:	2130      	movs	r1, #48	@ 0x30
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f7ff ff7f 	bl	8001eb0 <_LCD_SendCommand>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	73fb      	strb	r3, [r7, #15]
    RETURN_IF_NOT_OK;
 8001fb6:	7bfb      	ldrb	r3, [r7, #15]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d001      	beq.n	8001fc0 <LCD_Begin+0x24>
 8001fbc:	7bfb      	ldrb	r3, [r7, #15]
 8001fbe:	e01c      	b.n	8001ffa <LCD_Begin+0x5e>

    // display & cursor home (keep this!)
    status = _LCD_SendCommand(dev, 0b00000010);
 8001fc0:	2102      	movs	r1, #2
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f7ff ff74 	bl	8001eb0 <_LCD_SendCommand>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	73fb      	strb	r3, [r7, #15]
    RETURN_IF_NOT_OK;
 8001fcc:	7bfb      	ldrb	r3, [r7, #15]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <LCD_Begin+0x3a>
 8001fd2:	7bfb      	ldrb	r3, [r7, #15]
 8001fd4:	e011      	b.n	8001ffa <LCD_Begin+0x5e>

    // display on, right shift, underline off, blink off
    status = _LCD_SendCommand(dev, 0b00001100);
 8001fd6:	210c      	movs	r1, #12
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f7ff ff69 	bl	8001eb0 <_LCD_SendCommand>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	73fb      	strb	r3, [r7, #15]
    RETURN_IF_NOT_OK;
 8001fe2:	7bfb      	ldrb	r3, [r7, #15]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <LCD_Begin+0x50>
 8001fe8:	7bfb      	ldrb	r3, [r7, #15]
 8001fea:	e006      	b.n	8001ffa <LCD_Begin+0x5e>

    // clear display (optional here)
    status = _LCD_SendCommand(dev, 0b00000001);
 8001fec:	2101      	movs	r1, #1
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f7ff ff5e 	bl	8001eb0 <_LCD_SendCommand>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	73fb      	strb	r3, [r7, #15]
    return status;
 8001ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <LCD_SetCursor>:


HAL_StatusTypeDef LCD_SetCursor(LCD_HandleTypeDef *dev, uint8_t row, uint8_t col) {
 8002002:	b580      	push	{r7, lr}
 8002004:	b084      	sub	sp, #16
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
 800200a:	460b      	mov	r3, r1
 800200c:	70fb      	strb	r3, [r7, #3]
 800200e:	4613      	mov	r3, r2
 8002010:	70bb      	strb	r3, [r7, #2]
	if(row<0 || row>=ROWS || col<0 || col>=COLUMNS) {
 8002012:	78fb      	ldrb	r3, [r7, #3]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d802      	bhi.n	800201e <LCD_SetCursor+0x1c>
 8002018:	78bb      	ldrb	r3, [r7, #2]
 800201a:	2b0f      	cmp	r3, #15
 800201c:	d901      	bls.n	8002022 <LCD_SetCursor+0x20>
		return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e010      	b.n	8002044 <LCD_SetCursor+0x42>
	}
	uint8_t cmd = row==0?0b10000000:0b11000000;
 8002022:	78fb      	ldrb	r3, [r7, #3]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d101      	bne.n	800202c <LCD_SetCursor+0x2a>
 8002028:	2380      	movs	r3, #128	@ 0x80
 800202a:	e000      	b.n	800202e <LCD_SetCursor+0x2c>
 800202c:	23c0      	movs	r3, #192	@ 0xc0
 800202e:	73fb      	strb	r3, [r7, #15]
	cmd+=col;
 8002030:	7bfa      	ldrb	r2, [r7, #15]
 8002032:	78bb      	ldrb	r3, [r7, #2]
 8002034:	4413      	add	r3, r2
 8002036:	73fb      	strb	r3, [r7, #15]
	return _LCD_SendCommand(dev, cmd);
 8002038:	7bfb      	ldrb	r3, [r7, #15]
 800203a:	4619      	mov	r1, r3
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f7ff ff37 	bl	8001eb0 <_LCD_SendCommand>
 8002042:	4603      	mov	r3, r0
}
 8002044:	4618      	mov	r0, r3
 8002046:	3710      	adds	r7, #16
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <LCD_Clear>:
	vsnprintf(lcd_buffer, COLUMNS + 1, format, args);
	va_end(args);
	return LCD_Print(dev, lcd_buffer);
}

HAL_StatusTypeDef LCD_Clear(LCD_HandleTypeDef *dev) {
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
	return _LCD_SendCommand(dev, 0b00000001);
 8002054:	2101      	movs	r1, #1
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f7ff ff2a 	bl	8001eb0 <_LCD_SendCommand>
 800205c:	4603      	mov	r3, r0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
	...

08002068 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002068:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800206c:	b086      	sub	sp, #24
 800206e:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002070:	f000 ff36 	bl	8002ee0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002074:	f000 f898 	bl	80021a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002078:	f000 fa6e 	bl	8002558 <MX_GPIO_Init>
  MX_ETH_Init();
 800207c:	f000 f950 	bl	8002320 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8002080:	f000 fa12 	bl	80024a8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8002084:	f000 fa3a 	bl	80024fc <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8002088:	f000 f8f8 	bl	800227c <MX_ADC1_Init>
  MX_I2C2_Init();
 800208c:	f000 f996 	bl	80023bc <MX_I2C2_Init>
  MX_SPI1_Init();
 8002090:	f000 f9d4 	bl	800243c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  int status=0;
 8002094:	2300      	movs	r3, #0
 8002096:	607b      	str	r3, [r7, #4]


  hbmp280.spi = &hspi1;
 8002098:	4b35      	ldr	r3, [pc, #212]	@ (8002170 <main+0x108>)
 800209a:	4a36      	ldr	r2, [pc, #216]	@ (8002174 <main+0x10c>)
 800209c:	625a      	str	r2, [r3, #36]	@ 0x24
  bmp280_init_default_params(&hbmp280.params);
 800209e:	4836      	ldr	r0, [pc, #216]	@ (8002178 <main+0x110>)
 80020a0:	f7ff f800 	bl	80010a4 <bmp280_init_default_params>
  status = status | bmp280_init(&hbmp280, &hbmp280.params);
 80020a4:	4934      	ldr	r1, [pc, #208]	@ (8002178 <main+0x110>)
 80020a6:	4832      	ldr	r0, [pc, #200]	@ (8002170 <main+0x108>)
 80020a8:	f7ff f9e9 	bl	800147e <bmp280_init>
 80020ac:	4603      	mov	r3, r0
 80020ae:	461a      	mov	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	607b      	str	r3, [r7, #4]

  lcd.i2c = &hi2c2;
 80020b6:	4b31      	ldr	r3, [pc, #196]	@ (800217c <main+0x114>)
 80020b8:	4a31      	ldr	r2, [pc, #196]	@ (8002180 <main+0x118>)
 80020ba:	605a      	str	r2, [r3, #4]
  lcd.backlight_enable = 1;
 80020bc:	4b2f      	ldr	r3, [pc, #188]	@ (800217c <main+0x114>)
 80020be:	2201      	movs	r2, #1
 80020c0:	721a      	strb	r2, [r3, #8]
  lcd.i2c_addr = LCD_DEFAULT_ADDR;
 80020c2:	4b2e      	ldr	r3, [pc, #184]	@ (800217c <main+0x114>)
 80020c4:	224e      	movs	r2, #78	@ 0x4e
 80020c6:	701a      	strb	r2, [r3, #0]

  LCD_Begin(&lcd);
 80020c8:	482c      	ldr	r0, [pc, #176]	@ (800217c <main+0x114>)
 80020ca:	f7ff ff67 	bl	8001f9c <LCD_Begin>
  LCD_Test(&lcd);
 80020ce:	482b      	ldr	r0, [pc, #172]	@ (800217c <main+0x114>)
 80020d0:	f7ff ff30 	bl	8001f34 <LCD_Test>
  LCD_Clear(&lcd);
 80020d4:	4829      	ldr	r0, [pc, #164]	@ (800217c <main+0x114>)
 80020d6:	f7ff ffb9 	bl	800204c <LCD_Clear>

  if(!status){
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d10a      	bne.n	80020f6 <main+0x8e>
	  sprintf(msg, "BMP280 Com Error");
 80020e0:	4928      	ldr	r1, [pc, #160]	@ (8002184 <main+0x11c>)
 80020e2:	4829      	ldr	r0, [pc, #164]	@ (8002188 <main+0x120>)
 80020e4:	f006 fa3e 	bl	8008564 <siprintf>
	  LCD_Print(&lcd, msg);
 80020e8:	4927      	ldr	r1, [pc, #156]	@ (8002188 <main+0x120>)
 80020ea:	4824      	ldr	r0, [pc, #144]	@ (800217c <main+0x114>)
 80020ec:	f7ff ff02 	bl	8001ef4 <LCD_Print>
	  exit(1);
 80020f0:	2001      	movs	r0, #1
 80020f2:	f005 faf7 	bl	80076e4 <exit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_ADC_Start_IT(&hadc1);
 80020f6:	4825      	ldr	r0, [pc, #148]	@ (800218c <main+0x124>)
 80020f8:	f000 ffcc 	bl	8003094 <HAL_ADC_Start_IT>
	  LCD_Clear(&lcd);
 80020fc:	481f      	ldr	r0, [pc, #124]	@ (800217c <main+0x114>)
 80020fe:	f7ff ffa5 	bl	800204c <LCD_Clear>
	  sprintf(msg, "ADC: %d", adcVal);
 8002102:	4b23      	ldr	r3, [pc, #140]	@ (8002190 <main+0x128>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	461a      	mov	r2, r3
 8002108:	4922      	ldr	r1, [pc, #136]	@ (8002194 <main+0x12c>)
 800210a:	481f      	ldr	r0, [pc, #124]	@ (8002188 <main+0x120>)
 800210c:	f006 fa2a 	bl	8008564 <siprintf>
	  LCD_Print(&lcd, msg);
 8002110:	491d      	ldr	r1, [pc, #116]	@ (8002188 <main+0x120>)
 8002112:	481a      	ldr	r0, [pc, #104]	@ (800217c <main+0x114>)
 8002114:	f7ff feee 	bl	8001ef4 <LCD_Print>
	  LCD_SetCursor(&lcd, 1, 0);
 8002118:	2200      	movs	r2, #0
 800211a:	2101      	movs	r1, #1
 800211c:	4817      	ldr	r0, [pc, #92]	@ (800217c <main+0x114>)
 800211e:	f7ff ff70 	bl	8002002 <LCD_SetCursor>
	  sprintf(msg, "Temp:%.1f, Pre:%.1f, Humid:%.1f", temp, press, humid);
 8002122:	4b1d      	ldr	r3, [pc, #116]	@ (8002198 <main+0x130>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4618      	mov	r0, r3
 8002128:	f7fe fa1e 	bl	8000568 <__aeabi_f2d>
 800212c:	4680      	mov	r8, r0
 800212e:	4689      	mov	r9, r1
 8002130:	4b1a      	ldr	r3, [pc, #104]	@ (800219c <main+0x134>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4618      	mov	r0, r3
 8002136:	f7fe fa17 	bl	8000568 <__aeabi_f2d>
 800213a:	4604      	mov	r4, r0
 800213c:	460d      	mov	r5, r1
 800213e:	4b18      	ldr	r3, [pc, #96]	@ (80021a0 <main+0x138>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4618      	mov	r0, r3
 8002144:	f7fe fa10 	bl	8000568 <__aeabi_f2d>
 8002148:	4602      	mov	r2, r0
 800214a:	460b      	mov	r3, r1
 800214c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002150:	e9cd 4500 	strd	r4, r5, [sp]
 8002154:	4642      	mov	r2, r8
 8002156:	464b      	mov	r3, r9
 8002158:	4912      	ldr	r1, [pc, #72]	@ (80021a4 <main+0x13c>)
 800215a:	480b      	ldr	r0, [pc, #44]	@ (8002188 <main+0x120>)
 800215c:	f006 fa02 	bl	8008564 <siprintf>
	  LCD_Print(&lcd, msg);
 8002160:	4909      	ldr	r1, [pc, #36]	@ (8002188 <main+0x120>)
 8002162:	4806      	ldr	r0, [pc, #24]	@ (800217c <main+0x114>)
 8002164:	f7ff fec6 	bl	8001ef4 <LCD_Print>
	  HAL_Delay(100);
 8002168:	2064      	movs	r0, #100	@ 0x64
 800216a:	f000 ff2b 	bl	8002fc4 <HAL_Delay>
	  HAL_ADC_Start_IT(&hadc1);
 800216e:	e7c2      	b.n	80020f6 <main+0x8e>
 8002170:	20000a5c 	.word	0x20000a5c
 8002174:	200004b4 	.word	0x200004b4
 8002178:	20000a84 	.word	0x20000a84
 800217c:	20000a8c 	.word	0x20000a8c
 8002180:	20000460 	.word	0x20000460
 8002184:	0800be08 	.word	0x0800be08
 8002188:	20000a3c 	.word	0x20000a3c
 800218c:	20000368 	.word	0x20000368
 8002190:	20000a38 	.word	0x20000a38
 8002194:	0800be1c 	.word	0x0800be1c
 8002198:	20000a98 	.word	0x20000a98
 800219c:	20000a9c 	.word	0x20000a9c
 80021a0:	20000aa0 	.word	0x20000aa0
 80021a4:	0800be24 	.word	0x0800be24

080021a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b094      	sub	sp, #80	@ 0x50
 80021ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021ae:	f107 0320 	add.w	r3, r7, #32
 80021b2:	2230      	movs	r2, #48	@ 0x30
 80021b4:	2100      	movs	r1, #0
 80021b6:	4618      	mov	r0, r3
 80021b8:	f006 fa37 	bl	800862a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021bc:	f107 030c 	add.w	r3, r7, #12
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	605a      	str	r2, [r3, #4]
 80021c6:	609a      	str	r2, [r3, #8]
 80021c8:	60da      	str	r2, [r3, #12]
 80021ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80021cc:	2300      	movs	r3, #0
 80021ce:	60bb      	str	r3, [r7, #8]
 80021d0:	4b28      	ldr	r3, [pc, #160]	@ (8002274 <SystemClock_Config+0xcc>)
 80021d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d4:	4a27      	ldr	r2, [pc, #156]	@ (8002274 <SystemClock_Config+0xcc>)
 80021d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021da:	6413      	str	r3, [r2, #64]	@ 0x40
 80021dc:	4b25      	ldr	r3, [pc, #148]	@ (8002274 <SystemClock_Config+0xcc>)
 80021de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021e4:	60bb      	str	r3, [r7, #8]
 80021e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80021e8:	2300      	movs	r3, #0
 80021ea:	607b      	str	r3, [r7, #4]
 80021ec:	4b22      	ldr	r3, [pc, #136]	@ (8002278 <SystemClock_Config+0xd0>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a21      	ldr	r2, [pc, #132]	@ (8002278 <SystemClock_Config+0xd0>)
 80021f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80021f6:	6013      	str	r3, [r2, #0]
 80021f8:	4b1f      	ldr	r3, [pc, #124]	@ (8002278 <SystemClock_Config+0xd0>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002200:	607b      	str	r3, [r7, #4]
 8002202:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002204:	2301      	movs	r3, #1
 8002206:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002208:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800220c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800220e:	2302      	movs	r3, #2
 8002210:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002212:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002216:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002218:	2304      	movs	r3, #4
 800221a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800221c:	23a8      	movs	r3, #168	@ 0xa8
 800221e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002220:	2302      	movs	r3, #2
 8002222:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002224:	2307      	movs	r3, #7
 8002226:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002228:	f107 0320 	add.w	r3, r7, #32
 800222c:	4618      	mov	r0, r3
 800222e:	f003 f919 	bl	8005464 <HAL_RCC_OscConfig>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002238:	f000 fa92 	bl	8002760 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800223c:	230f      	movs	r3, #15
 800223e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002240:	2302      	movs	r3, #2
 8002242:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002244:	2300      	movs	r3, #0
 8002246:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002248:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800224c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800224e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002252:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002254:	f107 030c 	add.w	r3, r7, #12
 8002258:	2105      	movs	r1, #5
 800225a:	4618      	mov	r0, r3
 800225c:	f003 fb7a 	bl	8005954 <HAL_RCC_ClockConfig>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002266:	f000 fa7b 	bl	8002760 <Error_Handler>
  }
}
 800226a:	bf00      	nop
 800226c:	3750      	adds	r7, #80	@ 0x50
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	40023800 	.word	0x40023800
 8002278:	40007000 	.word	0x40007000

0800227c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002282:	463b      	mov	r3, r7
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	605a      	str	r2, [r3, #4]
 800228a:	609a      	str	r2, [r3, #8]
 800228c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800228e:	4b21      	ldr	r3, [pc, #132]	@ (8002314 <MX_ADC1_Init+0x98>)
 8002290:	4a21      	ldr	r2, [pc, #132]	@ (8002318 <MX_ADC1_Init+0x9c>)
 8002292:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002294:	4b1f      	ldr	r3, [pc, #124]	@ (8002314 <MX_ADC1_Init+0x98>)
 8002296:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800229a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800229c:	4b1d      	ldr	r3, [pc, #116]	@ (8002314 <MX_ADC1_Init+0x98>)
 800229e:	2200      	movs	r2, #0
 80022a0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80022a2:	4b1c      	ldr	r3, [pc, #112]	@ (8002314 <MX_ADC1_Init+0x98>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80022a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002314 <MX_ADC1_Init+0x98>)
 80022aa:	2201      	movs	r2, #1
 80022ac:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80022ae:	4b19      	ldr	r3, [pc, #100]	@ (8002314 <MX_ADC1_Init+0x98>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80022b6:	4b17      	ldr	r3, [pc, #92]	@ (8002314 <MX_ADC1_Init+0x98>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80022bc:	4b15      	ldr	r3, [pc, #84]	@ (8002314 <MX_ADC1_Init+0x98>)
 80022be:	4a17      	ldr	r2, [pc, #92]	@ (800231c <MX_ADC1_Init+0xa0>)
 80022c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80022c2:	4b14      	ldr	r3, [pc, #80]	@ (8002314 <MX_ADC1_Init+0x98>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80022c8:	4b12      	ldr	r3, [pc, #72]	@ (8002314 <MX_ADC1_Init+0x98>)
 80022ca:	2201      	movs	r2, #1
 80022cc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80022ce:	4b11      	ldr	r3, [pc, #68]	@ (8002314 <MX_ADC1_Init+0x98>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80022d6:	4b0f      	ldr	r3, [pc, #60]	@ (8002314 <MX_ADC1_Init+0x98>)
 80022d8:	2201      	movs	r2, #1
 80022da:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80022dc:	480d      	ldr	r0, [pc, #52]	@ (8002314 <MX_ADC1_Init+0x98>)
 80022de:	f000 fe95 	bl	800300c <HAL_ADC_Init>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80022e8:	f000 fa3a 	bl	8002760 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80022ec:	2303      	movs	r3, #3
 80022ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80022f0:	2301      	movs	r3, #1
 80022f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80022f4:	2300      	movs	r3, #0
 80022f6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022f8:	463b      	mov	r3, r7
 80022fa:	4619      	mov	r1, r3
 80022fc:	4805      	ldr	r0, [pc, #20]	@ (8002314 <MX_ADC1_Init+0x98>)
 80022fe:	f001 f8d9 	bl	80034b4 <HAL_ADC_ConfigChannel>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002308:	f000 fa2a 	bl	8002760 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800230c:	bf00      	nop
 800230e:	3710      	adds	r7, #16
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	20000368 	.word	0x20000368
 8002318:	40012000 	.word	0x40012000
 800231c:	0f000001 	.word	0x0f000001

08002320 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8002324:	4b1f      	ldr	r3, [pc, #124]	@ (80023a4 <MX_ETH_Init+0x84>)
 8002326:	4a20      	ldr	r2, [pc, #128]	@ (80023a8 <MX_ETH_Init+0x88>)
 8002328:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800232a:	4b20      	ldr	r3, [pc, #128]	@ (80023ac <MX_ETH_Init+0x8c>)
 800232c:	2200      	movs	r2, #0
 800232e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8002330:	4b1e      	ldr	r3, [pc, #120]	@ (80023ac <MX_ETH_Init+0x8c>)
 8002332:	2280      	movs	r2, #128	@ 0x80
 8002334:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8002336:	4b1d      	ldr	r3, [pc, #116]	@ (80023ac <MX_ETH_Init+0x8c>)
 8002338:	22e1      	movs	r2, #225	@ 0xe1
 800233a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800233c:	4b1b      	ldr	r3, [pc, #108]	@ (80023ac <MX_ETH_Init+0x8c>)
 800233e:	2200      	movs	r2, #0
 8002340:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8002342:	4b1a      	ldr	r3, [pc, #104]	@ (80023ac <MX_ETH_Init+0x8c>)
 8002344:	2200      	movs	r2, #0
 8002346:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8002348:	4b18      	ldr	r3, [pc, #96]	@ (80023ac <MX_ETH_Init+0x8c>)
 800234a:	2200      	movs	r2, #0
 800234c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800234e:	4b15      	ldr	r3, [pc, #84]	@ (80023a4 <MX_ETH_Init+0x84>)
 8002350:	4a16      	ldr	r2, [pc, #88]	@ (80023ac <MX_ETH_Init+0x8c>)
 8002352:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8002354:	4b13      	ldr	r3, [pc, #76]	@ (80023a4 <MX_ETH_Init+0x84>)
 8002356:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800235a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800235c:	4b11      	ldr	r3, [pc, #68]	@ (80023a4 <MX_ETH_Init+0x84>)
 800235e:	4a14      	ldr	r2, [pc, #80]	@ (80023b0 <MX_ETH_Init+0x90>)
 8002360:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8002362:	4b10      	ldr	r3, [pc, #64]	@ (80023a4 <MX_ETH_Init+0x84>)
 8002364:	4a13      	ldr	r2, [pc, #76]	@ (80023b4 <MX_ETH_Init+0x94>)
 8002366:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8002368:	4b0e      	ldr	r3, [pc, #56]	@ (80023a4 <MX_ETH_Init+0x84>)
 800236a:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800236e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8002370:	480c      	ldr	r0, [pc, #48]	@ (80023a4 <MX_ETH_Init+0x84>)
 8002372:	f001 fc0b 	bl	8003b8c <HAL_ETH_Init>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 800237c:	f000 f9f0 	bl	8002760 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8002380:	2238      	movs	r2, #56	@ 0x38
 8002382:	2100      	movs	r1, #0
 8002384:	480c      	ldr	r0, [pc, #48]	@ (80023b8 <MX_ETH_Init+0x98>)
 8002386:	f006 f950 	bl	800862a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800238a:	4b0b      	ldr	r3, [pc, #44]	@ (80023b8 <MX_ETH_Init+0x98>)
 800238c:	2221      	movs	r2, #33	@ 0x21
 800238e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8002390:	4b09      	ldr	r3, [pc, #36]	@ (80023b8 <MX_ETH_Init+0x98>)
 8002392:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8002396:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8002398:	4b07      	ldr	r3, [pc, #28]	@ (80023b8 <MX_ETH_Init+0x98>)
 800239a:	2200      	movs	r2, #0
 800239c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800239e:	bf00      	nop
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	200003b0 	.word	0x200003b0
 80023a8:	40028000 	.word	0x40028000
 80023ac:	20000aa4 	.word	0x20000aa4
 80023b0:	200002c8 	.word	0x200002c8
 80023b4:	20000228 	.word	0x20000228
 80023b8:	200001f0 	.word	0x200001f0

080023bc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80023c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002430 <MX_I2C2_Init+0x74>)
 80023c2:	4a1c      	ldr	r2, [pc, #112]	@ (8002434 <MX_I2C2_Init+0x78>)
 80023c4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80023c6:	4b1a      	ldr	r3, [pc, #104]	@ (8002430 <MX_I2C2_Init+0x74>)
 80023c8:	4a1b      	ldr	r2, [pc, #108]	@ (8002438 <MX_I2C2_Init+0x7c>)
 80023ca:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80023cc:	4b18      	ldr	r3, [pc, #96]	@ (8002430 <MX_I2C2_Init+0x74>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80023d2:	4b17      	ldr	r3, [pc, #92]	@ (8002430 <MX_I2C2_Init+0x74>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023d8:	4b15      	ldr	r3, [pc, #84]	@ (8002430 <MX_I2C2_Init+0x74>)
 80023da:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80023de:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023e0:	4b13      	ldr	r3, [pc, #76]	@ (8002430 <MX_I2C2_Init+0x74>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80023e6:	4b12      	ldr	r3, [pc, #72]	@ (8002430 <MX_I2C2_Init+0x74>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023ec:	4b10      	ldr	r3, [pc, #64]	@ (8002430 <MX_I2C2_Init+0x74>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023f2:	4b0f      	ldr	r3, [pc, #60]	@ (8002430 <MX_I2C2_Init+0x74>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80023f8:	480d      	ldr	r0, [pc, #52]	@ (8002430 <MX_I2C2_Init+0x74>)
 80023fa:	f002 f8dd 	bl	80045b8 <HAL_I2C_Init>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002404:	f000 f9ac 	bl	8002760 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002408:	2100      	movs	r1, #0
 800240a:	4809      	ldr	r0, [pc, #36]	@ (8002430 <MX_I2C2_Init+0x74>)
 800240c:	f002 fe9f 	bl	800514e <HAL_I2CEx_ConfigAnalogFilter>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8002416:	f000 f9a3 	bl	8002760 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800241a:	2100      	movs	r1, #0
 800241c:	4804      	ldr	r0, [pc, #16]	@ (8002430 <MX_I2C2_Init+0x74>)
 800241e:	f002 fed2 	bl	80051c6 <HAL_I2CEx_ConfigDigitalFilter>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8002428:	f000 f99a 	bl	8002760 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800242c:	bf00      	nop
 800242e:	bd80      	pop	{r7, pc}
 8002430:	20000460 	.word	0x20000460
 8002434:	40005800 	.word	0x40005800
 8002438:	000186a0 	.word	0x000186a0

0800243c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002440:	4b17      	ldr	r3, [pc, #92]	@ (80024a0 <MX_SPI1_Init+0x64>)
 8002442:	4a18      	ldr	r2, [pc, #96]	@ (80024a4 <MX_SPI1_Init+0x68>)
 8002444:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002446:	4b16      	ldr	r3, [pc, #88]	@ (80024a0 <MX_SPI1_Init+0x64>)
 8002448:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800244c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800244e:	4b14      	ldr	r3, [pc, #80]	@ (80024a0 <MX_SPI1_Init+0x64>)
 8002450:	2200      	movs	r2, #0
 8002452:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002454:	4b12      	ldr	r3, [pc, #72]	@ (80024a0 <MX_SPI1_Init+0x64>)
 8002456:	2200      	movs	r2, #0
 8002458:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800245a:	4b11      	ldr	r3, [pc, #68]	@ (80024a0 <MX_SPI1_Init+0x64>)
 800245c:	2200      	movs	r2, #0
 800245e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002460:	4b0f      	ldr	r3, [pc, #60]	@ (80024a0 <MX_SPI1_Init+0x64>)
 8002462:	2200      	movs	r2, #0
 8002464:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002466:	4b0e      	ldr	r3, [pc, #56]	@ (80024a0 <MX_SPI1_Init+0x64>)
 8002468:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800246c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800246e:	4b0c      	ldr	r3, [pc, #48]	@ (80024a0 <MX_SPI1_Init+0x64>)
 8002470:	2230      	movs	r2, #48	@ 0x30
 8002472:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002474:	4b0a      	ldr	r3, [pc, #40]	@ (80024a0 <MX_SPI1_Init+0x64>)
 8002476:	2200      	movs	r2, #0
 8002478:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800247a:	4b09      	ldr	r3, [pc, #36]	@ (80024a0 <MX_SPI1_Init+0x64>)
 800247c:	2200      	movs	r2, #0
 800247e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002480:	4b07      	ldr	r3, [pc, #28]	@ (80024a0 <MX_SPI1_Init+0x64>)
 8002482:	2200      	movs	r2, #0
 8002484:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002486:	4b06      	ldr	r3, [pc, #24]	@ (80024a0 <MX_SPI1_Init+0x64>)
 8002488:	220a      	movs	r2, #10
 800248a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800248c:	4804      	ldr	r0, [pc, #16]	@ (80024a0 <MX_SPI1_Init+0x64>)
 800248e:	f003 fc81 	bl	8005d94 <HAL_SPI_Init>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002498:	f000 f962 	bl	8002760 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800249c:	bf00      	nop
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	200004b4 	.word	0x200004b4
 80024a4:	40013000 	.word	0x40013000

080024a8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80024ac:	4b11      	ldr	r3, [pc, #68]	@ (80024f4 <MX_USART3_UART_Init+0x4c>)
 80024ae:	4a12      	ldr	r2, [pc, #72]	@ (80024f8 <MX_USART3_UART_Init+0x50>)
 80024b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80024b2:	4b10      	ldr	r3, [pc, #64]	@ (80024f4 <MX_USART3_UART_Init+0x4c>)
 80024b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80024b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80024ba:	4b0e      	ldr	r3, [pc, #56]	@ (80024f4 <MX_USART3_UART_Init+0x4c>)
 80024bc:	2200      	movs	r2, #0
 80024be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80024c0:	4b0c      	ldr	r3, [pc, #48]	@ (80024f4 <MX_USART3_UART_Init+0x4c>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80024c6:	4b0b      	ldr	r3, [pc, #44]	@ (80024f4 <MX_USART3_UART_Init+0x4c>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80024cc:	4b09      	ldr	r3, [pc, #36]	@ (80024f4 <MX_USART3_UART_Init+0x4c>)
 80024ce:	220c      	movs	r2, #12
 80024d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024d2:	4b08      	ldr	r3, [pc, #32]	@ (80024f4 <MX_USART3_UART_Init+0x4c>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80024d8:	4b06      	ldr	r3, [pc, #24]	@ (80024f4 <MX_USART3_UART_Init+0x4c>)
 80024da:	2200      	movs	r2, #0
 80024dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80024de:	4805      	ldr	r0, [pc, #20]	@ (80024f4 <MX_USART3_UART_Init+0x4c>)
 80024e0:	f004 fb3c 	bl	8006b5c <HAL_UART_Init>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80024ea:	f000 f939 	bl	8002760 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80024ee:	bf00      	nop
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	2000050c 	.word	0x2000050c
 80024f8:	40004800 	.word	0x40004800

080024fc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002500:	4b14      	ldr	r3, [pc, #80]	@ (8002554 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002502:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002506:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8002508:	4b12      	ldr	r3, [pc, #72]	@ (8002554 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800250a:	2204      	movs	r2, #4
 800250c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800250e:	4b11      	ldr	r3, [pc, #68]	@ (8002554 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002510:	2202      	movs	r2, #2
 8002512:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002514:	4b0f      	ldr	r3, [pc, #60]	@ (8002554 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002516:	2200      	movs	r2, #0
 8002518:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800251a:	4b0e      	ldr	r3, [pc, #56]	@ (8002554 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800251c:	2202      	movs	r2, #2
 800251e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002520:	4b0c      	ldr	r3, [pc, #48]	@ (8002554 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002522:	2201      	movs	r2, #1
 8002524:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002526:	4b0b      	ldr	r3, [pc, #44]	@ (8002554 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002528:	2200      	movs	r2, #0
 800252a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800252c:	4b09      	ldr	r3, [pc, #36]	@ (8002554 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800252e:	2200      	movs	r2, #0
 8002530:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002532:	4b08      	ldr	r3, [pc, #32]	@ (8002554 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002534:	2201      	movs	r2, #1
 8002536:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002538:	4b06      	ldr	r3, [pc, #24]	@ (8002554 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800253a:	2200      	movs	r2, #0
 800253c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800253e:	4805      	ldr	r0, [pc, #20]	@ (8002554 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002540:	f002 fe80 	bl	8005244 <HAL_PCD_Init>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800254a:	f000 f909 	bl	8002760 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800254e:	bf00      	nop
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	20000554 	.word	0x20000554

08002558 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b08c      	sub	sp, #48	@ 0x30
 800255c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800255e:	f107 031c 	add.w	r3, r7, #28
 8002562:	2200      	movs	r2, #0
 8002564:	601a      	str	r2, [r3, #0]
 8002566:	605a      	str	r2, [r3, #4]
 8002568:	609a      	str	r2, [r3, #8]
 800256a:	60da      	str	r2, [r3, #12]
 800256c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800256e:	2300      	movs	r3, #0
 8002570:	61bb      	str	r3, [r7, #24]
 8002572:	4b5c      	ldr	r3, [pc, #368]	@ (80026e4 <MX_GPIO_Init+0x18c>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002576:	4a5b      	ldr	r2, [pc, #364]	@ (80026e4 <MX_GPIO_Init+0x18c>)
 8002578:	f043 0304 	orr.w	r3, r3, #4
 800257c:	6313      	str	r3, [r2, #48]	@ 0x30
 800257e:	4b59      	ldr	r3, [pc, #356]	@ (80026e4 <MX_GPIO_Init+0x18c>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002582:	f003 0304 	and.w	r3, r3, #4
 8002586:	61bb      	str	r3, [r7, #24]
 8002588:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800258a:	2300      	movs	r3, #0
 800258c:	617b      	str	r3, [r7, #20]
 800258e:	4b55      	ldr	r3, [pc, #340]	@ (80026e4 <MX_GPIO_Init+0x18c>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002592:	4a54      	ldr	r2, [pc, #336]	@ (80026e4 <MX_GPIO_Init+0x18c>)
 8002594:	f043 0320 	orr.w	r3, r3, #32
 8002598:	6313      	str	r3, [r2, #48]	@ 0x30
 800259a:	4b52      	ldr	r3, [pc, #328]	@ (80026e4 <MX_GPIO_Init+0x18c>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800259e:	f003 0320 	and.w	r3, r3, #32
 80025a2:	617b      	str	r3, [r7, #20]
 80025a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80025a6:	2300      	movs	r3, #0
 80025a8:	613b      	str	r3, [r7, #16]
 80025aa:	4b4e      	ldr	r3, [pc, #312]	@ (80026e4 <MX_GPIO_Init+0x18c>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ae:	4a4d      	ldr	r2, [pc, #308]	@ (80026e4 <MX_GPIO_Init+0x18c>)
 80025b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80025b6:	4b4b      	ldr	r3, [pc, #300]	@ (80026e4 <MX_GPIO_Init+0x18c>)
 80025b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025be:	613b      	str	r3, [r7, #16]
 80025c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025c2:	2300      	movs	r3, #0
 80025c4:	60fb      	str	r3, [r7, #12]
 80025c6:	4b47      	ldr	r3, [pc, #284]	@ (80026e4 <MX_GPIO_Init+0x18c>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ca:	4a46      	ldr	r2, [pc, #280]	@ (80026e4 <MX_GPIO_Init+0x18c>)
 80025cc:	f043 0301 	orr.w	r3, r3, #1
 80025d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80025d2:	4b44      	ldr	r3, [pc, #272]	@ (80026e4 <MX_GPIO_Init+0x18c>)
 80025d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	60fb      	str	r3, [r7, #12]
 80025dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025de:	2300      	movs	r3, #0
 80025e0:	60bb      	str	r3, [r7, #8]
 80025e2:	4b40      	ldr	r3, [pc, #256]	@ (80026e4 <MX_GPIO_Init+0x18c>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e6:	4a3f      	ldr	r2, [pc, #252]	@ (80026e4 <MX_GPIO_Init+0x18c>)
 80025e8:	f043 0302 	orr.w	r3, r3, #2
 80025ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80025ee:	4b3d      	ldr	r3, [pc, #244]	@ (80026e4 <MX_GPIO_Init+0x18c>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	60bb      	str	r3, [r7, #8]
 80025f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80025fa:	2300      	movs	r3, #0
 80025fc:	607b      	str	r3, [r7, #4]
 80025fe:	4b39      	ldr	r3, [pc, #228]	@ (80026e4 <MX_GPIO_Init+0x18c>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002602:	4a38      	ldr	r2, [pc, #224]	@ (80026e4 <MX_GPIO_Init+0x18c>)
 8002604:	f043 0308 	orr.w	r3, r3, #8
 8002608:	6313      	str	r3, [r2, #48]	@ 0x30
 800260a:	4b36      	ldr	r3, [pc, #216]	@ (80026e4 <MX_GPIO_Init+0x18c>)
 800260c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260e:	f003 0308 	and.w	r3, r3, #8
 8002612:	607b      	str	r3, [r7, #4]
 8002614:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	603b      	str	r3, [r7, #0]
 800261a:	4b32      	ldr	r3, [pc, #200]	@ (80026e4 <MX_GPIO_Init+0x18c>)
 800261c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800261e:	4a31      	ldr	r2, [pc, #196]	@ (80026e4 <MX_GPIO_Init+0x18c>)
 8002620:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002624:	6313      	str	r3, [r2, #48]	@ 0x30
 8002626:	4b2f      	ldr	r3, [pc, #188]	@ (80026e4 <MX_GPIO_Init+0x18c>)
 8002628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800262a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800262e:	603b      	str	r3, [r7, #0]
 8002630:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8002632:	2201      	movs	r2, #1
 8002634:	2110      	movs	r1, #16
 8002636:	482c      	ldr	r0, [pc, #176]	@ (80026e8 <MX_GPIO_Init+0x190>)
 8002638:	f001 ffa4 	bl	8004584 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800263c:	2200      	movs	r2, #0
 800263e:	f244 0181 	movw	r1, #16513	@ 0x4081
 8002642:	482a      	ldr	r0, [pc, #168]	@ (80026ec <MX_GPIO_Init+0x194>)
 8002644:	f001 ff9e 	bl	8004584 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002648:	2200      	movs	r2, #0
 800264a:	2140      	movs	r1, #64	@ 0x40
 800264c:	4828      	ldr	r0, [pc, #160]	@ (80026f0 <MX_GPIO_Init+0x198>)
 800264e:	f001 ff99 	bl	8004584 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002652:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002656:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002658:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800265c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265e:	2300      	movs	r3, #0
 8002660:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002662:	f107 031c 	add.w	r3, r7, #28
 8002666:	4619      	mov	r1, r3
 8002668:	4822      	ldr	r0, [pc, #136]	@ (80026f4 <MX_GPIO_Init+0x19c>)
 800266a:	f001 fddf 	bl	800422c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 800266e:	2310      	movs	r3, #16
 8002670:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002672:	2301      	movs	r3, #1
 8002674:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002676:	2300      	movs	r3, #0
 8002678:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800267a:	2300      	movs	r3, #0
 800267c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 800267e:	f107 031c 	add.w	r3, r7, #28
 8002682:	4619      	mov	r1, r3
 8002684:	4818      	ldr	r0, [pc, #96]	@ (80026e8 <MX_GPIO_Init+0x190>)
 8002686:	f001 fdd1 	bl	800422c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800268a:	f244 0381 	movw	r3, #16513	@ 0x4081
 800268e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002690:	2301      	movs	r3, #1
 8002692:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002694:	2300      	movs	r3, #0
 8002696:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002698:	2300      	movs	r3, #0
 800269a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800269c:	f107 031c 	add.w	r3, r7, #28
 80026a0:	4619      	mov	r1, r3
 80026a2:	4812      	ldr	r0, [pc, #72]	@ (80026ec <MX_GPIO_Init+0x194>)
 80026a4:	f001 fdc2 	bl	800422c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80026a8:	2340      	movs	r3, #64	@ 0x40
 80026aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026ac:	2301      	movs	r3, #1
 80026ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b0:	2300      	movs	r3, #0
 80026b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b4:	2300      	movs	r3, #0
 80026b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80026b8:	f107 031c 	add.w	r3, r7, #28
 80026bc:	4619      	mov	r1, r3
 80026be:	480c      	ldr	r0, [pc, #48]	@ (80026f0 <MX_GPIO_Init+0x198>)
 80026c0:	f001 fdb4 	bl	800422c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80026c4:	2380      	movs	r3, #128	@ 0x80
 80026c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026c8:	2300      	movs	r3, #0
 80026ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026cc:	2300      	movs	r3, #0
 80026ce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80026d0:	f107 031c 	add.w	r3, r7, #28
 80026d4:	4619      	mov	r1, r3
 80026d6:	4806      	ldr	r0, [pc, #24]	@ (80026f0 <MX_GPIO_Init+0x198>)
 80026d8:	f001 fda8 	bl	800422c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80026dc:	bf00      	nop
 80026de:	3730      	adds	r7, #48	@ 0x30
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	40023800 	.word	0x40023800
 80026e8:	40020000 	.word	0x40020000
 80026ec:	40020400 	.word	0x40020400
 80026f0:	40021800 	.word	0x40021800
 80026f4:	40020800 	.word	0x40020800

080026f8 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
	adcVal = HAL_ADC_GetValue(&hadc1);
 8002700:	4810      	ldr	r0, [pc, #64]	@ (8002744 <HAL_ADC_ConvCpltCallback+0x4c>)
 8002702:	f000 feb5 	bl	8003470 <HAL_ADC_GetValue>
 8002706:	4603      	mov	r3, r0
 8002708:	461a      	mov	r2, r3
 800270a:	4b0f      	ldr	r3, [pc, #60]	@ (8002748 <HAL_ADC_ConvCpltCallback+0x50>)
 800270c:	601a      	str	r2, [r3, #0]
	if (adcVal > 2047){
 800270e:	4b0e      	ldr	r3, [pc, #56]	@ (8002748 <HAL_ADC_ConvCpltCallback+0x50>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002716:	db05      	blt.n	8002724 <HAL_ADC_ConvCpltCallback+0x2c>
	  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8002718:	2201      	movs	r2, #1
 800271a:	2101      	movs	r1, #1
 800271c:	480b      	ldr	r0, [pc, #44]	@ (800274c <HAL_ADC_ConvCpltCallback+0x54>)
 800271e:	f001 ff31 	bl	8004584 <HAL_GPIO_WritePin>
 8002722:	e004      	b.n	800272e <HAL_ADC_ConvCpltCallback+0x36>
	}
	else{
	  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8002724:	2200      	movs	r2, #0
 8002726:	2101      	movs	r1, #1
 8002728:	4808      	ldr	r0, [pc, #32]	@ (800274c <HAL_ADC_ConvCpltCallback+0x54>)
 800272a:	f001 ff2b 	bl	8004584 <HAL_GPIO_WritePin>
	}
	bmp280_read_float(&hbmp280, &temp, &press, &humid);
 800272e:	4b08      	ldr	r3, [pc, #32]	@ (8002750 <HAL_ADC_ConvCpltCallback+0x58>)
 8002730:	4a08      	ldr	r2, [pc, #32]	@ (8002754 <HAL_ADC_ConvCpltCallback+0x5c>)
 8002732:	4909      	ldr	r1, [pc, #36]	@ (8002758 <HAL_ADC_ConvCpltCallback+0x60>)
 8002734:	4809      	ldr	r0, [pc, #36]	@ (800275c <HAL_ADC_ConvCpltCallback+0x64>)
 8002736:	f7ff fb01 	bl	8001d3c <bmp280_read_float>

}
 800273a:	bf00      	nop
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	20000368 	.word	0x20000368
 8002748:	20000a38 	.word	0x20000a38
 800274c:	40020400 	.word	0x40020400
 8002750:	20000aa0 	.word	0x20000aa0
 8002754:	20000a9c 	.word	0x20000a9c
 8002758:	20000a98 	.word	0x20000a98
 800275c:	20000a5c 	.word	0x20000a5c

08002760 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002764:	b672      	cpsid	i
}
 8002766:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002768:	bf00      	nop
 800276a:	e7fd      	b.n	8002768 <Error_Handler+0x8>

0800276c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002772:	2300      	movs	r3, #0
 8002774:	607b      	str	r3, [r7, #4]
 8002776:	4b10      	ldr	r3, [pc, #64]	@ (80027b8 <HAL_MspInit+0x4c>)
 8002778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800277a:	4a0f      	ldr	r2, [pc, #60]	@ (80027b8 <HAL_MspInit+0x4c>)
 800277c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002780:	6453      	str	r3, [r2, #68]	@ 0x44
 8002782:	4b0d      	ldr	r3, [pc, #52]	@ (80027b8 <HAL_MspInit+0x4c>)
 8002784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002786:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800278a:	607b      	str	r3, [r7, #4]
 800278c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800278e:	2300      	movs	r3, #0
 8002790:	603b      	str	r3, [r7, #0]
 8002792:	4b09      	ldr	r3, [pc, #36]	@ (80027b8 <HAL_MspInit+0x4c>)
 8002794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002796:	4a08      	ldr	r2, [pc, #32]	@ (80027b8 <HAL_MspInit+0x4c>)
 8002798:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800279c:	6413      	str	r3, [r2, #64]	@ 0x40
 800279e:	4b06      	ldr	r3, [pc, #24]	@ (80027b8 <HAL_MspInit+0x4c>)
 80027a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027a6:	603b      	str	r3, [r7, #0]
 80027a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	40023800 	.word	0x40023800

080027bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b08a      	sub	sp, #40	@ 0x28
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c4:	f107 0314 	add.w	r3, r7, #20
 80027c8:	2200      	movs	r2, #0
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	605a      	str	r2, [r3, #4]
 80027ce:	609a      	str	r2, [r3, #8]
 80027d0:	60da      	str	r2, [r3, #12]
 80027d2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a1b      	ldr	r2, [pc, #108]	@ (8002848 <HAL_ADC_MspInit+0x8c>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d12f      	bne.n	800283e <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80027de:	2300      	movs	r3, #0
 80027e0:	613b      	str	r3, [r7, #16]
 80027e2:	4b1a      	ldr	r3, [pc, #104]	@ (800284c <HAL_ADC_MspInit+0x90>)
 80027e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027e6:	4a19      	ldr	r2, [pc, #100]	@ (800284c <HAL_ADC_MspInit+0x90>)
 80027e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80027ee:	4b17      	ldr	r3, [pc, #92]	@ (800284c <HAL_ADC_MspInit+0x90>)
 80027f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027f6:	613b      	str	r3, [r7, #16]
 80027f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027fa:	2300      	movs	r3, #0
 80027fc:	60fb      	str	r3, [r7, #12]
 80027fe:	4b13      	ldr	r3, [pc, #76]	@ (800284c <HAL_ADC_MspInit+0x90>)
 8002800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002802:	4a12      	ldr	r2, [pc, #72]	@ (800284c <HAL_ADC_MspInit+0x90>)
 8002804:	f043 0301 	orr.w	r3, r3, #1
 8002808:	6313      	str	r3, [r2, #48]	@ 0x30
 800280a:	4b10      	ldr	r3, [pc, #64]	@ (800284c <HAL_ADC_MspInit+0x90>)
 800280c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	60fb      	str	r3, [r7, #12]
 8002814:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002816:	2308      	movs	r3, #8
 8002818:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800281a:	2303      	movs	r3, #3
 800281c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281e:	2300      	movs	r3, #0
 8002820:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002822:	f107 0314 	add.w	r3, r7, #20
 8002826:	4619      	mov	r1, r3
 8002828:	4809      	ldr	r0, [pc, #36]	@ (8002850 <HAL_ADC_MspInit+0x94>)
 800282a:	f001 fcff 	bl	800422c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800282e:	2200      	movs	r2, #0
 8002830:	2100      	movs	r1, #0
 8002832:	2012      	movs	r0, #18
 8002834:	f001 f951 	bl	8003ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002838:	2012      	movs	r0, #18
 800283a:	f001 f96a 	bl	8003b12 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800283e:	bf00      	nop
 8002840:	3728      	adds	r7, #40	@ 0x28
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	40012000 	.word	0x40012000
 800284c:	40023800 	.word	0x40023800
 8002850:	40020000 	.word	0x40020000

08002854 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b08e      	sub	sp, #56	@ 0x38
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800285c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]
 8002864:	605a      	str	r2, [r3, #4]
 8002866:	609a      	str	r2, [r3, #8]
 8002868:	60da      	str	r2, [r3, #12]
 800286a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a55      	ldr	r2, [pc, #340]	@ (80029c8 <HAL_ETH_MspInit+0x174>)
 8002872:	4293      	cmp	r3, r2
 8002874:	f040 80a4 	bne.w	80029c0 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8002878:	2300      	movs	r3, #0
 800287a:	623b      	str	r3, [r7, #32]
 800287c:	4b53      	ldr	r3, [pc, #332]	@ (80029cc <HAL_ETH_MspInit+0x178>)
 800287e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002880:	4a52      	ldr	r2, [pc, #328]	@ (80029cc <HAL_ETH_MspInit+0x178>)
 8002882:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002886:	6313      	str	r3, [r2, #48]	@ 0x30
 8002888:	4b50      	ldr	r3, [pc, #320]	@ (80029cc <HAL_ETH_MspInit+0x178>)
 800288a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800288c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002890:	623b      	str	r3, [r7, #32]
 8002892:	6a3b      	ldr	r3, [r7, #32]
 8002894:	2300      	movs	r3, #0
 8002896:	61fb      	str	r3, [r7, #28]
 8002898:	4b4c      	ldr	r3, [pc, #304]	@ (80029cc <HAL_ETH_MspInit+0x178>)
 800289a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800289c:	4a4b      	ldr	r2, [pc, #300]	@ (80029cc <HAL_ETH_MspInit+0x178>)
 800289e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80028a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80028a4:	4b49      	ldr	r3, [pc, #292]	@ (80029cc <HAL_ETH_MspInit+0x178>)
 80028a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80028ac:	61fb      	str	r3, [r7, #28]
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	2300      	movs	r3, #0
 80028b2:	61bb      	str	r3, [r7, #24]
 80028b4:	4b45      	ldr	r3, [pc, #276]	@ (80029cc <HAL_ETH_MspInit+0x178>)
 80028b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b8:	4a44      	ldr	r2, [pc, #272]	@ (80029cc <HAL_ETH_MspInit+0x178>)
 80028ba:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80028be:	6313      	str	r3, [r2, #48]	@ 0x30
 80028c0:	4b42      	ldr	r3, [pc, #264]	@ (80029cc <HAL_ETH_MspInit+0x178>)
 80028c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80028c8:	61bb      	str	r3, [r7, #24]
 80028ca:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028cc:	2300      	movs	r3, #0
 80028ce:	617b      	str	r3, [r7, #20]
 80028d0:	4b3e      	ldr	r3, [pc, #248]	@ (80029cc <HAL_ETH_MspInit+0x178>)
 80028d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d4:	4a3d      	ldr	r2, [pc, #244]	@ (80029cc <HAL_ETH_MspInit+0x178>)
 80028d6:	f043 0304 	orr.w	r3, r3, #4
 80028da:	6313      	str	r3, [r2, #48]	@ 0x30
 80028dc:	4b3b      	ldr	r3, [pc, #236]	@ (80029cc <HAL_ETH_MspInit+0x178>)
 80028de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e0:	f003 0304 	and.w	r3, r3, #4
 80028e4:	617b      	str	r3, [r7, #20]
 80028e6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028e8:	2300      	movs	r3, #0
 80028ea:	613b      	str	r3, [r7, #16]
 80028ec:	4b37      	ldr	r3, [pc, #220]	@ (80029cc <HAL_ETH_MspInit+0x178>)
 80028ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f0:	4a36      	ldr	r2, [pc, #216]	@ (80029cc <HAL_ETH_MspInit+0x178>)
 80028f2:	f043 0301 	orr.w	r3, r3, #1
 80028f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80028f8:	4b34      	ldr	r3, [pc, #208]	@ (80029cc <HAL_ETH_MspInit+0x178>)
 80028fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028fc:	f003 0301 	and.w	r3, r3, #1
 8002900:	613b      	str	r3, [r7, #16]
 8002902:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002904:	2300      	movs	r3, #0
 8002906:	60fb      	str	r3, [r7, #12]
 8002908:	4b30      	ldr	r3, [pc, #192]	@ (80029cc <HAL_ETH_MspInit+0x178>)
 800290a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800290c:	4a2f      	ldr	r2, [pc, #188]	@ (80029cc <HAL_ETH_MspInit+0x178>)
 800290e:	f043 0302 	orr.w	r3, r3, #2
 8002912:	6313      	str	r3, [r2, #48]	@ 0x30
 8002914:	4b2d      	ldr	r3, [pc, #180]	@ (80029cc <HAL_ETH_MspInit+0x178>)
 8002916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	60fb      	str	r3, [r7, #12]
 800291e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002920:	2300      	movs	r3, #0
 8002922:	60bb      	str	r3, [r7, #8]
 8002924:	4b29      	ldr	r3, [pc, #164]	@ (80029cc <HAL_ETH_MspInit+0x178>)
 8002926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002928:	4a28      	ldr	r2, [pc, #160]	@ (80029cc <HAL_ETH_MspInit+0x178>)
 800292a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800292e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002930:	4b26      	ldr	r3, [pc, #152]	@ (80029cc <HAL_ETH_MspInit+0x178>)
 8002932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002934:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002938:	60bb      	str	r3, [r7, #8]
 800293a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800293c:	2332      	movs	r3, #50	@ 0x32
 800293e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002940:	2302      	movs	r3, #2
 8002942:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002944:	2300      	movs	r3, #0
 8002946:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002948:	2303      	movs	r3, #3
 800294a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800294c:	230b      	movs	r3, #11
 800294e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002950:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002954:	4619      	mov	r1, r3
 8002956:	481e      	ldr	r0, [pc, #120]	@ (80029d0 <HAL_ETH_MspInit+0x17c>)
 8002958:	f001 fc68 	bl	800422c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800295c:	2386      	movs	r3, #134	@ 0x86
 800295e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002960:	2302      	movs	r3, #2
 8002962:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002964:	2300      	movs	r3, #0
 8002966:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002968:	2303      	movs	r3, #3
 800296a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800296c:	230b      	movs	r3, #11
 800296e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002970:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002974:	4619      	mov	r1, r3
 8002976:	4817      	ldr	r0, [pc, #92]	@ (80029d4 <HAL_ETH_MspInit+0x180>)
 8002978:	f001 fc58 	bl	800422c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800297c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002980:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002982:	2302      	movs	r3, #2
 8002984:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002986:	2300      	movs	r3, #0
 8002988:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800298a:	2303      	movs	r3, #3
 800298c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800298e:	230b      	movs	r3, #11
 8002990:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002992:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002996:	4619      	mov	r1, r3
 8002998:	480f      	ldr	r0, [pc, #60]	@ (80029d8 <HAL_ETH_MspInit+0x184>)
 800299a:	f001 fc47 	bl	800422c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800299e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80029a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a4:	2302      	movs	r3, #2
 80029a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a8:	2300      	movs	r3, #0
 80029aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ac:	2303      	movs	r3, #3
 80029ae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80029b0:	230b      	movs	r3, #11
 80029b2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80029b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029b8:	4619      	mov	r1, r3
 80029ba:	4808      	ldr	r0, [pc, #32]	@ (80029dc <HAL_ETH_MspInit+0x188>)
 80029bc:	f001 fc36 	bl	800422c <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 80029c0:	bf00      	nop
 80029c2:	3738      	adds	r7, #56	@ 0x38
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	40028000 	.word	0x40028000
 80029cc:	40023800 	.word	0x40023800
 80029d0:	40020800 	.word	0x40020800
 80029d4:	40020000 	.word	0x40020000
 80029d8:	40020400 	.word	0x40020400
 80029dc:	40021800 	.word	0x40021800

080029e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b08a      	sub	sp, #40	@ 0x28
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e8:	f107 0314 	add.w	r3, r7, #20
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]
 80029f0:	605a      	str	r2, [r3, #4]
 80029f2:	609a      	str	r2, [r3, #8]
 80029f4:	60da      	str	r2, [r3, #12]
 80029f6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a19      	ldr	r2, [pc, #100]	@ (8002a64 <HAL_I2C_MspInit+0x84>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d12b      	bne.n	8002a5a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a02:	2300      	movs	r3, #0
 8002a04:	613b      	str	r3, [r7, #16]
 8002a06:	4b18      	ldr	r3, [pc, #96]	@ (8002a68 <HAL_I2C_MspInit+0x88>)
 8002a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a0a:	4a17      	ldr	r2, [pc, #92]	@ (8002a68 <HAL_I2C_MspInit+0x88>)
 8002a0c:	f043 0320 	orr.w	r3, r3, #32
 8002a10:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a12:	4b15      	ldr	r3, [pc, #84]	@ (8002a68 <HAL_I2C_MspInit+0x88>)
 8002a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a16:	f003 0320 	and.w	r3, r3, #32
 8002a1a:	613b      	str	r3, [r7, #16]
 8002a1c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a22:	2312      	movs	r3, #18
 8002a24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a26:	2300      	movs	r3, #0
 8002a28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002a2e:	2304      	movs	r3, #4
 8002a30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a32:	f107 0314 	add.w	r3, r7, #20
 8002a36:	4619      	mov	r1, r3
 8002a38:	480c      	ldr	r0, [pc, #48]	@ (8002a6c <HAL_I2C_MspInit+0x8c>)
 8002a3a:	f001 fbf7 	bl	800422c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002a3e:	2300      	movs	r3, #0
 8002a40:	60fb      	str	r3, [r7, #12]
 8002a42:	4b09      	ldr	r3, [pc, #36]	@ (8002a68 <HAL_I2C_MspInit+0x88>)
 8002a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a46:	4a08      	ldr	r2, [pc, #32]	@ (8002a68 <HAL_I2C_MspInit+0x88>)
 8002a48:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002a4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a4e:	4b06      	ldr	r3, [pc, #24]	@ (8002a68 <HAL_I2C_MspInit+0x88>)
 8002a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a56:	60fb      	str	r3, [r7, #12]
 8002a58:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8002a5a:	bf00      	nop
 8002a5c:	3728      	adds	r7, #40	@ 0x28
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	40005800 	.word	0x40005800
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	40021400 	.word	0x40021400

08002a70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b08a      	sub	sp, #40	@ 0x28
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a78:	f107 0314 	add.w	r3, r7, #20
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	605a      	str	r2, [r3, #4]
 8002a82:	609a      	str	r2, [r3, #8]
 8002a84:	60da      	str	r2, [r3, #12]
 8002a86:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a1d      	ldr	r2, [pc, #116]	@ (8002b04 <HAL_SPI_MspInit+0x94>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d133      	bne.n	8002afa <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a92:	2300      	movs	r3, #0
 8002a94:	613b      	str	r3, [r7, #16]
 8002a96:	4b1c      	ldr	r3, [pc, #112]	@ (8002b08 <HAL_SPI_MspInit+0x98>)
 8002a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a9a:	4a1b      	ldr	r2, [pc, #108]	@ (8002b08 <HAL_SPI_MspInit+0x98>)
 8002a9c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002aa0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002aa2:	4b19      	ldr	r3, [pc, #100]	@ (8002b08 <HAL_SPI_MspInit+0x98>)
 8002aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aa6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002aaa:	613b      	str	r3, [r7, #16]
 8002aac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aae:	2300      	movs	r3, #0
 8002ab0:	60fb      	str	r3, [r7, #12]
 8002ab2:	4b15      	ldr	r3, [pc, #84]	@ (8002b08 <HAL_SPI_MspInit+0x98>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab6:	4a14      	ldr	r2, [pc, #80]	@ (8002b08 <HAL_SPI_MspInit+0x98>)
 8002ab8:	f043 0302 	orr.w	r3, r3, #2
 8002abc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002abe:	4b12      	ldr	r3, [pc, #72]	@ (8002b08 <HAL_SPI_MspInit+0x98>)
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	60fb      	str	r3, [r7, #12]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002aca:	2338      	movs	r3, #56	@ 0x38
 8002acc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ace:	2302      	movs	r3, #2
 8002ad0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ada:	2305      	movs	r3, #5
 8002adc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ade:	f107 0314 	add.w	r3, r7, #20
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	4809      	ldr	r0, [pc, #36]	@ (8002b0c <HAL_SPI_MspInit+0x9c>)
 8002ae6:	f001 fba1 	bl	800422c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002aea:	2200      	movs	r2, #0
 8002aec:	2100      	movs	r1, #0
 8002aee:	2023      	movs	r0, #35	@ 0x23
 8002af0:	f000 fff3 	bl	8003ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002af4:	2023      	movs	r0, #35	@ 0x23
 8002af6:	f001 f80c 	bl	8003b12 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002afa:	bf00      	nop
 8002afc:	3728      	adds	r7, #40	@ 0x28
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	40013000 	.word	0x40013000
 8002b08:	40023800 	.word	0x40023800
 8002b0c:	40020400 	.word	0x40020400

08002b10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b08a      	sub	sp, #40	@ 0x28
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b18:	f107 0314 	add.w	r3, r7, #20
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	605a      	str	r2, [r3, #4]
 8002b22:	609a      	str	r2, [r3, #8]
 8002b24:	60da      	str	r2, [r3, #12]
 8002b26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a19      	ldr	r2, [pc, #100]	@ (8002b94 <HAL_UART_MspInit+0x84>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d12c      	bne.n	8002b8c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002b32:	2300      	movs	r3, #0
 8002b34:	613b      	str	r3, [r7, #16]
 8002b36:	4b18      	ldr	r3, [pc, #96]	@ (8002b98 <HAL_UART_MspInit+0x88>)
 8002b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3a:	4a17      	ldr	r2, [pc, #92]	@ (8002b98 <HAL_UART_MspInit+0x88>)
 8002b3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b40:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b42:	4b15      	ldr	r3, [pc, #84]	@ (8002b98 <HAL_UART_MspInit+0x88>)
 8002b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b4a:	613b      	str	r3, [r7, #16]
 8002b4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b4e:	2300      	movs	r3, #0
 8002b50:	60fb      	str	r3, [r7, #12]
 8002b52:	4b11      	ldr	r3, [pc, #68]	@ (8002b98 <HAL_UART_MspInit+0x88>)
 8002b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b56:	4a10      	ldr	r2, [pc, #64]	@ (8002b98 <HAL_UART_MspInit+0x88>)
 8002b58:	f043 0308 	orr.w	r3, r3, #8
 8002b5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b5e:	4b0e      	ldr	r3, [pc, #56]	@ (8002b98 <HAL_UART_MspInit+0x88>)
 8002b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b62:	f003 0308 	and.w	r3, r3, #8
 8002b66:	60fb      	str	r3, [r7, #12]
 8002b68:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002b6a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002b6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b70:	2302      	movs	r3, #2
 8002b72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b74:	2300      	movs	r3, #0
 8002b76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002b7c:	2307      	movs	r3, #7
 8002b7e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b80:	f107 0314 	add.w	r3, r7, #20
 8002b84:	4619      	mov	r1, r3
 8002b86:	4805      	ldr	r0, [pc, #20]	@ (8002b9c <HAL_UART_MspInit+0x8c>)
 8002b88:	f001 fb50 	bl	800422c <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8002b8c:	bf00      	nop
 8002b8e:	3728      	adds	r7, #40	@ 0x28
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	40004800 	.word	0x40004800
 8002b98:	40023800 	.word	0x40023800
 8002b9c:	40020c00 	.word	0x40020c00

08002ba0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b08a      	sub	sp, #40	@ 0x28
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ba8:	f107 0314 	add.w	r3, r7, #20
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]
 8002bb0:	605a      	str	r2, [r3, #4]
 8002bb2:	609a      	str	r2, [r3, #8]
 8002bb4:	60da      	str	r2, [r3, #12]
 8002bb6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002bc0:	d13f      	bne.n	8002c42 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	613b      	str	r3, [r7, #16]
 8002bc6:	4b21      	ldr	r3, [pc, #132]	@ (8002c4c <HAL_PCD_MspInit+0xac>)
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bca:	4a20      	ldr	r2, [pc, #128]	@ (8002c4c <HAL_PCD_MspInit+0xac>)
 8002bcc:	f043 0301 	orr.w	r3, r3, #1
 8002bd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bd2:	4b1e      	ldr	r3, [pc, #120]	@ (8002c4c <HAL_PCD_MspInit+0xac>)
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	613b      	str	r3, [r7, #16]
 8002bdc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002bde:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8002be2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be4:	2302      	movs	r3, #2
 8002be6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be8:	2300      	movs	r3, #0
 8002bea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bec:	2303      	movs	r3, #3
 8002bee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002bf0:	230a      	movs	r3, #10
 8002bf2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bf4:	f107 0314 	add.w	r3, r7, #20
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	4815      	ldr	r0, [pc, #84]	@ (8002c50 <HAL_PCD_MspInit+0xb0>)
 8002bfc:	f001 fb16 	bl	800422c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002c00:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c06:	2300      	movs	r3, #0
 8002c08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002c0e:	f107 0314 	add.w	r3, r7, #20
 8002c12:	4619      	mov	r1, r3
 8002c14:	480e      	ldr	r0, [pc, #56]	@ (8002c50 <HAL_PCD_MspInit+0xb0>)
 8002c16:	f001 fb09 	bl	800422c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002c1a:	4b0c      	ldr	r3, [pc, #48]	@ (8002c4c <HAL_PCD_MspInit+0xac>)
 8002c1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c1e:	4a0b      	ldr	r2, [pc, #44]	@ (8002c4c <HAL_PCD_MspInit+0xac>)
 8002c20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002c24:	6353      	str	r3, [r2, #52]	@ 0x34
 8002c26:	2300      	movs	r3, #0
 8002c28:	60fb      	str	r3, [r7, #12]
 8002c2a:	4b08      	ldr	r3, [pc, #32]	@ (8002c4c <HAL_PCD_MspInit+0xac>)
 8002c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c2e:	4a07      	ldr	r2, [pc, #28]	@ (8002c4c <HAL_PCD_MspInit+0xac>)
 8002c30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c34:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c36:	4b05      	ldr	r3, [pc, #20]	@ (8002c4c <HAL_PCD_MspInit+0xac>)
 8002c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c3e:	60fb      	str	r3, [r7, #12]
 8002c40:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8002c42:	bf00      	nop
 8002c44:	3728      	adds	r7, #40	@ 0x28
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	40023800 	.word	0x40023800
 8002c50:	40020000 	.word	0x40020000

08002c54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c58:	bf00      	nop
 8002c5a:	e7fd      	b.n	8002c58 <NMI_Handler+0x4>

08002c5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c60:	bf00      	nop
 8002c62:	e7fd      	b.n	8002c60 <HardFault_Handler+0x4>

08002c64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c68:	bf00      	nop
 8002c6a:	e7fd      	b.n	8002c68 <MemManage_Handler+0x4>

08002c6c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c70:	bf00      	nop
 8002c72:	e7fd      	b.n	8002c70 <BusFault_Handler+0x4>

08002c74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c78:	bf00      	nop
 8002c7a:	e7fd      	b.n	8002c78 <UsageFault_Handler+0x4>

08002c7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c80:	bf00      	nop
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr

08002c8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c8e:	bf00      	nop
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c9c:	bf00      	nop
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr

08002ca6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002caa:	f000 f96b 	bl	8002f84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cae:	bf00      	nop
 8002cb0:	bd80      	pop	{r7, pc}
	...

08002cb4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002cb8:	4802      	ldr	r0, [pc, #8]	@ (8002cc4 <ADC_IRQHandler+0x10>)
 8002cba:	f000 fac9 	bl	8003250 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002cbe:	bf00      	nop
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	20000368 	.word	0x20000368

08002cc8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002ccc:	4802      	ldr	r0, [pc, #8]	@ (8002cd8 <SPI1_IRQHandler+0x10>)
 8002cce:	f003 fcf1 	bl	80066b4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002cd2:	bf00      	nop
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	200004b4 	.word	0x200004b4

08002cdc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  return 1;
 8002ce0:	2301      	movs	r3, #1
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <_kill>:

int _kill(int pid, int sig)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002cf6:	f005 fceb 	bl	80086d0 <__errno>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2216      	movs	r2, #22
 8002cfe:	601a      	str	r2, [r3, #0]
  return -1;
 8002d00:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3708      	adds	r7, #8
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <_exit>:

void _exit (int status)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d14:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f7ff ffe7 	bl	8002cec <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d1e:	bf00      	nop
 8002d20:	e7fd      	b.n	8002d1e <_exit+0x12>

08002d22 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b086      	sub	sp, #24
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	60f8      	str	r0, [r7, #12]
 8002d2a:	60b9      	str	r1, [r7, #8]
 8002d2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d2e:	2300      	movs	r3, #0
 8002d30:	617b      	str	r3, [r7, #20]
 8002d32:	e00a      	b.n	8002d4a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d34:	f3af 8000 	nop.w
 8002d38:	4601      	mov	r1, r0
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	1c5a      	adds	r2, r3, #1
 8002d3e:	60ba      	str	r2, [r7, #8]
 8002d40:	b2ca      	uxtb	r2, r1
 8002d42:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	3301      	adds	r3, #1
 8002d48:	617b      	str	r3, [r7, #20]
 8002d4a:	697a      	ldr	r2, [r7, #20]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	dbf0      	blt.n	8002d34 <_read+0x12>
  }

  return len;
 8002d52:	687b      	ldr	r3, [r7, #4]
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3718      	adds	r7, #24
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b086      	sub	sp, #24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d68:	2300      	movs	r3, #0
 8002d6a:	617b      	str	r3, [r7, #20]
 8002d6c:	e009      	b.n	8002d82 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	1c5a      	adds	r2, r3, #1
 8002d72:	60ba      	str	r2, [r7, #8]
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	3301      	adds	r3, #1
 8002d80:	617b      	str	r3, [r7, #20]
 8002d82:	697a      	ldr	r2, [r7, #20]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	429a      	cmp	r2, r3
 8002d88:	dbf1      	blt.n	8002d6e <_write+0x12>
  }
  return len;
 8002d8a:	687b      	ldr	r3, [r7, #4]
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3718      	adds	r7, #24
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <_close>:

int _close(int file)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d9c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr

08002dac <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002dbc:	605a      	str	r2, [r3, #4]
  return 0;
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <_isatty>:

int _isatty(int file)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002dd4:	2301      	movs	r3, #1
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr

08002de2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002de2:	b480      	push	{r7}
 8002de4:	b085      	sub	sp, #20
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	60f8      	str	r0, [r7, #12]
 8002dea:	60b9      	str	r1, [r7, #8]
 8002dec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3714      	adds	r7, #20
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b086      	sub	sp, #24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e04:	4a14      	ldr	r2, [pc, #80]	@ (8002e58 <_sbrk+0x5c>)
 8002e06:	4b15      	ldr	r3, [pc, #84]	@ (8002e5c <_sbrk+0x60>)
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e10:	4b13      	ldr	r3, [pc, #76]	@ (8002e60 <_sbrk+0x64>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d102      	bne.n	8002e1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e18:	4b11      	ldr	r3, [pc, #68]	@ (8002e60 <_sbrk+0x64>)
 8002e1a:	4a12      	ldr	r2, [pc, #72]	@ (8002e64 <_sbrk+0x68>)
 8002e1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e1e:	4b10      	ldr	r3, [pc, #64]	@ (8002e60 <_sbrk+0x64>)
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4413      	add	r3, r2
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d207      	bcs.n	8002e3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e2c:	f005 fc50 	bl	80086d0 <__errno>
 8002e30:	4603      	mov	r3, r0
 8002e32:	220c      	movs	r2, #12
 8002e34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002e3a:	e009      	b.n	8002e50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e3c:	4b08      	ldr	r3, [pc, #32]	@ (8002e60 <_sbrk+0x64>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e42:	4b07      	ldr	r3, [pc, #28]	@ (8002e60 <_sbrk+0x64>)
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4413      	add	r3, r2
 8002e4a:	4a05      	ldr	r2, [pc, #20]	@ (8002e60 <_sbrk+0x64>)
 8002e4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3718      	adds	r7, #24
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	20030000 	.word	0x20030000
 8002e5c:	00000400 	.word	0x00000400
 8002e60:	20000aac 	.word	0x20000aac
 8002e64:	20000c00 	.word	0x20000c00

08002e68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e6c:	4b06      	ldr	r3, [pc, #24]	@ (8002e88 <SystemInit+0x20>)
 8002e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e72:	4a05      	ldr	r2, [pc, #20]	@ (8002e88 <SystemInit+0x20>)
 8002e74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e7c:	bf00      	nop
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	e000ed00 	.word	0xe000ed00

08002e8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002e8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ec4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002e90:	f7ff ffea 	bl	8002e68 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e94:	480c      	ldr	r0, [pc, #48]	@ (8002ec8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e96:	490d      	ldr	r1, [pc, #52]	@ (8002ecc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e98:	4a0d      	ldr	r2, [pc, #52]	@ (8002ed0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e9c:	e002      	b.n	8002ea4 <LoopCopyDataInit>

08002e9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ea0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ea2:	3304      	adds	r3, #4

08002ea4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ea4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ea6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ea8:	d3f9      	bcc.n	8002e9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002eaa:	4a0a      	ldr	r2, [pc, #40]	@ (8002ed4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002eac:	4c0a      	ldr	r4, [pc, #40]	@ (8002ed8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002eae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002eb0:	e001      	b.n	8002eb6 <LoopFillZerobss>

08002eb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002eb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002eb4:	3204      	adds	r2, #4

08002eb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002eb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002eb8:	d3fb      	bcc.n	8002eb2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002eba:	f005 fc0f 	bl	80086dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ebe:	f7ff f8d3 	bl	8002068 <main>
  bx  lr    
 8002ec2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002ec4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002ec8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ecc:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002ed0:	0800c298 	.word	0x0800c298
  ldr r2, =_sbss
 8002ed4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002ed8:	20000c00 	.word	0x20000c00

08002edc <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002edc:	e7fe      	b.n	8002edc <CAN1_RX0_IRQHandler>
	...

08002ee0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ee4:	4b0e      	ldr	r3, [pc, #56]	@ (8002f20 <HAL_Init+0x40>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a0d      	ldr	r2, [pc, #52]	@ (8002f20 <HAL_Init+0x40>)
 8002eea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002eee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8002f20 <HAL_Init+0x40>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a0a      	ldr	r2, [pc, #40]	@ (8002f20 <HAL_Init+0x40>)
 8002ef6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002efa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002efc:	4b08      	ldr	r3, [pc, #32]	@ (8002f20 <HAL_Init+0x40>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a07      	ldr	r2, [pc, #28]	@ (8002f20 <HAL_Init+0x40>)
 8002f02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f08:	2003      	movs	r0, #3
 8002f0a:	f000 fddb 	bl	8003ac4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f0e:	2000      	movs	r0, #0
 8002f10:	f000 f808 	bl	8002f24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f14:	f7ff fc2a 	bl	800276c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	40023c00 	.word	0x40023c00

08002f24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f2c:	4b12      	ldr	r3, [pc, #72]	@ (8002f78 <HAL_InitTick+0x54>)
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	4b12      	ldr	r3, [pc, #72]	@ (8002f7c <HAL_InitTick+0x58>)
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	4619      	mov	r1, r3
 8002f36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f42:	4618      	mov	r0, r3
 8002f44:	f000 fdf3 	bl	8003b2e <HAL_SYSTICK_Config>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e00e      	b.n	8002f70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b0f      	cmp	r3, #15
 8002f56:	d80a      	bhi.n	8002f6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f58:	2200      	movs	r2, #0
 8002f5a:	6879      	ldr	r1, [r7, #4]
 8002f5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002f60:	f000 fdbb 	bl	8003ada <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f64:	4a06      	ldr	r2, [pc, #24]	@ (8002f80 <HAL_InitTick+0x5c>)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	e000      	b.n	8002f70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3708      	adds	r7, #8
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	20000000 	.word	0x20000000
 8002f7c:	20000008 	.word	0x20000008
 8002f80:	20000004 	.word	0x20000004

08002f84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f84:	b480      	push	{r7}
 8002f86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f88:	4b06      	ldr	r3, [pc, #24]	@ (8002fa4 <HAL_IncTick+0x20>)
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	4b06      	ldr	r3, [pc, #24]	@ (8002fa8 <HAL_IncTick+0x24>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4413      	add	r3, r2
 8002f94:	4a04      	ldr	r2, [pc, #16]	@ (8002fa8 <HAL_IncTick+0x24>)
 8002f96:	6013      	str	r3, [r2, #0]
}
 8002f98:	bf00      	nop
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	20000008 	.word	0x20000008
 8002fa8:	20000ab0 	.word	0x20000ab0

08002fac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
  return uwTick;
 8002fb0:	4b03      	ldr	r3, [pc, #12]	@ (8002fc0 <HAL_GetTick+0x14>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	20000ab0 	.word	0x20000ab0

08002fc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fcc:	f7ff ffee 	bl	8002fac <HAL_GetTick>
 8002fd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002fdc:	d005      	beq.n	8002fea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fde:	4b0a      	ldr	r3, [pc, #40]	@ (8003008 <HAL_Delay+0x44>)
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002fea:	bf00      	nop
 8002fec:	f7ff ffde 	bl	8002fac <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d8f7      	bhi.n	8002fec <HAL_Delay+0x28>
  {
  }
}
 8002ffc:	bf00      	nop
 8002ffe:	bf00      	nop
 8003000:	3710      	adds	r7, #16
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	20000008 	.word	0x20000008

0800300c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003014:	2300      	movs	r3, #0
 8003016:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d101      	bne.n	8003022 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e033      	b.n	800308a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003026:	2b00      	cmp	r3, #0
 8003028:	d109      	bne.n	800303e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f7ff fbc6 	bl	80027bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003042:	f003 0310 	and.w	r3, r3, #16
 8003046:	2b00      	cmp	r3, #0
 8003048:	d118      	bne.n	800307c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800304e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003052:	f023 0302 	bic.w	r3, r3, #2
 8003056:	f043 0202 	orr.w	r2, r3, #2
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 fb5a 	bl	8003718 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800306e:	f023 0303 	bic.w	r3, r3, #3
 8003072:	f043 0201 	orr.w	r2, r3, #1
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	641a      	str	r2, [r3, #64]	@ 0x40
 800307a:	e001      	b.n	8003080 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003088:	7bfb      	ldrb	r3, [r7, #15]
}
 800308a:	4618      	mov	r0, r3
 800308c:	3710      	adds	r7, #16
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
	...

08003094 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8003094:	b480      	push	{r7}
 8003096:	b085      	sub	sp, #20
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800309c:	2300      	movs	r3, #0
 800309e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d101      	bne.n	80030ae <HAL_ADC_Start_IT+0x1a>
 80030aa:	2302      	movs	r3, #2
 80030ac:	e0bd      	b.n	800322a <HAL_ADC_Start_IT+0x196>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2201      	movs	r2, #1
 80030b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f003 0301 	and.w	r3, r3, #1
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d018      	beq.n	80030f6 <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	689a      	ldr	r2, [r3, #8]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f042 0201 	orr.w	r2, r2, #1
 80030d2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80030d4:	4b58      	ldr	r3, [pc, #352]	@ (8003238 <HAL_ADC_Start_IT+0x1a4>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a58      	ldr	r2, [pc, #352]	@ (800323c <HAL_ADC_Start_IT+0x1a8>)
 80030da:	fba2 2303 	umull	r2, r3, r2, r3
 80030de:	0c9a      	lsrs	r2, r3, #18
 80030e0:	4613      	mov	r3, r2
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	4413      	add	r3, r2
 80030e6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80030e8:	e002      	b.n	80030f0 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	3b01      	subs	r3, #1
 80030ee:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1f9      	bne.n	80030ea <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f003 0301 	and.w	r3, r3, #1
 8003100:	2b01      	cmp	r3, #1
 8003102:	f040 8085 	bne.w	8003210 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800310e:	f023 0301 	bic.w	r3, r3, #1
 8003112:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003124:	2b00      	cmp	r3, #0
 8003126:	d007      	beq.n	8003138 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800312c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003130:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003140:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003144:	d106      	bne.n	8003154 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800314a:	f023 0206 	bic.w	r2, r3, #6
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	645a      	str	r2, [r3, #68]	@ 0x44
 8003152:	e002      	b.n	800315a <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003162:	4b37      	ldr	r3, [pc, #220]	@ (8003240 <HAL_ADC_Start_IT+0x1ac>)
 8003164:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800316e:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	6812      	ldr	r2, [r2, #0]
 800317a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800317e:	f043 0320 	orr.w	r3, r3, #32
 8003182:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f003 031f 	and.w	r3, r3, #31
 800318c:	2b00      	cmp	r3, #0
 800318e:	d12a      	bne.n	80031e6 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a2b      	ldr	r2, [pc, #172]	@ (8003244 <HAL_ADC_Start_IT+0x1b0>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d015      	beq.n	80031c6 <HAL_ADC_Start_IT+0x132>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a2a      	ldr	r2, [pc, #168]	@ (8003248 <HAL_ADC_Start_IT+0x1b4>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d105      	bne.n	80031b0 <HAL_ADC_Start_IT+0x11c>
 80031a4:	4b26      	ldr	r3, [pc, #152]	@ (8003240 <HAL_ADC_Start_IT+0x1ac>)
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f003 031f 	and.w	r3, r3, #31
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00a      	beq.n	80031c6 <HAL_ADC_Start_IT+0x132>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a25      	ldr	r2, [pc, #148]	@ (800324c <HAL_ADC_Start_IT+0x1b8>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d136      	bne.n	8003228 <HAL_ADC_Start_IT+0x194>
 80031ba:	4b21      	ldr	r3, [pc, #132]	@ (8003240 <HAL_ADC_Start_IT+0x1ac>)
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f003 0310 	and.w	r3, r3, #16
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d130      	bne.n	8003228 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d129      	bne.n	8003228 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	689a      	ldr	r2, [r3, #8]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80031e2:	609a      	str	r2, [r3, #8]
 80031e4:	e020      	b.n	8003228 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a16      	ldr	r2, [pc, #88]	@ (8003244 <HAL_ADC_Start_IT+0x1b0>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d11b      	bne.n	8003228 <HAL_ADC_Start_IT+0x194>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d114      	bne.n	8003228 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	689a      	ldr	r2, [r3, #8]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800320c:	609a      	str	r2, [r3, #8]
 800320e:	e00b      	b.n	8003228 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003214:	f043 0210 	orr.w	r2, r3, #16
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003220:	f043 0201 	orr.w	r2, r3, #1
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3714      	adds	r7, #20
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	20000000 	.word	0x20000000
 800323c:	431bde83 	.word	0x431bde83
 8003240:	40012300 	.word	0x40012300
 8003244:	40012000 	.word	0x40012000
 8003248:	40012100 	.word	0x40012100
 800324c:	40012200 	.word	0x40012200

08003250 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b086      	sub	sp, #24
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003258:	2300      	movs	r3, #0
 800325a:	617b      	str	r3, [r7, #20]
 800325c:	2300      	movs	r3, #0
 800325e:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	f003 0320 	and.w	r3, r3, #32
 800327e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d049      	beq.n	800331a <HAL_ADC_IRQHandler+0xca>
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d046      	beq.n	800331a <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003290:	f003 0310 	and.w	r3, r3, #16
 8003294:	2b00      	cmp	r3, #0
 8003296:	d105      	bne.n	80032a4 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800329c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d12b      	bne.n	800330a <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d127      	bne.n	800330a <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032c0:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d006      	beq.n	80032d6 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d119      	bne.n	800330a <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	685a      	ldr	r2, [r3, #4]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f022 0220 	bic.w	r2, r2, #32
 80032e4:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ea:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d105      	bne.n	800330a <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003302:	f043 0201 	orr.w	r2, r3, #1
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f7ff f9f4 	bl	80026f8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f06f 0212 	mvn.w	r2, #18
 8003318:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f003 0304 	and.w	r3, r3, #4
 8003320:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003328:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d057      	beq.n	80033e0 <HAL_ADC_IRQHandler+0x190>
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d054      	beq.n	80033e0 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333a:	f003 0310 	and.w	r3, r3, #16
 800333e:	2b00      	cmp	r3, #0
 8003340:	d105      	bne.n	800334e <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003346:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d139      	bne.n	80033d0 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003362:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003366:	2b00      	cmp	r3, #0
 8003368:	d006      	beq.n	8003378 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003374:	2b00      	cmp	r3, #0
 8003376:	d12b      	bne.n	80033d0 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003382:	2b00      	cmp	r3, #0
 8003384:	d124      	bne.n	80033d0 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003390:	2b00      	cmp	r3, #0
 8003392:	d11d      	bne.n	80033d0 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003398:	2b00      	cmp	r3, #0
 800339a:	d119      	bne.n	80033d0 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	685a      	ldr	r2, [r3, #4]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80033aa:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d105      	bne.n	80033d0 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c8:	f043 0201 	orr.w	r2, r3, #1
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f000 fa9d 	bl	8003910 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f06f 020c 	mvn.w	r2, #12
 80033de:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033ee:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d017      	beq.n	8003426 <HAL_ADC_IRQHandler+0x1d6>
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d014      	beq.n	8003426 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0301 	and.w	r3, r3, #1
 8003406:	2b01      	cmp	r3, #1
 8003408:	d10d      	bne.n	8003426 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800340e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 f837 	bl	800348a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f06f 0201 	mvn.w	r2, #1
 8003424:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f003 0320 	and.w	r3, r3, #32
 800342c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003434:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d015      	beq.n	8003468 <HAL_ADC_IRQHandler+0x218>
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d012      	beq.n	8003468 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003446:	f043 0202 	orr.w	r2, r3, #2
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f06f 0220 	mvn.w	r2, #32
 8003456:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 f820 	bl	800349e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f06f 0220 	mvn.w	r2, #32
 8003466:	601a      	str	r2, [r3, #0]
  }
}
 8003468:	bf00      	nop
 800346a:	3718      	adds	r7, #24
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800347e:	4618      	mov	r0, r3
 8003480:	370c      	adds	r7, #12
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr

0800348a <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800348a:	b480      	push	{r7}
 800348c:	b083      	sub	sp, #12
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003492:	bf00      	nop
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr

0800349e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800349e:	b480      	push	{r7}
 80034a0:	b083      	sub	sp, #12
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80034a6:	bf00      	nop
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
	...

080034b4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80034be:	2300      	movs	r3, #0
 80034c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d101      	bne.n	80034d0 <HAL_ADC_ConfigChannel+0x1c>
 80034cc:	2302      	movs	r3, #2
 80034ce:	e113      	b.n	80036f8 <HAL_ADC_ConfigChannel+0x244>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2b09      	cmp	r3, #9
 80034de:	d925      	bls.n	800352c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68d9      	ldr	r1, [r3, #12]
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	461a      	mov	r2, r3
 80034ee:	4613      	mov	r3, r2
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	4413      	add	r3, r2
 80034f4:	3b1e      	subs	r3, #30
 80034f6:	2207      	movs	r2, #7
 80034f8:	fa02 f303 	lsl.w	r3, r2, r3
 80034fc:	43da      	mvns	r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	400a      	ands	r2, r1
 8003504:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68d9      	ldr	r1, [r3, #12]
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	689a      	ldr	r2, [r3, #8]
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	b29b      	uxth	r3, r3
 8003516:	4618      	mov	r0, r3
 8003518:	4603      	mov	r3, r0
 800351a:	005b      	lsls	r3, r3, #1
 800351c:	4403      	add	r3, r0
 800351e:	3b1e      	subs	r3, #30
 8003520:	409a      	lsls	r2, r3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	430a      	orrs	r2, r1
 8003528:	60da      	str	r2, [r3, #12]
 800352a:	e022      	b.n	8003572 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6919      	ldr	r1, [r3, #16]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	b29b      	uxth	r3, r3
 8003538:	461a      	mov	r2, r3
 800353a:	4613      	mov	r3, r2
 800353c:	005b      	lsls	r3, r3, #1
 800353e:	4413      	add	r3, r2
 8003540:	2207      	movs	r2, #7
 8003542:	fa02 f303 	lsl.w	r3, r2, r3
 8003546:	43da      	mvns	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	400a      	ands	r2, r1
 800354e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	6919      	ldr	r1, [r3, #16]
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	689a      	ldr	r2, [r3, #8]
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	b29b      	uxth	r3, r3
 8003560:	4618      	mov	r0, r3
 8003562:	4603      	mov	r3, r0
 8003564:	005b      	lsls	r3, r3, #1
 8003566:	4403      	add	r3, r0
 8003568:	409a      	lsls	r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	430a      	orrs	r2, r1
 8003570:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	2b06      	cmp	r3, #6
 8003578:	d824      	bhi.n	80035c4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685a      	ldr	r2, [r3, #4]
 8003584:	4613      	mov	r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	4413      	add	r3, r2
 800358a:	3b05      	subs	r3, #5
 800358c:	221f      	movs	r2, #31
 800358e:	fa02 f303 	lsl.w	r3, r2, r3
 8003592:	43da      	mvns	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	400a      	ands	r2, r1
 800359a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	4618      	mov	r0, r3
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	685a      	ldr	r2, [r3, #4]
 80035ae:	4613      	mov	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	4413      	add	r3, r2
 80035b4:	3b05      	subs	r3, #5
 80035b6:	fa00 f203 	lsl.w	r2, r0, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	430a      	orrs	r2, r1
 80035c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80035c2:	e04c      	b.n	800365e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	2b0c      	cmp	r3, #12
 80035ca:	d824      	bhi.n	8003616 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685a      	ldr	r2, [r3, #4]
 80035d6:	4613      	mov	r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	4413      	add	r3, r2
 80035dc:	3b23      	subs	r3, #35	@ 0x23
 80035de:	221f      	movs	r2, #31
 80035e0:	fa02 f303 	lsl.w	r3, r2, r3
 80035e4:	43da      	mvns	r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	400a      	ands	r2, r1
 80035ec:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	4618      	mov	r0, r3
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685a      	ldr	r2, [r3, #4]
 8003600:	4613      	mov	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	4413      	add	r3, r2
 8003606:	3b23      	subs	r3, #35	@ 0x23
 8003608:	fa00 f203 	lsl.w	r2, r0, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	430a      	orrs	r2, r1
 8003612:	631a      	str	r2, [r3, #48]	@ 0x30
 8003614:	e023      	b.n	800365e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685a      	ldr	r2, [r3, #4]
 8003620:	4613      	mov	r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	4413      	add	r3, r2
 8003626:	3b41      	subs	r3, #65	@ 0x41
 8003628:	221f      	movs	r2, #31
 800362a:	fa02 f303 	lsl.w	r3, r2, r3
 800362e:	43da      	mvns	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	400a      	ands	r2, r1
 8003636:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	b29b      	uxth	r3, r3
 8003644:	4618      	mov	r0, r3
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	685a      	ldr	r2, [r3, #4]
 800364a:	4613      	mov	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4413      	add	r3, r2
 8003650:	3b41      	subs	r3, #65	@ 0x41
 8003652:	fa00 f203 	lsl.w	r2, r0, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	430a      	orrs	r2, r1
 800365c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800365e:	4b29      	ldr	r3, [pc, #164]	@ (8003704 <HAL_ADC_ConfigChannel+0x250>)
 8003660:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a28      	ldr	r2, [pc, #160]	@ (8003708 <HAL_ADC_ConfigChannel+0x254>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d10f      	bne.n	800368c <HAL_ADC_ConfigChannel+0x1d8>
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2b12      	cmp	r3, #18
 8003672:	d10b      	bne.n	800368c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a1d      	ldr	r2, [pc, #116]	@ (8003708 <HAL_ADC_ConfigChannel+0x254>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d12b      	bne.n	80036ee <HAL_ADC_ConfigChannel+0x23a>
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a1c      	ldr	r2, [pc, #112]	@ (800370c <HAL_ADC_ConfigChannel+0x258>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d003      	beq.n	80036a8 <HAL_ADC_ConfigChannel+0x1f4>
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2b11      	cmp	r3, #17
 80036a6:	d122      	bne.n	80036ee <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a11      	ldr	r2, [pc, #68]	@ (800370c <HAL_ADC_ConfigChannel+0x258>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d111      	bne.n	80036ee <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80036ca:	4b11      	ldr	r3, [pc, #68]	@ (8003710 <HAL_ADC_ConfigChannel+0x25c>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a11      	ldr	r2, [pc, #68]	@ (8003714 <HAL_ADC_ConfigChannel+0x260>)
 80036d0:	fba2 2303 	umull	r2, r3, r2, r3
 80036d4:	0c9a      	lsrs	r2, r3, #18
 80036d6:	4613      	mov	r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	4413      	add	r3, r2
 80036dc:	005b      	lsls	r3, r3, #1
 80036de:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80036e0:	e002      	b.n	80036e8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	3b01      	subs	r3, #1
 80036e6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1f9      	bne.n	80036e2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3714      	adds	r7, #20
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr
 8003704:	40012300 	.word	0x40012300
 8003708:	40012000 	.word	0x40012000
 800370c:	10000012 	.word	0x10000012
 8003710:	20000000 	.word	0x20000000
 8003714:	431bde83 	.word	0x431bde83

08003718 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003718:	b480      	push	{r7}
 800371a:	b085      	sub	sp, #20
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003720:	4b79      	ldr	r3, [pc, #484]	@ (8003908 <ADC_Init+0x1f0>)
 8003722:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	685a      	ldr	r2, [r3, #4]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	431a      	orrs	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	685a      	ldr	r2, [r3, #4]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800374c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	6859      	ldr	r1, [r3, #4]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	691b      	ldr	r3, [r3, #16]
 8003758:	021a      	lsls	r2, r3, #8
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	430a      	orrs	r2, r1
 8003760:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	685a      	ldr	r2, [r3, #4]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003770:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	6859      	ldr	r1, [r3, #4]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	689a      	ldr	r2, [r3, #8]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	430a      	orrs	r2, r1
 8003782:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	689a      	ldr	r2, [r3, #8]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003792:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6899      	ldr	r1, [r3, #8]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	68da      	ldr	r2, [r3, #12]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	430a      	orrs	r2, r1
 80037a4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037aa:	4a58      	ldr	r2, [pc, #352]	@ (800390c <ADC_Init+0x1f4>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d022      	beq.n	80037f6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	689a      	ldr	r2, [r3, #8]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80037be:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6899      	ldr	r1, [r3, #8]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	430a      	orrs	r2, r1
 80037d0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	689a      	ldr	r2, [r3, #8]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80037e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	6899      	ldr	r1, [r3, #8]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	430a      	orrs	r2, r1
 80037f2:	609a      	str	r2, [r3, #8]
 80037f4:	e00f      	b.n	8003816 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	689a      	ldr	r2, [r3, #8]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003804:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	689a      	ldr	r2, [r3, #8]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003814:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	689a      	ldr	r2, [r3, #8]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 0202 	bic.w	r2, r2, #2
 8003824:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	6899      	ldr	r1, [r3, #8]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	7e1b      	ldrb	r3, [r3, #24]
 8003830:	005a      	lsls	r2, r3, #1
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	430a      	orrs	r2, r1
 8003838:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d01b      	beq.n	800387c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	685a      	ldr	r2, [r3, #4]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003852:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	685a      	ldr	r2, [r3, #4]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003862:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	6859      	ldr	r1, [r3, #4]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800386e:	3b01      	subs	r3, #1
 8003870:	035a      	lsls	r2, r3, #13
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	430a      	orrs	r2, r1
 8003878:	605a      	str	r2, [r3, #4]
 800387a:	e007      	b.n	800388c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	685a      	ldr	r2, [r3, #4]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800388a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800389a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	69db      	ldr	r3, [r3, #28]
 80038a6:	3b01      	subs	r3, #1
 80038a8:	051a      	lsls	r2, r3, #20
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	689a      	ldr	r2, [r3, #8]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80038c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	6899      	ldr	r1, [r3, #8]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80038ce:	025a      	lsls	r2, r3, #9
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	430a      	orrs	r2, r1
 80038d6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	689a      	ldr	r2, [r3, #8]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	6899      	ldr	r1, [r3, #8]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	029a      	lsls	r2, r3, #10
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	430a      	orrs	r2, r1
 80038fa:	609a      	str	r2, [r3, #8]
}
 80038fc:	bf00      	nop
 80038fe:	3714      	adds	r7, #20
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr
 8003908:	40012300 	.word	0x40012300
 800390c:	0f000001 	.word	0x0f000001

08003910 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003918:	bf00      	nop
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003924:	b480      	push	{r7}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f003 0307 	and.w	r3, r3, #7
 8003932:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003934:	4b0c      	ldr	r3, [pc, #48]	@ (8003968 <__NVIC_SetPriorityGrouping+0x44>)
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800393a:	68ba      	ldr	r2, [r7, #8]
 800393c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003940:	4013      	ands	r3, r2
 8003942:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800394c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003950:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003954:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003956:	4a04      	ldr	r2, [pc, #16]	@ (8003968 <__NVIC_SetPriorityGrouping+0x44>)
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	60d3      	str	r3, [r2, #12]
}
 800395c:	bf00      	nop
 800395e:	3714      	adds	r7, #20
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr
 8003968:	e000ed00 	.word	0xe000ed00

0800396c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800396c:	b480      	push	{r7}
 800396e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003970:	4b04      	ldr	r3, [pc, #16]	@ (8003984 <__NVIC_GetPriorityGrouping+0x18>)
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	0a1b      	lsrs	r3, r3, #8
 8003976:	f003 0307 	and.w	r3, r3, #7
}
 800397a:	4618      	mov	r0, r3
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr
 8003984:	e000ed00 	.word	0xe000ed00

08003988 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	4603      	mov	r3, r0
 8003990:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003996:	2b00      	cmp	r3, #0
 8003998:	db0b      	blt.n	80039b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800399a:	79fb      	ldrb	r3, [r7, #7]
 800399c:	f003 021f 	and.w	r2, r3, #31
 80039a0:	4907      	ldr	r1, [pc, #28]	@ (80039c0 <__NVIC_EnableIRQ+0x38>)
 80039a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a6:	095b      	lsrs	r3, r3, #5
 80039a8:	2001      	movs	r0, #1
 80039aa:	fa00 f202 	lsl.w	r2, r0, r2
 80039ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80039b2:	bf00      	nop
 80039b4:	370c      	adds	r7, #12
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	e000e100 	.word	0xe000e100

080039c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	4603      	mov	r3, r0
 80039cc:	6039      	str	r1, [r7, #0]
 80039ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	db0a      	blt.n	80039ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	b2da      	uxtb	r2, r3
 80039dc:	490c      	ldr	r1, [pc, #48]	@ (8003a10 <__NVIC_SetPriority+0x4c>)
 80039de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e2:	0112      	lsls	r2, r2, #4
 80039e4:	b2d2      	uxtb	r2, r2
 80039e6:	440b      	add	r3, r1
 80039e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039ec:	e00a      	b.n	8003a04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	b2da      	uxtb	r2, r3
 80039f2:	4908      	ldr	r1, [pc, #32]	@ (8003a14 <__NVIC_SetPriority+0x50>)
 80039f4:	79fb      	ldrb	r3, [r7, #7]
 80039f6:	f003 030f 	and.w	r3, r3, #15
 80039fa:	3b04      	subs	r3, #4
 80039fc:	0112      	lsls	r2, r2, #4
 80039fe:	b2d2      	uxtb	r2, r2
 8003a00:	440b      	add	r3, r1
 8003a02:	761a      	strb	r2, [r3, #24]
}
 8003a04:	bf00      	nop
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr
 8003a10:	e000e100 	.word	0xe000e100
 8003a14:	e000ed00 	.word	0xe000ed00

08003a18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b089      	sub	sp, #36	@ 0x24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f003 0307 	and.w	r3, r3, #7
 8003a2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	f1c3 0307 	rsb	r3, r3, #7
 8003a32:	2b04      	cmp	r3, #4
 8003a34:	bf28      	it	cs
 8003a36:	2304      	movcs	r3, #4
 8003a38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	3304      	adds	r3, #4
 8003a3e:	2b06      	cmp	r3, #6
 8003a40:	d902      	bls.n	8003a48 <NVIC_EncodePriority+0x30>
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	3b03      	subs	r3, #3
 8003a46:	e000      	b.n	8003a4a <NVIC_EncodePriority+0x32>
 8003a48:	2300      	movs	r3, #0
 8003a4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a4c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	fa02 f303 	lsl.w	r3, r2, r3
 8003a56:	43da      	mvns	r2, r3
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	401a      	ands	r2, r3
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a60:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	fa01 f303 	lsl.w	r3, r1, r3
 8003a6a:	43d9      	mvns	r1, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a70:	4313      	orrs	r3, r2
         );
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3724      	adds	r7, #36	@ 0x24
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
	...

08003a80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a90:	d301      	bcc.n	8003a96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a92:	2301      	movs	r3, #1
 8003a94:	e00f      	b.n	8003ab6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a96:	4a0a      	ldr	r2, [pc, #40]	@ (8003ac0 <SysTick_Config+0x40>)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a9e:	210f      	movs	r1, #15
 8003aa0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003aa4:	f7ff ff8e 	bl	80039c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003aa8:	4b05      	ldr	r3, [pc, #20]	@ (8003ac0 <SysTick_Config+0x40>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003aae:	4b04      	ldr	r3, [pc, #16]	@ (8003ac0 <SysTick_Config+0x40>)
 8003ab0:	2207      	movs	r2, #7
 8003ab2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3708      	adds	r7, #8
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	e000e010 	.word	0xe000e010

08003ac4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b082      	sub	sp, #8
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f7ff ff29 	bl	8003924 <__NVIC_SetPriorityGrouping>
}
 8003ad2:	bf00      	nop
 8003ad4:	3708      	adds	r7, #8
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b086      	sub	sp, #24
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	60b9      	str	r1, [r7, #8]
 8003ae4:	607a      	str	r2, [r7, #4]
 8003ae6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003aec:	f7ff ff3e 	bl	800396c <__NVIC_GetPriorityGrouping>
 8003af0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	68b9      	ldr	r1, [r7, #8]
 8003af6:	6978      	ldr	r0, [r7, #20]
 8003af8:	f7ff ff8e 	bl	8003a18 <NVIC_EncodePriority>
 8003afc:	4602      	mov	r2, r0
 8003afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b02:	4611      	mov	r1, r2
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7ff ff5d 	bl	80039c4 <__NVIC_SetPriority>
}
 8003b0a:	bf00      	nop
 8003b0c:	3718      	adds	r7, #24
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b082      	sub	sp, #8
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	4603      	mov	r3, r0
 8003b1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7ff ff31 	bl	8003988 <__NVIC_EnableIRQ>
}
 8003b26:	bf00      	nop
 8003b28:	3708      	adds	r7, #8
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}

08003b2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b082      	sub	sp, #8
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f7ff ffa2 	bl	8003a80 <SysTick_Config>
 8003b3c:	4603      	mov	r3, r0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3708      	adds	r7, #8
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b46:	b480      	push	{r7}
 8003b48:	b083      	sub	sp, #12
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d004      	beq.n	8003b64 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2280      	movs	r2, #128	@ 0x80
 8003b5e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e00c      	b.n	8003b7e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2205      	movs	r2, #5
 8003b68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f022 0201 	bic.w	r2, r2, #1
 8003b7a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	370c      	adds	r7, #12
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
	...

08003b8c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e08a      	b.n	8003cb4 <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d106      	bne.n	8003bb6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2223      	movs	r2, #35	@ 0x23
 8003bac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f7fe fe4f 	bl	8002854 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	60bb      	str	r3, [r7, #8]
 8003bba:	4b40      	ldr	r3, [pc, #256]	@ (8003cbc <HAL_ETH_Init+0x130>)
 8003bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bbe:	4a3f      	ldr	r2, [pc, #252]	@ (8003cbc <HAL_ETH_Init+0x130>)
 8003bc0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003bc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003bc6:	4b3d      	ldr	r3, [pc, #244]	@ (8003cbc <HAL_ETH_Init+0x130>)
 8003bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bce:	60bb      	str	r3, [r7, #8]
 8003bd0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003bd2:	4b3b      	ldr	r3, [pc, #236]	@ (8003cc0 <HAL_ETH_Init+0x134>)
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	4a3a      	ldr	r2, [pc, #232]	@ (8003cc0 <HAL_ETH_Init+0x134>)
 8003bd8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003bdc:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003bde:	4b38      	ldr	r3, [pc, #224]	@ (8003cc0 <HAL_ETH_Init+0x134>)
 8003be0:	685a      	ldr	r2, [r3, #4]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	4936      	ldr	r1, [pc, #216]	@ (8003cc0 <HAL_ETH_Init+0x134>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003bec:	4b34      	ldr	r3, [pc, #208]	@ (8003cc0 <HAL_ETH_Init+0x134>)
 8003bee:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	6812      	ldr	r2, [r2, #0]
 8003bfe:	f043 0301 	orr.w	r3, r3, #1
 8003c02:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003c06:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c08:	f7ff f9d0 	bl	8002fac <HAL_GetTick>
 8003c0c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003c0e:	e011      	b.n	8003c34 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003c10:	f7ff f9cc 	bl	8002fac <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003c1e:	d909      	bls.n	8003c34 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2204      	movs	r2, #4
 8003c24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	22e0      	movs	r2, #224	@ 0xe0
 8003c2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e03f      	b.n	8003cb4 <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1e4      	bne.n	8003c10 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 f97a 	bl	8003f40 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f000 fa25 	bl	800409c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 fa7b 	bl	800414e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	2100      	movs	r1, #0
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f000 f9e3 	bl	800402c <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8003c74:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	6812      	ldr	r2, [r2, #0]
 8003c82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c86:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003c8a:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8003c9e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2210      	movs	r2, #16
 8003cae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003cb2:	2300      	movs	r3, #0
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3710      	adds	r7, #16
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	40023800 	.word	0x40023800
 8003cc0:	40013800 	.word	0x40013800

08003cc4 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	4b53      	ldr	r3, [pc, #332]	@ (8003e28 <ETH_SetMACConfig+0x164>)
 8003cda:	4013      	ands	r3, r2
 8003cdc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	7b9b      	ldrb	r3, [r3, #14]
 8003ce2:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003ce4:	683a      	ldr	r2, [r7, #0]
 8003ce6:	7c12      	ldrb	r2, [r2, #16]
 8003ce8:	2a00      	cmp	r2, #0
 8003cea:	d102      	bne.n	8003cf2 <ETH_SetMACConfig+0x2e>
 8003cec:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003cf0:	e000      	b.n	8003cf4 <ETH_SetMACConfig+0x30>
 8003cf2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8003cf4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003cf6:	683a      	ldr	r2, [r7, #0]
 8003cf8:	7c52      	ldrb	r2, [r2, #17]
 8003cfa:	2a00      	cmp	r2, #0
 8003cfc:	d102      	bne.n	8003d04 <ETH_SetMACConfig+0x40>
 8003cfe:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8003d02:	e000      	b.n	8003d06 <ETH_SetMACConfig+0x42>
 8003d04:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003d06:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003d0c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	7fdb      	ldrb	r3, [r3, #31]
 8003d12:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003d14:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003d1a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003d1c:	683a      	ldr	r2, [r7, #0]
 8003d1e:	7f92      	ldrb	r2, [r2, #30]
 8003d20:	2a00      	cmp	r2, #0
 8003d22:	d102      	bne.n	8003d2a <ETH_SetMACConfig+0x66>
 8003d24:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003d28:	e000      	b.n	8003d2c <ETH_SetMACConfig+0x68>
 8003d2a:	2200      	movs	r2, #0
                        macconf->Speed |
 8003d2c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	7f1b      	ldrb	r3, [r3, #28]
 8003d32:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003d34:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003d3a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	791b      	ldrb	r3, [r3, #4]
 8003d40:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003d42:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003d44:	683a      	ldr	r2, [r7, #0]
 8003d46:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003d4a:	2a00      	cmp	r2, #0
 8003d4c:	d102      	bne.n	8003d54 <ETH_SetMACConfig+0x90>
 8003d4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d52:	e000      	b.n	8003d56 <ETH_SetMACConfig+0x92>
 8003d54:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003d56:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	7bdb      	ldrb	r3, [r3, #15]
 8003d5c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003d5e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003d64:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003d6c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	68fa      	ldr	r2, [r7, #12]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d86:	2001      	movs	r0, #1
 8003d88:	f7ff f91c 	bl	8002fc4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68fa      	ldr	r2, [r7, #12]
 8003d92:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8003da2:	4013      	ands	r3, r2
 8003da4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003daa:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003dac:	683a      	ldr	r2, [r7, #0]
 8003dae:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8003db2:	2a00      	cmp	r2, #0
 8003db4:	d101      	bne.n	8003dba <ETH_SetMACConfig+0xf6>
 8003db6:	2280      	movs	r2, #128	@ 0x80
 8003db8:	e000      	b.n	8003dbc <ETH_SetMACConfig+0xf8>
 8003dba:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003dbc:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003dc2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003dc4:	683a      	ldr	r2, [r7, #0]
 8003dc6:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8003dca:	2a01      	cmp	r2, #1
 8003dcc:	d101      	bne.n	8003dd2 <ETH_SetMACConfig+0x10e>
 8003dce:	2208      	movs	r2, #8
 8003dd0:	e000      	b.n	8003dd4 <ETH_SetMACConfig+0x110>
 8003dd2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8003dd4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8003dd6:	683a      	ldr	r2, [r7, #0]
 8003dd8:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8003ddc:	2a01      	cmp	r2, #1
 8003dde:	d101      	bne.n	8003de4 <ETH_SetMACConfig+0x120>
 8003de0:	2204      	movs	r2, #4
 8003de2:	e000      	b.n	8003de6 <ETH_SetMACConfig+0x122>
 8003de4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003de6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003de8:	683a      	ldr	r2, [r7, #0]
 8003dea:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8003dee:	2a01      	cmp	r2, #1
 8003df0:	d101      	bne.n	8003df6 <ETH_SetMACConfig+0x132>
 8003df2:	2202      	movs	r2, #2
 8003df4:	e000      	b.n	8003df8 <ETH_SetMACConfig+0x134>
 8003df6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e10:	2001      	movs	r0, #1
 8003e12:	f7ff f8d7 	bl	8002fc4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	619a      	str	r2, [r3, #24]
}
 8003e1e:	bf00      	nop
 8003e20:	3710      	adds	r7, #16
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	fd20810f 	.word	0xfd20810f

08003e2c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e3e:	699b      	ldr	r3, [r3, #24]
 8003e40:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	4b3d      	ldr	r3, [pc, #244]	@ (8003f3c <ETH_SetDMAConfig+0x110>)
 8003e46:	4013      	ands	r3, r2
 8003e48:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	7b1b      	ldrb	r3, [r3, #12]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d102      	bne.n	8003e58 <ETH_SetDMAConfig+0x2c>
 8003e52:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003e56:	e000      	b.n	8003e5a <ETH_SetDMAConfig+0x2e>
 8003e58:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	7b5b      	ldrb	r3, [r3, #13]
 8003e5e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003e60:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003e62:	683a      	ldr	r2, [r7, #0]
 8003e64:	7f52      	ldrb	r2, [r2, #29]
 8003e66:	2a00      	cmp	r2, #0
 8003e68:	d102      	bne.n	8003e70 <ETH_SetDMAConfig+0x44>
 8003e6a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003e6e:	e000      	b.n	8003e72 <ETH_SetDMAConfig+0x46>
 8003e70:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003e72:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	7b9b      	ldrb	r3, [r3, #14]
 8003e78:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003e7a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003e80:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	7f1b      	ldrb	r3, [r3, #28]
 8003e86:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003e88:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	7f9b      	ldrb	r3, [r3, #30]
 8003e8e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003e90:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003e96:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003e9e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003ec2:	2001      	movs	r0, #1
 8003ec4:	f7ff f87e 	bl	8002fc4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	791b      	ldrb	r3, [r3, #4]
 8003eda:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003ee0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8003ee6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003eec:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003ef4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8003ef6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003efc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003efe:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003f04:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	6812      	ldr	r2, [r2, #0]
 8003f0a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003f0e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003f12:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003f20:	2001      	movs	r0, #1
 8003f22:	f7ff f84f 	bl	8002fc4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f2e:	461a      	mov	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6013      	str	r3, [r2, #0]
}
 8003f34:	bf00      	nop
 8003f36:	3710      	adds	r7, #16
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	f8de3f23 	.word	0xf8de3f23

08003f40 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b0a6      	sub	sp, #152	@ 0x98
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003f54:	2300      	movs	r3, #0
 8003f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003f64:	2300      	movs	r3, #0
 8003f66:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8003f70:	2301      	movs	r3, #1
 8003f72:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003f76:	2300      	movs	r3, #0
 8003f78:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003f82:	2300      	movs	r3, #0
 8003f84:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003f86:	2300      	movs	r3, #0
 8003f88:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003f90:	2300      	movs	r3, #0
 8003f92:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003f96:	2300      	movs	r3, #0
 8003f98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003fa8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003fac:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003fae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003fb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003fba:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f7ff fe7f 	bl	8003cc4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003fec:	2301      	movs	r3, #1
 8003fee:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003ff6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003ffa:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003ffc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004000:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004002:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004006:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8004008:	2301      	movs	r3, #1
 800400a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800400e:	2300      	movs	r3, #0
 8004010:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004012:	2300      	movs	r3, #0
 8004014:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004016:	f107 0308 	add.w	r3, r7, #8
 800401a:	4619      	mov	r1, r3
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f7ff ff05 	bl	8003e2c <ETH_SetDMAConfig>
}
 8004022:	bf00      	nop
 8004024:	3798      	adds	r7, #152	@ 0x98
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
	...

0800402c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800402c:	b480      	push	{r7}
 800402e:	b087      	sub	sp, #28
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	3305      	adds	r3, #5
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	021b      	lsls	r3, r3, #8
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	3204      	adds	r2, #4
 8004044:	7812      	ldrb	r2, [r2, #0]
 8004046:	4313      	orrs	r3, r2
 8004048:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800404a:	68ba      	ldr	r2, [r7, #8]
 800404c:	4b11      	ldr	r3, [pc, #68]	@ (8004094 <ETH_MACAddressConfig+0x68>)
 800404e:	4413      	add	r3, r2
 8004050:	461a      	mov	r2, r3
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	3303      	adds	r3, #3
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	061a      	lsls	r2, r3, #24
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	3302      	adds	r3, #2
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	041b      	lsls	r3, r3, #16
 8004066:	431a      	orrs	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	3301      	adds	r3, #1
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	021b      	lsls	r3, r3, #8
 8004070:	4313      	orrs	r3, r2
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	7812      	ldrb	r2, [r2, #0]
 8004076:	4313      	orrs	r3, r2
 8004078:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800407a:	68ba      	ldr	r2, [r7, #8]
 800407c:	4b06      	ldr	r3, [pc, #24]	@ (8004098 <ETH_MACAddressConfig+0x6c>)
 800407e:	4413      	add	r3, r2
 8004080:	461a      	mov	r2, r3
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	6013      	str	r3, [r2, #0]
}
 8004086:	bf00      	nop
 8004088:	371c      	adds	r7, #28
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	40028040 	.word	0x40028040
 8004098:	40028044 	.word	0x40028044

0800409c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800409c:	b480      	push	{r7}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80040a4:	2300      	movs	r3, #0
 80040a6:	60fb      	str	r3, [r7, #12]
 80040a8:	e03e      	b.n	8004128 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	68d9      	ldr	r1, [r3, #12]
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	4613      	mov	r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	4413      	add	r3, r2
 80040b6:	00db      	lsls	r3, r3, #3
 80040b8:	440b      	add	r3, r1
 80040ba:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	2200      	movs	r2, #0
 80040c0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	2200      	movs	r2, #0
 80040c6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	2200      	movs	r2, #0
 80040cc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	2200      	movs	r2, #0
 80040d2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80040d4:	68b9      	ldr	r1, [r7, #8]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	3206      	adds	r2, #6
 80040dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d80c      	bhi.n	800410c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	68d9      	ldr	r1, [r3, #12]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	1c5a      	adds	r2, r3, #1
 80040fa:	4613      	mov	r3, r2
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	4413      	add	r3, r2
 8004100:	00db      	lsls	r3, r3, #3
 8004102:	440b      	add	r3, r1
 8004104:	461a      	mov	r2, r3
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	60da      	str	r2, [r3, #12]
 800410a:	e004      	b.n	8004116 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	461a      	mov	r2, r3
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	3301      	adds	r3, #1
 8004126:	60fb      	str	r3, [r7, #12]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2b03      	cmp	r3, #3
 800412c:	d9bd      	bls.n	80040aa <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	68da      	ldr	r2, [r3, #12]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004140:	611a      	str	r2, [r3, #16]
}
 8004142:	bf00      	nop
 8004144:	3714      	adds	r7, #20
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr

0800414e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800414e:	b480      	push	{r7}
 8004150:	b085      	sub	sp, #20
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004156:	2300      	movs	r3, #0
 8004158:	60fb      	str	r3, [r7, #12]
 800415a:	e048      	b.n	80041ee <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6919      	ldr	r1, [r3, #16]
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	4613      	mov	r3, r2
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	4413      	add	r3, r2
 8004168:	00db      	lsls	r3, r3, #3
 800416a:	440b      	add	r3, r1
 800416c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	2200      	movs	r2, #0
 8004172:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	2200      	movs	r2, #0
 8004178:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	2200      	movs	r2, #0
 800417e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	2200      	movs	r2, #0
 8004184:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	2200      	movs	r2, #0
 800418a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	2200      	movs	r2, #0
 8004190:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004198:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	695b      	ldr	r3, [r3, #20]
 800419e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80041b2:	68b9      	ldr	r1, [r7, #8]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	3212      	adds	r2, #18
 80041ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d80c      	bhi.n	80041de <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6919      	ldr	r1, [r3, #16]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	1c5a      	adds	r2, r3, #1
 80041cc:	4613      	mov	r3, r2
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	4413      	add	r3, r2
 80041d2:	00db      	lsls	r3, r3, #3
 80041d4:	440b      	add	r3, r1
 80041d6:	461a      	mov	r2, r3
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	60da      	str	r2, [r3, #12]
 80041dc:	e004      	b.n	80041e8 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	461a      	mov	r2, r3
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	3301      	adds	r3, #1
 80041ec:	60fb      	str	r3, [r7, #12]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2b03      	cmp	r3, #3
 80041f2:	d9b3      	bls.n	800415c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	691a      	ldr	r2, [r3, #16]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800421e:	60da      	str	r2, [r3, #12]
}
 8004220:	bf00      	nop
 8004222:	3714      	adds	r7, #20
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800422c:	b480      	push	{r7}
 800422e:	b089      	sub	sp, #36	@ 0x24
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004236:	2300      	movs	r3, #0
 8004238:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800423a:	2300      	movs	r3, #0
 800423c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800423e:	2300      	movs	r3, #0
 8004240:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004242:	2300      	movs	r3, #0
 8004244:	61fb      	str	r3, [r7, #28]
 8004246:	e177      	b.n	8004538 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004248:	2201      	movs	r2, #1
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	fa02 f303 	lsl.w	r3, r2, r3
 8004250:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	4013      	ands	r3, r2
 800425a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800425c:	693a      	ldr	r2, [r7, #16]
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	429a      	cmp	r2, r3
 8004262:	f040 8166 	bne.w	8004532 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f003 0303 	and.w	r3, r3, #3
 800426e:	2b01      	cmp	r3, #1
 8004270:	d005      	beq.n	800427e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800427a:	2b02      	cmp	r3, #2
 800427c:	d130      	bne.n	80042e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	005b      	lsls	r3, r3, #1
 8004288:	2203      	movs	r2, #3
 800428a:	fa02 f303 	lsl.w	r3, r2, r3
 800428e:	43db      	mvns	r3, r3
 8004290:	69ba      	ldr	r2, [r7, #24]
 8004292:	4013      	ands	r3, r2
 8004294:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	68da      	ldr	r2, [r3, #12]
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	005b      	lsls	r3, r3, #1
 800429e:	fa02 f303 	lsl.w	r3, r2, r3
 80042a2:	69ba      	ldr	r2, [r7, #24]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	69ba      	ldr	r2, [r7, #24]
 80042ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80042b4:	2201      	movs	r2, #1
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	fa02 f303 	lsl.w	r3, r2, r3
 80042bc:	43db      	mvns	r3, r3
 80042be:	69ba      	ldr	r2, [r7, #24]
 80042c0:	4013      	ands	r3, r2
 80042c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	091b      	lsrs	r3, r3, #4
 80042ca:	f003 0201 	and.w	r2, r3, #1
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	fa02 f303 	lsl.w	r3, r2, r3
 80042d4:	69ba      	ldr	r2, [r7, #24]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	69ba      	ldr	r2, [r7, #24]
 80042de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	f003 0303 	and.w	r3, r3, #3
 80042e8:	2b03      	cmp	r3, #3
 80042ea:	d017      	beq.n	800431c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	005b      	lsls	r3, r3, #1
 80042f6:	2203      	movs	r2, #3
 80042f8:	fa02 f303 	lsl.w	r3, r2, r3
 80042fc:	43db      	mvns	r3, r3
 80042fe:	69ba      	ldr	r2, [r7, #24]
 8004300:	4013      	ands	r3, r2
 8004302:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	689a      	ldr	r2, [r3, #8]
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	005b      	lsls	r3, r3, #1
 800430c:	fa02 f303 	lsl.w	r3, r2, r3
 8004310:	69ba      	ldr	r2, [r7, #24]
 8004312:	4313      	orrs	r3, r2
 8004314:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	69ba      	ldr	r2, [r7, #24]
 800431a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f003 0303 	and.w	r3, r3, #3
 8004324:	2b02      	cmp	r3, #2
 8004326:	d123      	bne.n	8004370 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	08da      	lsrs	r2, r3, #3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	3208      	adds	r2, #8
 8004330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004334:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	f003 0307 	and.w	r3, r3, #7
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	220f      	movs	r2, #15
 8004340:	fa02 f303 	lsl.w	r3, r2, r3
 8004344:	43db      	mvns	r3, r3
 8004346:	69ba      	ldr	r2, [r7, #24]
 8004348:	4013      	ands	r3, r2
 800434a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	691a      	ldr	r2, [r3, #16]
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	f003 0307 	and.w	r3, r3, #7
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	fa02 f303 	lsl.w	r3, r2, r3
 800435c:	69ba      	ldr	r2, [r7, #24]
 800435e:	4313      	orrs	r3, r2
 8004360:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	08da      	lsrs	r2, r3, #3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	3208      	adds	r2, #8
 800436a:	69b9      	ldr	r1, [r7, #24]
 800436c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	005b      	lsls	r3, r3, #1
 800437a:	2203      	movs	r2, #3
 800437c:	fa02 f303 	lsl.w	r3, r2, r3
 8004380:	43db      	mvns	r3, r3
 8004382:	69ba      	ldr	r2, [r7, #24]
 8004384:	4013      	ands	r3, r2
 8004386:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f003 0203 	and.w	r2, r3, #3
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	005b      	lsls	r3, r3, #1
 8004394:	fa02 f303 	lsl.w	r3, r2, r3
 8004398:	69ba      	ldr	r2, [r7, #24]
 800439a:	4313      	orrs	r3, r2
 800439c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	69ba      	ldr	r2, [r7, #24]
 80043a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	f000 80c0 	beq.w	8004532 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043b2:	2300      	movs	r3, #0
 80043b4:	60fb      	str	r3, [r7, #12]
 80043b6:	4b66      	ldr	r3, [pc, #408]	@ (8004550 <HAL_GPIO_Init+0x324>)
 80043b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ba:	4a65      	ldr	r2, [pc, #404]	@ (8004550 <HAL_GPIO_Init+0x324>)
 80043bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80043c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80043c2:	4b63      	ldr	r3, [pc, #396]	@ (8004550 <HAL_GPIO_Init+0x324>)
 80043c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80043ca:	60fb      	str	r3, [r7, #12]
 80043cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80043ce:	4a61      	ldr	r2, [pc, #388]	@ (8004554 <HAL_GPIO_Init+0x328>)
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	089b      	lsrs	r3, r3, #2
 80043d4:	3302      	adds	r3, #2
 80043d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	f003 0303 	and.w	r3, r3, #3
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	220f      	movs	r2, #15
 80043e6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ea:	43db      	mvns	r3, r3
 80043ec:	69ba      	ldr	r2, [r7, #24]
 80043ee:	4013      	ands	r3, r2
 80043f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a58      	ldr	r2, [pc, #352]	@ (8004558 <HAL_GPIO_Init+0x32c>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d037      	beq.n	800446a <HAL_GPIO_Init+0x23e>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a57      	ldr	r2, [pc, #348]	@ (800455c <HAL_GPIO_Init+0x330>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d031      	beq.n	8004466 <HAL_GPIO_Init+0x23a>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a56      	ldr	r2, [pc, #344]	@ (8004560 <HAL_GPIO_Init+0x334>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d02b      	beq.n	8004462 <HAL_GPIO_Init+0x236>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a55      	ldr	r2, [pc, #340]	@ (8004564 <HAL_GPIO_Init+0x338>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d025      	beq.n	800445e <HAL_GPIO_Init+0x232>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4a54      	ldr	r2, [pc, #336]	@ (8004568 <HAL_GPIO_Init+0x33c>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d01f      	beq.n	800445a <HAL_GPIO_Init+0x22e>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a53      	ldr	r2, [pc, #332]	@ (800456c <HAL_GPIO_Init+0x340>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d019      	beq.n	8004456 <HAL_GPIO_Init+0x22a>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a52      	ldr	r2, [pc, #328]	@ (8004570 <HAL_GPIO_Init+0x344>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d013      	beq.n	8004452 <HAL_GPIO_Init+0x226>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a51      	ldr	r2, [pc, #324]	@ (8004574 <HAL_GPIO_Init+0x348>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d00d      	beq.n	800444e <HAL_GPIO_Init+0x222>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a50      	ldr	r2, [pc, #320]	@ (8004578 <HAL_GPIO_Init+0x34c>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d007      	beq.n	800444a <HAL_GPIO_Init+0x21e>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a4f      	ldr	r2, [pc, #316]	@ (800457c <HAL_GPIO_Init+0x350>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d101      	bne.n	8004446 <HAL_GPIO_Init+0x21a>
 8004442:	2309      	movs	r3, #9
 8004444:	e012      	b.n	800446c <HAL_GPIO_Init+0x240>
 8004446:	230a      	movs	r3, #10
 8004448:	e010      	b.n	800446c <HAL_GPIO_Init+0x240>
 800444a:	2308      	movs	r3, #8
 800444c:	e00e      	b.n	800446c <HAL_GPIO_Init+0x240>
 800444e:	2307      	movs	r3, #7
 8004450:	e00c      	b.n	800446c <HAL_GPIO_Init+0x240>
 8004452:	2306      	movs	r3, #6
 8004454:	e00a      	b.n	800446c <HAL_GPIO_Init+0x240>
 8004456:	2305      	movs	r3, #5
 8004458:	e008      	b.n	800446c <HAL_GPIO_Init+0x240>
 800445a:	2304      	movs	r3, #4
 800445c:	e006      	b.n	800446c <HAL_GPIO_Init+0x240>
 800445e:	2303      	movs	r3, #3
 8004460:	e004      	b.n	800446c <HAL_GPIO_Init+0x240>
 8004462:	2302      	movs	r3, #2
 8004464:	e002      	b.n	800446c <HAL_GPIO_Init+0x240>
 8004466:	2301      	movs	r3, #1
 8004468:	e000      	b.n	800446c <HAL_GPIO_Init+0x240>
 800446a:	2300      	movs	r3, #0
 800446c:	69fa      	ldr	r2, [r7, #28]
 800446e:	f002 0203 	and.w	r2, r2, #3
 8004472:	0092      	lsls	r2, r2, #2
 8004474:	4093      	lsls	r3, r2
 8004476:	69ba      	ldr	r2, [r7, #24]
 8004478:	4313      	orrs	r3, r2
 800447a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800447c:	4935      	ldr	r1, [pc, #212]	@ (8004554 <HAL_GPIO_Init+0x328>)
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	089b      	lsrs	r3, r3, #2
 8004482:	3302      	adds	r3, #2
 8004484:	69ba      	ldr	r2, [r7, #24]
 8004486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800448a:	4b3d      	ldr	r3, [pc, #244]	@ (8004580 <HAL_GPIO_Init+0x354>)
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	43db      	mvns	r3, r3
 8004494:	69ba      	ldr	r2, [r7, #24]
 8004496:	4013      	ands	r3, r2
 8004498:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d003      	beq.n	80044ae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80044a6:	69ba      	ldr	r2, [r7, #24]
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80044ae:	4a34      	ldr	r2, [pc, #208]	@ (8004580 <HAL_GPIO_Init+0x354>)
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80044b4:	4b32      	ldr	r3, [pc, #200]	@ (8004580 <HAL_GPIO_Init+0x354>)
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	43db      	mvns	r3, r3
 80044be:	69ba      	ldr	r2, [r7, #24]
 80044c0:	4013      	ands	r3, r2
 80044c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d003      	beq.n	80044d8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80044d0:	69ba      	ldr	r2, [r7, #24]
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80044d8:	4a29      	ldr	r2, [pc, #164]	@ (8004580 <HAL_GPIO_Init+0x354>)
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80044de:	4b28      	ldr	r3, [pc, #160]	@ (8004580 <HAL_GPIO_Init+0x354>)
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	43db      	mvns	r3, r3
 80044e8:	69ba      	ldr	r2, [r7, #24]
 80044ea:	4013      	ands	r3, r2
 80044ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d003      	beq.n	8004502 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80044fa:	69ba      	ldr	r2, [r7, #24]
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	4313      	orrs	r3, r2
 8004500:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004502:	4a1f      	ldr	r2, [pc, #124]	@ (8004580 <HAL_GPIO_Init+0x354>)
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004508:	4b1d      	ldr	r3, [pc, #116]	@ (8004580 <HAL_GPIO_Init+0x354>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	43db      	mvns	r3, r3
 8004512:	69ba      	ldr	r2, [r7, #24]
 8004514:	4013      	ands	r3, r2
 8004516:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d003      	beq.n	800452c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004524:	69ba      	ldr	r2, [r7, #24]
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	4313      	orrs	r3, r2
 800452a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800452c:	4a14      	ldr	r2, [pc, #80]	@ (8004580 <HAL_GPIO_Init+0x354>)
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	3301      	adds	r3, #1
 8004536:	61fb      	str	r3, [r7, #28]
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	2b0f      	cmp	r3, #15
 800453c:	f67f ae84 	bls.w	8004248 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004540:	bf00      	nop
 8004542:	bf00      	nop
 8004544:	3724      	adds	r7, #36	@ 0x24
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	40023800 	.word	0x40023800
 8004554:	40013800 	.word	0x40013800
 8004558:	40020000 	.word	0x40020000
 800455c:	40020400 	.word	0x40020400
 8004560:	40020800 	.word	0x40020800
 8004564:	40020c00 	.word	0x40020c00
 8004568:	40021000 	.word	0x40021000
 800456c:	40021400 	.word	0x40021400
 8004570:	40021800 	.word	0x40021800
 8004574:	40021c00 	.word	0x40021c00
 8004578:	40022000 	.word	0x40022000
 800457c:	40022400 	.word	0x40022400
 8004580:	40013c00 	.word	0x40013c00

08004584 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	460b      	mov	r3, r1
 800458e:	807b      	strh	r3, [r7, #2]
 8004590:	4613      	mov	r3, r2
 8004592:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004594:	787b      	ldrb	r3, [r7, #1]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d003      	beq.n	80045a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800459a:	887a      	ldrh	r2, [r7, #2]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80045a0:	e003      	b.n	80045aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80045a2:	887b      	ldrh	r3, [r7, #2]
 80045a4:	041a      	lsls	r2, r3, #16
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	619a      	str	r2, [r3, #24]
}
 80045aa:	bf00      	nop
 80045ac:	370c      	adds	r7, #12
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
	...

080045b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d101      	bne.n	80045ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e12b      	b.n	8004822 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d106      	bne.n	80045e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f7fe f9fe 	bl	80029e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2224      	movs	r2, #36	@ 0x24
 80045e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f022 0201 	bic.w	r2, r2, #1
 80045fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800460a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800461a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800461c:	f001 fb92 	bl	8005d44 <HAL_RCC_GetPCLK1Freq>
 8004620:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	4a81      	ldr	r2, [pc, #516]	@ (800482c <HAL_I2C_Init+0x274>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d807      	bhi.n	800463c <HAL_I2C_Init+0x84>
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	4a80      	ldr	r2, [pc, #512]	@ (8004830 <HAL_I2C_Init+0x278>)
 8004630:	4293      	cmp	r3, r2
 8004632:	bf94      	ite	ls
 8004634:	2301      	movls	r3, #1
 8004636:	2300      	movhi	r3, #0
 8004638:	b2db      	uxtb	r3, r3
 800463a:	e006      	b.n	800464a <HAL_I2C_Init+0x92>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	4a7d      	ldr	r2, [pc, #500]	@ (8004834 <HAL_I2C_Init+0x27c>)
 8004640:	4293      	cmp	r3, r2
 8004642:	bf94      	ite	ls
 8004644:	2301      	movls	r3, #1
 8004646:	2300      	movhi	r3, #0
 8004648:	b2db      	uxtb	r3, r3
 800464a:	2b00      	cmp	r3, #0
 800464c:	d001      	beq.n	8004652 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e0e7      	b.n	8004822 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	4a78      	ldr	r2, [pc, #480]	@ (8004838 <HAL_I2C_Init+0x280>)
 8004656:	fba2 2303 	umull	r2, r3, r2, r3
 800465a:	0c9b      	lsrs	r3, r3, #18
 800465c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68ba      	ldr	r2, [r7, #8]
 800466e:	430a      	orrs	r2, r1
 8004670:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	6a1b      	ldr	r3, [r3, #32]
 8004678:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	4a6a      	ldr	r2, [pc, #424]	@ (800482c <HAL_I2C_Init+0x274>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d802      	bhi.n	800468c <HAL_I2C_Init+0xd4>
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	3301      	adds	r3, #1
 800468a:	e009      	b.n	80046a0 <HAL_I2C_Init+0xe8>
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004692:	fb02 f303 	mul.w	r3, r2, r3
 8004696:	4a69      	ldr	r2, [pc, #420]	@ (800483c <HAL_I2C_Init+0x284>)
 8004698:	fba2 2303 	umull	r2, r3, r2, r3
 800469c:	099b      	lsrs	r3, r3, #6
 800469e:	3301      	adds	r3, #1
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	6812      	ldr	r2, [r2, #0]
 80046a4:	430b      	orrs	r3, r1
 80046a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	69db      	ldr	r3, [r3, #28]
 80046ae:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80046b2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	495c      	ldr	r1, [pc, #368]	@ (800482c <HAL_I2C_Init+0x274>)
 80046bc:	428b      	cmp	r3, r1
 80046be:	d819      	bhi.n	80046f4 <HAL_I2C_Init+0x13c>
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	1e59      	subs	r1, r3, #1
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	005b      	lsls	r3, r3, #1
 80046ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80046ce:	1c59      	adds	r1, r3, #1
 80046d0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80046d4:	400b      	ands	r3, r1
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00a      	beq.n	80046f0 <HAL_I2C_Init+0x138>
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	1e59      	subs	r1, r3, #1
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	005b      	lsls	r3, r3, #1
 80046e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80046e8:	3301      	adds	r3, #1
 80046ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046ee:	e051      	b.n	8004794 <HAL_I2C_Init+0x1dc>
 80046f0:	2304      	movs	r3, #4
 80046f2:	e04f      	b.n	8004794 <HAL_I2C_Init+0x1dc>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d111      	bne.n	8004720 <HAL_I2C_Init+0x168>
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	1e58      	subs	r0, r3, #1
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6859      	ldr	r1, [r3, #4]
 8004704:	460b      	mov	r3, r1
 8004706:	005b      	lsls	r3, r3, #1
 8004708:	440b      	add	r3, r1
 800470a:	fbb0 f3f3 	udiv	r3, r0, r3
 800470e:	3301      	adds	r3, #1
 8004710:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004714:	2b00      	cmp	r3, #0
 8004716:	bf0c      	ite	eq
 8004718:	2301      	moveq	r3, #1
 800471a:	2300      	movne	r3, #0
 800471c:	b2db      	uxtb	r3, r3
 800471e:	e012      	b.n	8004746 <HAL_I2C_Init+0x18e>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	1e58      	subs	r0, r3, #1
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6859      	ldr	r1, [r3, #4]
 8004728:	460b      	mov	r3, r1
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	440b      	add	r3, r1
 800472e:	0099      	lsls	r1, r3, #2
 8004730:	440b      	add	r3, r1
 8004732:	fbb0 f3f3 	udiv	r3, r0, r3
 8004736:	3301      	adds	r3, #1
 8004738:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800473c:	2b00      	cmp	r3, #0
 800473e:	bf0c      	ite	eq
 8004740:	2301      	moveq	r3, #1
 8004742:	2300      	movne	r3, #0
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b00      	cmp	r3, #0
 8004748:	d001      	beq.n	800474e <HAL_I2C_Init+0x196>
 800474a:	2301      	movs	r3, #1
 800474c:	e022      	b.n	8004794 <HAL_I2C_Init+0x1dc>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d10e      	bne.n	8004774 <HAL_I2C_Init+0x1bc>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	1e58      	subs	r0, r3, #1
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6859      	ldr	r1, [r3, #4]
 800475e:	460b      	mov	r3, r1
 8004760:	005b      	lsls	r3, r3, #1
 8004762:	440b      	add	r3, r1
 8004764:	fbb0 f3f3 	udiv	r3, r0, r3
 8004768:	3301      	adds	r3, #1
 800476a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800476e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004772:	e00f      	b.n	8004794 <HAL_I2C_Init+0x1dc>
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	1e58      	subs	r0, r3, #1
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6859      	ldr	r1, [r3, #4]
 800477c:	460b      	mov	r3, r1
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	440b      	add	r3, r1
 8004782:	0099      	lsls	r1, r3, #2
 8004784:	440b      	add	r3, r1
 8004786:	fbb0 f3f3 	udiv	r3, r0, r3
 800478a:	3301      	adds	r3, #1
 800478c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004790:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004794:	6879      	ldr	r1, [r7, #4]
 8004796:	6809      	ldr	r1, [r1, #0]
 8004798:	4313      	orrs	r3, r2
 800479a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	69da      	ldr	r2, [r3, #28]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a1b      	ldr	r3, [r3, #32]
 80047ae:	431a      	orrs	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	430a      	orrs	r2, r1
 80047b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80047c2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	6911      	ldr	r1, [r2, #16]
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	68d2      	ldr	r2, [r2, #12]
 80047ce:	4311      	orrs	r1, r2
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	6812      	ldr	r2, [r2, #0]
 80047d4:	430b      	orrs	r3, r1
 80047d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	695a      	ldr	r2, [r3, #20]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	431a      	orrs	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	430a      	orrs	r2, r1
 80047f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f042 0201 	orr.w	r2, r2, #1
 8004802:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2220      	movs	r2, #32
 800480e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3710      	adds	r7, #16
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	000186a0 	.word	0x000186a0
 8004830:	001e847f 	.word	0x001e847f
 8004834:	003d08ff 	.word	0x003d08ff
 8004838:	431bde83 	.word	0x431bde83
 800483c:	10624dd3 	.word	0x10624dd3

08004840 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b088      	sub	sp, #32
 8004844:	af02      	add	r7, sp, #8
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	607a      	str	r2, [r7, #4]
 800484a:	461a      	mov	r2, r3
 800484c:	460b      	mov	r3, r1
 800484e:	817b      	strh	r3, [r7, #10]
 8004850:	4613      	mov	r3, r2
 8004852:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004854:	f7fe fbaa 	bl	8002fac <HAL_GetTick>
 8004858:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004860:	b2db      	uxtb	r3, r3
 8004862:	2b20      	cmp	r3, #32
 8004864:	f040 80e0 	bne.w	8004a28 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	9300      	str	r3, [sp, #0]
 800486c:	2319      	movs	r3, #25
 800486e:	2201      	movs	r2, #1
 8004870:	4970      	ldr	r1, [pc, #448]	@ (8004a34 <HAL_I2C_Master_Transmit+0x1f4>)
 8004872:	68f8      	ldr	r0, [r7, #12]
 8004874:	f000 fa92 	bl	8004d9c <I2C_WaitOnFlagUntilTimeout>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d001      	beq.n	8004882 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800487e:	2302      	movs	r3, #2
 8004880:	e0d3      	b.n	8004a2a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004888:	2b01      	cmp	r3, #1
 800488a:	d101      	bne.n	8004890 <HAL_I2C_Master_Transmit+0x50>
 800488c:	2302      	movs	r3, #2
 800488e:	e0cc      	b.n	8004a2a <HAL_I2C_Master_Transmit+0x1ea>
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0301 	and.w	r3, r3, #1
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d007      	beq.n	80048b6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f042 0201 	orr.w	r2, r2, #1
 80048b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80048c4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2221      	movs	r2, #33	@ 0x21
 80048ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2210      	movs	r2, #16
 80048d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2200      	movs	r2, #0
 80048da:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	893a      	ldrh	r2, [r7, #8]
 80048e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048ec:	b29a      	uxth	r2, r3
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	4a50      	ldr	r2, [pc, #320]	@ (8004a38 <HAL_I2C_Master_Transmit+0x1f8>)
 80048f6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80048f8:	8979      	ldrh	r1, [r7, #10]
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	6a3a      	ldr	r2, [r7, #32]
 80048fe:	68f8      	ldr	r0, [r7, #12]
 8004900:	f000 f9ca 	bl	8004c98 <I2C_MasterRequestWrite>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d001      	beq.n	800490e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e08d      	b.n	8004a2a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800490e:	2300      	movs	r3, #0
 8004910:	613b      	str	r3, [r7, #16]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	695b      	ldr	r3, [r3, #20]
 8004918:	613b      	str	r3, [r7, #16]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	699b      	ldr	r3, [r3, #24]
 8004920:	613b      	str	r3, [r7, #16]
 8004922:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004924:	e066      	b.n	80049f4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004926:	697a      	ldr	r2, [r7, #20]
 8004928:	6a39      	ldr	r1, [r7, #32]
 800492a:	68f8      	ldr	r0, [r7, #12]
 800492c:	f000 fb50 	bl	8004fd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d00d      	beq.n	8004952 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800493a:	2b04      	cmp	r3, #4
 800493c:	d107      	bne.n	800494e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800494c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e06b      	b.n	8004a2a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004956:	781a      	ldrb	r2, [r3, #0]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004962:	1c5a      	adds	r2, r3, #1
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800496c:	b29b      	uxth	r3, r3
 800496e:	3b01      	subs	r3, #1
 8004970:	b29a      	uxth	r2, r3
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800497a:	3b01      	subs	r3, #1
 800497c:	b29a      	uxth	r2, r3
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	695b      	ldr	r3, [r3, #20]
 8004988:	f003 0304 	and.w	r3, r3, #4
 800498c:	2b04      	cmp	r3, #4
 800498e:	d11b      	bne.n	80049c8 <HAL_I2C_Master_Transmit+0x188>
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004994:	2b00      	cmp	r3, #0
 8004996:	d017      	beq.n	80049c8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800499c:	781a      	ldrb	r2, [r3, #0]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a8:	1c5a      	adds	r2, r3, #1
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	3b01      	subs	r3, #1
 80049b6:	b29a      	uxth	r2, r3
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049c0:	3b01      	subs	r3, #1
 80049c2:	b29a      	uxth	r2, r3
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049c8:	697a      	ldr	r2, [r7, #20]
 80049ca:	6a39      	ldr	r1, [r7, #32]
 80049cc:	68f8      	ldr	r0, [r7, #12]
 80049ce:	f000 fb47 	bl	8005060 <I2C_WaitOnBTFFlagUntilTimeout>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d00d      	beq.n	80049f4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049dc:	2b04      	cmp	r3, #4
 80049de:	d107      	bne.n	80049f0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049ee:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e01a      	b.n	8004a2a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d194      	bne.n	8004926 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2220      	movs	r2, #32
 8004a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004a24:	2300      	movs	r3, #0
 8004a26:	e000      	b.n	8004a2a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004a28:	2302      	movs	r3, #2
  }
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3718      	adds	r7, #24
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	00100002 	.word	0x00100002
 8004a38:	ffff0000 	.word	0xffff0000

08004a3c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b08a      	sub	sp, #40	@ 0x28
 8004a40:	af02      	add	r7, sp, #8
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	607a      	str	r2, [r7, #4]
 8004a46:	603b      	str	r3, [r7, #0]
 8004a48:	460b      	mov	r3, r1
 8004a4a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004a4c:	f7fe faae 	bl	8002fac <HAL_GetTick>
 8004a50:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004a52:	2300      	movs	r3, #0
 8004a54:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	2b20      	cmp	r3, #32
 8004a60:	f040 8111 	bne.w	8004c86 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	9300      	str	r3, [sp, #0]
 8004a68:	2319      	movs	r3, #25
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	4988      	ldr	r1, [pc, #544]	@ (8004c90 <HAL_I2C_IsDeviceReady+0x254>)
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	f000 f994 	bl	8004d9c <I2C_WaitOnFlagUntilTimeout>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d001      	beq.n	8004a7e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004a7a:	2302      	movs	r3, #2
 8004a7c:	e104      	b.n	8004c88 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d101      	bne.n	8004a8c <HAL_I2C_IsDeviceReady+0x50>
 8004a88:	2302      	movs	r3, #2
 8004a8a:	e0fd      	b.n	8004c88 <HAL_I2C_IsDeviceReady+0x24c>
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0301 	and.w	r3, r3, #1
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d007      	beq.n	8004ab2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f042 0201 	orr.w	r2, r2, #1
 8004ab0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ac0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2224      	movs	r2, #36	@ 0x24
 8004ac6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2200      	movs	r2, #0
 8004ace:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	4a70      	ldr	r2, [pc, #448]	@ (8004c94 <HAL_I2C_IsDeviceReady+0x258>)
 8004ad4:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ae4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	9300      	str	r3, [sp, #0]
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004af2:	68f8      	ldr	r0, [r7, #12]
 8004af4:	f000 f952 	bl	8004d9c <I2C_WaitOnFlagUntilTimeout>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00d      	beq.n	8004b1a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b0c:	d103      	bne.n	8004b16 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b14:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e0b6      	b.n	8004c88 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b1a:	897b      	ldrh	r3, [r7, #10]
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	461a      	mov	r2, r3
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004b28:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004b2a:	f7fe fa3f 	bl	8002fac <HAL_GetTick>
 8004b2e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	695b      	ldr	r3, [r3, #20]
 8004b36:	f003 0302 	and.w	r3, r3, #2
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	bf0c      	ite	eq
 8004b3e:	2301      	moveq	r3, #1
 8004b40:	2300      	movne	r3, #0
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	695b      	ldr	r3, [r3, #20]
 8004b4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b54:	bf0c      	ite	eq
 8004b56:	2301      	moveq	r3, #1
 8004b58:	2300      	movne	r3, #0
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004b5e:	e025      	b.n	8004bac <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004b60:	f7fe fa24 	bl	8002fac <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	683a      	ldr	r2, [r7, #0]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d302      	bcc.n	8004b76 <HAL_I2C_IsDeviceReady+0x13a>
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d103      	bne.n	8004b7e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	22a0      	movs	r2, #160	@ 0xa0
 8004b7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	695b      	ldr	r3, [r3, #20]
 8004b84:	f003 0302 	and.w	r3, r3, #2
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	bf0c      	ite	eq
 8004b8c:	2301      	moveq	r3, #1
 8004b8e:	2300      	movne	r3, #0
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	695b      	ldr	r3, [r3, #20]
 8004b9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ba2:	bf0c      	ite	eq
 8004ba4:	2301      	moveq	r3, #1
 8004ba6:	2300      	movne	r3, #0
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	2ba0      	cmp	r3, #160	@ 0xa0
 8004bb6:	d005      	beq.n	8004bc4 <HAL_I2C_IsDeviceReady+0x188>
 8004bb8:	7dfb      	ldrb	r3, [r7, #23]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d102      	bne.n	8004bc4 <HAL_I2C_IsDeviceReady+0x188>
 8004bbe:	7dbb      	ldrb	r3, [r7, #22]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d0cd      	beq.n	8004b60 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2220      	movs	r2, #32
 8004bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	695b      	ldr	r3, [r3, #20]
 8004bd2:	f003 0302 	and.w	r3, r3, #2
 8004bd6:	2b02      	cmp	r3, #2
 8004bd8:	d129      	bne.n	8004c2e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004be8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bea:	2300      	movs	r3, #0
 8004bec:	613b      	str	r3, [r7, #16]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	695b      	ldr	r3, [r3, #20]
 8004bf4:	613b      	str	r3, [r7, #16]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	613b      	str	r3, [r7, #16]
 8004bfe:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	9300      	str	r3, [sp, #0]
 8004c04:	2319      	movs	r3, #25
 8004c06:	2201      	movs	r2, #1
 8004c08:	4921      	ldr	r1, [pc, #132]	@ (8004c90 <HAL_I2C_IsDeviceReady+0x254>)
 8004c0a:	68f8      	ldr	r0, [r7, #12]
 8004c0c:	f000 f8c6 	bl	8004d9c <I2C_WaitOnFlagUntilTimeout>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d001      	beq.n	8004c1a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e036      	b.n	8004c88 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2220      	movs	r2, #32
 8004c1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	e02c      	b.n	8004c88 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c3c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004c46:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	9300      	str	r3, [sp, #0]
 8004c4c:	2319      	movs	r3, #25
 8004c4e:	2201      	movs	r2, #1
 8004c50:	490f      	ldr	r1, [pc, #60]	@ (8004c90 <HAL_I2C_IsDeviceReady+0x254>)
 8004c52:	68f8      	ldr	r0, [r7, #12]
 8004c54:	f000 f8a2 	bl	8004d9c <I2C_WaitOnFlagUntilTimeout>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d001      	beq.n	8004c62 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e012      	b.n	8004c88 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004c62:	69bb      	ldr	r3, [r7, #24]
 8004c64:	3301      	adds	r3, #1
 8004c66:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004c68:	69ba      	ldr	r2, [r7, #24]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	f4ff af32 	bcc.w	8004ad6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2220      	movs	r2, #32
 8004c76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e000      	b.n	8004c88 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004c86:	2302      	movs	r3, #2
  }
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3720      	adds	r7, #32
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	00100002 	.word	0x00100002
 8004c94:	ffff0000 	.word	0xffff0000

08004c98 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b088      	sub	sp, #32
 8004c9c:	af02      	add	r7, sp, #8
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	607a      	str	r2, [r7, #4]
 8004ca2:	603b      	str	r3, [r7, #0]
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cac:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	2b08      	cmp	r3, #8
 8004cb2:	d006      	beq.n	8004cc2 <I2C_MasterRequestWrite+0x2a>
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d003      	beq.n	8004cc2 <I2C_MasterRequestWrite+0x2a>
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004cc0:	d108      	bne.n	8004cd4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004cd0:	601a      	str	r2, [r3, #0]
 8004cd2:	e00b      	b.n	8004cec <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cd8:	2b12      	cmp	r3, #18
 8004cda:	d107      	bne.n	8004cec <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004cea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	9300      	str	r3, [sp, #0]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004cf8:	68f8      	ldr	r0, [r7, #12]
 8004cfa:	f000 f84f 	bl	8004d9c <I2C_WaitOnFlagUntilTimeout>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d00d      	beq.n	8004d20 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d12:	d103      	bne.n	8004d1c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d1a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e035      	b.n	8004d8c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d28:	d108      	bne.n	8004d3c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d2a:	897b      	ldrh	r3, [r7, #10]
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	461a      	mov	r2, r3
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004d38:	611a      	str	r2, [r3, #16]
 8004d3a:	e01b      	b.n	8004d74 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004d3c:	897b      	ldrh	r3, [r7, #10]
 8004d3e:	11db      	asrs	r3, r3, #7
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	f003 0306 	and.w	r3, r3, #6
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	f063 030f 	orn	r3, r3, #15
 8004d4c:	b2da      	uxtb	r2, r3
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	490e      	ldr	r1, [pc, #56]	@ (8004d94 <I2C_MasterRequestWrite+0xfc>)
 8004d5a:	68f8      	ldr	r0, [r7, #12]
 8004d5c:	f000 f898 	bl	8004e90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d001      	beq.n	8004d6a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e010      	b.n	8004d8c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004d6a:	897b      	ldrh	r3, [r7, #10]
 8004d6c:	b2da      	uxtb	r2, r3
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	4907      	ldr	r1, [pc, #28]	@ (8004d98 <I2C_MasterRequestWrite+0x100>)
 8004d7a:	68f8      	ldr	r0, [r7, #12]
 8004d7c:	f000 f888 	bl	8004e90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d001      	beq.n	8004d8a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e000      	b.n	8004d8c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3718      	adds	r7, #24
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	00010008 	.word	0x00010008
 8004d98:	00010002 	.word	0x00010002

08004d9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	603b      	str	r3, [r7, #0]
 8004da8:	4613      	mov	r3, r2
 8004daa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004dac:	e048      	b.n	8004e40 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004db4:	d044      	beq.n	8004e40 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004db6:	f7fe f8f9 	bl	8002fac <HAL_GetTick>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	69bb      	ldr	r3, [r7, #24]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	683a      	ldr	r2, [r7, #0]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d302      	bcc.n	8004dcc <I2C_WaitOnFlagUntilTimeout+0x30>
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d139      	bne.n	8004e40 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	0c1b      	lsrs	r3, r3, #16
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d10d      	bne.n	8004df2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	695b      	ldr	r3, [r3, #20]
 8004ddc:	43da      	mvns	r2, r3
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	4013      	ands	r3, r2
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	bf0c      	ite	eq
 8004de8:	2301      	moveq	r3, #1
 8004dea:	2300      	movne	r3, #0
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	461a      	mov	r2, r3
 8004df0:	e00c      	b.n	8004e0c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	699b      	ldr	r3, [r3, #24]
 8004df8:	43da      	mvns	r2, r3
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	bf0c      	ite	eq
 8004e04:	2301      	moveq	r3, #1
 8004e06:	2300      	movne	r3, #0
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	79fb      	ldrb	r3, [r7, #7]
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d116      	bne.n	8004e40 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2200      	movs	r2, #0
 8004e16:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2220      	movs	r2, #32
 8004e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e2c:	f043 0220 	orr.w	r2, r3, #32
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e023      	b.n	8004e88 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	0c1b      	lsrs	r3, r3, #16
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d10d      	bne.n	8004e66 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	695b      	ldr	r3, [r3, #20]
 8004e50:	43da      	mvns	r2, r3
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	4013      	ands	r3, r2
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	bf0c      	ite	eq
 8004e5c:	2301      	moveq	r3, #1
 8004e5e:	2300      	movne	r3, #0
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	461a      	mov	r2, r3
 8004e64:	e00c      	b.n	8004e80 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	699b      	ldr	r3, [r3, #24]
 8004e6c:	43da      	mvns	r2, r3
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	4013      	ands	r3, r2
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	bf0c      	ite	eq
 8004e78:	2301      	moveq	r3, #1
 8004e7a:	2300      	movne	r3, #0
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	461a      	mov	r2, r3
 8004e80:	79fb      	ldrb	r3, [r7, #7]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d093      	beq.n	8004dae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e86:	2300      	movs	r3, #0
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3710      	adds	r7, #16
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	607a      	str	r2, [r7, #4]
 8004e9c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e9e:	e071      	b.n	8004f84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	695b      	ldr	r3, [r3, #20]
 8004ea6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004eaa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004eae:	d123      	bne.n	8004ef8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ebe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004ec8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2220      	movs	r2, #32
 8004ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ee4:	f043 0204 	orr.w	r2, r3, #4
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e067      	b.n	8004fc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004efe:	d041      	beq.n	8004f84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f00:	f7fe f854 	bl	8002fac <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d302      	bcc.n	8004f16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d136      	bne.n	8004f84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	0c1b      	lsrs	r3, r3, #16
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d10c      	bne.n	8004f3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	695b      	ldr	r3, [r3, #20]
 8004f26:	43da      	mvns	r2, r3
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	bf14      	ite	ne
 8004f32:	2301      	movne	r3, #1
 8004f34:	2300      	moveq	r3, #0
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	e00b      	b.n	8004f52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	699b      	ldr	r3, [r3, #24]
 8004f40:	43da      	mvns	r2, r3
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	4013      	ands	r3, r2
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	bf14      	ite	ne
 8004f4c:	2301      	movne	r3, #1
 8004f4e:	2300      	moveq	r3, #0
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d016      	beq.n	8004f84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2220      	movs	r2, #32
 8004f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f70:	f043 0220 	orr.w	r2, r3, #32
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e021      	b.n	8004fc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	0c1b      	lsrs	r3, r3, #16
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d10c      	bne.n	8004fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	695b      	ldr	r3, [r3, #20]
 8004f94:	43da      	mvns	r2, r3
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	4013      	ands	r3, r2
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	bf14      	ite	ne
 8004fa0:	2301      	movne	r3, #1
 8004fa2:	2300      	moveq	r3, #0
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	e00b      	b.n	8004fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	699b      	ldr	r3, [r3, #24]
 8004fae:	43da      	mvns	r2, r3
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	bf14      	ite	ne
 8004fba:	2301      	movne	r3, #1
 8004fbc:	2300      	moveq	r3, #0
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	f47f af6d 	bne.w	8004ea0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004fc6:	2300      	movs	r3, #0
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3710      	adds	r7, #16
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004fdc:	e034      	b.n	8005048 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004fde:	68f8      	ldr	r0, [r7, #12]
 8004fe0:	f000 f886 	bl	80050f0 <I2C_IsAcknowledgeFailed>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d001      	beq.n	8004fee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e034      	b.n	8005058 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004ff4:	d028      	beq.n	8005048 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ff6:	f7fd ffd9 	bl	8002fac <HAL_GetTick>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	68ba      	ldr	r2, [r7, #8]
 8005002:	429a      	cmp	r2, r3
 8005004:	d302      	bcc.n	800500c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d11d      	bne.n	8005048 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	695b      	ldr	r3, [r3, #20]
 8005012:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005016:	2b80      	cmp	r3, #128	@ 0x80
 8005018:	d016      	beq.n	8005048 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2200      	movs	r2, #0
 800501e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2220      	movs	r2, #32
 8005024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2200      	movs	r2, #0
 800502c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005034:	f043 0220 	orr.w	r2, r3, #32
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e007      	b.n	8005058 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	695b      	ldr	r3, [r3, #20]
 800504e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005052:	2b80      	cmp	r3, #128	@ 0x80
 8005054:	d1c3      	bne.n	8004fde <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005056:	2300      	movs	r3, #0
}
 8005058:	4618      	mov	r0, r3
 800505a:	3710      	adds	r7, #16
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800506c:	e034      	b.n	80050d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800506e:	68f8      	ldr	r0, [r7, #12]
 8005070:	f000 f83e 	bl	80050f0 <I2C_IsAcknowledgeFailed>
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d001      	beq.n	800507e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e034      	b.n	80050e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005084:	d028      	beq.n	80050d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005086:	f7fd ff91 	bl	8002fac <HAL_GetTick>
 800508a:	4602      	mov	r2, r0
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	68ba      	ldr	r2, [r7, #8]
 8005092:	429a      	cmp	r2, r3
 8005094:	d302      	bcc.n	800509c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d11d      	bne.n	80050d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	695b      	ldr	r3, [r3, #20]
 80050a2:	f003 0304 	and.w	r3, r3, #4
 80050a6:	2b04      	cmp	r3, #4
 80050a8:	d016      	beq.n	80050d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2200      	movs	r2, #0
 80050ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2220      	movs	r2, #32
 80050b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050c4:	f043 0220 	orr.w	r2, r3, #32
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e007      	b.n	80050e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	695b      	ldr	r3, [r3, #20]
 80050de:	f003 0304 	and.w	r3, r3, #4
 80050e2:	2b04      	cmp	r3, #4
 80050e4:	d1c3      	bne.n	800506e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3710      	adds	r7, #16
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	695b      	ldr	r3, [r3, #20]
 80050fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005102:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005106:	d11b      	bne.n	8005140 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005110:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2220      	movs	r2, #32
 800511c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800512c:	f043 0204 	orr.w	r2, r3, #4
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e000      	b.n	8005142 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	370c      	adds	r7, #12
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr

0800514e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800514e:	b480      	push	{r7}
 8005150:	b083      	sub	sp, #12
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
 8005156:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800515e:	b2db      	uxtb	r3, r3
 8005160:	2b20      	cmp	r3, #32
 8005162:	d129      	bne.n	80051b8 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2224      	movs	r2, #36	@ 0x24
 8005168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f022 0201 	bic.w	r2, r2, #1
 800517a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f022 0210 	bic.w	r2, r2, #16
 800518a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	683a      	ldr	r2, [r7, #0]
 8005198:	430a      	orrs	r2, r1
 800519a:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f042 0201 	orr.w	r2, r2, #1
 80051aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2220      	movs	r2, #32
 80051b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80051b4:	2300      	movs	r3, #0
 80051b6:	e000      	b.n	80051ba <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80051b8:	2302      	movs	r3, #2
  }
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	370c      	adds	r7, #12
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr

080051c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80051c6:	b480      	push	{r7}
 80051c8:	b085      	sub	sp, #20
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
 80051ce:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80051d0:	2300      	movs	r3, #0
 80051d2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	2b20      	cmp	r3, #32
 80051de:	d12a      	bne.n	8005236 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2224      	movs	r2, #36	@ 0x24
 80051e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f022 0201 	bic.w	r2, r2, #1
 80051f6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051fe:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005200:	89fb      	ldrh	r3, [r7, #14]
 8005202:	f023 030f 	bic.w	r3, r3, #15
 8005206:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	b29a      	uxth	r2, r3
 800520c:	89fb      	ldrh	r3, [r7, #14]
 800520e:	4313      	orrs	r3, r2
 8005210:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	89fa      	ldrh	r2, [r7, #14]
 8005218:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f042 0201 	orr.w	r2, r2, #1
 8005228:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2220      	movs	r2, #32
 800522e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8005232:	2300      	movs	r3, #0
 8005234:	e000      	b.n	8005238 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005236:	2302      	movs	r3, #2
  }
}
 8005238:	4618      	mov	r0, r3
 800523a:	3714      	adds	r7, #20
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b086      	sub	sp, #24
 8005248:	af02      	add	r7, sp, #8
 800524a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d101      	bne.n	8005256 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e101      	b.n	800545a <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005262:	b2db      	uxtb	r3, r3
 8005264:	2b00      	cmp	r3, #0
 8005266:	d106      	bne.n	8005276 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f7fd fc95 	bl	8002ba0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2203      	movs	r2, #3
 800527a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005284:	d102      	bne.n	800528c <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4618      	mov	r0, r3
 8005292:	f001 ff8b 	bl	80071ac <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6818      	ldr	r0, [r3, #0]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	7c1a      	ldrb	r2, [r3, #16]
 800529e:	f88d 2000 	strb.w	r2, [sp]
 80052a2:	3304      	adds	r3, #4
 80052a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80052a6:	f001 ff1d 	bl	80070e4 <USB_CoreInit>
 80052aa:	4603      	mov	r3, r0
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d005      	beq.n	80052bc <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2202      	movs	r2, #2
 80052b4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	e0ce      	b.n	800545a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2100      	movs	r1, #0
 80052c2:	4618      	mov	r0, r3
 80052c4:	f001 ff83 	bl	80071ce <USB_SetCurrentMode>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d005      	beq.n	80052da <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2202      	movs	r2, #2
 80052d2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e0bf      	b.n	800545a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052da:	2300      	movs	r3, #0
 80052dc:	73fb      	strb	r3, [r7, #15]
 80052de:	e04a      	b.n	8005376 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80052e0:	7bfa      	ldrb	r2, [r7, #15]
 80052e2:	6879      	ldr	r1, [r7, #4]
 80052e4:	4613      	mov	r3, r2
 80052e6:	00db      	lsls	r3, r3, #3
 80052e8:	4413      	add	r3, r2
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	440b      	add	r3, r1
 80052ee:	3315      	adds	r3, #21
 80052f0:	2201      	movs	r2, #1
 80052f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80052f4:	7bfa      	ldrb	r2, [r7, #15]
 80052f6:	6879      	ldr	r1, [r7, #4]
 80052f8:	4613      	mov	r3, r2
 80052fa:	00db      	lsls	r3, r3, #3
 80052fc:	4413      	add	r3, r2
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	440b      	add	r3, r1
 8005302:	3314      	adds	r3, #20
 8005304:	7bfa      	ldrb	r2, [r7, #15]
 8005306:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005308:	7bfa      	ldrb	r2, [r7, #15]
 800530a:	7bfb      	ldrb	r3, [r7, #15]
 800530c:	b298      	uxth	r0, r3
 800530e:	6879      	ldr	r1, [r7, #4]
 8005310:	4613      	mov	r3, r2
 8005312:	00db      	lsls	r3, r3, #3
 8005314:	4413      	add	r3, r2
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	440b      	add	r3, r1
 800531a:	332e      	adds	r3, #46	@ 0x2e
 800531c:	4602      	mov	r2, r0
 800531e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005320:	7bfa      	ldrb	r2, [r7, #15]
 8005322:	6879      	ldr	r1, [r7, #4]
 8005324:	4613      	mov	r3, r2
 8005326:	00db      	lsls	r3, r3, #3
 8005328:	4413      	add	r3, r2
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	440b      	add	r3, r1
 800532e:	3318      	adds	r3, #24
 8005330:	2200      	movs	r2, #0
 8005332:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005334:	7bfa      	ldrb	r2, [r7, #15]
 8005336:	6879      	ldr	r1, [r7, #4]
 8005338:	4613      	mov	r3, r2
 800533a:	00db      	lsls	r3, r3, #3
 800533c:	4413      	add	r3, r2
 800533e:	009b      	lsls	r3, r3, #2
 8005340:	440b      	add	r3, r1
 8005342:	331c      	adds	r3, #28
 8005344:	2200      	movs	r2, #0
 8005346:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005348:	7bfa      	ldrb	r2, [r7, #15]
 800534a:	6879      	ldr	r1, [r7, #4]
 800534c:	4613      	mov	r3, r2
 800534e:	00db      	lsls	r3, r3, #3
 8005350:	4413      	add	r3, r2
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	440b      	add	r3, r1
 8005356:	3320      	adds	r3, #32
 8005358:	2200      	movs	r2, #0
 800535a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800535c:	7bfa      	ldrb	r2, [r7, #15]
 800535e:	6879      	ldr	r1, [r7, #4]
 8005360:	4613      	mov	r3, r2
 8005362:	00db      	lsls	r3, r3, #3
 8005364:	4413      	add	r3, r2
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	440b      	add	r3, r1
 800536a:	3324      	adds	r3, #36	@ 0x24
 800536c:	2200      	movs	r2, #0
 800536e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005370:	7bfb      	ldrb	r3, [r7, #15]
 8005372:	3301      	adds	r3, #1
 8005374:	73fb      	strb	r3, [r7, #15]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	791b      	ldrb	r3, [r3, #4]
 800537a:	7bfa      	ldrb	r2, [r7, #15]
 800537c:	429a      	cmp	r2, r3
 800537e:	d3af      	bcc.n	80052e0 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005380:	2300      	movs	r3, #0
 8005382:	73fb      	strb	r3, [r7, #15]
 8005384:	e044      	b.n	8005410 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005386:	7bfa      	ldrb	r2, [r7, #15]
 8005388:	6879      	ldr	r1, [r7, #4]
 800538a:	4613      	mov	r3, r2
 800538c:	00db      	lsls	r3, r3, #3
 800538e:	4413      	add	r3, r2
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	440b      	add	r3, r1
 8005394:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005398:	2200      	movs	r2, #0
 800539a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800539c:	7bfa      	ldrb	r2, [r7, #15]
 800539e:	6879      	ldr	r1, [r7, #4]
 80053a0:	4613      	mov	r3, r2
 80053a2:	00db      	lsls	r3, r3, #3
 80053a4:	4413      	add	r3, r2
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	440b      	add	r3, r1
 80053aa:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80053ae:	7bfa      	ldrb	r2, [r7, #15]
 80053b0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80053b2:	7bfa      	ldrb	r2, [r7, #15]
 80053b4:	6879      	ldr	r1, [r7, #4]
 80053b6:	4613      	mov	r3, r2
 80053b8:	00db      	lsls	r3, r3, #3
 80053ba:	4413      	add	r3, r2
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	440b      	add	r3, r1
 80053c0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80053c4:	2200      	movs	r2, #0
 80053c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80053c8:	7bfa      	ldrb	r2, [r7, #15]
 80053ca:	6879      	ldr	r1, [r7, #4]
 80053cc:	4613      	mov	r3, r2
 80053ce:	00db      	lsls	r3, r3, #3
 80053d0:	4413      	add	r3, r2
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	440b      	add	r3, r1
 80053d6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80053da:	2200      	movs	r2, #0
 80053dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80053de:	7bfa      	ldrb	r2, [r7, #15]
 80053e0:	6879      	ldr	r1, [r7, #4]
 80053e2:	4613      	mov	r3, r2
 80053e4:	00db      	lsls	r3, r3, #3
 80053e6:	4413      	add	r3, r2
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	440b      	add	r3, r1
 80053ec:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80053f0:	2200      	movs	r2, #0
 80053f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80053f4:	7bfa      	ldrb	r2, [r7, #15]
 80053f6:	6879      	ldr	r1, [r7, #4]
 80053f8:	4613      	mov	r3, r2
 80053fa:	00db      	lsls	r3, r3, #3
 80053fc:	4413      	add	r3, r2
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	440b      	add	r3, r1
 8005402:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005406:	2200      	movs	r2, #0
 8005408:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800540a:	7bfb      	ldrb	r3, [r7, #15]
 800540c:	3301      	adds	r3, #1
 800540e:	73fb      	strb	r3, [r7, #15]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	791b      	ldrb	r3, [r3, #4]
 8005414:	7bfa      	ldrb	r2, [r7, #15]
 8005416:	429a      	cmp	r2, r3
 8005418:	d3b5      	bcc.n	8005386 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6818      	ldr	r0, [r3, #0]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	7c1a      	ldrb	r2, [r3, #16]
 8005422:	f88d 2000 	strb.w	r2, [sp]
 8005426:	3304      	adds	r3, #4
 8005428:	cb0e      	ldmia	r3, {r1, r2, r3}
 800542a:	f001 ff1d 	bl	8007268 <USB_DevInit>
 800542e:	4603      	mov	r3, r0
 8005430:	2b00      	cmp	r3, #0
 8005432:	d005      	beq.n	8005440 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2202      	movs	r2, #2
 8005438:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e00c      	b.n	800545a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2201      	movs	r2, #1
 800544a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4618      	mov	r0, r3
 8005454:	f002 f8e5 	bl	8007622 <USB_DevDisconnect>

  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3710      	adds	r7, #16
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
	...

08005464 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b086      	sub	sp, #24
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d101      	bne.n	8005476 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e267      	b.n	8005946 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0301 	and.w	r3, r3, #1
 800547e:	2b00      	cmp	r3, #0
 8005480:	d075      	beq.n	800556e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005482:	4b88      	ldr	r3, [pc, #544]	@ (80056a4 <HAL_RCC_OscConfig+0x240>)
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f003 030c 	and.w	r3, r3, #12
 800548a:	2b04      	cmp	r3, #4
 800548c:	d00c      	beq.n	80054a8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800548e:	4b85      	ldr	r3, [pc, #532]	@ (80056a4 <HAL_RCC_OscConfig+0x240>)
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005496:	2b08      	cmp	r3, #8
 8005498:	d112      	bne.n	80054c0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800549a:	4b82      	ldr	r3, [pc, #520]	@ (80056a4 <HAL_RCC_OscConfig+0x240>)
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80054a6:	d10b      	bne.n	80054c0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054a8:	4b7e      	ldr	r3, [pc, #504]	@ (80056a4 <HAL_RCC_OscConfig+0x240>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d05b      	beq.n	800556c <HAL_RCC_OscConfig+0x108>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d157      	bne.n	800556c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e242      	b.n	8005946 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054c8:	d106      	bne.n	80054d8 <HAL_RCC_OscConfig+0x74>
 80054ca:	4b76      	ldr	r3, [pc, #472]	@ (80056a4 <HAL_RCC_OscConfig+0x240>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a75      	ldr	r2, [pc, #468]	@ (80056a4 <HAL_RCC_OscConfig+0x240>)
 80054d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054d4:	6013      	str	r3, [r2, #0]
 80054d6:	e01d      	b.n	8005514 <HAL_RCC_OscConfig+0xb0>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80054e0:	d10c      	bne.n	80054fc <HAL_RCC_OscConfig+0x98>
 80054e2:	4b70      	ldr	r3, [pc, #448]	@ (80056a4 <HAL_RCC_OscConfig+0x240>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a6f      	ldr	r2, [pc, #444]	@ (80056a4 <HAL_RCC_OscConfig+0x240>)
 80054e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80054ec:	6013      	str	r3, [r2, #0]
 80054ee:	4b6d      	ldr	r3, [pc, #436]	@ (80056a4 <HAL_RCC_OscConfig+0x240>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a6c      	ldr	r2, [pc, #432]	@ (80056a4 <HAL_RCC_OscConfig+0x240>)
 80054f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054f8:	6013      	str	r3, [r2, #0]
 80054fa:	e00b      	b.n	8005514 <HAL_RCC_OscConfig+0xb0>
 80054fc:	4b69      	ldr	r3, [pc, #420]	@ (80056a4 <HAL_RCC_OscConfig+0x240>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a68      	ldr	r2, [pc, #416]	@ (80056a4 <HAL_RCC_OscConfig+0x240>)
 8005502:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005506:	6013      	str	r3, [r2, #0]
 8005508:	4b66      	ldr	r3, [pc, #408]	@ (80056a4 <HAL_RCC_OscConfig+0x240>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a65      	ldr	r2, [pc, #404]	@ (80056a4 <HAL_RCC_OscConfig+0x240>)
 800550e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005512:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d013      	beq.n	8005544 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800551c:	f7fd fd46 	bl	8002fac <HAL_GetTick>
 8005520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005522:	e008      	b.n	8005536 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005524:	f7fd fd42 	bl	8002fac <HAL_GetTick>
 8005528:	4602      	mov	r2, r0
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	2b64      	cmp	r3, #100	@ 0x64
 8005530:	d901      	bls.n	8005536 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e207      	b.n	8005946 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005536:	4b5b      	ldr	r3, [pc, #364]	@ (80056a4 <HAL_RCC_OscConfig+0x240>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d0f0      	beq.n	8005524 <HAL_RCC_OscConfig+0xc0>
 8005542:	e014      	b.n	800556e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005544:	f7fd fd32 	bl	8002fac <HAL_GetTick>
 8005548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800554a:	e008      	b.n	800555e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800554c:	f7fd fd2e 	bl	8002fac <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	2b64      	cmp	r3, #100	@ 0x64
 8005558:	d901      	bls.n	800555e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800555a:	2303      	movs	r3, #3
 800555c:	e1f3      	b.n	8005946 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800555e:	4b51      	ldr	r3, [pc, #324]	@ (80056a4 <HAL_RCC_OscConfig+0x240>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005566:	2b00      	cmp	r3, #0
 8005568:	d1f0      	bne.n	800554c <HAL_RCC_OscConfig+0xe8>
 800556a:	e000      	b.n	800556e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800556c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 0302 	and.w	r3, r3, #2
 8005576:	2b00      	cmp	r3, #0
 8005578:	d063      	beq.n	8005642 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800557a:	4b4a      	ldr	r3, [pc, #296]	@ (80056a4 <HAL_RCC_OscConfig+0x240>)
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	f003 030c 	and.w	r3, r3, #12
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00b      	beq.n	800559e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005586:	4b47      	ldr	r3, [pc, #284]	@ (80056a4 <HAL_RCC_OscConfig+0x240>)
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800558e:	2b08      	cmp	r3, #8
 8005590:	d11c      	bne.n	80055cc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005592:	4b44      	ldr	r3, [pc, #272]	@ (80056a4 <HAL_RCC_OscConfig+0x240>)
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800559a:	2b00      	cmp	r3, #0
 800559c:	d116      	bne.n	80055cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800559e:	4b41      	ldr	r3, [pc, #260]	@ (80056a4 <HAL_RCC_OscConfig+0x240>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0302 	and.w	r3, r3, #2
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d005      	beq.n	80055b6 <HAL_RCC_OscConfig+0x152>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d001      	beq.n	80055b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e1c7      	b.n	8005946 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055b6:	4b3b      	ldr	r3, [pc, #236]	@ (80056a4 <HAL_RCC_OscConfig+0x240>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	00db      	lsls	r3, r3, #3
 80055c4:	4937      	ldr	r1, [pc, #220]	@ (80056a4 <HAL_RCC_OscConfig+0x240>)
 80055c6:	4313      	orrs	r3, r2
 80055c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055ca:	e03a      	b.n	8005642 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d020      	beq.n	8005616 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80055d4:	4b34      	ldr	r3, [pc, #208]	@ (80056a8 <HAL_RCC_OscConfig+0x244>)
 80055d6:	2201      	movs	r2, #1
 80055d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055da:	f7fd fce7 	bl	8002fac <HAL_GetTick>
 80055de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055e0:	e008      	b.n	80055f4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055e2:	f7fd fce3 	bl	8002fac <HAL_GetTick>
 80055e6:	4602      	mov	r2, r0
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	1ad3      	subs	r3, r2, r3
 80055ec:	2b02      	cmp	r3, #2
 80055ee:	d901      	bls.n	80055f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80055f0:	2303      	movs	r3, #3
 80055f2:	e1a8      	b.n	8005946 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055f4:	4b2b      	ldr	r3, [pc, #172]	@ (80056a4 <HAL_RCC_OscConfig+0x240>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 0302 	and.w	r3, r3, #2
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d0f0      	beq.n	80055e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005600:	4b28      	ldr	r3, [pc, #160]	@ (80056a4 <HAL_RCC_OscConfig+0x240>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	691b      	ldr	r3, [r3, #16]
 800560c:	00db      	lsls	r3, r3, #3
 800560e:	4925      	ldr	r1, [pc, #148]	@ (80056a4 <HAL_RCC_OscConfig+0x240>)
 8005610:	4313      	orrs	r3, r2
 8005612:	600b      	str	r3, [r1, #0]
 8005614:	e015      	b.n	8005642 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005616:	4b24      	ldr	r3, [pc, #144]	@ (80056a8 <HAL_RCC_OscConfig+0x244>)
 8005618:	2200      	movs	r2, #0
 800561a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800561c:	f7fd fcc6 	bl	8002fac <HAL_GetTick>
 8005620:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005622:	e008      	b.n	8005636 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005624:	f7fd fcc2 	bl	8002fac <HAL_GetTick>
 8005628:	4602      	mov	r2, r0
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	2b02      	cmp	r3, #2
 8005630:	d901      	bls.n	8005636 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e187      	b.n	8005946 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005636:	4b1b      	ldr	r3, [pc, #108]	@ (80056a4 <HAL_RCC_OscConfig+0x240>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0302 	and.w	r3, r3, #2
 800563e:	2b00      	cmp	r3, #0
 8005640:	d1f0      	bne.n	8005624 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 0308 	and.w	r3, r3, #8
 800564a:	2b00      	cmp	r3, #0
 800564c:	d036      	beq.n	80056bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	695b      	ldr	r3, [r3, #20]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d016      	beq.n	8005684 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005656:	4b15      	ldr	r3, [pc, #84]	@ (80056ac <HAL_RCC_OscConfig+0x248>)
 8005658:	2201      	movs	r2, #1
 800565a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800565c:	f7fd fca6 	bl	8002fac <HAL_GetTick>
 8005660:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005662:	e008      	b.n	8005676 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005664:	f7fd fca2 	bl	8002fac <HAL_GetTick>
 8005668:	4602      	mov	r2, r0
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	2b02      	cmp	r3, #2
 8005670:	d901      	bls.n	8005676 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	e167      	b.n	8005946 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005676:	4b0b      	ldr	r3, [pc, #44]	@ (80056a4 <HAL_RCC_OscConfig+0x240>)
 8005678:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800567a:	f003 0302 	and.w	r3, r3, #2
 800567e:	2b00      	cmp	r3, #0
 8005680:	d0f0      	beq.n	8005664 <HAL_RCC_OscConfig+0x200>
 8005682:	e01b      	b.n	80056bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005684:	4b09      	ldr	r3, [pc, #36]	@ (80056ac <HAL_RCC_OscConfig+0x248>)
 8005686:	2200      	movs	r2, #0
 8005688:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800568a:	f7fd fc8f 	bl	8002fac <HAL_GetTick>
 800568e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005690:	e00e      	b.n	80056b0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005692:	f7fd fc8b 	bl	8002fac <HAL_GetTick>
 8005696:	4602      	mov	r2, r0
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	2b02      	cmp	r3, #2
 800569e:	d907      	bls.n	80056b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80056a0:	2303      	movs	r3, #3
 80056a2:	e150      	b.n	8005946 <HAL_RCC_OscConfig+0x4e2>
 80056a4:	40023800 	.word	0x40023800
 80056a8:	42470000 	.word	0x42470000
 80056ac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056b0:	4b88      	ldr	r3, [pc, #544]	@ (80058d4 <HAL_RCC_OscConfig+0x470>)
 80056b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056b4:	f003 0302 	and.w	r3, r3, #2
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d1ea      	bne.n	8005692 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 0304 	and.w	r3, r3, #4
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	f000 8097 	beq.w	80057f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056ca:	2300      	movs	r3, #0
 80056cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056ce:	4b81      	ldr	r3, [pc, #516]	@ (80058d4 <HAL_RCC_OscConfig+0x470>)
 80056d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d10f      	bne.n	80056fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056da:	2300      	movs	r3, #0
 80056dc:	60bb      	str	r3, [r7, #8]
 80056de:	4b7d      	ldr	r3, [pc, #500]	@ (80058d4 <HAL_RCC_OscConfig+0x470>)
 80056e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056e2:	4a7c      	ldr	r2, [pc, #496]	@ (80058d4 <HAL_RCC_OscConfig+0x470>)
 80056e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80056ea:	4b7a      	ldr	r3, [pc, #488]	@ (80058d4 <HAL_RCC_OscConfig+0x470>)
 80056ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056f2:	60bb      	str	r3, [r7, #8]
 80056f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056f6:	2301      	movs	r3, #1
 80056f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056fa:	4b77      	ldr	r3, [pc, #476]	@ (80058d8 <HAL_RCC_OscConfig+0x474>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005702:	2b00      	cmp	r3, #0
 8005704:	d118      	bne.n	8005738 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005706:	4b74      	ldr	r3, [pc, #464]	@ (80058d8 <HAL_RCC_OscConfig+0x474>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a73      	ldr	r2, [pc, #460]	@ (80058d8 <HAL_RCC_OscConfig+0x474>)
 800570c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005710:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005712:	f7fd fc4b 	bl	8002fac <HAL_GetTick>
 8005716:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005718:	e008      	b.n	800572c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800571a:	f7fd fc47 	bl	8002fac <HAL_GetTick>
 800571e:	4602      	mov	r2, r0
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	1ad3      	subs	r3, r2, r3
 8005724:	2b02      	cmp	r3, #2
 8005726:	d901      	bls.n	800572c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005728:	2303      	movs	r3, #3
 800572a:	e10c      	b.n	8005946 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800572c:	4b6a      	ldr	r3, [pc, #424]	@ (80058d8 <HAL_RCC_OscConfig+0x474>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005734:	2b00      	cmp	r3, #0
 8005736:	d0f0      	beq.n	800571a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	2b01      	cmp	r3, #1
 800573e:	d106      	bne.n	800574e <HAL_RCC_OscConfig+0x2ea>
 8005740:	4b64      	ldr	r3, [pc, #400]	@ (80058d4 <HAL_RCC_OscConfig+0x470>)
 8005742:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005744:	4a63      	ldr	r2, [pc, #396]	@ (80058d4 <HAL_RCC_OscConfig+0x470>)
 8005746:	f043 0301 	orr.w	r3, r3, #1
 800574a:	6713      	str	r3, [r2, #112]	@ 0x70
 800574c:	e01c      	b.n	8005788 <HAL_RCC_OscConfig+0x324>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	2b05      	cmp	r3, #5
 8005754:	d10c      	bne.n	8005770 <HAL_RCC_OscConfig+0x30c>
 8005756:	4b5f      	ldr	r3, [pc, #380]	@ (80058d4 <HAL_RCC_OscConfig+0x470>)
 8005758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800575a:	4a5e      	ldr	r2, [pc, #376]	@ (80058d4 <HAL_RCC_OscConfig+0x470>)
 800575c:	f043 0304 	orr.w	r3, r3, #4
 8005760:	6713      	str	r3, [r2, #112]	@ 0x70
 8005762:	4b5c      	ldr	r3, [pc, #368]	@ (80058d4 <HAL_RCC_OscConfig+0x470>)
 8005764:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005766:	4a5b      	ldr	r2, [pc, #364]	@ (80058d4 <HAL_RCC_OscConfig+0x470>)
 8005768:	f043 0301 	orr.w	r3, r3, #1
 800576c:	6713      	str	r3, [r2, #112]	@ 0x70
 800576e:	e00b      	b.n	8005788 <HAL_RCC_OscConfig+0x324>
 8005770:	4b58      	ldr	r3, [pc, #352]	@ (80058d4 <HAL_RCC_OscConfig+0x470>)
 8005772:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005774:	4a57      	ldr	r2, [pc, #348]	@ (80058d4 <HAL_RCC_OscConfig+0x470>)
 8005776:	f023 0301 	bic.w	r3, r3, #1
 800577a:	6713      	str	r3, [r2, #112]	@ 0x70
 800577c:	4b55      	ldr	r3, [pc, #340]	@ (80058d4 <HAL_RCC_OscConfig+0x470>)
 800577e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005780:	4a54      	ldr	r2, [pc, #336]	@ (80058d4 <HAL_RCC_OscConfig+0x470>)
 8005782:	f023 0304 	bic.w	r3, r3, #4
 8005786:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d015      	beq.n	80057bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005790:	f7fd fc0c 	bl	8002fac <HAL_GetTick>
 8005794:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005796:	e00a      	b.n	80057ae <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005798:	f7fd fc08 	bl	8002fac <HAL_GetTick>
 800579c:	4602      	mov	r2, r0
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d901      	bls.n	80057ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	e0cb      	b.n	8005946 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057ae:	4b49      	ldr	r3, [pc, #292]	@ (80058d4 <HAL_RCC_OscConfig+0x470>)
 80057b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057b2:	f003 0302 	and.w	r3, r3, #2
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d0ee      	beq.n	8005798 <HAL_RCC_OscConfig+0x334>
 80057ba:	e014      	b.n	80057e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057bc:	f7fd fbf6 	bl	8002fac <HAL_GetTick>
 80057c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057c2:	e00a      	b.n	80057da <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057c4:	f7fd fbf2 	bl	8002fac <HAL_GetTick>
 80057c8:	4602      	mov	r2, r0
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d901      	bls.n	80057da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80057d6:	2303      	movs	r3, #3
 80057d8:	e0b5      	b.n	8005946 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80057da:	4b3e      	ldr	r3, [pc, #248]	@ (80058d4 <HAL_RCC_OscConfig+0x470>)
 80057dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057de:	f003 0302 	and.w	r3, r3, #2
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d1ee      	bne.n	80057c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80057e6:	7dfb      	ldrb	r3, [r7, #23]
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d105      	bne.n	80057f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057ec:	4b39      	ldr	r3, [pc, #228]	@ (80058d4 <HAL_RCC_OscConfig+0x470>)
 80057ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057f0:	4a38      	ldr	r2, [pc, #224]	@ (80058d4 <HAL_RCC_OscConfig+0x470>)
 80057f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80057f6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	699b      	ldr	r3, [r3, #24]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	f000 80a1 	beq.w	8005944 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005802:	4b34      	ldr	r3, [pc, #208]	@ (80058d4 <HAL_RCC_OscConfig+0x470>)
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	f003 030c 	and.w	r3, r3, #12
 800580a:	2b08      	cmp	r3, #8
 800580c:	d05c      	beq.n	80058c8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	699b      	ldr	r3, [r3, #24]
 8005812:	2b02      	cmp	r3, #2
 8005814:	d141      	bne.n	800589a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005816:	4b31      	ldr	r3, [pc, #196]	@ (80058dc <HAL_RCC_OscConfig+0x478>)
 8005818:	2200      	movs	r2, #0
 800581a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800581c:	f7fd fbc6 	bl	8002fac <HAL_GetTick>
 8005820:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005822:	e008      	b.n	8005836 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005824:	f7fd fbc2 	bl	8002fac <HAL_GetTick>
 8005828:	4602      	mov	r2, r0
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	2b02      	cmp	r3, #2
 8005830:	d901      	bls.n	8005836 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e087      	b.n	8005946 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005836:	4b27      	ldr	r3, [pc, #156]	@ (80058d4 <HAL_RCC_OscConfig+0x470>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800583e:	2b00      	cmp	r3, #0
 8005840:	d1f0      	bne.n	8005824 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	69da      	ldr	r2, [r3, #28]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a1b      	ldr	r3, [r3, #32]
 800584a:	431a      	orrs	r2, r3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005850:	019b      	lsls	r3, r3, #6
 8005852:	431a      	orrs	r2, r3
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005858:	085b      	lsrs	r3, r3, #1
 800585a:	3b01      	subs	r3, #1
 800585c:	041b      	lsls	r3, r3, #16
 800585e:	431a      	orrs	r2, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005864:	061b      	lsls	r3, r3, #24
 8005866:	491b      	ldr	r1, [pc, #108]	@ (80058d4 <HAL_RCC_OscConfig+0x470>)
 8005868:	4313      	orrs	r3, r2
 800586a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800586c:	4b1b      	ldr	r3, [pc, #108]	@ (80058dc <HAL_RCC_OscConfig+0x478>)
 800586e:	2201      	movs	r2, #1
 8005870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005872:	f7fd fb9b 	bl	8002fac <HAL_GetTick>
 8005876:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005878:	e008      	b.n	800588c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800587a:	f7fd fb97 	bl	8002fac <HAL_GetTick>
 800587e:	4602      	mov	r2, r0
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	1ad3      	subs	r3, r2, r3
 8005884:	2b02      	cmp	r3, #2
 8005886:	d901      	bls.n	800588c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005888:	2303      	movs	r3, #3
 800588a:	e05c      	b.n	8005946 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800588c:	4b11      	ldr	r3, [pc, #68]	@ (80058d4 <HAL_RCC_OscConfig+0x470>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005894:	2b00      	cmp	r3, #0
 8005896:	d0f0      	beq.n	800587a <HAL_RCC_OscConfig+0x416>
 8005898:	e054      	b.n	8005944 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800589a:	4b10      	ldr	r3, [pc, #64]	@ (80058dc <HAL_RCC_OscConfig+0x478>)
 800589c:	2200      	movs	r2, #0
 800589e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058a0:	f7fd fb84 	bl	8002fac <HAL_GetTick>
 80058a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058a6:	e008      	b.n	80058ba <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058a8:	f7fd fb80 	bl	8002fac <HAL_GetTick>
 80058ac:	4602      	mov	r2, r0
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	2b02      	cmp	r3, #2
 80058b4:	d901      	bls.n	80058ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80058b6:	2303      	movs	r3, #3
 80058b8:	e045      	b.n	8005946 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058ba:	4b06      	ldr	r3, [pc, #24]	@ (80058d4 <HAL_RCC_OscConfig+0x470>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d1f0      	bne.n	80058a8 <HAL_RCC_OscConfig+0x444>
 80058c6:	e03d      	b.n	8005944 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	699b      	ldr	r3, [r3, #24]
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d107      	bne.n	80058e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e038      	b.n	8005946 <HAL_RCC_OscConfig+0x4e2>
 80058d4:	40023800 	.word	0x40023800
 80058d8:	40007000 	.word	0x40007000
 80058dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80058e0:	4b1b      	ldr	r3, [pc, #108]	@ (8005950 <HAL_RCC_OscConfig+0x4ec>)
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	699b      	ldr	r3, [r3, #24]
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d028      	beq.n	8005940 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d121      	bne.n	8005940 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005906:	429a      	cmp	r2, r3
 8005908:	d11a      	bne.n	8005940 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005910:	4013      	ands	r3, r2
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005916:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005918:	4293      	cmp	r3, r2
 800591a:	d111      	bne.n	8005940 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005926:	085b      	lsrs	r3, r3, #1
 8005928:	3b01      	subs	r3, #1
 800592a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800592c:	429a      	cmp	r2, r3
 800592e:	d107      	bne.n	8005940 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800593a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800593c:	429a      	cmp	r2, r3
 800593e:	d001      	beq.n	8005944 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	e000      	b.n	8005946 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005944:	2300      	movs	r3, #0
}
 8005946:	4618      	mov	r0, r3
 8005948:	3718      	adds	r7, #24
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop
 8005950:	40023800 	.word	0x40023800

08005954 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d101      	bne.n	8005968 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e0cc      	b.n	8005b02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005968:	4b68      	ldr	r3, [pc, #416]	@ (8005b0c <HAL_RCC_ClockConfig+0x1b8>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 030f 	and.w	r3, r3, #15
 8005970:	683a      	ldr	r2, [r7, #0]
 8005972:	429a      	cmp	r2, r3
 8005974:	d90c      	bls.n	8005990 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005976:	4b65      	ldr	r3, [pc, #404]	@ (8005b0c <HAL_RCC_ClockConfig+0x1b8>)
 8005978:	683a      	ldr	r2, [r7, #0]
 800597a:	b2d2      	uxtb	r2, r2
 800597c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800597e:	4b63      	ldr	r3, [pc, #396]	@ (8005b0c <HAL_RCC_ClockConfig+0x1b8>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 030f 	and.w	r3, r3, #15
 8005986:	683a      	ldr	r2, [r7, #0]
 8005988:	429a      	cmp	r2, r3
 800598a:	d001      	beq.n	8005990 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	e0b8      	b.n	8005b02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 0302 	and.w	r3, r3, #2
 8005998:	2b00      	cmp	r3, #0
 800599a:	d020      	beq.n	80059de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 0304 	and.w	r3, r3, #4
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d005      	beq.n	80059b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80059a8:	4b59      	ldr	r3, [pc, #356]	@ (8005b10 <HAL_RCC_ClockConfig+0x1bc>)
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	4a58      	ldr	r2, [pc, #352]	@ (8005b10 <HAL_RCC_ClockConfig+0x1bc>)
 80059ae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80059b2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 0308 	and.w	r3, r3, #8
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d005      	beq.n	80059cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80059c0:	4b53      	ldr	r3, [pc, #332]	@ (8005b10 <HAL_RCC_ClockConfig+0x1bc>)
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	4a52      	ldr	r2, [pc, #328]	@ (8005b10 <HAL_RCC_ClockConfig+0x1bc>)
 80059c6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80059ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059cc:	4b50      	ldr	r3, [pc, #320]	@ (8005b10 <HAL_RCC_ClockConfig+0x1bc>)
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	494d      	ldr	r1, [pc, #308]	@ (8005b10 <HAL_RCC_ClockConfig+0x1bc>)
 80059da:	4313      	orrs	r3, r2
 80059dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 0301 	and.w	r3, r3, #1
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d044      	beq.n	8005a74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d107      	bne.n	8005a02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059f2:	4b47      	ldr	r3, [pc, #284]	@ (8005b10 <HAL_RCC_ClockConfig+0x1bc>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d119      	bne.n	8005a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e07f      	b.n	8005b02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	2b02      	cmp	r3, #2
 8005a08:	d003      	beq.n	8005a12 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a0e:	2b03      	cmp	r3, #3
 8005a10:	d107      	bne.n	8005a22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a12:	4b3f      	ldr	r3, [pc, #252]	@ (8005b10 <HAL_RCC_ClockConfig+0x1bc>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d109      	bne.n	8005a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e06f      	b.n	8005b02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a22:	4b3b      	ldr	r3, [pc, #236]	@ (8005b10 <HAL_RCC_ClockConfig+0x1bc>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 0302 	and.w	r3, r3, #2
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d101      	bne.n	8005a32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e067      	b.n	8005b02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a32:	4b37      	ldr	r3, [pc, #220]	@ (8005b10 <HAL_RCC_ClockConfig+0x1bc>)
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	f023 0203 	bic.w	r2, r3, #3
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	4934      	ldr	r1, [pc, #208]	@ (8005b10 <HAL_RCC_ClockConfig+0x1bc>)
 8005a40:	4313      	orrs	r3, r2
 8005a42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a44:	f7fd fab2 	bl	8002fac <HAL_GetTick>
 8005a48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a4a:	e00a      	b.n	8005a62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a4c:	f7fd faae 	bl	8002fac <HAL_GetTick>
 8005a50:	4602      	mov	r2, r0
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	1ad3      	subs	r3, r2, r3
 8005a56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d901      	bls.n	8005a62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005a5e:	2303      	movs	r3, #3
 8005a60:	e04f      	b.n	8005b02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a62:	4b2b      	ldr	r3, [pc, #172]	@ (8005b10 <HAL_RCC_ClockConfig+0x1bc>)
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	f003 020c 	and.w	r2, r3, #12
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d1eb      	bne.n	8005a4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a74:	4b25      	ldr	r3, [pc, #148]	@ (8005b0c <HAL_RCC_ClockConfig+0x1b8>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 030f 	and.w	r3, r3, #15
 8005a7c:	683a      	ldr	r2, [r7, #0]
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d20c      	bcs.n	8005a9c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a82:	4b22      	ldr	r3, [pc, #136]	@ (8005b0c <HAL_RCC_ClockConfig+0x1b8>)
 8005a84:	683a      	ldr	r2, [r7, #0]
 8005a86:	b2d2      	uxtb	r2, r2
 8005a88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a8a:	4b20      	ldr	r3, [pc, #128]	@ (8005b0c <HAL_RCC_ClockConfig+0x1b8>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 030f 	and.w	r3, r3, #15
 8005a92:	683a      	ldr	r2, [r7, #0]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d001      	beq.n	8005a9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e032      	b.n	8005b02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 0304 	and.w	r3, r3, #4
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d008      	beq.n	8005aba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005aa8:	4b19      	ldr	r3, [pc, #100]	@ (8005b10 <HAL_RCC_ClockConfig+0x1bc>)
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	4916      	ldr	r1, [pc, #88]	@ (8005b10 <HAL_RCC_ClockConfig+0x1bc>)
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f003 0308 	and.w	r3, r3, #8
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d009      	beq.n	8005ada <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ac6:	4b12      	ldr	r3, [pc, #72]	@ (8005b10 <HAL_RCC_ClockConfig+0x1bc>)
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	00db      	lsls	r3, r3, #3
 8005ad4:	490e      	ldr	r1, [pc, #56]	@ (8005b10 <HAL_RCC_ClockConfig+0x1bc>)
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005ada:	f000 f821 	bl	8005b20 <HAL_RCC_GetSysClockFreq>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8005b10 <HAL_RCC_ClockConfig+0x1bc>)
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	091b      	lsrs	r3, r3, #4
 8005ae6:	f003 030f 	and.w	r3, r3, #15
 8005aea:	490a      	ldr	r1, [pc, #40]	@ (8005b14 <HAL_RCC_ClockConfig+0x1c0>)
 8005aec:	5ccb      	ldrb	r3, [r1, r3]
 8005aee:	fa22 f303 	lsr.w	r3, r2, r3
 8005af2:	4a09      	ldr	r2, [pc, #36]	@ (8005b18 <HAL_RCC_ClockConfig+0x1c4>)
 8005af4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005af6:	4b09      	ldr	r3, [pc, #36]	@ (8005b1c <HAL_RCC_ClockConfig+0x1c8>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4618      	mov	r0, r3
 8005afc:	f7fd fa12 	bl	8002f24 <HAL_InitTick>

  return HAL_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3710      	adds	r7, #16
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	40023c00 	.word	0x40023c00
 8005b10:	40023800 	.word	0x40023800
 8005b14:	0800be44 	.word	0x0800be44
 8005b18:	20000000 	.word	0x20000000
 8005b1c:	20000004 	.word	0x20000004

08005b20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b24:	b094      	sub	sp, #80	@ 0x50
 8005b26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005b30:	2300      	movs	r3, #0
 8005b32:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005b34:	2300      	movs	r3, #0
 8005b36:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b38:	4b79      	ldr	r3, [pc, #484]	@ (8005d20 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	f003 030c 	and.w	r3, r3, #12
 8005b40:	2b08      	cmp	r3, #8
 8005b42:	d00d      	beq.n	8005b60 <HAL_RCC_GetSysClockFreq+0x40>
 8005b44:	2b08      	cmp	r3, #8
 8005b46:	f200 80e1 	bhi.w	8005d0c <HAL_RCC_GetSysClockFreq+0x1ec>
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d002      	beq.n	8005b54 <HAL_RCC_GetSysClockFreq+0x34>
 8005b4e:	2b04      	cmp	r3, #4
 8005b50:	d003      	beq.n	8005b5a <HAL_RCC_GetSysClockFreq+0x3a>
 8005b52:	e0db      	b.n	8005d0c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b54:	4b73      	ldr	r3, [pc, #460]	@ (8005d24 <HAL_RCC_GetSysClockFreq+0x204>)
 8005b56:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005b58:	e0db      	b.n	8005d12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005b5a:	4b73      	ldr	r3, [pc, #460]	@ (8005d28 <HAL_RCC_GetSysClockFreq+0x208>)
 8005b5c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005b5e:	e0d8      	b.n	8005d12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005b60:	4b6f      	ldr	r3, [pc, #444]	@ (8005d20 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b68:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005b6a:	4b6d      	ldr	r3, [pc, #436]	@ (8005d20 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d063      	beq.n	8005c3e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b76:	4b6a      	ldr	r3, [pc, #424]	@ (8005d20 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	099b      	lsrs	r3, r3, #6
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b80:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b88:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b8e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005b92:	4622      	mov	r2, r4
 8005b94:	462b      	mov	r3, r5
 8005b96:	f04f 0000 	mov.w	r0, #0
 8005b9a:	f04f 0100 	mov.w	r1, #0
 8005b9e:	0159      	lsls	r1, r3, #5
 8005ba0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ba4:	0150      	lsls	r0, r2, #5
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	460b      	mov	r3, r1
 8005baa:	4621      	mov	r1, r4
 8005bac:	1a51      	subs	r1, r2, r1
 8005bae:	6139      	str	r1, [r7, #16]
 8005bb0:	4629      	mov	r1, r5
 8005bb2:	eb63 0301 	sbc.w	r3, r3, r1
 8005bb6:	617b      	str	r3, [r7, #20]
 8005bb8:	f04f 0200 	mov.w	r2, #0
 8005bbc:	f04f 0300 	mov.w	r3, #0
 8005bc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005bc4:	4659      	mov	r1, fp
 8005bc6:	018b      	lsls	r3, r1, #6
 8005bc8:	4651      	mov	r1, sl
 8005bca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005bce:	4651      	mov	r1, sl
 8005bd0:	018a      	lsls	r2, r1, #6
 8005bd2:	4651      	mov	r1, sl
 8005bd4:	ebb2 0801 	subs.w	r8, r2, r1
 8005bd8:	4659      	mov	r1, fp
 8005bda:	eb63 0901 	sbc.w	r9, r3, r1
 8005bde:	f04f 0200 	mov.w	r2, #0
 8005be2:	f04f 0300 	mov.w	r3, #0
 8005be6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005bea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005bee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005bf2:	4690      	mov	r8, r2
 8005bf4:	4699      	mov	r9, r3
 8005bf6:	4623      	mov	r3, r4
 8005bf8:	eb18 0303 	adds.w	r3, r8, r3
 8005bfc:	60bb      	str	r3, [r7, #8]
 8005bfe:	462b      	mov	r3, r5
 8005c00:	eb49 0303 	adc.w	r3, r9, r3
 8005c04:	60fb      	str	r3, [r7, #12]
 8005c06:	f04f 0200 	mov.w	r2, #0
 8005c0a:	f04f 0300 	mov.w	r3, #0
 8005c0e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005c12:	4629      	mov	r1, r5
 8005c14:	024b      	lsls	r3, r1, #9
 8005c16:	4621      	mov	r1, r4
 8005c18:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005c1c:	4621      	mov	r1, r4
 8005c1e:	024a      	lsls	r2, r1, #9
 8005c20:	4610      	mov	r0, r2
 8005c22:	4619      	mov	r1, r3
 8005c24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c26:	2200      	movs	r2, #0
 8005c28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005c2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005c30:	f7fb f88a 	bl	8000d48 <__aeabi_uldivmod>
 8005c34:	4602      	mov	r2, r0
 8005c36:	460b      	mov	r3, r1
 8005c38:	4613      	mov	r3, r2
 8005c3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c3c:	e058      	b.n	8005cf0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c3e:	4b38      	ldr	r3, [pc, #224]	@ (8005d20 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	099b      	lsrs	r3, r3, #6
 8005c44:	2200      	movs	r2, #0
 8005c46:	4618      	mov	r0, r3
 8005c48:	4611      	mov	r1, r2
 8005c4a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005c4e:	623b      	str	r3, [r7, #32]
 8005c50:	2300      	movs	r3, #0
 8005c52:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c54:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005c58:	4642      	mov	r2, r8
 8005c5a:	464b      	mov	r3, r9
 8005c5c:	f04f 0000 	mov.w	r0, #0
 8005c60:	f04f 0100 	mov.w	r1, #0
 8005c64:	0159      	lsls	r1, r3, #5
 8005c66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c6a:	0150      	lsls	r0, r2, #5
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	460b      	mov	r3, r1
 8005c70:	4641      	mov	r1, r8
 8005c72:	ebb2 0a01 	subs.w	sl, r2, r1
 8005c76:	4649      	mov	r1, r9
 8005c78:	eb63 0b01 	sbc.w	fp, r3, r1
 8005c7c:	f04f 0200 	mov.w	r2, #0
 8005c80:	f04f 0300 	mov.w	r3, #0
 8005c84:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005c88:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005c8c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005c90:	ebb2 040a 	subs.w	r4, r2, sl
 8005c94:	eb63 050b 	sbc.w	r5, r3, fp
 8005c98:	f04f 0200 	mov.w	r2, #0
 8005c9c:	f04f 0300 	mov.w	r3, #0
 8005ca0:	00eb      	lsls	r3, r5, #3
 8005ca2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ca6:	00e2      	lsls	r2, r4, #3
 8005ca8:	4614      	mov	r4, r2
 8005caa:	461d      	mov	r5, r3
 8005cac:	4643      	mov	r3, r8
 8005cae:	18e3      	adds	r3, r4, r3
 8005cb0:	603b      	str	r3, [r7, #0]
 8005cb2:	464b      	mov	r3, r9
 8005cb4:	eb45 0303 	adc.w	r3, r5, r3
 8005cb8:	607b      	str	r3, [r7, #4]
 8005cba:	f04f 0200 	mov.w	r2, #0
 8005cbe:	f04f 0300 	mov.w	r3, #0
 8005cc2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005cc6:	4629      	mov	r1, r5
 8005cc8:	028b      	lsls	r3, r1, #10
 8005cca:	4621      	mov	r1, r4
 8005ccc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005cd0:	4621      	mov	r1, r4
 8005cd2:	028a      	lsls	r2, r1, #10
 8005cd4:	4610      	mov	r0, r2
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cda:	2200      	movs	r2, #0
 8005cdc:	61bb      	str	r3, [r7, #24]
 8005cde:	61fa      	str	r2, [r7, #28]
 8005ce0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ce4:	f7fb f830 	bl	8000d48 <__aeabi_uldivmod>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	460b      	mov	r3, r1
 8005cec:	4613      	mov	r3, r2
 8005cee:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8005d20 <HAL_RCC_GetSysClockFreq+0x200>)
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	0c1b      	lsrs	r3, r3, #16
 8005cf6:	f003 0303 	and.w	r3, r3, #3
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	005b      	lsls	r3, r3, #1
 8005cfe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005d00:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005d02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d08:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005d0a:	e002      	b.n	8005d12 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d0c:	4b05      	ldr	r3, [pc, #20]	@ (8005d24 <HAL_RCC_GetSysClockFreq+0x204>)
 8005d0e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005d10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3750      	adds	r7, #80	@ 0x50
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d1e:	bf00      	nop
 8005d20:	40023800 	.word	0x40023800
 8005d24:	00f42400 	.word	0x00f42400
 8005d28:	007a1200 	.word	0x007a1200

08005d2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d30:	4b03      	ldr	r3, [pc, #12]	@ (8005d40 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d32:	681b      	ldr	r3, [r3, #0]
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr
 8005d3e:	bf00      	nop
 8005d40:	20000000 	.word	0x20000000

08005d44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005d48:	f7ff fff0 	bl	8005d2c <HAL_RCC_GetHCLKFreq>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	4b05      	ldr	r3, [pc, #20]	@ (8005d64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	0a9b      	lsrs	r3, r3, #10
 8005d54:	f003 0307 	and.w	r3, r3, #7
 8005d58:	4903      	ldr	r1, [pc, #12]	@ (8005d68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d5a:	5ccb      	ldrb	r3, [r1, r3]
 8005d5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	bd80      	pop	{r7, pc}
 8005d64:	40023800 	.word	0x40023800
 8005d68:	0800be54 	.word	0x0800be54

08005d6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005d70:	f7ff ffdc 	bl	8005d2c <HAL_RCC_GetHCLKFreq>
 8005d74:	4602      	mov	r2, r0
 8005d76:	4b05      	ldr	r3, [pc, #20]	@ (8005d8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	0b5b      	lsrs	r3, r3, #13
 8005d7c:	f003 0307 	and.w	r3, r3, #7
 8005d80:	4903      	ldr	r1, [pc, #12]	@ (8005d90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d82:	5ccb      	ldrb	r3, [r1, r3]
 8005d84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	bd80      	pop	{r7, pc}
 8005d8c:	40023800 	.word	0x40023800
 8005d90:	0800be54 	.word	0x0800be54

08005d94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b082      	sub	sp, #8
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d101      	bne.n	8005da6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	e07b      	b.n	8005e9e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d108      	bne.n	8005dc0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005db6:	d009      	beq.n	8005dcc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	61da      	str	r2, [r3, #28]
 8005dbe:	e005      	b.n	8005dcc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d106      	bne.n	8005dec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f7fc fe42 	bl	8002a70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2202      	movs	r2, #2
 8005df0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e02:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005e14:	431a      	orrs	r2, r3
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e1e:	431a      	orrs	r2, r3
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	f003 0302 	and.w	r3, r3, #2
 8005e28:	431a      	orrs	r2, r3
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	695b      	ldr	r3, [r3, #20]
 8005e2e:	f003 0301 	and.w	r3, r3, #1
 8005e32:	431a      	orrs	r2, r3
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	699b      	ldr	r3, [r3, #24]
 8005e38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e3c:	431a      	orrs	r2, r3
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	69db      	ldr	r3, [r3, #28]
 8005e42:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e46:	431a      	orrs	r2, r3
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6a1b      	ldr	r3, [r3, #32]
 8005e4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e50:	ea42 0103 	orr.w	r1, r2, r3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e58:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	430a      	orrs	r2, r1
 8005e62:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	699b      	ldr	r3, [r3, #24]
 8005e68:	0c1b      	lsrs	r3, r3, #16
 8005e6a:	f003 0104 	and.w	r1, r3, #4
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e72:	f003 0210 	and.w	r2, r3, #16
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	430a      	orrs	r2, r1
 8005e7c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	69da      	ldr	r2, [r3, #28]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e8c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3708      	adds	r7, #8
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}

08005ea6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ea6:	b580      	push	{r7, lr}
 8005ea8:	b088      	sub	sp, #32
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	60f8      	str	r0, [r7, #12]
 8005eae:	60b9      	str	r1, [r7, #8]
 8005eb0:	603b      	str	r3, [r7, #0]
 8005eb2:	4613      	mov	r3, r2
 8005eb4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005eb6:	f7fd f879 	bl	8002fac <HAL_GetTick>
 8005eba:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005ebc:	88fb      	ldrh	r3, [r7, #6]
 8005ebe:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d001      	beq.n	8005ed0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005ecc:	2302      	movs	r3, #2
 8005ece:	e12a      	b.n	8006126 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d002      	beq.n	8005edc <HAL_SPI_Transmit+0x36>
 8005ed6:	88fb      	ldrh	r3, [r7, #6]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d101      	bne.n	8005ee0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	e122      	b.n	8006126 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d101      	bne.n	8005eee <HAL_SPI_Transmit+0x48>
 8005eea:	2302      	movs	r3, #2
 8005eec:	e11b      	b.n	8006126 <HAL_SPI_Transmit+0x280>
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2203      	movs	r2, #3
 8005efa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2200      	movs	r2, #0
 8005f02:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	68ba      	ldr	r2, [r7, #8]
 8005f08:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	88fa      	ldrh	r2, [r7, #6]
 8005f0e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	88fa      	ldrh	r2, [r7, #6]
 8005f14:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2200      	movs	r2, #0
 8005f26:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2200      	movs	r2, #0
 8005f32:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f3c:	d10f      	bne.n	8005f5e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f4c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005f5c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f68:	2b40      	cmp	r3, #64	@ 0x40
 8005f6a:	d007      	beq.n	8005f7c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005f7a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f84:	d152      	bne.n	800602c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d002      	beq.n	8005f94 <HAL_SPI_Transmit+0xee>
 8005f8e:	8b7b      	ldrh	r3, [r7, #26]
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d145      	bne.n	8006020 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f98:	881a      	ldrh	r2, [r3, #0]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fa4:	1c9a      	adds	r2, r3, #2
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	3b01      	subs	r3, #1
 8005fb2:	b29a      	uxth	r2, r3
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005fb8:	e032      	b.n	8006020 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	f003 0302 	and.w	r3, r3, #2
 8005fc4:	2b02      	cmp	r3, #2
 8005fc6:	d112      	bne.n	8005fee <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fcc:	881a      	ldrh	r2, [r3, #0]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fd8:	1c9a      	adds	r2, r3, #2
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	3b01      	subs	r3, #1
 8005fe6:	b29a      	uxth	r2, r3
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005fec:	e018      	b.n	8006020 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fee:	f7fc ffdd 	bl	8002fac <HAL_GetTick>
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	69fb      	ldr	r3, [r7, #28]
 8005ff6:	1ad3      	subs	r3, r2, r3
 8005ff8:	683a      	ldr	r2, [r7, #0]
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d803      	bhi.n	8006006 <HAL_SPI_Transmit+0x160>
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006004:	d102      	bne.n	800600c <HAL_SPI_Transmit+0x166>
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d109      	bne.n	8006020 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2200      	movs	r2, #0
 8006018:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800601c:	2303      	movs	r3, #3
 800601e:	e082      	b.n	8006126 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006024:	b29b      	uxth	r3, r3
 8006026:	2b00      	cmp	r3, #0
 8006028:	d1c7      	bne.n	8005fba <HAL_SPI_Transmit+0x114>
 800602a:	e053      	b.n	80060d4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d002      	beq.n	800603a <HAL_SPI_Transmit+0x194>
 8006034:	8b7b      	ldrh	r3, [r7, #26]
 8006036:	2b01      	cmp	r3, #1
 8006038:	d147      	bne.n	80060ca <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	330c      	adds	r3, #12
 8006044:	7812      	ldrb	r2, [r2, #0]
 8006046:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800604c:	1c5a      	adds	r2, r3, #1
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006056:	b29b      	uxth	r3, r3
 8006058:	3b01      	subs	r3, #1
 800605a:	b29a      	uxth	r2, r3
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006060:	e033      	b.n	80060ca <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	f003 0302 	and.w	r3, r3, #2
 800606c:	2b02      	cmp	r3, #2
 800606e:	d113      	bne.n	8006098 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	330c      	adds	r3, #12
 800607a:	7812      	ldrb	r2, [r2, #0]
 800607c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006082:	1c5a      	adds	r2, r3, #1
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800608c:	b29b      	uxth	r3, r3
 800608e:	3b01      	subs	r3, #1
 8006090:	b29a      	uxth	r2, r3
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006096:	e018      	b.n	80060ca <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006098:	f7fc ff88 	bl	8002fac <HAL_GetTick>
 800609c:	4602      	mov	r2, r0
 800609e:	69fb      	ldr	r3, [r7, #28]
 80060a0:	1ad3      	subs	r3, r2, r3
 80060a2:	683a      	ldr	r2, [r7, #0]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d803      	bhi.n	80060b0 <HAL_SPI_Transmit+0x20a>
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80060ae:	d102      	bne.n	80060b6 <HAL_SPI_Transmit+0x210>
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d109      	bne.n	80060ca <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2201      	movs	r2, #1
 80060ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2200      	movs	r2, #0
 80060c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e02d      	b.n	8006126 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d1c6      	bne.n	8006062 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80060d4:	69fa      	ldr	r2, [r7, #28]
 80060d6:	6839      	ldr	r1, [r7, #0]
 80060d8:	68f8      	ldr	r0, [r7, #12]
 80060da:	f000 fceb 	bl	8006ab4 <SPI_EndRxTxTransaction>
 80060de:	4603      	mov	r3, r0
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d002      	beq.n	80060ea <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2220      	movs	r2, #32
 80060e8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d10a      	bne.n	8006108 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060f2:	2300      	movs	r3, #0
 80060f4:	617b      	str	r3, [r7, #20]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	617b      	str	r3, [r7, #20]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	617b      	str	r3, [r7, #20]
 8006106:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2200      	movs	r2, #0
 8006114:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800611c:	2b00      	cmp	r3, #0
 800611e:	d001      	beq.n	8006124 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	e000      	b.n	8006126 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006124:	2300      	movs	r3, #0
  }
}
 8006126:	4618      	mov	r0, r3
 8006128:	3720      	adds	r7, #32
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}

0800612e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800612e:	b580      	push	{r7, lr}
 8006130:	b088      	sub	sp, #32
 8006132:	af02      	add	r7, sp, #8
 8006134:	60f8      	str	r0, [r7, #12]
 8006136:	60b9      	str	r1, [r7, #8]
 8006138:	603b      	str	r3, [r7, #0]
 800613a:	4613      	mov	r3, r2
 800613c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006144:	b2db      	uxtb	r3, r3
 8006146:	2b01      	cmp	r3, #1
 8006148:	d001      	beq.n	800614e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800614a:	2302      	movs	r3, #2
 800614c:	e104      	b.n	8006358 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006156:	d112      	bne.n	800617e <HAL_SPI_Receive+0x50>
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d10e      	bne.n	800617e <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2204      	movs	r2, #4
 8006164:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006168:	88fa      	ldrh	r2, [r7, #6]
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	9300      	str	r3, [sp, #0]
 800616e:	4613      	mov	r3, r2
 8006170:	68ba      	ldr	r2, [r7, #8]
 8006172:	68b9      	ldr	r1, [r7, #8]
 8006174:	68f8      	ldr	r0, [r7, #12]
 8006176:	f000 f8f3 	bl	8006360 <HAL_SPI_TransmitReceive>
 800617a:	4603      	mov	r3, r0
 800617c:	e0ec      	b.n	8006358 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800617e:	f7fc ff15 	bl	8002fac <HAL_GetTick>
 8006182:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d002      	beq.n	8006190 <HAL_SPI_Receive+0x62>
 800618a:	88fb      	ldrh	r3, [r7, #6]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d101      	bne.n	8006194 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	e0e1      	b.n	8006358 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800619a:	2b01      	cmp	r3, #1
 800619c:	d101      	bne.n	80061a2 <HAL_SPI_Receive+0x74>
 800619e:	2302      	movs	r3, #2
 80061a0:	e0da      	b.n	8006358 <HAL_SPI_Receive+0x22a>
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2201      	movs	r2, #1
 80061a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2204      	movs	r2, #4
 80061ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2200      	movs	r2, #0
 80061b6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	68ba      	ldr	r2, [r7, #8]
 80061bc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	88fa      	ldrh	r2, [r7, #6]
 80061c2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	88fa      	ldrh	r2, [r7, #6]
 80061c8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2200      	movs	r2, #0
 80061ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2200      	movs	r2, #0
 80061d4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2200      	movs	r2, #0
 80061da:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2200      	movs	r2, #0
 80061e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2200      	movs	r2, #0
 80061e6:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061f0:	d10f      	bne.n	8006212 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006200:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006210:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800621c:	2b40      	cmp	r3, #64	@ 0x40
 800621e:	d007      	beq.n	8006230 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800622e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d170      	bne.n	800631a <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006238:	e035      	b.n	80062a6 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	f003 0301 	and.w	r3, r3, #1
 8006244:	2b01      	cmp	r3, #1
 8006246:	d115      	bne.n	8006274 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f103 020c 	add.w	r2, r3, #12
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006254:	7812      	ldrb	r2, [r2, #0]
 8006256:	b2d2      	uxtb	r2, r2
 8006258:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800625e:	1c5a      	adds	r2, r3, #1
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006268:	b29b      	uxth	r3, r3
 800626a:	3b01      	subs	r3, #1
 800626c:	b29a      	uxth	r2, r3
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006272:	e018      	b.n	80062a6 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006274:	f7fc fe9a 	bl	8002fac <HAL_GetTick>
 8006278:	4602      	mov	r2, r0
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	1ad3      	subs	r3, r2, r3
 800627e:	683a      	ldr	r2, [r7, #0]
 8006280:	429a      	cmp	r2, r3
 8006282:	d803      	bhi.n	800628c <HAL_SPI_Receive+0x15e>
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800628a:	d102      	bne.n	8006292 <HAL_SPI_Receive+0x164>
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d109      	bne.n	80062a6 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2201      	movs	r2, #1
 8006296:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2200      	movs	r2, #0
 800629e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80062a2:	2303      	movs	r3, #3
 80062a4:	e058      	b.n	8006358 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d1c4      	bne.n	800623a <HAL_SPI_Receive+0x10c>
 80062b0:	e038      	b.n	8006324 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	f003 0301 	and.w	r3, r3, #1
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d113      	bne.n	80062e8 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	68da      	ldr	r2, [r3, #12]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062ca:	b292      	uxth	r2, r2
 80062cc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062d2:	1c9a      	adds	r2, r3, #2
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062dc:	b29b      	uxth	r3, r3
 80062de:	3b01      	subs	r3, #1
 80062e0:	b29a      	uxth	r2, r3
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80062e6:	e018      	b.n	800631a <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062e8:	f7fc fe60 	bl	8002fac <HAL_GetTick>
 80062ec:	4602      	mov	r2, r0
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	1ad3      	subs	r3, r2, r3
 80062f2:	683a      	ldr	r2, [r7, #0]
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d803      	bhi.n	8006300 <HAL_SPI_Receive+0x1d2>
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80062fe:	d102      	bne.n	8006306 <HAL_SPI_Receive+0x1d8>
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d109      	bne.n	800631a <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2201      	movs	r2, #1
 800630a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2200      	movs	r2, #0
 8006312:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006316:	2303      	movs	r3, #3
 8006318:	e01e      	b.n	8006358 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800631e:	b29b      	uxth	r3, r3
 8006320:	2b00      	cmp	r3, #0
 8006322:	d1c6      	bne.n	80062b2 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006324:	697a      	ldr	r2, [r7, #20]
 8006326:	6839      	ldr	r1, [r7, #0]
 8006328:	68f8      	ldr	r0, [r7, #12]
 800632a:	f000 fb5d 	bl	80069e8 <SPI_EndRxTransaction>
 800632e:	4603      	mov	r3, r0
 8006330:	2b00      	cmp	r3, #0
 8006332:	d002      	beq.n	800633a <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2220      	movs	r2, #32
 8006338:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2201      	movs	r2, #1
 800633e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2200      	movs	r2, #0
 8006346:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800634e:	2b00      	cmp	r3, #0
 8006350:	d001      	beq.n	8006356 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	e000      	b.n	8006358 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8006356:	2300      	movs	r3, #0
  }
}
 8006358:	4618      	mov	r0, r3
 800635a:	3718      	adds	r7, #24
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}

08006360 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b08a      	sub	sp, #40	@ 0x28
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	607a      	str	r2, [r7, #4]
 800636c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800636e:	2301      	movs	r3, #1
 8006370:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006372:	f7fc fe1b 	bl	8002fac <HAL_GetTick>
 8006376:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800637e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006386:	887b      	ldrh	r3, [r7, #2]
 8006388:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800638a:	7ffb      	ldrb	r3, [r7, #31]
 800638c:	2b01      	cmp	r3, #1
 800638e:	d00c      	beq.n	80063aa <HAL_SPI_TransmitReceive+0x4a>
 8006390:	69bb      	ldr	r3, [r7, #24]
 8006392:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006396:	d106      	bne.n	80063a6 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d102      	bne.n	80063a6 <HAL_SPI_TransmitReceive+0x46>
 80063a0:	7ffb      	ldrb	r3, [r7, #31]
 80063a2:	2b04      	cmp	r3, #4
 80063a4:	d001      	beq.n	80063aa <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80063a6:	2302      	movs	r3, #2
 80063a8:	e17f      	b.n	80066aa <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d005      	beq.n	80063bc <HAL_SPI_TransmitReceive+0x5c>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d002      	beq.n	80063bc <HAL_SPI_TransmitReceive+0x5c>
 80063b6:	887b      	ldrh	r3, [r7, #2]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d101      	bne.n	80063c0 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	e174      	b.n	80066aa <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d101      	bne.n	80063ce <HAL_SPI_TransmitReceive+0x6e>
 80063ca:	2302      	movs	r3, #2
 80063cc:	e16d      	b.n	80066aa <HAL_SPI_TransmitReceive+0x34a>
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2201      	movs	r2, #1
 80063d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	2b04      	cmp	r3, #4
 80063e0:	d003      	beq.n	80063ea <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2205      	movs	r2, #5
 80063e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2200      	movs	r2, #0
 80063ee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	887a      	ldrh	r2, [r7, #2]
 80063fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	887a      	ldrh	r2, [r7, #2]
 8006400:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	68ba      	ldr	r2, [r7, #8]
 8006406:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	887a      	ldrh	r2, [r7, #2]
 800640c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	887a      	ldrh	r2, [r7, #2]
 8006412:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2200      	movs	r2, #0
 8006418:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2200      	movs	r2, #0
 800641e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800642a:	2b40      	cmp	r3, #64	@ 0x40
 800642c:	d007      	beq.n	800643e <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800643c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006446:	d17e      	bne.n	8006546 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d002      	beq.n	8006456 <HAL_SPI_TransmitReceive+0xf6>
 8006450:	8afb      	ldrh	r3, [r7, #22]
 8006452:	2b01      	cmp	r3, #1
 8006454:	d16c      	bne.n	8006530 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800645a:	881a      	ldrh	r2, [r3, #0]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006466:	1c9a      	adds	r2, r3, #2
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006470:	b29b      	uxth	r3, r3
 8006472:	3b01      	subs	r3, #1
 8006474:	b29a      	uxth	r2, r3
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800647a:	e059      	b.n	8006530 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	f003 0302 	and.w	r3, r3, #2
 8006486:	2b02      	cmp	r3, #2
 8006488:	d11b      	bne.n	80064c2 <HAL_SPI_TransmitReceive+0x162>
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800648e:	b29b      	uxth	r3, r3
 8006490:	2b00      	cmp	r3, #0
 8006492:	d016      	beq.n	80064c2 <HAL_SPI_TransmitReceive+0x162>
 8006494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006496:	2b01      	cmp	r3, #1
 8006498:	d113      	bne.n	80064c2 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800649e:	881a      	ldrh	r2, [r3, #0]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064aa:	1c9a      	adds	r2, r3, #2
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	3b01      	subs	r3, #1
 80064b8:	b29a      	uxth	r2, r3
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80064be:	2300      	movs	r3, #0
 80064c0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	f003 0301 	and.w	r3, r3, #1
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d119      	bne.n	8006504 <HAL_SPI_TransmitReceive+0x1a4>
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d014      	beq.n	8006504 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68da      	ldr	r2, [r3, #12]
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064e4:	b292      	uxth	r2, r2
 80064e6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ec:	1c9a      	adds	r2, r3, #2
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	3b01      	subs	r3, #1
 80064fa:	b29a      	uxth	r2, r3
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006500:	2301      	movs	r3, #1
 8006502:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006504:	f7fc fd52 	bl	8002fac <HAL_GetTick>
 8006508:	4602      	mov	r2, r0
 800650a:	6a3b      	ldr	r3, [r7, #32]
 800650c:	1ad3      	subs	r3, r2, r3
 800650e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006510:	429a      	cmp	r2, r3
 8006512:	d80d      	bhi.n	8006530 <HAL_SPI_TransmitReceive+0x1d0>
 8006514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006516:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800651a:	d009      	beq.n	8006530 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2200      	movs	r2, #0
 8006528:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800652c:	2303      	movs	r3, #3
 800652e:	e0bc      	b.n	80066aa <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006534:	b29b      	uxth	r3, r3
 8006536:	2b00      	cmp	r3, #0
 8006538:	d1a0      	bne.n	800647c <HAL_SPI_TransmitReceive+0x11c>
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800653e:	b29b      	uxth	r3, r3
 8006540:	2b00      	cmp	r3, #0
 8006542:	d19b      	bne.n	800647c <HAL_SPI_TransmitReceive+0x11c>
 8006544:	e082      	b.n	800664c <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d002      	beq.n	8006554 <HAL_SPI_TransmitReceive+0x1f4>
 800654e:	8afb      	ldrh	r3, [r7, #22]
 8006550:	2b01      	cmp	r3, #1
 8006552:	d171      	bne.n	8006638 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	330c      	adds	r3, #12
 800655e:	7812      	ldrb	r2, [r2, #0]
 8006560:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006566:	1c5a      	adds	r2, r3, #1
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006570:	b29b      	uxth	r3, r3
 8006572:	3b01      	subs	r3, #1
 8006574:	b29a      	uxth	r2, r3
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800657a:	e05d      	b.n	8006638 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	f003 0302 	and.w	r3, r3, #2
 8006586:	2b02      	cmp	r3, #2
 8006588:	d11c      	bne.n	80065c4 <HAL_SPI_TransmitReceive+0x264>
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800658e:	b29b      	uxth	r3, r3
 8006590:	2b00      	cmp	r3, #0
 8006592:	d017      	beq.n	80065c4 <HAL_SPI_TransmitReceive+0x264>
 8006594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006596:	2b01      	cmp	r3, #1
 8006598:	d114      	bne.n	80065c4 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	330c      	adds	r3, #12
 80065a4:	7812      	ldrb	r2, [r2, #0]
 80065a6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065ac:	1c5a      	adds	r2, r3, #1
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	3b01      	subs	r3, #1
 80065ba:	b29a      	uxth	r2, r3
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80065c0:	2300      	movs	r3, #0
 80065c2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	f003 0301 	and.w	r3, r3, #1
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	d119      	bne.n	8006606 <HAL_SPI_TransmitReceive+0x2a6>
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d014      	beq.n	8006606 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	68da      	ldr	r2, [r3, #12]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065e6:	b2d2      	uxtb	r2, r2
 80065e8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065ee:	1c5a      	adds	r2, r3, #1
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	3b01      	subs	r3, #1
 80065fc:	b29a      	uxth	r2, r3
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006602:	2301      	movs	r3, #1
 8006604:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006606:	f7fc fcd1 	bl	8002fac <HAL_GetTick>
 800660a:	4602      	mov	r2, r0
 800660c:	6a3b      	ldr	r3, [r7, #32]
 800660e:	1ad3      	subs	r3, r2, r3
 8006610:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006612:	429a      	cmp	r2, r3
 8006614:	d803      	bhi.n	800661e <HAL_SPI_TransmitReceive+0x2be>
 8006616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006618:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800661c:	d102      	bne.n	8006624 <HAL_SPI_TransmitReceive+0x2c4>
 800661e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006620:	2b00      	cmp	r3, #0
 8006622:	d109      	bne.n	8006638 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2201      	movs	r2, #1
 8006628:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2200      	movs	r2, #0
 8006630:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006634:	2303      	movs	r3, #3
 8006636:	e038      	b.n	80066aa <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800663c:	b29b      	uxth	r3, r3
 800663e:	2b00      	cmp	r3, #0
 8006640:	d19c      	bne.n	800657c <HAL_SPI_TransmitReceive+0x21c>
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006646:	b29b      	uxth	r3, r3
 8006648:	2b00      	cmp	r3, #0
 800664a:	d197      	bne.n	800657c <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800664c:	6a3a      	ldr	r2, [r7, #32]
 800664e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006650:	68f8      	ldr	r0, [r7, #12]
 8006652:	f000 fa2f 	bl	8006ab4 <SPI_EndRxTxTransaction>
 8006656:	4603      	mov	r3, r0
 8006658:	2b00      	cmp	r3, #0
 800665a:	d008      	beq.n	800666e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2220      	movs	r2, #32
 8006660:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2200      	movs	r2, #0
 8006666:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	e01d      	b.n	80066aa <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d10a      	bne.n	800668c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006676:	2300      	movs	r3, #0
 8006678:	613b      	str	r3, [r7, #16]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	613b      	str	r3, [r7, #16]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	613b      	str	r3, [r7, #16]
 800668a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2201      	movs	r2, #1
 8006690:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2200      	movs	r2, #0
 8006698:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d001      	beq.n	80066a8 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	e000      	b.n	80066aa <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80066a8:	2300      	movs	r3, #0
  }
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3728      	adds	r7, #40	@ 0x28
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
	...

080066b4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b088      	sub	sp, #32
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80066cc:	69bb      	ldr	r3, [r7, #24]
 80066ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d10e      	bne.n	80066f4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80066d6:	69bb      	ldr	r3, [r7, #24]
 80066d8:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d009      	beq.n	80066f4 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d004      	beq.n	80066f4 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	4798      	blx	r3
    return;
 80066f2:	e0ce      	b.n	8006892 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80066f4:	69bb      	ldr	r3, [r7, #24]
 80066f6:	f003 0302 	and.w	r3, r3, #2
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d009      	beq.n	8006712 <HAL_SPI_IRQHandler+0x5e>
 80066fe:	69fb      	ldr	r3, [r7, #28]
 8006700:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006704:	2b00      	cmp	r3, #0
 8006706:	d004      	beq.n	8006712 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	4798      	blx	r3
    return;
 8006710:	e0bf      	b.n	8006892 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006712:	69bb      	ldr	r3, [r7, #24]
 8006714:	f003 0320 	and.w	r3, r3, #32
 8006718:	2b00      	cmp	r3, #0
 800671a:	d10a      	bne.n	8006732 <HAL_SPI_IRQHandler+0x7e>
 800671c:	69bb      	ldr	r3, [r7, #24]
 800671e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006722:	2b00      	cmp	r3, #0
 8006724:	d105      	bne.n	8006732 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006726:	69bb      	ldr	r3, [r7, #24]
 8006728:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800672c:	2b00      	cmp	r3, #0
 800672e:	f000 80b0 	beq.w	8006892 <HAL_SPI_IRQHandler+0x1de>
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	f003 0320 	and.w	r3, r3, #32
 8006738:	2b00      	cmp	r3, #0
 800673a:	f000 80aa 	beq.w	8006892 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800673e:	69bb      	ldr	r3, [r7, #24]
 8006740:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006744:	2b00      	cmp	r3, #0
 8006746:	d023      	beq.n	8006790 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800674e:	b2db      	uxtb	r3, r3
 8006750:	2b03      	cmp	r3, #3
 8006752:	d011      	beq.n	8006778 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006758:	f043 0204 	orr.w	r2, r3, #4
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006760:	2300      	movs	r3, #0
 8006762:	617b      	str	r3, [r7, #20]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	617b      	str	r3, [r7, #20]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	617b      	str	r3, [r7, #20]
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	e00b      	b.n	8006790 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006778:	2300      	movs	r3, #0
 800677a:	613b      	str	r3, [r7, #16]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	68db      	ldr	r3, [r3, #12]
 8006782:	613b      	str	r3, [r7, #16]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	613b      	str	r3, [r7, #16]
 800678c:	693b      	ldr	r3, [r7, #16]
        return;
 800678e:	e080      	b.n	8006892 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006790:	69bb      	ldr	r3, [r7, #24]
 8006792:	f003 0320 	and.w	r3, r3, #32
 8006796:	2b00      	cmp	r3, #0
 8006798:	d014      	beq.n	80067c4 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800679e:	f043 0201 	orr.w	r2, r3, #1
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80067a6:	2300      	movs	r3, #0
 80067a8:	60fb      	str	r3, [r7, #12]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	60fb      	str	r3, [r7, #12]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80067c0:	601a      	str	r2, [r3, #0]
 80067c2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80067c4:	69bb      	ldr	r3, [r7, #24]
 80067c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d00c      	beq.n	80067e8 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067d2:	f043 0208 	orr.w	r2, r3, #8
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80067da:	2300      	movs	r3, #0
 80067dc:	60bb      	str	r3, [r7, #8]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	60bb      	str	r3, [r7, #8]
 80067e6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d04f      	beq.n	8006890 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	685a      	ldr	r2, [r3, #4]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80067fe:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	f003 0302 	and.w	r3, r3, #2
 800680e:	2b00      	cmp	r3, #0
 8006810:	d104      	bne.n	800681c <HAL_SPI_IRQHandler+0x168>
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	f003 0301 	and.w	r3, r3, #1
 8006818:	2b00      	cmp	r3, #0
 800681a:	d034      	beq.n	8006886 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	685a      	ldr	r2, [r3, #4]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f022 0203 	bic.w	r2, r2, #3
 800682a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006830:	2b00      	cmp	r3, #0
 8006832:	d011      	beq.n	8006858 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006838:	4a17      	ldr	r2, [pc, #92]	@ (8006898 <HAL_SPI_IRQHandler+0x1e4>)
 800683a:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006840:	4618      	mov	r0, r3
 8006842:	f7fd f980 	bl	8003b46 <HAL_DMA_Abort_IT>
 8006846:	4603      	mov	r3, r0
 8006848:	2b00      	cmp	r3, #0
 800684a:	d005      	beq.n	8006858 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006850:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800685c:	2b00      	cmp	r3, #0
 800685e:	d016      	beq.n	800688e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006864:	4a0c      	ldr	r2, [pc, #48]	@ (8006898 <HAL_SPI_IRQHandler+0x1e4>)
 8006866:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800686c:	4618      	mov	r0, r3
 800686e:	f7fd f96a 	bl	8003b46 <HAL_DMA_Abort_IT>
 8006872:	4603      	mov	r3, r0
 8006874:	2b00      	cmp	r3, #0
 8006876:	d00a      	beq.n	800688e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800687c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8006884:	e003      	b.n	800688e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 f808 	bl	800689c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800688c:	e000      	b.n	8006890 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800688e:	bf00      	nop
    return;
 8006890:	bf00      	nop
  }
}
 8006892:	3720      	adds	r7, #32
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}
 8006898:	080068b1 	.word	0x080068b1

0800689c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80068a4:	bf00      	nop
 80068a6:	370c      	adds	r7, #12
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068bc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2200      	movs	r2, #0
 80068c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2200      	movs	r2, #0
 80068c8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80068ca:	68f8      	ldr	r0, [r7, #12]
 80068cc:	f7ff ffe6 	bl	800689c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80068d0:	bf00      	nop
 80068d2:	3710      	adds	r7, #16
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b088      	sub	sp, #32
 80068dc:	af00      	add	r7, sp, #0
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	603b      	str	r3, [r7, #0]
 80068e4:	4613      	mov	r3, r2
 80068e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80068e8:	f7fc fb60 	bl	8002fac <HAL_GetTick>
 80068ec:	4602      	mov	r2, r0
 80068ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068f0:	1a9b      	subs	r3, r3, r2
 80068f2:	683a      	ldr	r2, [r7, #0]
 80068f4:	4413      	add	r3, r2
 80068f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80068f8:	f7fc fb58 	bl	8002fac <HAL_GetTick>
 80068fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80068fe:	4b39      	ldr	r3, [pc, #228]	@ (80069e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	015b      	lsls	r3, r3, #5
 8006904:	0d1b      	lsrs	r3, r3, #20
 8006906:	69fa      	ldr	r2, [r7, #28]
 8006908:	fb02 f303 	mul.w	r3, r2, r3
 800690c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800690e:	e054      	b.n	80069ba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006916:	d050      	beq.n	80069ba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006918:	f7fc fb48 	bl	8002fac <HAL_GetTick>
 800691c:	4602      	mov	r2, r0
 800691e:	69bb      	ldr	r3, [r7, #24]
 8006920:	1ad3      	subs	r3, r2, r3
 8006922:	69fa      	ldr	r2, [r7, #28]
 8006924:	429a      	cmp	r2, r3
 8006926:	d902      	bls.n	800692e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006928:	69fb      	ldr	r3, [r7, #28]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d13d      	bne.n	80069aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	685a      	ldr	r2, [r3, #4]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800693c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006946:	d111      	bne.n	800696c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006950:	d004      	beq.n	800695c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800695a:	d107      	bne.n	800696c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	681a      	ldr	r2, [r3, #0]
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800696a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006970:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006974:	d10f      	bne.n	8006996 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006984:	601a      	str	r2, [r3, #0]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006994:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2201      	movs	r2, #1
 800699a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2200      	movs	r2, #0
 80069a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80069a6:	2303      	movs	r3, #3
 80069a8:	e017      	b.n	80069da <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d101      	bne.n	80069b4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80069b0:	2300      	movs	r3, #0
 80069b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	3b01      	subs	r3, #1
 80069b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	689a      	ldr	r2, [r3, #8]
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	4013      	ands	r3, r2
 80069c4:	68ba      	ldr	r2, [r7, #8]
 80069c6:	429a      	cmp	r2, r3
 80069c8:	bf0c      	ite	eq
 80069ca:	2301      	moveq	r3, #1
 80069cc:	2300      	movne	r3, #0
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	461a      	mov	r2, r3
 80069d2:	79fb      	ldrb	r3, [r7, #7]
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d19b      	bne.n	8006910 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80069d8:	2300      	movs	r3, #0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3720      	adds	r7, #32
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	20000000 	.word	0x20000000

080069e8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b086      	sub	sp, #24
 80069ec:	af02      	add	r7, sp, #8
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80069fc:	d111      	bne.n	8006a22 <SPI_EndRxTransaction+0x3a>
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a06:	d004      	beq.n	8006a12 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a10:	d107      	bne.n	8006a22 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	681a      	ldr	r2, [r3, #0]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a20:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006a2a:	d12a      	bne.n	8006a82 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a34:	d012      	beq.n	8006a5c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	9300      	str	r3, [sp, #0]
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	2180      	movs	r1, #128	@ 0x80
 8006a40:	68f8      	ldr	r0, [r7, #12]
 8006a42:	f7ff ff49 	bl	80068d8 <SPI_WaitFlagStateUntilTimeout>
 8006a46:	4603      	mov	r3, r0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d02d      	beq.n	8006aa8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a50:	f043 0220 	orr.w	r2, r3, #32
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006a58:	2303      	movs	r3, #3
 8006a5a:	e026      	b.n	8006aaa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	9300      	str	r3, [sp, #0]
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	2200      	movs	r2, #0
 8006a64:	2101      	movs	r1, #1
 8006a66:	68f8      	ldr	r0, [r7, #12]
 8006a68:	f7ff ff36 	bl	80068d8 <SPI_WaitFlagStateUntilTimeout>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d01a      	beq.n	8006aa8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a76:	f043 0220 	orr.w	r2, r3, #32
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006a7e:	2303      	movs	r3, #3
 8006a80:	e013      	b.n	8006aaa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	9300      	str	r3, [sp, #0]
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	2101      	movs	r1, #1
 8006a8c:	68f8      	ldr	r0, [r7, #12]
 8006a8e:	f7ff ff23 	bl	80068d8 <SPI_WaitFlagStateUntilTimeout>
 8006a92:	4603      	mov	r3, r0
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d007      	beq.n	8006aa8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a9c:	f043 0220 	orr.w	r2, r3, #32
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006aa4:	2303      	movs	r3, #3
 8006aa6:	e000      	b.n	8006aaa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006aa8:	2300      	movs	r3, #0
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3710      	adds	r7, #16
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
	...

08006ab4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b088      	sub	sp, #32
 8006ab8:	af02      	add	r7, sp, #8
 8006aba:	60f8      	str	r0, [r7, #12]
 8006abc:	60b9      	str	r1, [r7, #8]
 8006abe:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	9300      	str	r3, [sp, #0]
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	2102      	movs	r1, #2
 8006aca:	68f8      	ldr	r0, [r7, #12]
 8006acc:	f7ff ff04 	bl	80068d8 <SPI_WaitFlagStateUntilTimeout>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d007      	beq.n	8006ae6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ada:	f043 0220 	orr.w	r2, r3, #32
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006ae2:	2303      	movs	r3, #3
 8006ae4:	e032      	b.n	8006b4c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006ae6:	4b1b      	ldr	r3, [pc, #108]	@ (8006b54 <SPI_EndRxTxTransaction+0xa0>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a1b      	ldr	r2, [pc, #108]	@ (8006b58 <SPI_EndRxTxTransaction+0xa4>)
 8006aec:	fba2 2303 	umull	r2, r3, r2, r3
 8006af0:	0d5b      	lsrs	r3, r3, #21
 8006af2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006af6:	fb02 f303 	mul.w	r3, r2, r3
 8006afa:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b04:	d112      	bne.n	8006b2c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	9300      	str	r3, [sp, #0]
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	2180      	movs	r1, #128	@ 0x80
 8006b10:	68f8      	ldr	r0, [r7, #12]
 8006b12:	f7ff fee1 	bl	80068d8 <SPI_WaitFlagStateUntilTimeout>
 8006b16:	4603      	mov	r3, r0
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d016      	beq.n	8006b4a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b20:	f043 0220 	orr.w	r2, r3, #32
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006b28:	2303      	movs	r3, #3
 8006b2a:	e00f      	b.n	8006b4c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d00a      	beq.n	8006b48 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	3b01      	subs	r3, #1
 8006b36:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b42:	2b80      	cmp	r3, #128	@ 0x80
 8006b44:	d0f2      	beq.n	8006b2c <SPI_EndRxTxTransaction+0x78>
 8006b46:	e000      	b.n	8006b4a <SPI_EndRxTxTransaction+0x96>
        break;
 8006b48:	bf00      	nop
  }

  return HAL_OK;
 8006b4a:	2300      	movs	r3, #0
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3718      	adds	r7, #24
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}
 8006b54:	20000000 	.word	0x20000000
 8006b58:	165e9f81 	.word	0x165e9f81

08006b5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b082      	sub	sp, #8
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d101      	bne.n	8006b6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e042      	b.n	8006bf4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d106      	bne.n	8006b88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f7fb ffc4 	bl	8002b10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2224      	movs	r2, #36	@ 0x24
 8006b8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	68da      	ldr	r2, [r3, #12]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006b9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 f82b 	bl	8006bfc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	691a      	ldr	r2, [r3, #16]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006bb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	695a      	ldr	r2, [r3, #20]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006bc4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	68da      	ldr	r2, [r3, #12]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006bd4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2220      	movs	r2, #32
 8006be0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2220      	movs	r2, #32
 8006be8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006bf2:	2300      	movs	r3, #0
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3708      	adds	r7, #8
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}

08006bfc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c00:	b0c0      	sub	sp, #256	@ 0x100
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	691b      	ldr	r3, [r3, #16]
 8006c10:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c18:	68d9      	ldr	r1, [r3, #12]
 8006c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	ea40 0301 	orr.w	r3, r0, r1
 8006c24:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c2a:	689a      	ldr	r2, [r3, #8]
 8006c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c30:	691b      	ldr	r3, [r3, #16]
 8006c32:	431a      	orrs	r2, r3
 8006c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c38:	695b      	ldr	r3, [r3, #20]
 8006c3a:	431a      	orrs	r2, r3
 8006c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c40:	69db      	ldr	r3, [r3, #28]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006c54:	f021 010c 	bic.w	r1, r1, #12
 8006c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006c62:	430b      	orrs	r3, r1
 8006c64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	695b      	ldr	r3, [r3, #20]
 8006c6e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006c72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c76:	6999      	ldr	r1, [r3, #24]
 8006c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	ea40 0301 	orr.w	r3, r0, r1
 8006c82:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	4b8f      	ldr	r3, [pc, #572]	@ (8006ec8 <UART_SetConfig+0x2cc>)
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d005      	beq.n	8006c9c <UART_SetConfig+0xa0>
 8006c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	4b8d      	ldr	r3, [pc, #564]	@ (8006ecc <UART_SetConfig+0x2d0>)
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d104      	bne.n	8006ca6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c9c:	f7ff f866 	bl	8005d6c <HAL_RCC_GetPCLK2Freq>
 8006ca0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006ca4:	e003      	b.n	8006cae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006ca6:	f7ff f84d 	bl	8005d44 <HAL_RCC_GetPCLK1Freq>
 8006caa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cb2:	69db      	ldr	r3, [r3, #28]
 8006cb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006cb8:	f040 810c 	bne.w	8006ed4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006cbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006cc6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006cca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006cce:	4622      	mov	r2, r4
 8006cd0:	462b      	mov	r3, r5
 8006cd2:	1891      	adds	r1, r2, r2
 8006cd4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006cd6:	415b      	adcs	r3, r3
 8006cd8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006cda:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006cde:	4621      	mov	r1, r4
 8006ce0:	eb12 0801 	adds.w	r8, r2, r1
 8006ce4:	4629      	mov	r1, r5
 8006ce6:	eb43 0901 	adc.w	r9, r3, r1
 8006cea:	f04f 0200 	mov.w	r2, #0
 8006cee:	f04f 0300 	mov.w	r3, #0
 8006cf2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006cf6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006cfa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006cfe:	4690      	mov	r8, r2
 8006d00:	4699      	mov	r9, r3
 8006d02:	4623      	mov	r3, r4
 8006d04:	eb18 0303 	adds.w	r3, r8, r3
 8006d08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006d0c:	462b      	mov	r3, r5
 8006d0e:	eb49 0303 	adc.w	r3, r9, r3
 8006d12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006d22:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006d26:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006d2a:	460b      	mov	r3, r1
 8006d2c:	18db      	adds	r3, r3, r3
 8006d2e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d30:	4613      	mov	r3, r2
 8006d32:	eb42 0303 	adc.w	r3, r2, r3
 8006d36:	657b      	str	r3, [r7, #84]	@ 0x54
 8006d38:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006d3c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006d40:	f7fa f802 	bl	8000d48 <__aeabi_uldivmod>
 8006d44:	4602      	mov	r2, r0
 8006d46:	460b      	mov	r3, r1
 8006d48:	4b61      	ldr	r3, [pc, #388]	@ (8006ed0 <UART_SetConfig+0x2d4>)
 8006d4a:	fba3 2302 	umull	r2, r3, r3, r2
 8006d4e:	095b      	lsrs	r3, r3, #5
 8006d50:	011c      	lsls	r4, r3, #4
 8006d52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d56:	2200      	movs	r2, #0
 8006d58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006d5c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006d60:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006d64:	4642      	mov	r2, r8
 8006d66:	464b      	mov	r3, r9
 8006d68:	1891      	adds	r1, r2, r2
 8006d6a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006d6c:	415b      	adcs	r3, r3
 8006d6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d70:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006d74:	4641      	mov	r1, r8
 8006d76:	eb12 0a01 	adds.w	sl, r2, r1
 8006d7a:	4649      	mov	r1, r9
 8006d7c:	eb43 0b01 	adc.w	fp, r3, r1
 8006d80:	f04f 0200 	mov.w	r2, #0
 8006d84:	f04f 0300 	mov.w	r3, #0
 8006d88:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006d8c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006d90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d94:	4692      	mov	sl, r2
 8006d96:	469b      	mov	fp, r3
 8006d98:	4643      	mov	r3, r8
 8006d9a:	eb1a 0303 	adds.w	r3, sl, r3
 8006d9e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006da2:	464b      	mov	r3, r9
 8006da4:	eb4b 0303 	adc.w	r3, fp, r3
 8006da8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006db8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006dbc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006dc0:	460b      	mov	r3, r1
 8006dc2:	18db      	adds	r3, r3, r3
 8006dc4:	643b      	str	r3, [r7, #64]	@ 0x40
 8006dc6:	4613      	mov	r3, r2
 8006dc8:	eb42 0303 	adc.w	r3, r2, r3
 8006dcc:	647b      	str	r3, [r7, #68]	@ 0x44
 8006dce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006dd2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006dd6:	f7f9 ffb7 	bl	8000d48 <__aeabi_uldivmod>
 8006dda:	4602      	mov	r2, r0
 8006ddc:	460b      	mov	r3, r1
 8006dde:	4611      	mov	r1, r2
 8006de0:	4b3b      	ldr	r3, [pc, #236]	@ (8006ed0 <UART_SetConfig+0x2d4>)
 8006de2:	fba3 2301 	umull	r2, r3, r3, r1
 8006de6:	095b      	lsrs	r3, r3, #5
 8006de8:	2264      	movs	r2, #100	@ 0x64
 8006dea:	fb02 f303 	mul.w	r3, r2, r3
 8006dee:	1acb      	subs	r3, r1, r3
 8006df0:	00db      	lsls	r3, r3, #3
 8006df2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006df6:	4b36      	ldr	r3, [pc, #216]	@ (8006ed0 <UART_SetConfig+0x2d4>)
 8006df8:	fba3 2302 	umull	r2, r3, r3, r2
 8006dfc:	095b      	lsrs	r3, r3, #5
 8006dfe:	005b      	lsls	r3, r3, #1
 8006e00:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006e04:	441c      	add	r4, r3
 8006e06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006e10:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006e14:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006e18:	4642      	mov	r2, r8
 8006e1a:	464b      	mov	r3, r9
 8006e1c:	1891      	adds	r1, r2, r2
 8006e1e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006e20:	415b      	adcs	r3, r3
 8006e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006e28:	4641      	mov	r1, r8
 8006e2a:	1851      	adds	r1, r2, r1
 8006e2c:	6339      	str	r1, [r7, #48]	@ 0x30
 8006e2e:	4649      	mov	r1, r9
 8006e30:	414b      	adcs	r3, r1
 8006e32:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e34:	f04f 0200 	mov.w	r2, #0
 8006e38:	f04f 0300 	mov.w	r3, #0
 8006e3c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006e40:	4659      	mov	r1, fp
 8006e42:	00cb      	lsls	r3, r1, #3
 8006e44:	4651      	mov	r1, sl
 8006e46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e4a:	4651      	mov	r1, sl
 8006e4c:	00ca      	lsls	r2, r1, #3
 8006e4e:	4610      	mov	r0, r2
 8006e50:	4619      	mov	r1, r3
 8006e52:	4603      	mov	r3, r0
 8006e54:	4642      	mov	r2, r8
 8006e56:	189b      	adds	r3, r3, r2
 8006e58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006e5c:	464b      	mov	r3, r9
 8006e5e:	460a      	mov	r2, r1
 8006e60:	eb42 0303 	adc.w	r3, r2, r3
 8006e64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006e74:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006e78:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006e7c:	460b      	mov	r3, r1
 8006e7e:	18db      	adds	r3, r3, r3
 8006e80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e82:	4613      	mov	r3, r2
 8006e84:	eb42 0303 	adc.w	r3, r2, r3
 8006e88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006e8e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006e92:	f7f9 ff59 	bl	8000d48 <__aeabi_uldivmod>
 8006e96:	4602      	mov	r2, r0
 8006e98:	460b      	mov	r3, r1
 8006e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8006ed0 <UART_SetConfig+0x2d4>)
 8006e9c:	fba3 1302 	umull	r1, r3, r3, r2
 8006ea0:	095b      	lsrs	r3, r3, #5
 8006ea2:	2164      	movs	r1, #100	@ 0x64
 8006ea4:	fb01 f303 	mul.w	r3, r1, r3
 8006ea8:	1ad3      	subs	r3, r2, r3
 8006eaa:	00db      	lsls	r3, r3, #3
 8006eac:	3332      	adds	r3, #50	@ 0x32
 8006eae:	4a08      	ldr	r2, [pc, #32]	@ (8006ed0 <UART_SetConfig+0x2d4>)
 8006eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8006eb4:	095b      	lsrs	r3, r3, #5
 8006eb6:	f003 0207 	and.w	r2, r3, #7
 8006eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4422      	add	r2, r4
 8006ec2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006ec4:	e106      	b.n	80070d4 <UART_SetConfig+0x4d8>
 8006ec6:	bf00      	nop
 8006ec8:	40011000 	.word	0x40011000
 8006ecc:	40011400 	.word	0x40011400
 8006ed0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ed4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ed8:	2200      	movs	r2, #0
 8006eda:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006ede:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006ee2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006ee6:	4642      	mov	r2, r8
 8006ee8:	464b      	mov	r3, r9
 8006eea:	1891      	adds	r1, r2, r2
 8006eec:	6239      	str	r1, [r7, #32]
 8006eee:	415b      	adcs	r3, r3
 8006ef0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ef2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006ef6:	4641      	mov	r1, r8
 8006ef8:	1854      	adds	r4, r2, r1
 8006efa:	4649      	mov	r1, r9
 8006efc:	eb43 0501 	adc.w	r5, r3, r1
 8006f00:	f04f 0200 	mov.w	r2, #0
 8006f04:	f04f 0300 	mov.w	r3, #0
 8006f08:	00eb      	lsls	r3, r5, #3
 8006f0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f0e:	00e2      	lsls	r2, r4, #3
 8006f10:	4614      	mov	r4, r2
 8006f12:	461d      	mov	r5, r3
 8006f14:	4643      	mov	r3, r8
 8006f16:	18e3      	adds	r3, r4, r3
 8006f18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006f1c:	464b      	mov	r3, r9
 8006f1e:	eb45 0303 	adc.w	r3, r5, r3
 8006f22:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006f32:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006f36:	f04f 0200 	mov.w	r2, #0
 8006f3a:	f04f 0300 	mov.w	r3, #0
 8006f3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006f42:	4629      	mov	r1, r5
 8006f44:	008b      	lsls	r3, r1, #2
 8006f46:	4621      	mov	r1, r4
 8006f48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f4c:	4621      	mov	r1, r4
 8006f4e:	008a      	lsls	r2, r1, #2
 8006f50:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006f54:	f7f9 fef8 	bl	8000d48 <__aeabi_uldivmod>
 8006f58:	4602      	mov	r2, r0
 8006f5a:	460b      	mov	r3, r1
 8006f5c:	4b60      	ldr	r3, [pc, #384]	@ (80070e0 <UART_SetConfig+0x4e4>)
 8006f5e:	fba3 2302 	umull	r2, r3, r3, r2
 8006f62:	095b      	lsrs	r3, r3, #5
 8006f64:	011c      	lsls	r4, r3, #4
 8006f66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006f70:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006f74:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006f78:	4642      	mov	r2, r8
 8006f7a:	464b      	mov	r3, r9
 8006f7c:	1891      	adds	r1, r2, r2
 8006f7e:	61b9      	str	r1, [r7, #24]
 8006f80:	415b      	adcs	r3, r3
 8006f82:	61fb      	str	r3, [r7, #28]
 8006f84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f88:	4641      	mov	r1, r8
 8006f8a:	1851      	adds	r1, r2, r1
 8006f8c:	6139      	str	r1, [r7, #16]
 8006f8e:	4649      	mov	r1, r9
 8006f90:	414b      	adcs	r3, r1
 8006f92:	617b      	str	r3, [r7, #20]
 8006f94:	f04f 0200 	mov.w	r2, #0
 8006f98:	f04f 0300 	mov.w	r3, #0
 8006f9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006fa0:	4659      	mov	r1, fp
 8006fa2:	00cb      	lsls	r3, r1, #3
 8006fa4:	4651      	mov	r1, sl
 8006fa6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006faa:	4651      	mov	r1, sl
 8006fac:	00ca      	lsls	r2, r1, #3
 8006fae:	4610      	mov	r0, r2
 8006fb0:	4619      	mov	r1, r3
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	4642      	mov	r2, r8
 8006fb6:	189b      	adds	r3, r3, r2
 8006fb8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006fbc:	464b      	mov	r3, r9
 8006fbe:	460a      	mov	r2, r1
 8006fc0:	eb42 0303 	adc.w	r3, r2, r3
 8006fc4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006fd2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006fd4:	f04f 0200 	mov.w	r2, #0
 8006fd8:	f04f 0300 	mov.w	r3, #0
 8006fdc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006fe0:	4649      	mov	r1, r9
 8006fe2:	008b      	lsls	r3, r1, #2
 8006fe4:	4641      	mov	r1, r8
 8006fe6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fea:	4641      	mov	r1, r8
 8006fec:	008a      	lsls	r2, r1, #2
 8006fee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006ff2:	f7f9 fea9 	bl	8000d48 <__aeabi_uldivmod>
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	460b      	mov	r3, r1
 8006ffa:	4611      	mov	r1, r2
 8006ffc:	4b38      	ldr	r3, [pc, #224]	@ (80070e0 <UART_SetConfig+0x4e4>)
 8006ffe:	fba3 2301 	umull	r2, r3, r3, r1
 8007002:	095b      	lsrs	r3, r3, #5
 8007004:	2264      	movs	r2, #100	@ 0x64
 8007006:	fb02 f303 	mul.w	r3, r2, r3
 800700a:	1acb      	subs	r3, r1, r3
 800700c:	011b      	lsls	r3, r3, #4
 800700e:	3332      	adds	r3, #50	@ 0x32
 8007010:	4a33      	ldr	r2, [pc, #204]	@ (80070e0 <UART_SetConfig+0x4e4>)
 8007012:	fba2 2303 	umull	r2, r3, r2, r3
 8007016:	095b      	lsrs	r3, r3, #5
 8007018:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800701c:	441c      	add	r4, r3
 800701e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007022:	2200      	movs	r2, #0
 8007024:	673b      	str	r3, [r7, #112]	@ 0x70
 8007026:	677a      	str	r2, [r7, #116]	@ 0x74
 8007028:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800702c:	4642      	mov	r2, r8
 800702e:	464b      	mov	r3, r9
 8007030:	1891      	adds	r1, r2, r2
 8007032:	60b9      	str	r1, [r7, #8]
 8007034:	415b      	adcs	r3, r3
 8007036:	60fb      	str	r3, [r7, #12]
 8007038:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800703c:	4641      	mov	r1, r8
 800703e:	1851      	adds	r1, r2, r1
 8007040:	6039      	str	r1, [r7, #0]
 8007042:	4649      	mov	r1, r9
 8007044:	414b      	adcs	r3, r1
 8007046:	607b      	str	r3, [r7, #4]
 8007048:	f04f 0200 	mov.w	r2, #0
 800704c:	f04f 0300 	mov.w	r3, #0
 8007050:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007054:	4659      	mov	r1, fp
 8007056:	00cb      	lsls	r3, r1, #3
 8007058:	4651      	mov	r1, sl
 800705a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800705e:	4651      	mov	r1, sl
 8007060:	00ca      	lsls	r2, r1, #3
 8007062:	4610      	mov	r0, r2
 8007064:	4619      	mov	r1, r3
 8007066:	4603      	mov	r3, r0
 8007068:	4642      	mov	r2, r8
 800706a:	189b      	adds	r3, r3, r2
 800706c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800706e:	464b      	mov	r3, r9
 8007070:	460a      	mov	r2, r1
 8007072:	eb42 0303 	adc.w	r3, r2, r3
 8007076:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	2200      	movs	r2, #0
 8007080:	663b      	str	r3, [r7, #96]	@ 0x60
 8007082:	667a      	str	r2, [r7, #100]	@ 0x64
 8007084:	f04f 0200 	mov.w	r2, #0
 8007088:	f04f 0300 	mov.w	r3, #0
 800708c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007090:	4649      	mov	r1, r9
 8007092:	008b      	lsls	r3, r1, #2
 8007094:	4641      	mov	r1, r8
 8007096:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800709a:	4641      	mov	r1, r8
 800709c:	008a      	lsls	r2, r1, #2
 800709e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80070a2:	f7f9 fe51 	bl	8000d48 <__aeabi_uldivmod>
 80070a6:	4602      	mov	r2, r0
 80070a8:	460b      	mov	r3, r1
 80070aa:	4b0d      	ldr	r3, [pc, #52]	@ (80070e0 <UART_SetConfig+0x4e4>)
 80070ac:	fba3 1302 	umull	r1, r3, r3, r2
 80070b0:	095b      	lsrs	r3, r3, #5
 80070b2:	2164      	movs	r1, #100	@ 0x64
 80070b4:	fb01 f303 	mul.w	r3, r1, r3
 80070b8:	1ad3      	subs	r3, r2, r3
 80070ba:	011b      	lsls	r3, r3, #4
 80070bc:	3332      	adds	r3, #50	@ 0x32
 80070be:	4a08      	ldr	r2, [pc, #32]	@ (80070e0 <UART_SetConfig+0x4e4>)
 80070c0:	fba2 2303 	umull	r2, r3, r2, r3
 80070c4:	095b      	lsrs	r3, r3, #5
 80070c6:	f003 020f 	and.w	r2, r3, #15
 80070ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4422      	add	r2, r4
 80070d2:	609a      	str	r2, [r3, #8]
}
 80070d4:	bf00      	nop
 80070d6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80070da:	46bd      	mov	sp, r7
 80070dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070e0:	51eb851f 	.word	0x51eb851f

080070e4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80070e4:	b084      	sub	sp, #16
 80070e6:	b580      	push	{r7, lr}
 80070e8:	b084      	sub	sp, #16
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	6078      	str	r0, [r7, #4]
 80070ee:	f107 001c 	add.w	r0, r7, #28
 80070f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80070f6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d123      	bne.n	8007146 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007102:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	68db      	ldr	r3, [r3, #12]
 800710e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007112:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	68db      	ldr	r3, [r3, #12]
 800711e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007126:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800712a:	2b01      	cmp	r3, #1
 800712c:	d105      	bne.n	800713a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	68db      	ldr	r3, [r3, #12]
 8007132:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 faa0 	bl	8007680 <USB_CoreReset>
 8007140:	4603      	mov	r3, r0
 8007142:	73fb      	strb	r3, [r7, #15]
 8007144:	e01b      	b.n	800717e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	68db      	ldr	r3, [r3, #12]
 800714a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 fa94 	bl	8007680 <USB_CoreReset>
 8007158:	4603      	mov	r3, r0
 800715a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800715c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007160:	2b00      	cmp	r3, #0
 8007162:	d106      	bne.n	8007172 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007168:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	639a      	str	r2, [r3, #56]	@ 0x38
 8007170:	e005      	b.n	800717e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007176:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800717e:	7fbb      	ldrb	r3, [r7, #30]
 8007180:	2b01      	cmp	r3, #1
 8007182:	d10b      	bne.n	800719c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	f043 0206 	orr.w	r2, r3, #6
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	689b      	ldr	r3, [r3, #8]
 8007194:	f043 0220 	orr.w	r2, r3, #32
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800719c:	7bfb      	ldrb	r3, [r7, #15]
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3710      	adds	r7, #16
 80071a2:	46bd      	mov	sp, r7
 80071a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80071a8:	b004      	add	sp, #16
 80071aa:	4770      	bx	lr

080071ac <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b083      	sub	sp, #12
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	f023 0201 	bic.w	r2, r3, #1
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80071c0:	2300      	movs	r3, #0
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	370c      	adds	r7, #12
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr

080071ce <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80071ce:	b580      	push	{r7, lr}
 80071d0:	b084      	sub	sp, #16
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
 80071d6:	460b      	mov	r3, r1
 80071d8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80071da:	2300      	movs	r3, #0
 80071dc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80071ea:	78fb      	ldrb	r3, [r7, #3]
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d115      	bne.n	800721c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	68db      	ldr	r3, [r3, #12]
 80071f4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80071fc:	200a      	movs	r0, #10
 80071fe:	f7fb fee1 	bl	8002fc4 <HAL_Delay>
      ms += 10U;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	330a      	adds	r3, #10
 8007206:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f000 fa2b 	bl	8007664 <USB_GetMode>
 800720e:	4603      	mov	r3, r0
 8007210:	2b01      	cmp	r3, #1
 8007212:	d01e      	beq.n	8007252 <USB_SetCurrentMode+0x84>
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2bc7      	cmp	r3, #199	@ 0xc7
 8007218:	d9f0      	bls.n	80071fc <USB_SetCurrentMode+0x2e>
 800721a:	e01a      	b.n	8007252 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800721c:	78fb      	ldrb	r3, [r7, #3]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d115      	bne.n	800724e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	68db      	ldr	r3, [r3, #12]
 8007226:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800722e:	200a      	movs	r0, #10
 8007230:	f7fb fec8 	bl	8002fc4 <HAL_Delay>
      ms += 10U;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	330a      	adds	r3, #10
 8007238:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 fa12 	bl	8007664 <USB_GetMode>
 8007240:	4603      	mov	r3, r0
 8007242:	2b00      	cmp	r3, #0
 8007244:	d005      	beq.n	8007252 <USB_SetCurrentMode+0x84>
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2bc7      	cmp	r3, #199	@ 0xc7
 800724a:	d9f0      	bls.n	800722e <USB_SetCurrentMode+0x60>
 800724c:	e001      	b.n	8007252 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	e005      	b.n	800725e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2bc8      	cmp	r3, #200	@ 0xc8
 8007256:	d101      	bne.n	800725c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007258:	2301      	movs	r3, #1
 800725a:	e000      	b.n	800725e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800725c:	2300      	movs	r3, #0
}
 800725e:	4618      	mov	r0, r3
 8007260:	3710      	adds	r7, #16
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}
	...

08007268 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007268:	b084      	sub	sp, #16
 800726a:	b580      	push	{r7, lr}
 800726c:	b086      	sub	sp, #24
 800726e:	af00      	add	r7, sp, #0
 8007270:	6078      	str	r0, [r7, #4]
 8007272:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007276:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800727a:	2300      	movs	r3, #0
 800727c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007282:	2300      	movs	r3, #0
 8007284:	613b      	str	r3, [r7, #16]
 8007286:	e009      	b.n	800729c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007288:	687a      	ldr	r2, [r7, #4]
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	3340      	adds	r3, #64	@ 0x40
 800728e:	009b      	lsls	r3, r3, #2
 8007290:	4413      	add	r3, r2
 8007292:	2200      	movs	r2, #0
 8007294:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	3301      	adds	r3, #1
 800729a:	613b      	str	r3, [r7, #16]
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	2b0e      	cmp	r3, #14
 80072a0:	d9f2      	bls.n	8007288 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80072a2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d11c      	bne.n	80072e4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	68fa      	ldr	r2, [r7, #12]
 80072b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80072b8:	f043 0302 	orr.w	r3, r3, #2
 80072bc:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072c2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072ce:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072da:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	639a      	str	r2, [r3, #56]	@ 0x38
 80072e2:	e00b      	b.n	80072fc <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072e8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072f4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007302:	461a      	mov	r2, r3
 8007304:	2300      	movs	r3, #0
 8007306:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007308:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800730c:	2b01      	cmp	r3, #1
 800730e:	d10d      	bne.n	800732c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007310:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007314:	2b00      	cmp	r3, #0
 8007316:	d104      	bne.n	8007322 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007318:	2100      	movs	r1, #0
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 f968 	bl	80075f0 <USB_SetDevSpeed>
 8007320:	e008      	b.n	8007334 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007322:	2101      	movs	r1, #1
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 f963 	bl	80075f0 <USB_SetDevSpeed>
 800732a:	e003      	b.n	8007334 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800732c:	2103      	movs	r1, #3
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f000 f95e 	bl	80075f0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007334:	2110      	movs	r1, #16
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 f8fa 	bl	8007530 <USB_FlushTxFifo>
 800733c:	4603      	mov	r3, r0
 800733e:	2b00      	cmp	r3, #0
 8007340:	d001      	beq.n	8007346 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8007342:	2301      	movs	r3, #1
 8007344:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 f924 	bl	8007594 <USB_FlushRxFifo>
 800734c:	4603      	mov	r3, r0
 800734e:	2b00      	cmp	r3, #0
 8007350:	d001      	beq.n	8007356 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8007352:	2301      	movs	r3, #1
 8007354:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800735c:	461a      	mov	r2, r3
 800735e:	2300      	movs	r3, #0
 8007360:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007368:	461a      	mov	r2, r3
 800736a:	2300      	movs	r3, #0
 800736c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007374:	461a      	mov	r2, r3
 8007376:	2300      	movs	r3, #0
 8007378:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800737a:	2300      	movs	r3, #0
 800737c:	613b      	str	r3, [r7, #16]
 800737e:	e043      	b.n	8007408 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	015a      	lsls	r2, r3, #5
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	4413      	add	r3, r2
 8007388:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007392:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007396:	d118      	bne.n	80073ca <USB_DevInit+0x162>
    {
      if (i == 0U)
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d10a      	bne.n	80073b4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	015a      	lsls	r2, r3, #5
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	4413      	add	r3, r2
 80073a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073aa:	461a      	mov	r2, r3
 80073ac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80073b0:	6013      	str	r3, [r2, #0]
 80073b2:	e013      	b.n	80073dc <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	015a      	lsls	r2, r3, #5
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	4413      	add	r3, r2
 80073bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073c0:	461a      	mov	r2, r3
 80073c2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80073c6:	6013      	str	r3, [r2, #0]
 80073c8:	e008      	b.n	80073dc <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	015a      	lsls	r2, r3, #5
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	4413      	add	r3, r2
 80073d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073d6:	461a      	mov	r2, r3
 80073d8:	2300      	movs	r3, #0
 80073da:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	015a      	lsls	r2, r3, #5
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	4413      	add	r3, r2
 80073e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073e8:	461a      	mov	r2, r3
 80073ea:	2300      	movs	r3, #0
 80073ec:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	015a      	lsls	r2, r3, #5
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	4413      	add	r3, r2
 80073f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073fa:	461a      	mov	r2, r3
 80073fc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007400:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	3301      	adds	r3, #1
 8007406:	613b      	str	r3, [r7, #16]
 8007408:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800740c:	461a      	mov	r2, r3
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	4293      	cmp	r3, r2
 8007412:	d3b5      	bcc.n	8007380 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007414:	2300      	movs	r3, #0
 8007416:	613b      	str	r3, [r7, #16]
 8007418:	e043      	b.n	80074a2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	015a      	lsls	r2, r3, #5
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	4413      	add	r3, r2
 8007422:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800742c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007430:	d118      	bne.n	8007464 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d10a      	bne.n	800744e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	015a      	lsls	r2, r3, #5
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	4413      	add	r3, r2
 8007440:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007444:	461a      	mov	r2, r3
 8007446:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800744a:	6013      	str	r3, [r2, #0]
 800744c:	e013      	b.n	8007476 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	015a      	lsls	r2, r3, #5
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	4413      	add	r3, r2
 8007456:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800745a:	461a      	mov	r2, r3
 800745c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007460:	6013      	str	r3, [r2, #0]
 8007462:	e008      	b.n	8007476 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	015a      	lsls	r2, r3, #5
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	4413      	add	r3, r2
 800746c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007470:	461a      	mov	r2, r3
 8007472:	2300      	movs	r3, #0
 8007474:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	015a      	lsls	r2, r3, #5
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	4413      	add	r3, r2
 800747e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007482:	461a      	mov	r2, r3
 8007484:	2300      	movs	r3, #0
 8007486:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	015a      	lsls	r2, r3, #5
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	4413      	add	r3, r2
 8007490:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007494:	461a      	mov	r2, r3
 8007496:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800749a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	3301      	adds	r3, #1
 80074a0:	613b      	str	r3, [r7, #16]
 80074a2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80074a6:	461a      	mov	r2, r3
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d3b5      	bcc.n	800741a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074b4:	691b      	ldr	r3, [r3, #16]
 80074b6:	68fa      	ldr	r2, [r7, #12]
 80074b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80074bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80074c0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2200      	movs	r2, #0
 80074c6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80074ce:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80074d0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d105      	bne.n	80074e4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	699b      	ldr	r3, [r3, #24]
 80074dc:	f043 0210 	orr.w	r2, r3, #16
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	699a      	ldr	r2, [r3, #24]
 80074e8:	4b10      	ldr	r3, [pc, #64]	@ (800752c <USB_DevInit+0x2c4>)
 80074ea:	4313      	orrs	r3, r2
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80074f0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d005      	beq.n	8007504 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	699b      	ldr	r3, [r3, #24]
 80074fc:	f043 0208 	orr.w	r2, r3, #8
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007504:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007508:	2b01      	cmp	r3, #1
 800750a:	d107      	bne.n	800751c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	699b      	ldr	r3, [r3, #24]
 8007510:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007514:	f043 0304 	orr.w	r3, r3, #4
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800751c:	7dfb      	ldrb	r3, [r7, #23]
}
 800751e:	4618      	mov	r0, r3
 8007520:	3718      	adds	r7, #24
 8007522:	46bd      	mov	sp, r7
 8007524:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007528:	b004      	add	sp, #16
 800752a:	4770      	bx	lr
 800752c:	803c3800 	.word	0x803c3800

08007530 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007530:	b480      	push	{r7}
 8007532:	b085      	sub	sp, #20
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800753a:	2300      	movs	r3, #0
 800753c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	3301      	adds	r3, #1
 8007542:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800754a:	d901      	bls.n	8007550 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800754c:	2303      	movs	r3, #3
 800754e:	e01b      	b.n	8007588 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	691b      	ldr	r3, [r3, #16]
 8007554:	2b00      	cmp	r3, #0
 8007556:	daf2      	bge.n	800753e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007558:	2300      	movs	r3, #0
 800755a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	019b      	lsls	r3, r3, #6
 8007560:	f043 0220 	orr.w	r2, r3, #32
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	3301      	adds	r3, #1
 800756c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007574:	d901      	bls.n	800757a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007576:	2303      	movs	r3, #3
 8007578:	e006      	b.n	8007588 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	691b      	ldr	r3, [r3, #16]
 800757e:	f003 0320 	and.w	r3, r3, #32
 8007582:	2b20      	cmp	r3, #32
 8007584:	d0f0      	beq.n	8007568 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007586:	2300      	movs	r3, #0
}
 8007588:	4618      	mov	r0, r3
 800758a:	3714      	adds	r7, #20
 800758c:	46bd      	mov	sp, r7
 800758e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007592:	4770      	bx	lr

08007594 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007594:	b480      	push	{r7}
 8007596:	b085      	sub	sp, #20
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800759c:	2300      	movs	r3, #0
 800759e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	3301      	adds	r3, #1
 80075a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80075ac:	d901      	bls.n	80075b2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80075ae:	2303      	movs	r3, #3
 80075b0:	e018      	b.n	80075e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	691b      	ldr	r3, [r3, #16]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	daf2      	bge.n	80075a0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80075ba:	2300      	movs	r3, #0
 80075bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2210      	movs	r2, #16
 80075c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	3301      	adds	r3, #1
 80075c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80075d0:	d901      	bls.n	80075d6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80075d2:	2303      	movs	r3, #3
 80075d4:	e006      	b.n	80075e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	691b      	ldr	r3, [r3, #16]
 80075da:	f003 0310 	and.w	r3, r3, #16
 80075de:	2b10      	cmp	r3, #16
 80075e0:	d0f0      	beq.n	80075c4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80075e2:	2300      	movs	r3, #0
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3714      	adds	r7, #20
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr

080075f0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b085      	sub	sp, #20
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
 80075f8:	460b      	mov	r3, r1
 80075fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	78fb      	ldrb	r3, [r7, #3]
 800760a:	68f9      	ldr	r1, [r7, #12]
 800760c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007610:	4313      	orrs	r3, r2
 8007612:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007614:	2300      	movs	r3, #0
}
 8007616:	4618      	mov	r0, r3
 8007618:	3714      	adds	r7, #20
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr

08007622 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007622:	b480      	push	{r7}
 8007624:	b085      	sub	sp, #20
 8007626:	af00      	add	r7, sp, #0
 8007628:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	68fa      	ldr	r2, [r7, #12]
 8007638:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800763c:	f023 0303 	bic.w	r3, r3, #3
 8007640:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	68fa      	ldr	r2, [r7, #12]
 800764c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007650:	f043 0302 	orr.w	r3, r3, #2
 8007654:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007656:	2300      	movs	r3, #0
}
 8007658:	4618      	mov	r0, r3
 800765a:	3714      	adds	r7, #20
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr

08007664 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007664:	b480      	push	{r7}
 8007666:	b083      	sub	sp, #12
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	695b      	ldr	r3, [r3, #20]
 8007670:	f003 0301 	and.w	r3, r3, #1
}
 8007674:	4618      	mov	r0, r3
 8007676:	370c      	adds	r7, #12
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr

08007680 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007680:	b480      	push	{r7}
 8007682:	b085      	sub	sp, #20
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007688:	2300      	movs	r3, #0
 800768a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	3301      	adds	r3, #1
 8007690:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007698:	d901      	bls.n	800769e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800769a:	2303      	movs	r3, #3
 800769c:	e01b      	b.n	80076d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	691b      	ldr	r3, [r3, #16]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	daf2      	bge.n	800768c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80076a6:	2300      	movs	r3, #0
 80076a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	691b      	ldr	r3, [r3, #16]
 80076ae:	f043 0201 	orr.w	r2, r3, #1
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	3301      	adds	r3, #1
 80076ba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80076c2:	d901      	bls.n	80076c8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80076c4:	2303      	movs	r3, #3
 80076c6:	e006      	b.n	80076d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	691b      	ldr	r3, [r3, #16]
 80076cc:	f003 0301 	and.w	r3, r3, #1
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d0f0      	beq.n	80076b6 <USB_CoreReset+0x36>

  return HAL_OK;
 80076d4:	2300      	movs	r3, #0
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3714      	adds	r7, #20
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr
	...

080076e4 <exit>:
 80076e4:	b508      	push	{r3, lr}
 80076e6:	4b06      	ldr	r3, [pc, #24]	@ (8007700 <exit+0x1c>)
 80076e8:	4604      	mov	r4, r0
 80076ea:	b113      	cbz	r3, 80076f2 <exit+0xe>
 80076ec:	2100      	movs	r1, #0
 80076ee:	f3af 8000 	nop.w
 80076f2:	4b04      	ldr	r3, [pc, #16]	@ (8007704 <exit+0x20>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	b103      	cbz	r3, 80076fa <exit+0x16>
 80076f8:	4798      	blx	r3
 80076fa:	4620      	mov	r0, r4
 80076fc:	f7fb fb06 	bl	8002d0c <_exit>
 8007700:	00000000 	.word	0x00000000
 8007704:	20000bec 	.word	0x20000bec

08007708 <__cvt>:
 8007708:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800770c:	ec57 6b10 	vmov	r6, r7, d0
 8007710:	2f00      	cmp	r7, #0
 8007712:	460c      	mov	r4, r1
 8007714:	4619      	mov	r1, r3
 8007716:	463b      	mov	r3, r7
 8007718:	bfbb      	ittet	lt
 800771a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800771e:	461f      	movlt	r7, r3
 8007720:	2300      	movge	r3, #0
 8007722:	232d      	movlt	r3, #45	@ 0x2d
 8007724:	700b      	strb	r3, [r1, #0]
 8007726:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007728:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800772c:	4691      	mov	r9, r2
 800772e:	f023 0820 	bic.w	r8, r3, #32
 8007732:	bfbc      	itt	lt
 8007734:	4632      	movlt	r2, r6
 8007736:	4616      	movlt	r6, r2
 8007738:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800773c:	d005      	beq.n	800774a <__cvt+0x42>
 800773e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007742:	d100      	bne.n	8007746 <__cvt+0x3e>
 8007744:	3401      	adds	r4, #1
 8007746:	2102      	movs	r1, #2
 8007748:	e000      	b.n	800774c <__cvt+0x44>
 800774a:	2103      	movs	r1, #3
 800774c:	ab03      	add	r3, sp, #12
 800774e:	9301      	str	r3, [sp, #4]
 8007750:	ab02      	add	r3, sp, #8
 8007752:	9300      	str	r3, [sp, #0]
 8007754:	ec47 6b10 	vmov	d0, r6, r7
 8007758:	4653      	mov	r3, sl
 800775a:	4622      	mov	r2, r4
 800775c:	f001 f874 	bl	8008848 <_dtoa_r>
 8007760:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007764:	4605      	mov	r5, r0
 8007766:	d119      	bne.n	800779c <__cvt+0x94>
 8007768:	f019 0f01 	tst.w	r9, #1
 800776c:	d00e      	beq.n	800778c <__cvt+0x84>
 800776e:	eb00 0904 	add.w	r9, r0, r4
 8007772:	2200      	movs	r2, #0
 8007774:	2300      	movs	r3, #0
 8007776:	4630      	mov	r0, r6
 8007778:	4639      	mov	r1, r7
 800777a:	f7f9 f9b5 	bl	8000ae8 <__aeabi_dcmpeq>
 800777e:	b108      	cbz	r0, 8007784 <__cvt+0x7c>
 8007780:	f8cd 900c 	str.w	r9, [sp, #12]
 8007784:	2230      	movs	r2, #48	@ 0x30
 8007786:	9b03      	ldr	r3, [sp, #12]
 8007788:	454b      	cmp	r3, r9
 800778a:	d31e      	bcc.n	80077ca <__cvt+0xc2>
 800778c:	9b03      	ldr	r3, [sp, #12]
 800778e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007790:	1b5b      	subs	r3, r3, r5
 8007792:	4628      	mov	r0, r5
 8007794:	6013      	str	r3, [r2, #0]
 8007796:	b004      	add	sp, #16
 8007798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800779c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80077a0:	eb00 0904 	add.w	r9, r0, r4
 80077a4:	d1e5      	bne.n	8007772 <__cvt+0x6a>
 80077a6:	7803      	ldrb	r3, [r0, #0]
 80077a8:	2b30      	cmp	r3, #48	@ 0x30
 80077aa:	d10a      	bne.n	80077c2 <__cvt+0xba>
 80077ac:	2200      	movs	r2, #0
 80077ae:	2300      	movs	r3, #0
 80077b0:	4630      	mov	r0, r6
 80077b2:	4639      	mov	r1, r7
 80077b4:	f7f9 f998 	bl	8000ae8 <__aeabi_dcmpeq>
 80077b8:	b918      	cbnz	r0, 80077c2 <__cvt+0xba>
 80077ba:	f1c4 0401 	rsb	r4, r4, #1
 80077be:	f8ca 4000 	str.w	r4, [sl]
 80077c2:	f8da 3000 	ldr.w	r3, [sl]
 80077c6:	4499      	add	r9, r3
 80077c8:	e7d3      	b.n	8007772 <__cvt+0x6a>
 80077ca:	1c59      	adds	r1, r3, #1
 80077cc:	9103      	str	r1, [sp, #12]
 80077ce:	701a      	strb	r2, [r3, #0]
 80077d0:	e7d9      	b.n	8007786 <__cvt+0x7e>

080077d2 <__exponent>:
 80077d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80077d4:	2900      	cmp	r1, #0
 80077d6:	bfba      	itte	lt
 80077d8:	4249      	neglt	r1, r1
 80077da:	232d      	movlt	r3, #45	@ 0x2d
 80077dc:	232b      	movge	r3, #43	@ 0x2b
 80077de:	2909      	cmp	r1, #9
 80077e0:	7002      	strb	r2, [r0, #0]
 80077e2:	7043      	strb	r3, [r0, #1]
 80077e4:	dd29      	ble.n	800783a <__exponent+0x68>
 80077e6:	f10d 0307 	add.w	r3, sp, #7
 80077ea:	461d      	mov	r5, r3
 80077ec:	270a      	movs	r7, #10
 80077ee:	461a      	mov	r2, r3
 80077f0:	fbb1 f6f7 	udiv	r6, r1, r7
 80077f4:	fb07 1416 	mls	r4, r7, r6, r1
 80077f8:	3430      	adds	r4, #48	@ 0x30
 80077fa:	f802 4c01 	strb.w	r4, [r2, #-1]
 80077fe:	460c      	mov	r4, r1
 8007800:	2c63      	cmp	r4, #99	@ 0x63
 8007802:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8007806:	4631      	mov	r1, r6
 8007808:	dcf1      	bgt.n	80077ee <__exponent+0x1c>
 800780a:	3130      	adds	r1, #48	@ 0x30
 800780c:	1e94      	subs	r4, r2, #2
 800780e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007812:	1c41      	adds	r1, r0, #1
 8007814:	4623      	mov	r3, r4
 8007816:	42ab      	cmp	r3, r5
 8007818:	d30a      	bcc.n	8007830 <__exponent+0x5e>
 800781a:	f10d 0309 	add.w	r3, sp, #9
 800781e:	1a9b      	subs	r3, r3, r2
 8007820:	42ac      	cmp	r4, r5
 8007822:	bf88      	it	hi
 8007824:	2300      	movhi	r3, #0
 8007826:	3302      	adds	r3, #2
 8007828:	4403      	add	r3, r0
 800782a:	1a18      	subs	r0, r3, r0
 800782c:	b003      	add	sp, #12
 800782e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007830:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007834:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007838:	e7ed      	b.n	8007816 <__exponent+0x44>
 800783a:	2330      	movs	r3, #48	@ 0x30
 800783c:	3130      	adds	r1, #48	@ 0x30
 800783e:	7083      	strb	r3, [r0, #2]
 8007840:	70c1      	strb	r1, [r0, #3]
 8007842:	1d03      	adds	r3, r0, #4
 8007844:	e7f1      	b.n	800782a <__exponent+0x58>
	...

08007848 <_printf_float>:
 8007848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800784c:	b08d      	sub	sp, #52	@ 0x34
 800784e:	460c      	mov	r4, r1
 8007850:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007854:	4616      	mov	r6, r2
 8007856:	461f      	mov	r7, r3
 8007858:	4605      	mov	r5, r0
 800785a:	f000 feef 	bl	800863c <_localeconv_r>
 800785e:	6803      	ldr	r3, [r0, #0]
 8007860:	9304      	str	r3, [sp, #16]
 8007862:	4618      	mov	r0, r3
 8007864:	f7f8 fd14 	bl	8000290 <strlen>
 8007868:	2300      	movs	r3, #0
 800786a:	930a      	str	r3, [sp, #40]	@ 0x28
 800786c:	f8d8 3000 	ldr.w	r3, [r8]
 8007870:	9005      	str	r0, [sp, #20]
 8007872:	3307      	adds	r3, #7
 8007874:	f023 0307 	bic.w	r3, r3, #7
 8007878:	f103 0208 	add.w	r2, r3, #8
 800787c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007880:	f8d4 b000 	ldr.w	fp, [r4]
 8007884:	f8c8 2000 	str.w	r2, [r8]
 8007888:	e9d3 8900 	ldrd	r8, r9, [r3]
 800788c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007890:	9307      	str	r3, [sp, #28]
 8007892:	f8cd 8018 	str.w	r8, [sp, #24]
 8007896:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800789a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800789e:	4b9c      	ldr	r3, [pc, #624]	@ (8007b10 <_printf_float+0x2c8>)
 80078a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80078a4:	f7f9 f952 	bl	8000b4c <__aeabi_dcmpun>
 80078a8:	bb70      	cbnz	r0, 8007908 <_printf_float+0xc0>
 80078aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80078ae:	4b98      	ldr	r3, [pc, #608]	@ (8007b10 <_printf_float+0x2c8>)
 80078b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80078b4:	f7f9 f92c 	bl	8000b10 <__aeabi_dcmple>
 80078b8:	bb30      	cbnz	r0, 8007908 <_printf_float+0xc0>
 80078ba:	2200      	movs	r2, #0
 80078bc:	2300      	movs	r3, #0
 80078be:	4640      	mov	r0, r8
 80078c0:	4649      	mov	r1, r9
 80078c2:	f7f9 f91b 	bl	8000afc <__aeabi_dcmplt>
 80078c6:	b110      	cbz	r0, 80078ce <_printf_float+0x86>
 80078c8:	232d      	movs	r3, #45	@ 0x2d
 80078ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80078ce:	4a91      	ldr	r2, [pc, #580]	@ (8007b14 <_printf_float+0x2cc>)
 80078d0:	4b91      	ldr	r3, [pc, #580]	@ (8007b18 <_printf_float+0x2d0>)
 80078d2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80078d6:	bf94      	ite	ls
 80078d8:	4690      	movls	r8, r2
 80078da:	4698      	movhi	r8, r3
 80078dc:	2303      	movs	r3, #3
 80078de:	6123      	str	r3, [r4, #16]
 80078e0:	f02b 0304 	bic.w	r3, fp, #4
 80078e4:	6023      	str	r3, [r4, #0]
 80078e6:	f04f 0900 	mov.w	r9, #0
 80078ea:	9700      	str	r7, [sp, #0]
 80078ec:	4633      	mov	r3, r6
 80078ee:	aa0b      	add	r2, sp, #44	@ 0x2c
 80078f0:	4621      	mov	r1, r4
 80078f2:	4628      	mov	r0, r5
 80078f4:	f000 f9d2 	bl	8007c9c <_printf_common>
 80078f8:	3001      	adds	r0, #1
 80078fa:	f040 808d 	bne.w	8007a18 <_printf_float+0x1d0>
 80078fe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007902:	b00d      	add	sp, #52	@ 0x34
 8007904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007908:	4642      	mov	r2, r8
 800790a:	464b      	mov	r3, r9
 800790c:	4640      	mov	r0, r8
 800790e:	4649      	mov	r1, r9
 8007910:	f7f9 f91c 	bl	8000b4c <__aeabi_dcmpun>
 8007914:	b140      	cbz	r0, 8007928 <_printf_float+0xe0>
 8007916:	464b      	mov	r3, r9
 8007918:	2b00      	cmp	r3, #0
 800791a:	bfbc      	itt	lt
 800791c:	232d      	movlt	r3, #45	@ 0x2d
 800791e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007922:	4a7e      	ldr	r2, [pc, #504]	@ (8007b1c <_printf_float+0x2d4>)
 8007924:	4b7e      	ldr	r3, [pc, #504]	@ (8007b20 <_printf_float+0x2d8>)
 8007926:	e7d4      	b.n	80078d2 <_printf_float+0x8a>
 8007928:	6863      	ldr	r3, [r4, #4]
 800792a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800792e:	9206      	str	r2, [sp, #24]
 8007930:	1c5a      	adds	r2, r3, #1
 8007932:	d13b      	bne.n	80079ac <_printf_float+0x164>
 8007934:	2306      	movs	r3, #6
 8007936:	6063      	str	r3, [r4, #4]
 8007938:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800793c:	2300      	movs	r3, #0
 800793e:	6022      	str	r2, [r4, #0]
 8007940:	9303      	str	r3, [sp, #12]
 8007942:	ab0a      	add	r3, sp, #40	@ 0x28
 8007944:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007948:	ab09      	add	r3, sp, #36	@ 0x24
 800794a:	9300      	str	r3, [sp, #0]
 800794c:	6861      	ldr	r1, [r4, #4]
 800794e:	ec49 8b10 	vmov	d0, r8, r9
 8007952:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007956:	4628      	mov	r0, r5
 8007958:	f7ff fed6 	bl	8007708 <__cvt>
 800795c:	9b06      	ldr	r3, [sp, #24]
 800795e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007960:	2b47      	cmp	r3, #71	@ 0x47
 8007962:	4680      	mov	r8, r0
 8007964:	d129      	bne.n	80079ba <_printf_float+0x172>
 8007966:	1cc8      	adds	r0, r1, #3
 8007968:	db02      	blt.n	8007970 <_printf_float+0x128>
 800796a:	6863      	ldr	r3, [r4, #4]
 800796c:	4299      	cmp	r1, r3
 800796e:	dd41      	ble.n	80079f4 <_printf_float+0x1ac>
 8007970:	f1aa 0a02 	sub.w	sl, sl, #2
 8007974:	fa5f fa8a 	uxtb.w	sl, sl
 8007978:	3901      	subs	r1, #1
 800797a:	4652      	mov	r2, sl
 800797c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007980:	9109      	str	r1, [sp, #36]	@ 0x24
 8007982:	f7ff ff26 	bl	80077d2 <__exponent>
 8007986:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007988:	1813      	adds	r3, r2, r0
 800798a:	2a01      	cmp	r2, #1
 800798c:	4681      	mov	r9, r0
 800798e:	6123      	str	r3, [r4, #16]
 8007990:	dc02      	bgt.n	8007998 <_printf_float+0x150>
 8007992:	6822      	ldr	r2, [r4, #0]
 8007994:	07d2      	lsls	r2, r2, #31
 8007996:	d501      	bpl.n	800799c <_printf_float+0x154>
 8007998:	3301      	adds	r3, #1
 800799a:	6123      	str	r3, [r4, #16]
 800799c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d0a2      	beq.n	80078ea <_printf_float+0xa2>
 80079a4:	232d      	movs	r3, #45	@ 0x2d
 80079a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80079aa:	e79e      	b.n	80078ea <_printf_float+0xa2>
 80079ac:	9a06      	ldr	r2, [sp, #24]
 80079ae:	2a47      	cmp	r2, #71	@ 0x47
 80079b0:	d1c2      	bne.n	8007938 <_printf_float+0xf0>
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d1c0      	bne.n	8007938 <_printf_float+0xf0>
 80079b6:	2301      	movs	r3, #1
 80079b8:	e7bd      	b.n	8007936 <_printf_float+0xee>
 80079ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80079be:	d9db      	bls.n	8007978 <_printf_float+0x130>
 80079c0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80079c4:	d118      	bne.n	80079f8 <_printf_float+0x1b0>
 80079c6:	2900      	cmp	r1, #0
 80079c8:	6863      	ldr	r3, [r4, #4]
 80079ca:	dd0b      	ble.n	80079e4 <_printf_float+0x19c>
 80079cc:	6121      	str	r1, [r4, #16]
 80079ce:	b913      	cbnz	r3, 80079d6 <_printf_float+0x18e>
 80079d0:	6822      	ldr	r2, [r4, #0]
 80079d2:	07d0      	lsls	r0, r2, #31
 80079d4:	d502      	bpl.n	80079dc <_printf_float+0x194>
 80079d6:	3301      	adds	r3, #1
 80079d8:	440b      	add	r3, r1
 80079da:	6123      	str	r3, [r4, #16]
 80079dc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80079de:	f04f 0900 	mov.w	r9, #0
 80079e2:	e7db      	b.n	800799c <_printf_float+0x154>
 80079e4:	b913      	cbnz	r3, 80079ec <_printf_float+0x1a4>
 80079e6:	6822      	ldr	r2, [r4, #0]
 80079e8:	07d2      	lsls	r2, r2, #31
 80079ea:	d501      	bpl.n	80079f0 <_printf_float+0x1a8>
 80079ec:	3302      	adds	r3, #2
 80079ee:	e7f4      	b.n	80079da <_printf_float+0x192>
 80079f0:	2301      	movs	r3, #1
 80079f2:	e7f2      	b.n	80079da <_printf_float+0x192>
 80079f4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80079f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079fa:	4299      	cmp	r1, r3
 80079fc:	db05      	blt.n	8007a0a <_printf_float+0x1c2>
 80079fe:	6823      	ldr	r3, [r4, #0]
 8007a00:	6121      	str	r1, [r4, #16]
 8007a02:	07d8      	lsls	r0, r3, #31
 8007a04:	d5ea      	bpl.n	80079dc <_printf_float+0x194>
 8007a06:	1c4b      	adds	r3, r1, #1
 8007a08:	e7e7      	b.n	80079da <_printf_float+0x192>
 8007a0a:	2900      	cmp	r1, #0
 8007a0c:	bfd4      	ite	le
 8007a0e:	f1c1 0202 	rsble	r2, r1, #2
 8007a12:	2201      	movgt	r2, #1
 8007a14:	4413      	add	r3, r2
 8007a16:	e7e0      	b.n	80079da <_printf_float+0x192>
 8007a18:	6823      	ldr	r3, [r4, #0]
 8007a1a:	055a      	lsls	r2, r3, #21
 8007a1c:	d407      	bmi.n	8007a2e <_printf_float+0x1e6>
 8007a1e:	6923      	ldr	r3, [r4, #16]
 8007a20:	4642      	mov	r2, r8
 8007a22:	4631      	mov	r1, r6
 8007a24:	4628      	mov	r0, r5
 8007a26:	47b8      	blx	r7
 8007a28:	3001      	adds	r0, #1
 8007a2a:	d12b      	bne.n	8007a84 <_printf_float+0x23c>
 8007a2c:	e767      	b.n	80078fe <_printf_float+0xb6>
 8007a2e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007a32:	f240 80dd 	bls.w	8007bf0 <_printf_float+0x3a8>
 8007a36:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	f7f9 f853 	bl	8000ae8 <__aeabi_dcmpeq>
 8007a42:	2800      	cmp	r0, #0
 8007a44:	d033      	beq.n	8007aae <_printf_float+0x266>
 8007a46:	4a37      	ldr	r2, [pc, #220]	@ (8007b24 <_printf_float+0x2dc>)
 8007a48:	2301      	movs	r3, #1
 8007a4a:	4631      	mov	r1, r6
 8007a4c:	4628      	mov	r0, r5
 8007a4e:	47b8      	blx	r7
 8007a50:	3001      	adds	r0, #1
 8007a52:	f43f af54 	beq.w	80078fe <_printf_float+0xb6>
 8007a56:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007a5a:	4543      	cmp	r3, r8
 8007a5c:	db02      	blt.n	8007a64 <_printf_float+0x21c>
 8007a5e:	6823      	ldr	r3, [r4, #0]
 8007a60:	07d8      	lsls	r0, r3, #31
 8007a62:	d50f      	bpl.n	8007a84 <_printf_float+0x23c>
 8007a64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a68:	4631      	mov	r1, r6
 8007a6a:	4628      	mov	r0, r5
 8007a6c:	47b8      	blx	r7
 8007a6e:	3001      	adds	r0, #1
 8007a70:	f43f af45 	beq.w	80078fe <_printf_float+0xb6>
 8007a74:	f04f 0900 	mov.w	r9, #0
 8007a78:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8007a7c:	f104 0a1a 	add.w	sl, r4, #26
 8007a80:	45c8      	cmp	r8, r9
 8007a82:	dc09      	bgt.n	8007a98 <_printf_float+0x250>
 8007a84:	6823      	ldr	r3, [r4, #0]
 8007a86:	079b      	lsls	r3, r3, #30
 8007a88:	f100 8103 	bmi.w	8007c92 <_printf_float+0x44a>
 8007a8c:	68e0      	ldr	r0, [r4, #12]
 8007a8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a90:	4298      	cmp	r0, r3
 8007a92:	bfb8      	it	lt
 8007a94:	4618      	movlt	r0, r3
 8007a96:	e734      	b.n	8007902 <_printf_float+0xba>
 8007a98:	2301      	movs	r3, #1
 8007a9a:	4652      	mov	r2, sl
 8007a9c:	4631      	mov	r1, r6
 8007a9e:	4628      	mov	r0, r5
 8007aa0:	47b8      	blx	r7
 8007aa2:	3001      	adds	r0, #1
 8007aa4:	f43f af2b 	beq.w	80078fe <_printf_float+0xb6>
 8007aa8:	f109 0901 	add.w	r9, r9, #1
 8007aac:	e7e8      	b.n	8007a80 <_printf_float+0x238>
 8007aae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	dc39      	bgt.n	8007b28 <_printf_float+0x2e0>
 8007ab4:	4a1b      	ldr	r2, [pc, #108]	@ (8007b24 <_printf_float+0x2dc>)
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	4631      	mov	r1, r6
 8007aba:	4628      	mov	r0, r5
 8007abc:	47b8      	blx	r7
 8007abe:	3001      	adds	r0, #1
 8007ac0:	f43f af1d 	beq.w	80078fe <_printf_float+0xb6>
 8007ac4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007ac8:	ea59 0303 	orrs.w	r3, r9, r3
 8007acc:	d102      	bne.n	8007ad4 <_printf_float+0x28c>
 8007ace:	6823      	ldr	r3, [r4, #0]
 8007ad0:	07d9      	lsls	r1, r3, #31
 8007ad2:	d5d7      	bpl.n	8007a84 <_printf_float+0x23c>
 8007ad4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ad8:	4631      	mov	r1, r6
 8007ada:	4628      	mov	r0, r5
 8007adc:	47b8      	blx	r7
 8007ade:	3001      	adds	r0, #1
 8007ae0:	f43f af0d 	beq.w	80078fe <_printf_float+0xb6>
 8007ae4:	f04f 0a00 	mov.w	sl, #0
 8007ae8:	f104 0b1a 	add.w	fp, r4, #26
 8007aec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007aee:	425b      	negs	r3, r3
 8007af0:	4553      	cmp	r3, sl
 8007af2:	dc01      	bgt.n	8007af8 <_printf_float+0x2b0>
 8007af4:	464b      	mov	r3, r9
 8007af6:	e793      	b.n	8007a20 <_printf_float+0x1d8>
 8007af8:	2301      	movs	r3, #1
 8007afa:	465a      	mov	r2, fp
 8007afc:	4631      	mov	r1, r6
 8007afe:	4628      	mov	r0, r5
 8007b00:	47b8      	blx	r7
 8007b02:	3001      	adds	r0, #1
 8007b04:	f43f aefb 	beq.w	80078fe <_printf_float+0xb6>
 8007b08:	f10a 0a01 	add.w	sl, sl, #1
 8007b0c:	e7ee      	b.n	8007aec <_printf_float+0x2a4>
 8007b0e:	bf00      	nop
 8007b10:	7fefffff 	.word	0x7fefffff
 8007b14:	0800be5c 	.word	0x0800be5c
 8007b18:	0800be60 	.word	0x0800be60
 8007b1c:	0800be64 	.word	0x0800be64
 8007b20:	0800be68 	.word	0x0800be68
 8007b24:	0800be6c 	.word	0x0800be6c
 8007b28:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007b2a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007b2e:	4553      	cmp	r3, sl
 8007b30:	bfa8      	it	ge
 8007b32:	4653      	movge	r3, sl
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	4699      	mov	r9, r3
 8007b38:	dc36      	bgt.n	8007ba8 <_printf_float+0x360>
 8007b3a:	f04f 0b00 	mov.w	fp, #0
 8007b3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b42:	f104 021a 	add.w	r2, r4, #26
 8007b46:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007b48:	9306      	str	r3, [sp, #24]
 8007b4a:	eba3 0309 	sub.w	r3, r3, r9
 8007b4e:	455b      	cmp	r3, fp
 8007b50:	dc31      	bgt.n	8007bb6 <_printf_float+0x36e>
 8007b52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b54:	459a      	cmp	sl, r3
 8007b56:	dc3a      	bgt.n	8007bce <_printf_float+0x386>
 8007b58:	6823      	ldr	r3, [r4, #0]
 8007b5a:	07da      	lsls	r2, r3, #31
 8007b5c:	d437      	bmi.n	8007bce <_printf_float+0x386>
 8007b5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b60:	ebaa 0903 	sub.w	r9, sl, r3
 8007b64:	9b06      	ldr	r3, [sp, #24]
 8007b66:	ebaa 0303 	sub.w	r3, sl, r3
 8007b6a:	4599      	cmp	r9, r3
 8007b6c:	bfa8      	it	ge
 8007b6e:	4699      	movge	r9, r3
 8007b70:	f1b9 0f00 	cmp.w	r9, #0
 8007b74:	dc33      	bgt.n	8007bde <_printf_float+0x396>
 8007b76:	f04f 0800 	mov.w	r8, #0
 8007b7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b7e:	f104 0b1a 	add.w	fp, r4, #26
 8007b82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b84:	ebaa 0303 	sub.w	r3, sl, r3
 8007b88:	eba3 0309 	sub.w	r3, r3, r9
 8007b8c:	4543      	cmp	r3, r8
 8007b8e:	f77f af79 	ble.w	8007a84 <_printf_float+0x23c>
 8007b92:	2301      	movs	r3, #1
 8007b94:	465a      	mov	r2, fp
 8007b96:	4631      	mov	r1, r6
 8007b98:	4628      	mov	r0, r5
 8007b9a:	47b8      	blx	r7
 8007b9c:	3001      	adds	r0, #1
 8007b9e:	f43f aeae 	beq.w	80078fe <_printf_float+0xb6>
 8007ba2:	f108 0801 	add.w	r8, r8, #1
 8007ba6:	e7ec      	b.n	8007b82 <_printf_float+0x33a>
 8007ba8:	4642      	mov	r2, r8
 8007baa:	4631      	mov	r1, r6
 8007bac:	4628      	mov	r0, r5
 8007bae:	47b8      	blx	r7
 8007bb0:	3001      	adds	r0, #1
 8007bb2:	d1c2      	bne.n	8007b3a <_printf_float+0x2f2>
 8007bb4:	e6a3      	b.n	80078fe <_printf_float+0xb6>
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	4631      	mov	r1, r6
 8007bba:	4628      	mov	r0, r5
 8007bbc:	9206      	str	r2, [sp, #24]
 8007bbe:	47b8      	blx	r7
 8007bc0:	3001      	adds	r0, #1
 8007bc2:	f43f ae9c 	beq.w	80078fe <_printf_float+0xb6>
 8007bc6:	9a06      	ldr	r2, [sp, #24]
 8007bc8:	f10b 0b01 	add.w	fp, fp, #1
 8007bcc:	e7bb      	b.n	8007b46 <_printf_float+0x2fe>
 8007bce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bd2:	4631      	mov	r1, r6
 8007bd4:	4628      	mov	r0, r5
 8007bd6:	47b8      	blx	r7
 8007bd8:	3001      	adds	r0, #1
 8007bda:	d1c0      	bne.n	8007b5e <_printf_float+0x316>
 8007bdc:	e68f      	b.n	80078fe <_printf_float+0xb6>
 8007bde:	9a06      	ldr	r2, [sp, #24]
 8007be0:	464b      	mov	r3, r9
 8007be2:	4442      	add	r2, r8
 8007be4:	4631      	mov	r1, r6
 8007be6:	4628      	mov	r0, r5
 8007be8:	47b8      	blx	r7
 8007bea:	3001      	adds	r0, #1
 8007bec:	d1c3      	bne.n	8007b76 <_printf_float+0x32e>
 8007bee:	e686      	b.n	80078fe <_printf_float+0xb6>
 8007bf0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007bf4:	f1ba 0f01 	cmp.w	sl, #1
 8007bf8:	dc01      	bgt.n	8007bfe <_printf_float+0x3b6>
 8007bfa:	07db      	lsls	r3, r3, #31
 8007bfc:	d536      	bpl.n	8007c6c <_printf_float+0x424>
 8007bfe:	2301      	movs	r3, #1
 8007c00:	4642      	mov	r2, r8
 8007c02:	4631      	mov	r1, r6
 8007c04:	4628      	mov	r0, r5
 8007c06:	47b8      	blx	r7
 8007c08:	3001      	adds	r0, #1
 8007c0a:	f43f ae78 	beq.w	80078fe <_printf_float+0xb6>
 8007c0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c12:	4631      	mov	r1, r6
 8007c14:	4628      	mov	r0, r5
 8007c16:	47b8      	blx	r7
 8007c18:	3001      	adds	r0, #1
 8007c1a:	f43f ae70 	beq.w	80078fe <_printf_float+0xb6>
 8007c1e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007c22:	2200      	movs	r2, #0
 8007c24:	2300      	movs	r3, #0
 8007c26:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007c2a:	f7f8 ff5d 	bl	8000ae8 <__aeabi_dcmpeq>
 8007c2e:	b9c0      	cbnz	r0, 8007c62 <_printf_float+0x41a>
 8007c30:	4653      	mov	r3, sl
 8007c32:	f108 0201 	add.w	r2, r8, #1
 8007c36:	4631      	mov	r1, r6
 8007c38:	4628      	mov	r0, r5
 8007c3a:	47b8      	blx	r7
 8007c3c:	3001      	adds	r0, #1
 8007c3e:	d10c      	bne.n	8007c5a <_printf_float+0x412>
 8007c40:	e65d      	b.n	80078fe <_printf_float+0xb6>
 8007c42:	2301      	movs	r3, #1
 8007c44:	465a      	mov	r2, fp
 8007c46:	4631      	mov	r1, r6
 8007c48:	4628      	mov	r0, r5
 8007c4a:	47b8      	blx	r7
 8007c4c:	3001      	adds	r0, #1
 8007c4e:	f43f ae56 	beq.w	80078fe <_printf_float+0xb6>
 8007c52:	f108 0801 	add.w	r8, r8, #1
 8007c56:	45d0      	cmp	r8, sl
 8007c58:	dbf3      	blt.n	8007c42 <_printf_float+0x3fa>
 8007c5a:	464b      	mov	r3, r9
 8007c5c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007c60:	e6df      	b.n	8007a22 <_printf_float+0x1da>
 8007c62:	f04f 0800 	mov.w	r8, #0
 8007c66:	f104 0b1a 	add.w	fp, r4, #26
 8007c6a:	e7f4      	b.n	8007c56 <_printf_float+0x40e>
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	4642      	mov	r2, r8
 8007c70:	e7e1      	b.n	8007c36 <_printf_float+0x3ee>
 8007c72:	2301      	movs	r3, #1
 8007c74:	464a      	mov	r2, r9
 8007c76:	4631      	mov	r1, r6
 8007c78:	4628      	mov	r0, r5
 8007c7a:	47b8      	blx	r7
 8007c7c:	3001      	adds	r0, #1
 8007c7e:	f43f ae3e 	beq.w	80078fe <_printf_float+0xb6>
 8007c82:	f108 0801 	add.w	r8, r8, #1
 8007c86:	68e3      	ldr	r3, [r4, #12]
 8007c88:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007c8a:	1a5b      	subs	r3, r3, r1
 8007c8c:	4543      	cmp	r3, r8
 8007c8e:	dcf0      	bgt.n	8007c72 <_printf_float+0x42a>
 8007c90:	e6fc      	b.n	8007a8c <_printf_float+0x244>
 8007c92:	f04f 0800 	mov.w	r8, #0
 8007c96:	f104 0919 	add.w	r9, r4, #25
 8007c9a:	e7f4      	b.n	8007c86 <_printf_float+0x43e>

08007c9c <_printf_common>:
 8007c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ca0:	4616      	mov	r6, r2
 8007ca2:	4698      	mov	r8, r3
 8007ca4:	688a      	ldr	r2, [r1, #8]
 8007ca6:	690b      	ldr	r3, [r1, #16]
 8007ca8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007cac:	4293      	cmp	r3, r2
 8007cae:	bfb8      	it	lt
 8007cb0:	4613      	movlt	r3, r2
 8007cb2:	6033      	str	r3, [r6, #0]
 8007cb4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007cb8:	4607      	mov	r7, r0
 8007cba:	460c      	mov	r4, r1
 8007cbc:	b10a      	cbz	r2, 8007cc2 <_printf_common+0x26>
 8007cbe:	3301      	adds	r3, #1
 8007cc0:	6033      	str	r3, [r6, #0]
 8007cc2:	6823      	ldr	r3, [r4, #0]
 8007cc4:	0699      	lsls	r1, r3, #26
 8007cc6:	bf42      	ittt	mi
 8007cc8:	6833      	ldrmi	r3, [r6, #0]
 8007cca:	3302      	addmi	r3, #2
 8007ccc:	6033      	strmi	r3, [r6, #0]
 8007cce:	6825      	ldr	r5, [r4, #0]
 8007cd0:	f015 0506 	ands.w	r5, r5, #6
 8007cd4:	d106      	bne.n	8007ce4 <_printf_common+0x48>
 8007cd6:	f104 0a19 	add.w	sl, r4, #25
 8007cda:	68e3      	ldr	r3, [r4, #12]
 8007cdc:	6832      	ldr	r2, [r6, #0]
 8007cde:	1a9b      	subs	r3, r3, r2
 8007ce0:	42ab      	cmp	r3, r5
 8007ce2:	dc26      	bgt.n	8007d32 <_printf_common+0x96>
 8007ce4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007ce8:	6822      	ldr	r2, [r4, #0]
 8007cea:	3b00      	subs	r3, #0
 8007cec:	bf18      	it	ne
 8007cee:	2301      	movne	r3, #1
 8007cf0:	0692      	lsls	r2, r2, #26
 8007cf2:	d42b      	bmi.n	8007d4c <_printf_common+0xb0>
 8007cf4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007cf8:	4641      	mov	r1, r8
 8007cfa:	4638      	mov	r0, r7
 8007cfc:	47c8      	blx	r9
 8007cfe:	3001      	adds	r0, #1
 8007d00:	d01e      	beq.n	8007d40 <_printf_common+0xa4>
 8007d02:	6823      	ldr	r3, [r4, #0]
 8007d04:	6922      	ldr	r2, [r4, #16]
 8007d06:	f003 0306 	and.w	r3, r3, #6
 8007d0a:	2b04      	cmp	r3, #4
 8007d0c:	bf02      	ittt	eq
 8007d0e:	68e5      	ldreq	r5, [r4, #12]
 8007d10:	6833      	ldreq	r3, [r6, #0]
 8007d12:	1aed      	subeq	r5, r5, r3
 8007d14:	68a3      	ldr	r3, [r4, #8]
 8007d16:	bf0c      	ite	eq
 8007d18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d1c:	2500      	movne	r5, #0
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	bfc4      	itt	gt
 8007d22:	1a9b      	subgt	r3, r3, r2
 8007d24:	18ed      	addgt	r5, r5, r3
 8007d26:	2600      	movs	r6, #0
 8007d28:	341a      	adds	r4, #26
 8007d2a:	42b5      	cmp	r5, r6
 8007d2c:	d11a      	bne.n	8007d64 <_printf_common+0xc8>
 8007d2e:	2000      	movs	r0, #0
 8007d30:	e008      	b.n	8007d44 <_printf_common+0xa8>
 8007d32:	2301      	movs	r3, #1
 8007d34:	4652      	mov	r2, sl
 8007d36:	4641      	mov	r1, r8
 8007d38:	4638      	mov	r0, r7
 8007d3a:	47c8      	blx	r9
 8007d3c:	3001      	adds	r0, #1
 8007d3e:	d103      	bne.n	8007d48 <_printf_common+0xac>
 8007d40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d48:	3501      	adds	r5, #1
 8007d4a:	e7c6      	b.n	8007cda <_printf_common+0x3e>
 8007d4c:	18e1      	adds	r1, r4, r3
 8007d4e:	1c5a      	adds	r2, r3, #1
 8007d50:	2030      	movs	r0, #48	@ 0x30
 8007d52:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007d56:	4422      	add	r2, r4
 8007d58:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007d5c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007d60:	3302      	adds	r3, #2
 8007d62:	e7c7      	b.n	8007cf4 <_printf_common+0x58>
 8007d64:	2301      	movs	r3, #1
 8007d66:	4622      	mov	r2, r4
 8007d68:	4641      	mov	r1, r8
 8007d6a:	4638      	mov	r0, r7
 8007d6c:	47c8      	blx	r9
 8007d6e:	3001      	adds	r0, #1
 8007d70:	d0e6      	beq.n	8007d40 <_printf_common+0xa4>
 8007d72:	3601      	adds	r6, #1
 8007d74:	e7d9      	b.n	8007d2a <_printf_common+0x8e>
	...

08007d78 <_printf_i>:
 8007d78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d7c:	7e0f      	ldrb	r7, [r1, #24]
 8007d7e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007d80:	2f78      	cmp	r7, #120	@ 0x78
 8007d82:	4691      	mov	r9, r2
 8007d84:	4680      	mov	r8, r0
 8007d86:	460c      	mov	r4, r1
 8007d88:	469a      	mov	sl, r3
 8007d8a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007d8e:	d807      	bhi.n	8007da0 <_printf_i+0x28>
 8007d90:	2f62      	cmp	r7, #98	@ 0x62
 8007d92:	d80a      	bhi.n	8007daa <_printf_i+0x32>
 8007d94:	2f00      	cmp	r7, #0
 8007d96:	f000 80d2 	beq.w	8007f3e <_printf_i+0x1c6>
 8007d9a:	2f58      	cmp	r7, #88	@ 0x58
 8007d9c:	f000 80b9 	beq.w	8007f12 <_printf_i+0x19a>
 8007da0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007da4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007da8:	e03a      	b.n	8007e20 <_printf_i+0xa8>
 8007daa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007dae:	2b15      	cmp	r3, #21
 8007db0:	d8f6      	bhi.n	8007da0 <_printf_i+0x28>
 8007db2:	a101      	add	r1, pc, #4	@ (adr r1, 8007db8 <_printf_i+0x40>)
 8007db4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007db8:	08007e11 	.word	0x08007e11
 8007dbc:	08007e25 	.word	0x08007e25
 8007dc0:	08007da1 	.word	0x08007da1
 8007dc4:	08007da1 	.word	0x08007da1
 8007dc8:	08007da1 	.word	0x08007da1
 8007dcc:	08007da1 	.word	0x08007da1
 8007dd0:	08007e25 	.word	0x08007e25
 8007dd4:	08007da1 	.word	0x08007da1
 8007dd8:	08007da1 	.word	0x08007da1
 8007ddc:	08007da1 	.word	0x08007da1
 8007de0:	08007da1 	.word	0x08007da1
 8007de4:	08007f25 	.word	0x08007f25
 8007de8:	08007e4f 	.word	0x08007e4f
 8007dec:	08007edf 	.word	0x08007edf
 8007df0:	08007da1 	.word	0x08007da1
 8007df4:	08007da1 	.word	0x08007da1
 8007df8:	08007f47 	.word	0x08007f47
 8007dfc:	08007da1 	.word	0x08007da1
 8007e00:	08007e4f 	.word	0x08007e4f
 8007e04:	08007da1 	.word	0x08007da1
 8007e08:	08007da1 	.word	0x08007da1
 8007e0c:	08007ee7 	.word	0x08007ee7
 8007e10:	6833      	ldr	r3, [r6, #0]
 8007e12:	1d1a      	adds	r2, r3, #4
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	6032      	str	r2, [r6, #0]
 8007e18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007e1c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007e20:	2301      	movs	r3, #1
 8007e22:	e09d      	b.n	8007f60 <_printf_i+0x1e8>
 8007e24:	6833      	ldr	r3, [r6, #0]
 8007e26:	6820      	ldr	r0, [r4, #0]
 8007e28:	1d19      	adds	r1, r3, #4
 8007e2a:	6031      	str	r1, [r6, #0]
 8007e2c:	0606      	lsls	r6, r0, #24
 8007e2e:	d501      	bpl.n	8007e34 <_printf_i+0xbc>
 8007e30:	681d      	ldr	r5, [r3, #0]
 8007e32:	e003      	b.n	8007e3c <_printf_i+0xc4>
 8007e34:	0645      	lsls	r5, r0, #25
 8007e36:	d5fb      	bpl.n	8007e30 <_printf_i+0xb8>
 8007e38:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007e3c:	2d00      	cmp	r5, #0
 8007e3e:	da03      	bge.n	8007e48 <_printf_i+0xd0>
 8007e40:	232d      	movs	r3, #45	@ 0x2d
 8007e42:	426d      	negs	r5, r5
 8007e44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e48:	4859      	ldr	r0, [pc, #356]	@ (8007fb0 <_printf_i+0x238>)
 8007e4a:	230a      	movs	r3, #10
 8007e4c:	e011      	b.n	8007e72 <_printf_i+0xfa>
 8007e4e:	6821      	ldr	r1, [r4, #0]
 8007e50:	6833      	ldr	r3, [r6, #0]
 8007e52:	0608      	lsls	r0, r1, #24
 8007e54:	f853 5b04 	ldr.w	r5, [r3], #4
 8007e58:	d402      	bmi.n	8007e60 <_printf_i+0xe8>
 8007e5a:	0649      	lsls	r1, r1, #25
 8007e5c:	bf48      	it	mi
 8007e5e:	b2ad      	uxthmi	r5, r5
 8007e60:	2f6f      	cmp	r7, #111	@ 0x6f
 8007e62:	4853      	ldr	r0, [pc, #332]	@ (8007fb0 <_printf_i+0x238>)
 8007e64:	6033      	str	r3, [r6, #0]
 8007e66:	bf14      	ite	ne
 8007e68:	230a      	movne	r3, #10
 8007e6a:	2308      	moveq	r3, #8
 8007e6c:	2100      	movs	r1, #0
 8007e6e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007e72:	6866      	ldr	r6, [r4, #4]
 8007e74:	60a6      	str	r6, [r4, #8]
 8007e76:	2e00      	cmp	r6, #0
 8007e78:	bfa2      	ittt	ge
 8007e7a:	6821      	ldrge	r1, [r4, #0]
 8007e7c:	f021 0104 	bicge.w	r1, r1, #4
 8007e80:	6021      	strge	r1, [r4, #0]
 8007e82:	b90d      	cbnz	r5, 8007e88 <_printf_i+0x110>
 8007e84:	2e00      	cmp	r6, #0
 8007e86:	d04b      	beq.n	8007f20 <_printf_i+0x1a8>
 8007e88:	4616      	mov	r6, r2
 8007e8a:	fbb5 f1f3 	udiv	r1, r5, r3
 8007e8e:	fb03 5711 	mls	r7, r3, r1, r5
 8007e92:	5dc7      	ldrb	r7, [r0, r7]
 8007e94:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007e98:	462f      	mov	r7, r5
 8007e9a:	42bb      	cmp	r3, r7
 8007e9c:	460d      	mov	r5, r1
 8007e9e:	d9f4      	bls.n	8007e8a <_printf_i+0x112>
 8007ea0:	2b08      	cmp	r3, #8
 8007ea2:	d10b      	bne.n	8007ebc <_printf_i+0x144>
 8007ea4:	6823      	ldr	r3, [r4, #0]
 8007ea6:	07df      	lsls	r7, r3, #31
 8007ea8:	d508      	bpl.n	8007ebc <_printf_i+0x144>
 8007eaa:	6923      	ldr	r3, [r4, #16]
 8007eac:	6861      	ldr	r1, [r4, #4]
 8007eae:	4299      	cmp	r1, r3
 8007eb0:	bfde      	ittt	le
 8007eb2:	2330      	movle	r3, #48	@ 0x30
 8007eb4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007eb8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007ebc:	1b92      	subs	r2, r2, r6
 8007ebe:	6122      	str	r2, [r4, #16]
 8007ec0:	f8cd a000 	str.w	sl, [sp]
 8007ec4:	464b      	mov	r3, r9
 8007ec6:	aa03      	add	r2, sp, #12
 8007ec8:	4621      	mov	r1, r4
 8007eca:	4640      	mov	r0, r8
 8007ecc:	f7ff fee6 	bl	8007c9c <_printf_common>
 8007ed0:	3001      	adds	r0, #1
 8007ed2:	d14a      	bne.n	8007f6a <_printf_i+0x1f2>
 8007ed4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007ed8:	b004      	add	sp, #16
 8007eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ede:	6823      	ldr	r3, [r4, #0]
 8007ee0:	f043 0320 	orr.w	r3, r3, #32
 8007ee4:	6023      	str	r3, [r4, #0]
 8007ee6:	4833      	ldr	r0, [pc, #204]	@ (8007fb4 <_printf_i+0x23c>)
 8007ee8:	2778      	movs	r7, #120	@ 0x78
 8007eea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007eee:	6823      	ldr	r3, [r4, #0]
 8007ef0:	6831      	ldr	r1, [r6, #0]
 8007ef2:	061f      	lsls	r7, r3, #24
 8007ef4:	f851 5b04 	ldr.w	r5, [r1], #4
 8007ef8:	d402      	bmi.n	8007f00 <_printf_i+0x188>
 8007efa:	065f      	lsls	r7, r3, #25
 8007efc:	bf48      	it	mi
 8007efe:	b2ad      	uxthmi	r5, r5
 8007f00:	6031      	str	r1, [r6, #0]
 8007f02:	07d9      	lsls	r1, r3, #31
 8007f04:	bf44      	itt	mi
 8007f06:	f043 0320 	orrmi.w	r3, r3, #32
 8007f0a:	6023      	strmi	r3, [r4, #0]
 8007f0c:	b11d      	cbz	r5, 8007f16 <_printf_i+0x19e>
 8007f0e:	2310      	movs	r3, #16
 8007f10:	e7ac      	b.n	8007e6c <_printf_i+0xf4>
 8007f12:	4827      	ldr	r0, [pc, #156]	@ (8007fb0 <_printf_i+0x238>)
 8007f14:	e7e9      	b.n	8007eea <_printf_i+0x172>
 8007f16:	6823      	ldr	r3, [r4, #0]
 8007f18:	f023 0320 	bic.w	r3, r3, #32
 8007f1c:	6023      	str	r3, [r4, #0]
 8007f1e:	e7f6      	b.n	8007f0e <_printf_i+0x196>
 8007f20:	4616      	mov	r6, r2
 8007f22:	e7bd      	b.n	8007ea0 <_printf_i+0x128>
 8007f24:	6833      	ldr	r3, [r6, #0]
 8007f26:	6825      	ldr	r5, [r4, #0]
 8007f28:	6961      	ldr	r1, [r4, #20]
 8007f2a:	1d18      	adds	r0, r3, #4
 8007f2c:	6030      	str	r0, [r6, #0]
 8007f2e:	062e      	lsls	r6, r5, #24
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	d501      	bpl.n	8007f38 <_printf_i+0x1c0>
 8007f34:	6019      	str	r1, [r3, #0]
 8007f36:	e002      	b.n	8007f3e <_printf_i+0x1c6>
 8007f38:	0668      	lsls	r0, r5, #25
 8007f3a:	d5fb      	bpl.n	8007f34 <_printf_i+0x1bc>
 8007f3c:	8019      	strh	r1, [r3, #0]
 8007f3e:	2300      	movs	r3, #0
 8007f40:	6123      	str	r3, [r4, #16]
 8007f42:	4616      	mov	r6, r2
 8007f44:	e7bc      	b.n	8007ec0 <_printf_i+0x148>
 8007f46:	6833      	ldr	r3, [r6, #0]
 8007f48:	1d1a      	adds	r2, r3, #4
 8007f4a:	6032      	str	r2, [r6, #0]
 8007f4c:	681e      	ldr	r6, [r3, #0]
 8007f4e:	6862      	ldr	r2, [r4, #4]
 8007f50:	2100      	movs	r1, #0
 8007f52:	4630      	mov	r0, r6
 8007f54:	f7f8 f94c 	bl	80001f0 <memchr>
 8007f58:	b108      	cbz	r0, 8007f5e <_printf_i+0x1e6>
 8007f5a:	1b80      	subs	r0, r0, r6
 8007f5c:	6060      	str	r0, [r4, #4]
 8007f5e:	6863      	ldr	r3, [r4, #4]
 8007f60:	6123      	str	r3, [r4, #16]
 8007f62:	2300      	movs	r3, #0
 8007f64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f68:	e7aa      	b.n	8007ec0 <_printf_i+0x148>
 8007f6a:	6923      	ldr	r3, [r4, #16]
 8007f6c:	4632      	mov	r2, r6
 8007f6e:	4649      	mov	r1, r9
 8007f70:	4640      	mov	r0, r8
 8007f72:	47d0      	blx	sl
 8007f74:	3001      	adds	r0, #1
 8007f76:	d0ad      	beq.n	8007ed4 <_printf_i+0x15c>
 8007f78:	6823      	ldr	r3, [r4, #0]
 8007f7a:	079b      	lsls	r3, r3, #30
 8007f7c:	d413      	bmi.n	8007fa6 <_printf_i+0x22e>
 8007f7e:	68e0      	ldr	r0, [r4, #12]
 8007f80:	9b03      	ldr	r3, [sp, #12]
 8007f82:	4298      	cmp	r0, r3
 8007f84:	bfb8      	it	lt
 8007f86:	4618      	movlt	r0, r3
 8007f88:	e7a6      	b.n	8007ed8 <_printf_i+0x160>
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	4632      	mov	r2, r6
 8007f8e:	4649      	mov	r1, r9
 8007f90:	4640      	mov	r0, r8
 8007f92:	47d0      	blx	sl
 8007f94:	3001      	adds	r0, #1
 8007f96:	d09d      	beq.n	8007ed4 <_printf_i+0x15c>
 8007f98:	3501      	adds	r5, #1
 8007f9a:	68e3      	ldr	r3, [r4, #12]
 8007f9c:	9903      	ldr	r1, [sp, #12]
 8007f9e:	1a5b      	subs	r3, r3, r1
 8007fa0:	42ab      	cmp	r3, r5
 8007fa2:	dcf2      	bgt.n	8007f8a <_printf_i+0x212>
 8007fa4:	e7eb      	b.n	8007f7e <_printf_i+0x206>
 8007fa6:	2500      	movs	r5, #0
 8007fa8:	f104 0619 	add.w	r6, r4, #25
 8007fac:	e7f5      	b.n	8007f9a <_printf_i+0x222>
 8007fae:	bf00      	nop
 8007fb0:	0800be6e 	.word	0x0800be6e
 8007fb4:	0800be7f 	.word	0x0800be7f

08007fb8 <_scanf_float>:
 8007fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fbc:	b087      	sub	sp, #28
 8007fbe:	4617      	mov	r7, r2
 8007fc0:	9303      	str	r3, [sp, #12]
 8007fc2:	688b      	ldr	r3, [r1, #8]
 8007fc4:	1e5a      	subs	r2, r3, #1
 8007fc6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007fca:	bf81      	itttt	hi
 8007fcc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007fd0:	eb03 0b05 	addhi.w	fp, r3, r5
 8007fd4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007fd8:	608b      	strhi	r3, [r1, #8]
 8007fda:	680b      	ldr	r3, [r1, #0]
 8007fdc:	460a      	mov	r2, r1
 8007fde:	f04f 0500 	mov.w	r5, #0
 8007fe2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007fe6:	f842 3b1c 	str.w	r3, [r2], #28
 8007fea:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007fee:	4680      	mov	r8, r0
 8007ff0:	460c      	mov	r4, r1
 8007ff2:	bf98      	it	ls
 8007ff4:	f04f 0b00 	movls.w	fp, #0
 8007ff8:	9201      	str	r2, [sp, #4]
 8007ffa:	4616      	mov	r6, r2
 8007ffc:	46aa      	mov	sl, r5
 8007ffe:	46a9      	mov	r9, r5
 8008000:	9502      	str	r5, [sp, #8]
 8008002:	68a2      	ldr	r2, [r4, #8]
 8008004:	b152      	cbz	r2, 800801c <_scanf_float+0x64>
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	781b      	ldrb	r3, [r3, #0]
 800800a:	2b4e      	cmp	r3, #78	@ 0x4e
 800800c:	d864      	bhi.n	80080d8 <_scanf_float+0x120>
 800800e:	2b40      	cmp	r3, #64	@ 0x40
 8008010:	d83c      	bhi.n	800808c <_scanf_float+0xd4>
 8008012:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008016:	b2c8      	uxtb	r0, r1
 8008018:	280e      	cmp	r0, #14
 800801a:	d93a      	bls.n	8008092 <_scanf_float+0xda>
 800801c:	f1b9 0f00 	cmp.w	r9, #0
 8008020:	d003      	beq.n	800802a <_scanf_float+0x72>
 8008022:	6823      	ldr	r3, [r4, #0]
 8008024:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008028:	6023      	str	r3, [r4, #0]
 800802a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800802e:	f1ba 0f01 	cmp.w	sl, #1
 8008032:	f200 8117 	bhi.w	8008264 <_scanf_float+0x2ac>
 8008036:	9b01      	ldr	r3, [sp, #4]
 8008038:	429e      	cmp	r6, r3
 800803a:	f200 8108 	bhi.w	800824e <_scanf_float+0x296>
 800803e:	2001      	movs	r0, #1
 8008040:	b007      	add	sp, #28
 8008042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008046:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800804a:	2a0d      	cmp	r2, #13
 800804c:	d8e6      	bhi.n	800801c <_scanf_float+0x64>
 800804e:	a101      	add	r1, pc, #4	@ (adr r1, 8008054 <_scanf_float+0x9c>)
 8008050:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008054:	0800819b 	.word	0x0800819b
 8008058:	0800801d 	.word	0x0800801d
 800805c:	0800801d 	.word	0x0800801d
 8008060:	0800801d 	.word	0x0800801d
 8008064:	080081fb 	.word	0x080081fb
 8008068:	080081d3 	.word	0x080081d3
 800806c:	0800801d 	.word	0x0800801d
 8008070:	0800801d 	.word	0x0800801d
 8008074:	080081a9 	.word	0x080081a9
 8008078:	0800801d 	.word	0x0800801d
 800807c:	0800801d 	.word	0x0800801d
 8008080:	0800801d 	.word	0x0800801d
 8008084:	0800801d 	.word	0x0800801d
 8008088:	08008161 	.word	0x08008161
 800808c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008090:	e7db      	b.n	800804a <_scanf_float+0x92>
 8008092:	290e      	cmp	r1, #14
 8008094:	d8c2      	bhi.n	800801c <_scanf_float+0x64>
 8008096:	a001      	add	r0, pc, #4	@ (adr r0, 800809c <_scanf_float+0xe4>)
 8008098:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800809c:	08008151 	.word	0x08008151
 80080a0:	0800801d 	.word	0x0800801d
 80080a4:	08008151 	.word	0x08008151
 80080a8:	080081e7 	.word	0x080081e7
 80080ac:	0800801d 	.word	0x0800801d
 80080b0:	080080f9 	.word	0x080080f9
 80080b4:	08008137 	.word	0x08008137
 80080b8:	08008137 	.word	0x08008137
 80080bc:	08008137 	.word	0x08008137
 80080c0:	08008137 	.word	0x08008137
 80080c4:	08008137 	.word	0x08008137
 80080c8:	08008137 	.word	0x08008137
 80080cc:	08008137 	.word	0x08008137
 80080d0:	08008137 	.word	0x08008137
 80080d4:	08008137 	.word	0x08008137
 80080d8:	2b6e      	cmp	r3, #110	@ 0x6e
 80080da:	d809      	bhi.n	80080f0 <_scanf_float+0x138>
 80080dc:	2b60      	cmp	r3, #96	@ 0x60
 80080de:	d8b2      	bhi.n	8008046 <_scanf_float+0x8e>
 80080e0:	2b54      	cmp	r3, #84	@ 0x54
 80080e2:	d07b      	beq.n	80081dc <_scanf_float+0x224>
 80080e4:	2b59      	cmp	r3, #89	@ 0x59
 80080e6:	d199      	bne.n	800801c <_scanf_float+0x64>
 80080e8:	2d07      	cmp	r5, #7
 80080ea:	d197      	bne.n	800801c <_scanf_float+0x64>
 80080ec:	2508      	movs	r5, #8
 80080ee:	e02c      	b.n	800814a <_scanf_float+0x192>
 80080f0:	2b74      	cmp	r3, #116	@ 0x74
 80080f2:	d073      	beq.n	80081dc <_scanf_float+0x224>
 80080f4:	2b79      	cmp	r3, #121	@ 0x79
 80080f6:	e7f6      	b.n	80080e6 <_scanf_float+0x12e>
 80080f8:	6821      	ldr	r1, [r4, #0]
 80080fa:	05c8      	lsls	r0, r1, #23
 80080fc:	d51b      	bpl.n	8008136 <_scanf_float+0x17e>
 80080fe:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8008102:	6021      	str	r1, [r4, #0]
 8008104:	f109 0901 	add.w	r9, r9, #1
 8008108:	f1bb 0f00 	cmp.w	fp, #0
 800810c:	d003      	beq.n	8008116 <_scanf_float+0x15e>
 800810e:	3201      	adds	r2, #1
 8008110:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8008114:	60a2      	str	r2, [r4, #8]
 8008116:	68a3      	ldr	r3, [r4, #8]
 8008118:	3b01      	subs	r3, #1
 800811a:	60a3      	str	r3, [r4, #8]
 800811c:	6923      	ldr	r3, [r4, #16]
 800811e:	3301      	adds	r3, #1
 8008120:	6123      	str	r3, [r4, #16]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	3b01      	subs	r3, #1
 8008126:	2b00      	cmp	r3, #0
 8008128:	607b      	str	r3, [r7, #4]
 800812a:	f340 8087 	ble.w	800823c <_scanf_float+0x284>
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	3301      	adds	r3, #1
 8008132:	603b      	str	r3, [r7, #0]
 8008134:	e765      	b.n	8008002 <_scanf_float+0x4a>
 8008136:	eb1a 0105 	adds.w	r1, sl, r5
 800813a:	f47f af6f 	bne.w	800801c <_scanf_float+0x64>
 800813e:	6822      	ldr	r2, [r4, #0]
 8008140:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008144:	6022      	str	r2, [r4, #0]
 8008146:	460d      	mov	r5, r1
 8008148:	468a      	mov	sl, r1
 800814a:	f806 3b01 	strb.w	r3, [r6], #1
 800814e:	e7e2      	b.n	8008116 <_scanf_float+0x15e>
 8008150:	6822      	ldr	r2, [r4, #0]
 8008152:	0610      	lsls	r0, r2, #24
 8008154:	f57f af62 	bpl.w	800801c <_scanf_float+0x64>
 8008158:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800815c:	6022      	str	r2, [r4, #0]
 800815e:	e7f4      	b.n	800814a <_scanf_float+0x192>
 8008160:	f1ba 0f00 	cmp.w	sl, #0
 8008164:	d10e      	bne.n	8008184 <_scanf_float+0x1cc>
 8008166:	f1b9 0f00 	cmp.w	r9, #0
 800816a:	d10e      	bne.n	800818a <_scanf_float+0x1d2>
 800816c:	6822      	ldr	r2, [r4, #0]
 800816e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008172:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008176:	d108      	bne.n	800818a <_scanf_float+0x1d2>
 8008178:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800817c:	6022      	str	r2, [r4, #0]
 800817e:	f04f 0a01 	mov.w	sl, #1
 8008182:	e7e2      	b.n	800814a <_scanf_float+0x192>
 8008184:	f1ba 0f02 	cmp.w	sl, #2
 8008188:	d055      	beq.n	8008236 <_scanf_float+0x27e>
 800818a:	2d01      	cmp	r5, #1
 800818c:	d002      	beq.n	8008194 <_scanf_float+0x1dc>
 800818e:	2d04      	cmp	r5, #4
 8008190:	f47f af44 	bne.w	800801c <_scanf_float+0x64>
 8008194:	3501      	adds	r5, #1
 8008196:	b2ed      	uxtb	r5, r5
 8008198:	e7d7      	b.n	800814a <_scanf_float+0x192>
 800819a:	f1ba 0f01 	cmp.w	sl, #1
 800819e:	f47f af3d 	bne.w	800801c <_scanf_float+0x64>
 80081a2:	f04f 0a02 	mov.w	sl, #2
 80081a6:	e7d0      	b.n	800814a <_scanf_float+0x192>
 80081a8:	b97d      	cbnz	r5, 80081ca <_scanf_float+0x212>
 80081aa:	f1b9 0f00 	cmp.w	r9, #0
 80081ae:	f47f af38 	bne.w	8008022 <_scanf_float+0x6a>
 80081b2:	6822      	ldr	r2, [r4, #0]
 80081b4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80081b8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80081bc:	f040 8108 	bne.w	80083d0 <_scanf_float+0x418>
 80081c0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80081c4:	6022      	str	r2, [r4, #0]
 80081c6:	2501      	movs	r5, #1
 80081c8:	e7bf      	b.n	800814a <_scanf_float+0x192>
 80081ca:	2d03      	cmp	r5, #3
 80081cc:	d0e2      	beq.n	8008194 <_scanf_float+0x1dc>
 80081ce:	2d05      	cmp	r5, #5
 80081d0:	e7de      	b.n	8008190 <_scanf_float+0x1d8>
 80081d2:	2d02      	cmp	r5, #2
 80081d4:	f47f af22 	bne.w	800801c <_scanf_float+0x64>
 80081d8:	2503      	movs	r5, #3
 80081da:	e7b6      	b.n	800814a <_scanf_float+0x192>
 80081dc:	2d06      	cmp	r5, #6
 80081de:	f47f af1d 	bne.w	800801c <_scanf_float+0x64>
 80081e2:	2507      	movs	r5, #7
 80081e4:	e7b1      	b.n	800814a <_scanf_float+0x192>
 80081e6:	6822      	ldr	r2, [r4, #0]
 80081e8:	0591      	lsls	r1, r2, #22
 80081ea:	f57f af17 	bpl.w	800801c <_scanf_float+0x64>
 80081ee:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80081f2:	6022      	str	r2, [r4, #0]
 80081f4:	f8cd 9008 	str.w	r9, [sp, #8]
 80081f8:	e7a7      	b.n	800814a <_scanf_float+0x192>
 80081fa:	6822      	ldr	r2, [r4, #0]
 80081fc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008200:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008204:	d006      	beq.n	8008214 <_scanf_float+0x25c>
 8008206:	0550      	lsls	r0, r2, #21
 8008208:	f57f af08 	bpl.w	800801c <_scanf_float+0x64>
 800820c:	f1b9 0f00 	cmp.w	r9, #0
 8008210:	f000 80de 	beq.w	80083d0 <_scanf_float+0x418>
 8008214:	0591      	lsls	r1, r2, #22
 8008216:	bf58      	it	pl
 8008218:	9902      	ldrpl	r1, [sp, #8]
 800821a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800821e:	bf58      	it	pl
 8008220:	eba9 0101 	subpl.w	r1, r9, r1
 8008224:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008228:	bf58      	it	pl
 800822a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800822e:	6022      	str	r2, [r4, #0]
 8008230:	f04f 0900 	mov.w	r9, #0
 8008234:	e789      	b.n	800814a <_scanf_float+0x192>
 8008236:	f04f 0a03 	mov.w	sl, #3
 800823a:	e786      	b.n	800814a <_scanf_float+0x192>
 800823c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008240:	4639      	mov	r1, r7
 8008242:	4640      	mov	r0, r8
 8008244:	4798      	blx	r3
 8008246:	2800      	cmp	r0, #0
 8008248:	f43f aedb 	beq.w	8008002 <_scanf_float+0x4a>
 800824c:	e6e6      	b.n	800801c <_scanf_float+0x64>
 800824e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008252:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008256:	463a      	mov	r2, r7
 8008258:	4640      	mov	r0, r8
 800825a:	4798      	blx	r3
 800825c:	6923      	ldr	r3, [r4, #16]
 800825e:	3b01      	subs	r3, #1
 8008260:	6123      	str	r3, [r4, #16]
 8008262:	e6e8      	b.n	8008036 <_scanf_float+0x7e>
 8008264:	1e6b      	subs	r3, r5, #1
 8008266:	2b06      	cmp	r3, #6
 8008268:	d824      	bhi.n	80082b4 <_scanf_float+0x2fc>
 800826a:	2d02      	cmp	r5, #2
 800826c:	d836      	bhi.n	80082dc <_scanf_float+0x324>
 800826e:	9b01      	ldr	r3, [sp, #4]
 8008270:	429e      	cmp	r6, r3
 8008272:	f67f aee4 	bls.w	800803e <_scanf_float+0x86>
 8008276:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800827a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800827e:	463a      	mov	r2, r7
 8008280:	4640      	mov	r0, r8
 8008282:	4798      	blx	r3
 8008284:	6923      	ldr	r3, [r4, #16]
 8008286:	3b01      	subs	r3, #1
 8008288:	6123      	str	r3, [r4, #16]
 800828a:	e7f0      	b.n	800826e <_scanf_float+0x2b6>
 800828c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008290:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008294:	463a      	mov	r2, r7
 8008296:	4640      	mov	r0, r8
 8008298:	4798      	blx	r3
 800829a:	6923      	ldr	r3, [r4, #16]
 800829c:	3b01      	subs	r3, #1
 800829e:	6123      	str	r3, [r4, #16]
 80082a0:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80082a4:	fa5f fa8a 	uxtb.w	sl, sl
 80082a8:	f1ba 0f02 	cmp.w	sl, #2
 80082ac:	d1ee      	bne.n	800828c <_scanf_float+0x2d4>
 80082ae:	3d03      	subs	r5, #3
 80082b0:	b2ed      	uxtb	r5, r5
 80082b2:	1b76      	subs	r6, r6, r5
 80082b4:	6823      	ldr	r3, [r4, #0]
 80082b6:	05da      	lsls	r2, r3, #23
 80082b8:	d530      	bpl.n	800831c <_scanf_float+0x364>
 80082ba:	055b      	lsls	r3, r3, #21
 80082bc:	d511      	bpl.n	80082e2 <_scanf_float+0x32a>
 80082be:	9b01      	ldr	r3, [sp, #4]
 80082c0:	429e      	cmp	r6, r3
 80082c2:	f67f aebc 	bls.w	800803e <_scanf_float+0x86>
 80082c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80082ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80082ce:	463a      	mov	r2, r7
 80082d0:	4640      	mov	r0, r8
 80082d2:	4798      	blx	r3
 80082d4:	6923      	ldr	r3, [r4, #16]
 80082d6:	3b01      	subs	r3, #1
 80082d8:	6123      	str	r3, [r4, #16]
 80082da:	e7f0      	b.n	80082be <_scanf_float+0x306>
 80082dc:	46aa      	mov	sl, r5
 80082de:	46b3      	mov	fp, r6
 80082e0:	e7de      	b.n	80082a0 <_scanf_float+0x2e8>
 80082e2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80082e6:	6923      	ldr	r3, [r4, #16]
 80082e8:	2965      	cmp	r1, #101	@ 0x65
 80082ea:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80082ee:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 80082f2:	6123      	str	r3, [r4, #16]
 80082f4:	d00c      	beq.n	8008310 <_scanf_float+0x358>
 80082f6:	2945      	cmp	r1, #69	@ 0x45
 80082f8:	d00a      	beq.n	8008310 <_scanf_float+0x358>
 80082fa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80082fe:	463a      	mov	r2, r7
 8008300:	4640      	mov	r0, r8
 8008302:	4798      	blx	r3
 8008304:	6923      	ldr	r3, [r4, #16]
 8008306:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800830a:	3b01      	subs	r3, #1
 800830c:	1eb5      	subs	r5, r6, #2
 800830e:	6123      	str	r3, [r4, #16]
 8008310:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008314:	463a      	mov	r2, r7
 8008316:	4640      	mov	r0, r8
 8008318:	4798      	blx	r3
 800831a:	462e      	mov	r6, r5
 800831c:	6822      	ldr	r2, [r4, #0]
 800831e:	f012 0210 	ands.w	r2, r2, #16
 8008322:	d001      	beq.n	8008328 <_scanf_float+0x370>
 8008324:	2000      	movs	r0, #0
 8008326:	e68b      	b.n	8008040 <_scanf_float+0x88>
 8008328:	7032      	strb	r2, [r6, #0]
 800832a:	6823      	ldr	r3, [r4, #0]
 800832c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008330:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008334:	d11c      	bne.n	8008370 <_scanf_float+0x3b8>
 8008336:	9b02      	ldr	r3, [sp, #8]
 8008338:	454b      	cmp	r3, r9
 800833a:	eba3 0209 	sub.w	r2, r3, r9
 800833e:	d123      	bne.n	8008388 <_scanf_float+0x3d0>
 8008340:	9901      	ldr	r1, [sp, #4]
 8008342:	2200      	movs	r2, #0
 8008344:	4640      	mov	r0, r8
 8008346:	f002 fbf7 	bl	800ab38 <_strtod_r>
 800834a:	9b03      	ldr	r3, [sp, #12]
 800834c:	6821      	ldr	r1, [r4, #0]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f011 0f02 	tst.w	r1, #2
 8008354:	ec57 6b10 	vmov	r6, r7, d0
 8008358:	f103 0204 	add.w	r2, r3, #4
 800835c:	d01f      	beq.n	800839e <_scanf_float+0x3e6>
 800835e:	9903      	ldr	r1, [sp, #12]
 8008360:	600a      	str	r2, [r1, #0]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	e9c3 6700 	strd	r6, r7, [r3]
 8008368:	68e3      	ldr	r3, [r4, #12]
 800836a:	3301      	adds	r3, #1
 800836c:	60e3      	str	r3, [r4, #12]
 800836e:	e7d9      	b.n	8008324 <_scanf_float+0x36c>
 8008370:	9b04      	ldr	r3, [sp, #16]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d0e4      	beq.n	8008340 <_scanf_float+0x388>
 8008376:	9905      	ldr	r1, [sp, #20]
 8008378:	230a      	movs	r3, #10
 800837a:	3101      	adds	r1, #1
 800837c:	4640      	mov	r0, r8
 800837e:	f002 fc5b 	bl	800ac38 <_strtol_r>
 8008382:	9b04      	ldr	r3, [sp, #16]
 8008384:	9e05      	ldr	r6, [sp, #20]
 8008386:	1ac2      	subs	r2, r0, r3
 8008388:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800838c:	429e      	cmp	r6, r3
 800838e:	bf28      	it	cs
 8008390:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008394:	4910      	ldr	r1, [pc, #64]	@ (80083d8 <_scanf_float+0x420>)
 8008396:	4630      	mov	r0, r6
 8008398:	f000 f8e4 	bl	8008564 <siprintf>
 800839c:	e7d0      	b.n	8008340 <_scanf_float+0x388>
 800839e:	f011 0f04 	tst.w	r1, #4
 80083a2:	9903      	ldr	r1, [sp, #12]
 80083a4:	600a      	str	r2, [r1, #0]
 80083a6:	d1dc      	bne.n	8008362 <_scanf_float+0x3aa>
 80083a8:	681d      	ldr	r5, [r3, #0]
 80083aa:	4632      	mov	r2, r6
 80083ac:	463b      	mov	r3, r7
 80083ae:	4630      	mov	r0, r6
 80083b0:	4639      	mov	r1, r7
 80083b2:	f7f8 fbcb 	bl	8000b4c <__aeabi_dcmpun>
 80083b6:	b128      	cbz	r0, 80083c4 <_scanf_float+0x40c>
 80083b8:	4808      	ldr	r0, [pc, #32]	@ (80083dc <_scanf_float+0x424>)
 80083ba:	f000 f9b7 	bl	800872c <nanf>
 80083be:	ed85 0a00 	vstr	s0, [r5]
 80083c2:	e7d1      	b.n	8008368 <_scanf_float+0x3b0>
 80083c4:	4630      	mov	r0, r6
 80083c6:	4639      	mov	r1, r7
 80083c8:	f7f8 fc1e 	bl	8000c08 <__aeabi_d2f>
 80083cc:	6028      	str	r0, [r5, #0]
 80083ce:	e7cb      	b.n	8008368 <_scanf_float+0x3b0>
 80083d0:	f04f 0900 	mov.w	r9, #0
 80083d4:	e629      	b.n	800802a <_scanf_float+0x72>
 80083d6:	bf00      	nop
 80083d8:	0800be90 	.word	0x0800be90
 80083dc:	0800c225 	.word	0x0800c225

080083e0 <std>:
 80083e0:	2300      	movs	r3, #0
 80083e2:	b510      	push	{r4, lr}
 80083e4:	4604      	mov	r4, r0
 80083e6:	e9c0 3300 	strd	r3, r3, [r0]
 80083ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80083ee:	6083      	str	r3, [r0, #8]
 80083f0:	8181      	strh	r1, [r0, #12]
 80083f2:	6643      	str	r3, [r0, #100]	@ 0x64
 80083f4:	81c2      	strh	r2, [r0, #14]
 80083f6:	6183      	str	r3, [r0, #24]
 80083f8:	4619      	mov	r1, r3
 80083fa:	2208      	movs	r2, #8
 80083fc:	305c      	adds	r0, #92	@ 0x5c
 80083fe:	f000 f914 	bl	800862a <memset>
 8008402:	4b0d      	ldr	r3, [pc, #52]	@ (8008438 <std+0x58>)
 8008404:	6263      	str	r3, [r4, #36]	@ 0x24
 8008406:	4b0d      	ldr	r3, [pc, #52]	@ (800843c <std+0x5c>)
 8008408:	62a3      	str	r3, [r4, #40]	@ 0x28
 800840a:	4b0d      	ldr	r3, [pc, #52]	@ (8008440 <std+0x60>)
 800840c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800840e:	4b0d      	ldr	r3, [pc, #52]	@ (8008444 <std+0x64>)
 8008410:	6323      	str	r3, [r4, #48]	@ 0x30
 8008412:	4b0d      	ldr	r3, [pc, #52]	@ (8008448 <std+0x68>)
 8008414:	6224      	str	r4, [r4, #32]
 8008416:	429c      	cmp	r4, r3
 8008418:	d006      	beq.n	8008428 <std+0x48>
 800841a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800841e:	4294      	cmp	r4, r2
 8008420:	d002      	beq.n	8008428 <std+0x48>
 8008422:	33d0      	adds	r3, #208	@ 0xd0
 8008424:	429c      	cmp	r4, r3
 8008426:	d105      	bne.n	8008434 <std+0x54>
 8008428:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800842c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008430:	f000 b978 	b.w	8008724 <__retarget_lock_init_recursive>
 8008434:	bd10      	pop	{r4, pc}
 8008436:	bf00      	nop
 8008438:	080085a5 	.word	0x080085a5
 800843c:	080085c7 	.word	0x080085c7
 8008440:	080085ff 	.word	0x080085ff
 8008444:	08008623 	.word	0x08008623
 8008448:	20000ab4 	.word	0x20000ab4

0800844c <stdio_exit_handler>:
 800844c:	4a02      	ldr	r2, [pc, #8]	@ (8008458 <stdio_exit_handler+0xc>)
 800844e:	4903      	ldr	r1, [pc, #12]	@ (800845c <stdio_exit_handler+0x10>)
 8008450:	4803      	ldr	r0, [pc, #12]	@ (8008460 <stdio_exit_handler+0x14>)
 8008452:	f000 b869 	b.w	8008528 <_fwalk_sglue>
 8008456:	bf00      	nop
 8008458:	2000000c 	.word	0x2000000c
 800845c:	0800aff5 	.word	0x0800aff5
 8008460:	2000001c 	.word	0x2000001c

08008464 <cleanup_stdio>:
 8008464:	6841      	ldr	r1, [r0, #4]
 8008466:	4b0c      	ldr	r3, [pc, #48]	@ (8008498 <cleanup_stdio+0x34>)
 8008468:	4299      	cmp	r1, r3
 800846a:	b510      	push	{r4, lr}
 800846c:	4604      	mov	r4, r0
 800846e:	d001      	beq.n	8008474 <cleanup_stdio+0x10>
 8008470:	f002 fdc0 	bl	800aff4 <_fflush_r>
 8008474:	68a1      	ldr	r1, [r4, #8]
 8008476:	4b09      	ldr	r3, [pc, #36]	@ (800849c <cleanup_stdio+0x38>)
 8008478:	4299      	cmp	r1, r3
 800847a:	d002      	beq.n	8008482 <cleanup_stdio+0x1e>
 800847c:	4620      	mov	r0, r4
 800847e:	f002 fdb9 	bl	800aff4 <_fflush_r>
 8008482:	68e1      	ldr	r1, [r4, #12]
 8008484:	4b06      	ldr	r3, [pc, #24]	@ (80084a0 <cleanup_stdio+0x3c>)
 8008486:	4299      	cmp	r1, r3
 8008488:	d004      	beq.n	8008494 <cleanup_stdio+0x30>
 800848a:	4620      	mov	r0, r4
 800848c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008490:	f002 bdb0 	b.w	800aff4 <_fflush_r>
 8008494:	bd10      	pop	{r4, pc}
 8008496:	bf00      	nop
 8008498:	20000ab4 	.word	0x20000ab4
 800849c:	20000b1c 	.word	0x20000b1c
 80084a0:	20000b84 	.word	0x20000b84

080084a4 <global_stdio_init.part.0>:
 80084a4:	b510      	push	{r4, lr}
 80084a6:	4b0b      	ldr	r3, [pc, #44]	@ (80084d4 <global_stdio_init.part.0+0x30>)
 80084a8:	4c0b      	ldr	r4, [pc, #44]	@ (80084d8 <global_stdio_init.part.0+0x34>)
 80084aa:	4a0c      	ldr	r2, [pc, #48]	@ (80084dc <global_stdio_init.part.0+0x38>)
 80084ac:	601a      	str	r2, [r3, #0]
 80084ae:	4620      	mov	r0, r4
 80084b0:	2200      	movs	r2, #0
 80084b2:	2104      	movs	r1, #4
 80084b4:	f7ff ff94 	bl	80083e0 <std>
 80084b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80084bc:	2201      	movs	r2, #1
 80084be:	2109      	movs	r1, #9
 80084c0:	f7ff ff8e 	bl	80083e0 <std>
 80084c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80084c8:	2202      	movs	r2, #2
 80084ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084ce:	2112      	movs	r1, #18
 80084d0:	f7ff bf86 	b.w	80083e0 <std>
 80084d4:	20000bec 	.word	0x20000bec
 80084d8:	20000ab4 	.word	0x20000ab4
 80084dc:	0800844d 	.word	0x0800844d

080084e0 <__sfp_lock_acquire>:
 80084e0:	4801      	ldr	r0, [pc, #4]	@ (80084e8 <__sfp_lock_acquire+0x8>)
 80084e2:	f000 b920 	b.w	8008726 <__retarget_lock_acquire_recursive>
 80084e6:	bf00      	nop
 80084e8:	20000bf5 	.word	0x20000bf5

080084ec <__sfp_lock_release>:
 80084ec:	4801      	ldr	r0, [pc, #4]	@ (80084f4 <__sfp_lock_release+0x8>)
 80084ee:	f000 b91b 	b.w	8008728 <__retarget_lock_release_recursive>
 80084f2:	bf00      	nop
 80084f4:	20000bf5 	.word	0x20000bf5

080084f8 <__sinit>:
 80084f8:	b510      	push	{r4, lr}
 80084fa:	4604      	mov	r4, r0
 80084fc:	f7ff fff0 	bl	80084e0 <__sfp_lock_acquire>
 8008500:	6a23      	ldr	r3, [r4, #32]
 8008502:	b11b      	cbz	r3, 800850c <__sinit+0x14>
 8008504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008508:	f7ff bff0 	b.w	80084ec <__sfp_lock_release>
 800850c:	4b04      	ldr	r3, [pc, #16]	@ (8008520 <__sinit+0x28>)
 800850e:	6223      	str	r3, [r4, #32]
 8008510:	4b04      	ldr	r3, [pc, #16]	@ (8008524 <__sinit+0x2c>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d1f5      	bne.n	8008504 <__sinit+0xc>
 8008518:	f7ff ffc4 	bl	80084a4 <global_stdio_init.part.0>
 800851c:	e7f2      	b.n	8008504 <__sinit+0xc>
 800851e:	bf00      	nop
 8008520:	08008465 	.word	0x08008465
 8008524:	20000bec 	.word	0x20000bec

08008528 <_fwalk_sglue>:
 8008528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800852c:	4607      	mov	r7, r0
 800852e:	4688      	mov	r8, r1
 8008530:	4614      	mov	r4, r2
 8008532:	2600      	movs	r6, #0
 8008534:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008538:	f1b9 0901 	subs.w	r9, r9, #1
 800853c:	d505      	bpl.n	800854a <_fwalk_sglue+0x22>
 800853e:	6824      	ldr	r4, [r4, #0]
 8008540:	2c00      	cmp	r4, #0
 8008542:	d1f7      	bne.n	8008534 <_fwalk_sglue+0xc>
 8008544:	4630      	mov	r0, r6
 8008546:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800854a:	89ab      	ldrh	r3, [r5, #12]
 800854c:	2b01      	cmp	r3, #1
 800854e:	d907      	bls.n	8008560 <_fwalk_sglue+0x38>
 8008550:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008554:	3301      	adds	r3, #1
 8008556:	d003      	beq.n	8008560 <_fwalk_sglue+0x38>
 8008558:	4629      	mov	r1, r5
 800855a:	4638      	mov	r0, r7
 800855c:	47c0      	blx	r8
 800855e:	4306      	orrs	r6, r0
 8008560:	3568      	adds	r5, #104	@ 0x68
 8008562:	e7e9      	b.n	8008538 <_fwalk_sglue+0x10>

08008564 <siprintf>:
 8008564:	b40e      	push	{r1, r2, r3}
 8008566:	b500      	push	{lr}
 8008568:	b09c      	sub	sp, #112	@ 0x70
 800856a:	ab1d      	add	r3, sp, #116	@ 0x74
 800856c:	9002      	str	r0, [sp, #8]
 800856e:	9006      	str	r0, [sp, #24]
 8008570:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008574:	4809      	ldr	r0, [pc, #36]	@ (800859c <siprintf+0x38>)
 8008576:	9107      	str	r1, [sp, #28]
 8008578:	9104      	str	r1, [sp, #16]
 800857a:	4909      	ldr	r1, [pc, #36]	@ (80085a0 <siprintf+0x3c>)
 800857c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008580:	9105      	str	r1, [sp, #20]
 8008582:	6800      	ldr	r0, [r0, #0]
 8008584:	9301      	str	r3, [sp, #4]
 8008586:	a902      	add	r1, sp, #8
 8008588:	f002 fbb4 	bl	800acf4 <_svfiprintf_r>
 800858c:	9b02      	ldr	r3, [sp, #8]
 800858e:	2200      	movs	r2, #0
 8008590:	701a      	strb	r2, [r3, #0]
 8008592:	b01c      	add	sp, #112	@ 0x70
 8008594:	f85d eb04 	ldr.w	lr, [sp], #4
 8008598:	b003      	add	sp, #12
 800859a:	4770      	bx	lr
 800859c:	20000018 	.word	0x20000018
 80085a0:	ffff0208 	.word	0xffff0208

080085a4 <__sread>:
 80085a4:	b510      	push	{r4, lr}
 80085a6:	460c      	mov	r4, r1
 80085a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085ac:	f000 f86c 	bl	8008688 <_read_r>
 80085b0:	2800      	cmp	r0, #0
 80085b2:	bfab      	itete	ge
 80085b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80085b6:	89a3      	ldrhlt	r3, [r4, #12]
 80085b8:	181b      	addge	r3, r3, r0
 80085ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80085be:	bfac      	ite	ge
 80085c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80085c2:	81a3      	strhlt	r3, [r4, #12]
 80085c4:	bd10      	pop	{r4, pc}

080085c6 <__swrite>:
 80085c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085ca:	461f      	mov	r7, r3
 80085cc:	898b      	ldrh	r3, [r1, #12]
 80085ce:	05db      	lsls	r3, r3, #23
 80085d0:	4605      	mov	r5, r0
 80085d2:	460c      	mov	r4, r1
 80085d4:	4616      	mov	r6, r2
 80085d6:	d505      	bpl.n	80085e4 <__swrite+0x1e>
 80085d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085dc:	2302      	movs	r3, #2
 80085de:	2200      	movs	r2, #0
 80085e0:	f000 f840 	bl	8008664 <_lseek_r>
 80085e4:	89a3      	ldrh	r3, [r4, #12]
 80085e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80085ee:	81a3      	strh	r3, [r4, #12]
 80085f0:	4632      	mov	r2, r6
 80085f2:	463b      	mov	r3, r7
 80085f4:	4628      	mov	r0, r5
 80085f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80085fa:	f000 b857 	b.w	80086ac <_write_r>

080085fe <__sseek>:
 80085fe:	b510      	push	{r4, lr}
 8008600:	460c      	mov	r4, r1
 8008602:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008606:	f000 f82d 	bl	8008664 <_lseek_r>
 800860a:	1c43      	adds	r3, r0, #1
 800860c:	89a3      	ldrh	r3, [r4, #12]
 800860e:	bf15      	itete	ne
 8008610:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008612:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008616:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800861a:	81a3      	strheq	r3, [r4, #12]
 800861c:	bf18      	it	ne
 800861e:	81a3      	strhne	r3, [r4, #12]
 8008620:	bd10      	pop	{r4, pc}

08008622 <__sclose>:
 8008622:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008626:	f000 b80d 	b.w	8008644 <_close_r>

0800862a <memset>:
 800862a:	4402      	add	r2, r0
 800862c:	4603      	mov	r3, r0
 800862e:	4293      	cmp	r3, r2
 8008630:	d100      	bne.n	8008634 <memset+0xa>
 8008632:	4770      	bx	lr
 8008634:	f803 1b01 	strb.w	r1, [r3], #1
 8008638:	e7f9      	b.n	800862e <memset+0x4>
	...

0800863c <_localeconv_r>:
 800863c:	4800      	ldr	r0, [pc, #0]	@ (8008640 <_localeconv_r+0x4>)
 800863e:	4770      	bx	lr
 8008640:	20000158 	.word	0x20000158

08008644 <_close_r>:
 8008644:	b538      	push	{r3, r4, r5, lr}
 8008646:	4d06      	ldr	r5, [pc, #24]	@ (8008660 <_close_r+0x1c>)
 8008648:	2300      	movs	r3, #0
 800864a:	4604      	mov	r4, r0
 800864c:	4608      	mov	r0, r1
 800864e:	602b      	str	r3, [r5, #0]
 8008650:	f7fa fba0 	bl	8002d94 <_close>
 8008654:	1c43      	adds	r3, r0, #1
 8008656:	d102      	bne.n	800865e <_close_r+0x1a>
 8008658:	682b      	ldr	r3, [r5, #0]
 800865a:	b103      	cbz	r3, 800865e <_close_r+0x1a>
 800865c:	6023      	str	r3, [r4, #0]
 800865e:	bd38      	pop	{r3, r4, r5, pc}
 8008660:	20000bf0 	.word	0x20000bf0

08008664 <_lseek_r>:
 8008664:	b538      	push	{r3, r4, r5, lr}
 8008666:	4d07      	ldr	r5, [pc, #28]	@ (8008684 <_lseek_r+0x20>)
 8008668:	4604      	mov	r4, r0
 800866a:	4608      	mov	r0, r1
 800866c:	4611      	mov	r1, r2
 800866e:	2200      	movs	r2, #0
 8008670:	602a      	str	r2, [r5, #0]
 8008672:	461a      	mov	r2, r3
 8008674:	f7fa fbb5 	bl	8002de2 <_lseek>
 8008678:	1c43      	adds	r3, r0, #1
 800867a:	d102      	bne.n	8008682 <_lseek_r+0x1e>
 800867c:	682b      	ldr	r3, [r5, #0]
 800867e:	b103      	cbz	r3, 8008682 <_lseek_r+0x1e>
 8008680:	6023      	str	r3, [r4, #0]
 8008682:	bd38      	pop	{r3, r4, r5, pc}
 8008684:	20000bf0 	.word	0x20000bf0

08008688 <_read_r>:
 8008688:	b538      	push	{r3, r4, r5, lr}
 800868a:	4d07      	ldr	r5, [pc, #28]	@ (80086a8 <_read_r+0x20>)
 800868c:	4604      	mov	r4, r0
 800868e:	4608      	mov	r0, r1
 8008690:	4611      	mov	r1, r2
 8008692:	2200      	movs	r2, #0
 8008694:	602a      	str	r2, [r5, #0]
 8008696:	461a      	mov	r2, r3
 8008698:	f7fa fb43 	bl	8002d22 <_read>
 800869c:	1c43      	adds	r3, r0, #1
 800869e:	d102      	bne.n	80086a6 <_read_r+0x1e>
 80086a0:	682b      	ldr	r3, [r5, #0]
 80086a2:	b103      	cbz	r3, 80086a6 <_read_r+0x1e>
 80086a4:	6023      	str	r3, [r4, #0]
 80086a6:	bd38      	pop	{r3, r4, r5, pc}
 80086a8:	20000bf0 	.word	0x20000bf0

080086ac <_write_r>:
 80086ac:	b538      	push	{r3, r4, r5, lr}
 80086ae:	4d07      	ldr	r5, [pc, #28]	@ (80086cc <_write_r+0x20>)
 80086b0:	4604      	mov	r4, r0
 80086b2:	4608      	mov	r0, r1
 80086b4:	4611      	mov	r1, r2
 80086b6:	2200      	movs	r2, #0
 80086b8:	602a      	str	r2, [r5, #0]
 80086ba:	461a      	mov	r2, r3
 80086bc:	f7fa fb4e 	bl	8002d5c <_write>
 80086c0:	1c43      	adds	r3, r0, #1
 80086c2:	d102      	bne.n	80086ca <_write_r+0x1e>
 80086c4:	682b      	ldr	r3, [r5, #0]
 80086c6:	b103      	cbz	r3, 80086ca <_write_r+0x1e>
 80086c8:	6023      	str	r3, [r4, #0]
 80086ca:	bd38      	pop	{r3, r4, r5, pc}
 80086cc:	20000bf0 	.word	0x20000bf0

080086d0 <__errno>:
 80086d0:	4b01      	ldr	r3, [pc, #4]	@ (80086d8 <__errno+0x8>)
 80086d2:	6818      	ldr	r0, [r3, #0]
 80086d4:	4770      	bx	lr
 80086d6:	bf00      	nop
 80086d8:	20000018 	.word	0x20000018

080086dc <__libc_init_array>:
 80086dc:	b570      	push	{r4, r5, r6, lr}
 80086de:	4d0d      	ldr	r5, [pc, #52]	@ (8008714 <__libc_init_array+0x38>)
 80086e0:	4c0d      	ldr	r4, [pc, #52]	@ (8008718 <__libc_init_array+0x3c>)
 80086e2:	1b64      	subs	r4, r4, r5
 80086e4:	10a4      	asrs	r4, r4, #2
 80086e6:	2600      	movs	r6, #0
 80086e8:	42a6      	cmp	r6, r4
 80086ea:	d109      	bne.n	8008700 <__libc_init_array+0x24>
 80086ec:	4d0b      	ldr	r5, [pc, #44]	@ (800871c <__libc_init_array+0x40>)
 80086ee:	4c0c      	ldr	r4, [pc, #48]	@ (8008720 <__libc_init_array+0x44>)
 80086f0:	f003 fb70 	bl	800bdd4 <_init>
 80086f4:	1b64      	subs	r4, r4, r5
 80086f6:	10a4      	asrs	r4, r4, #2
 80086f8:	2600      	movs	r6, #0
 80086fa:	42a6      	cmp	r6, r4
 80086fc:	d105      	bne.n	800870a <__libc_init_array+0x2e>
 80086fe:	bd70      	pop	{r4, r5, r6, pc}
 8008700:	f855 3b04 	ldr.w	r3, [r5], #4
 8008704:	4798      	blx	r3
 8008706:	3601      	adds	r6, #1
 8008708:	e7ee      	b.n	80086e8 <__libc_init_array+0xc>
 800870a:	f855 3b04 	ldr.w	r3, [r5], #4
 800870e:	4798      	blx	r3
 8008710:	3601      	adds	r6, #1
 8008712:	e7f2      	b.n	80086fa <__libc_init_array+0x1e>
 8008714:	0800c290 	.word	0x0800c290
 8008718:	0800c290 	.word	0x0800c290
 800871c:	0800c290 	.word	0x0800c290
 8008720:	0800c294 	.word	0x0800c294

08008724 <__retarget_lock_init_recursive>:
 8008724:	4770      	bx	lr

08008726 <__retarget_lock_acquire_recursive>:
 8008726:	4770      	bx	lr

08008728 <__retarget_lock_release_recursive>:
 8008728:	4770      	bx	lr
	...

0800872c <nanf>:
 800872c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008734 <nanf+0x8>
 8008730:	4770      	bx	lr
 8008732:	bf00      	nop
 8008734:	7fc00000 	.word	0x7fc00000

08008738 <quorem>:
 8008738:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800873c:	6903      	ldr	r3, [r0, #16]
 800873e:	690c      	ldr	r4, [r1, #16]
 8008740:	42a3      	cmp	r3, r4
 8008742:	4607      	mov	r7, r0
 8008744:	db7e      	blt.n	8008844 <quorem+0x10c>
 8008746:	3c01      	subs	r4, #1
 8008748:	f101 0814 	add.w	r8, r1, #20
 800874c:	00a3      	lsls	r3, r4, #2
 800874e:	f100 0514 	add.w	r5, r0, #20
 8008752:	9300      	str	r3, [sp, #0]
 8008754:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008758:	9301      	str	r3, [sp, #4]
 800875a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800875e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008762:	3301      	adds	r3, #1
 8008764:	429a      	cmp	r2, r3
 8008766:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800876a:	fbb2 f6f3 	udiv	r6, r2, r3
 800876e:	d32e      	bcc.n	80087ce <quorem+0x96>
 8008770:	f04f 0a00 	mov.w	sl, #0
 8008774:	46c4      	mov	ip, r8
 8008776:	46ae      	mov	lr, r5
 8008778:	46d3      	mov	fp, sl
 800877a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800877e:	b298      	uxth	r0, r3
 8008780:	fb06 a000 	mla	r0, r6, r0, sl
 8008784:	0c02      	lsrs	r2, r0, #16
 8008786:	0c1b      	lsrs	r3, r3, #16
 8008788:	fb06 2303 	mla	r3, r6, r3, r2
 800878c:	f8de 2000 	ldr.w	r2, [lr]
 8008790:	b280      	uxth	r0, r0
 8008792:	b292      	uxth	r2, r2
 8008794:	1a12      	subs	r2, r2, r0
 8008796:	445a      	add	r2, fp
 8008798:	f8de 0000 	ldr.w	r0, [lr]
 800879c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80087a0:	b29b      	uxth	r3, r3
 80087a2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80087a6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80087aa:	b292      	uxth	r2, r2
 80087ac:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80087b0:	45e1      	cmp	r9, ip
 80087b2:	f84e 2b04 	str.w	r2, [lr], #4
 80087b6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80087ba:	d2de      	bcs.n	800877a <quorem+0x42>
 80087bc:	9b00      	ldr	r3, [sp, #0]
 80087be:	58eb      	ldr	r3, [r5, r3]
 80087c0:	b92b      	cbnz	r3, 80087ce <quorem+0x96>
 80087c2:	9b01      	ldr	r3, [sp, #4]
 80087c4:	3b04      	subs	r3, #4
 80087c6:	429d      	cmp	r5, r3
 80087c8:	461a      	mov	r2, r3
 80087ca:	d32f      	bcc.n	800882c <quorem+0xf4>
 80087cc:	613c      	str	r4, [r7, #16]
 80087ce:	4638      	mov	r0, r7
 80087d0:	f001 f9c2 	bl	8009b58 <__mcmp>
 80087d4:	2800      	cmp	r0, #0
 80087d6:	db25      	blt.n	8008824 <quorem+0xec>
 80087d8:	4629      	mov	r1, r5
 80087da:	2000      	movs	r0, #0
 80087dc:	f858 2b04 	ldr.w	r2, [r8], #4
 80087e0:	f8d1 c000 	ldr.w	ip, [r1]
 80087e4:	fa1f fe82 	uxth.w	lr, r2
 80087e8:	fa1f f38c 	uxth.w	r3, ip
 80087ec:	eba3 030e 	sub.w	r3, r3, lr
 80087f0:	4403      	add	r3, r0
 80087f2:	0c12      	lsrs	r2, r2, #16
 80087f4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80087f8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80087fc:	b29b      	uxth	r3, r3
 80087fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008802:	45c1      	cmp	r9, r8
 8008804:	f841 3b04 	str.w	r3, [r1], #4
 8008808:	ea4f 4022 	mov.w	r0, r2, asr #16
 800880c:	d2e6      	bcs.n	80087dc <quorem+0xa4>
 800880e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008812:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008816:	b922      	cbnz	r2, 8008822 <quorem+0xea>
 8008818:	3b04      	subs	r3, #4
 800881a:	429d      	cmp	r5, r3
 800881c:	461a      	mov	r2, r3
 800881e:	d30b      	bcc.n	8008838 <quorem+0x100>
 8008820:	613c      	str	r4, [r7, #16]
 8008822:	3601      	adds	r6, #1
 8008824:	4630      	mov	r0, r6
 8008826:	b003      	add	sp, #12
 8008828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800882c:	6812      	ldr	r2, [r2, #0]
 800882e:	3b04      	subs	r3, #4
 8008830:	2a00      	cmp	r2, #0
 8008832:	d1cb      	bne.n	80087cc <quorem+0x94>
 8008834:	3c01      	subs	r4, #1
 8008836:	e7c6      	b.n	80087c6 <quorem+0x8e>
 8008838:	6812      	ldr	r2, [r2, #0]
 800883a:	3b04      	subs	r3, #4
 800883c:	2a00      	cmp	r2, #0
 800883e:	d1ef      	bne.n	8008820 <quorem+0xe8>
 8008840:	3c01      	subs	r4, #1
 8008842:	e7ea      	b.n	800881a <quorem+0xe2>
 8008844:	2000      	movs	r0, #0
 8008846:	e7ee      	b.n	8008826 <quorem+0xee>

08008848 <_dtoa_r>:
 8008848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800884c:	69c7      	ldr	r7, [r0, #28]
 800884e:	b099      	sub	sp, #100	@ 0x64
 8008850:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008854:	ec55 4b10 	vmov	r4, r5, d0
 8008858:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800885a:	9109      	str	r1, [sp, #36]	@ 0x24
 800885c:	4683      	mov	fp, r0
 800885e:	920e      	str	r2, [sp, #56]	@ 0x38
 8008860:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008862:	b97f      	cbnz	r7, 8008884 <_dtoa_r+0x3c>
 8008864:	2010      	movs	r0, #16
 8008866:	f000 fdfd 	bl	8009464 <malloc>
 800886a:	4602      	mov	r2, r0
 800886c:	f8cb 001c 	str.w	r0, [fp, #28]
 8008870:	b920      	cbnz	r0, 800887c <_dtoa_r+0x34>
 8008872:	4ba7      	ldr	r3, [pc, #668]	@ (8008b10 <_dtoa_r+0x2c8>)
 8008874:	21ef      	movs	r1, #239	@ 0xef
 8008876:	48a7      	ldr	r0, [pc, #668]	@ (8008b14 <_dtoa_r+0x2cc>)
 8008878:	f002 fc36 	bl	800b0e8 <__assert_func>
 800887c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008880:	6007      	str	r7, [r0, #0]
 8008882:	60c7      	str	r7, [r0, #12]
 8008884:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008888:	6819      	ldr	r1, [r3, #0]
 800888a:	b159      	cbz	r1, 80088a4 <_dtoa_r+0x5c>
 800888c:	685a      	ldr	r2, [r3, #4]
 800888e:	604a      	str	r2, [r1, #4]
 8008890:	2301      	movs	r3, #1
 8008892:	4093      	lsls	r3, r2
 8008894:	608b      	str	r3, [r1, #8]
 8008896:	4658      	mov	r0, fp
 8008898:	f000 feda 	bl	8009650 <_Bfree>
 800889c:	f8db 301c 	ldr.w	r3, [fp, #28]
 80088a0:	2200      	movs	r2, #0
 80088a2:	601a      	str	r2, [r3, #0]
 80088a4:	1e2b      	subs	r3, r5, #0
 80088a6:	bfb9      	ittee	lt
 80088a8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80088ac:	9303      	strlt	r3, [sp, #12]
 80088ae:	2300      	movge	r3, #0
 80088b0:	6033      	strge	r3, [r6, #0]
 80088b2:	9f03      	ldr	r7, [sp, #12]
 80088b4:	4b98      	ldr	r3, [pc, #608]	@ (8008b18 <_dtoa_r+0x2d0>)
 80088b6:	bfbc      	itt	lt
 80088b8:	2201      	movlt	r2, #1
 80088ba:	6032      	strlt	r2, [r6, #0]
 80088bc:	43bb      	bics	r3, r7
 80088be:	d112      	bne.n	80088e6 <_dtoa_r+0x9e>
 80088c0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80088c2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80088c6:	6013      	str	r3, [r2, #0]
 80088c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80088cc:	4323      	orrs	r3, r4
 80088ce:	f000 854d 	beq.w	800936c <_dtoa_r+0xb24>
 80088d2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80088d4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008b2c <_dtoa_r+0x2e4>
 80088d8:	2b00      	cmp	r3, #0
 80088da:	f000 854f 	beq.w	800937c <_dtoa_r+0xb34>
 80088de:	f10a 0303 	add.w	r3, sl, #3
 80088e2:	f000 bd49 	b.w	8009378 <_dtoa_r+0xb30>
 80088e6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80088ea:	2200      	movs	r2, #0
 80088ec:	ec51 0b17 	vmov	r0, r1, d7
 80088f0:	2300      	movs	r3, #0
 80088f2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80088f6:	f7f8 f8f7 	bl	8000ae8 <__aeabi_dcmpeq>
 80088fa:	4680      	mov	r8, r0
 80088fc:	b158      	cbz	r0, 8008916 <_dtoa_r+0xce>
 80088fe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008900:	2301      	movs	r3, #1
 8008902:	6013      	str	r3, [r2, #0]
 8008904:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008906:	b113      	cbz	r3, 800890e <_dtoa_r+0xc6>
 8008908:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800890a:	4b84      	ldr	r3, [pc, #528]	@ (8008b1c <_dtoa_r+0x2d4>)
 800890c:	6013      	str	r3, [r2, #0]
 800890e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008b30 <_dtoa_r+0x2e8>
 8008912:	f000 bd33 	b.w	800937c <_dtoa_r+0xb34>
 8008916:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800891a:	aa16      	add	r2, sp, #88	@ 0x58
 800891c:	a917      	add	r1, sp, #92	@ 0x5c
 800891e:	4658      	mov	r0, fp
 8008920:	f001 fa3a 	bl	8009d98 <__d2b>
 8008924:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008928:	4681      	mov	r9, r0
 800892a:	2e00      	cmp	r6, #0
 800892c:	d077      	beq.n	8008a1e <_dtoa_r+0x1d6>
 800892e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008930:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008934:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008938:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800893c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008940:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008944:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008948:	4619      	mov	r1, r3
 800894a:	2200      	movs	r2, #0
 800894c:	4b74      	ldr	r3, [pc, #464]	@ (8008b20 <_dtoa_r+0x2d8>)
 800894e:	f7f7 fcab 	bl	80002a8 <__aeabi_dsub>
 8008952:	a369      	add	r3, pc, #420	@ (adr r3, 8008af8 <_dtoa_r+0x2b0>)
 8008954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008958:	f7f7 fe5e 	bl	8000618 <__aeabi_dmul>
 800895c:	a368      	add	r3, pc, #416	@ (adr r3, 8008b00 <_dtoa_r+0x2b8>)
 800895e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008962:	f7f7 fca3 	bl	80002ac <__adddf3>
 8008966:	4604      	mov	r4, r0
 8008968:	4630      	mov	r0, r6
 800896a:	460d      	mov	r5, r1
 800896c:	f7f7 fdea 	bl	8000544 <__aeabi_i2d>
 8008970:	a365      	add	r3, pc, #404	@ (adr r3, 8008b08 <_dtoa_r+0x2c0>)
 8008972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008976:	f7f7 fe4f 	bl	8000618 <__aeabi_dmul>
 800897a:	4602      	mov	r2, r0
 800897c:	460b      	mov	r3, r1
 800897e:	4620      	mov	r0, r4
 8008980:	4629      	mov	r1, r5
 8008982:	f7f7 fc93 	bl	80002ac <__adddf3>
 8008986:	4604      	mov	r4, r0
 8008988:	460d      	mov	r5, r1
 800898a:	f7f8 f8f5 	bl	8000b78 <__aeabi_d2iz>
 800898e:	2200      	movs	r2, #0
 8008990:	4607      	mov	r7, r0
 8008992:	2300      	movs	r3, #0
 8008994:	4620      	mov	r0, r4
 8008996:	4629      	mov	r1, r5
 8008998:	f7f8 f8b0 	bl	8000afc <__aeabi_dcmplt>
 800899c:	b140      	cbz	r0, 80089b0 <_dtoa_r+0x168>
 800899e:	4638      	mov	r0, r7
 80089a0:	f7f7 fdd0 	bl	8000544 <__aeabi_i2d>
 80089a4:	4622      	mov	r2, r4
 80089a6:	462b      	mov	r3, r5
 80089a8:	f7f8 f89e 	bl	8000ae8 <__aeabi_dcmpeq>
 80089ac:	b900      	cbnz	r0, 80089b0 <_dtoa_r+0x168>
 80089ae:	3f01      	subs	r7, #1
 80089b0:	2f16      	cmp	r7, #22
 80089b2:	d851      	bhi.n	8008a58 <_dtoa_r+0x210>
 80089b4:	4b5b      	ldr	r3, [pc, #364]	@ (8008b24 <_dtoa_r+0x2dc>)
 80089b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80089ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80089c2:	f7f8 f89b 	bl	8000afc <__aeabi_dcmplt>
 80089c6:	2800      	cmp	r0, #0
 80089c8:	d048      	beq.n	8008a5c <_dtoa_r+0x214>
 80089ca:	3f01      	subs	r7, #1
 80089cc:	2300      	movs	r3, #0
 80089ce:	9312      	str	r3, [sp, #72]	@ 0x48
 80089d0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80089d2:	1b9b      	subs	r3, r3, r6
 80089d4:	1e5a      	subs	r2, r3, #1
 80089d6:	bf44      	itt	mi
 80089d8:	f1c3 0801 	rsbmi	r8, r3, #1
 80089dc:	2300      	movmi	r3, #0
 80089de:	9208      	str	r2, [sp, #32]
 80089e0:	bf54      	ite	pl
 80089e2:	f04f 0800 	movpl.w	r8, #0
 80089e6:	9308      	strmi	r3, [sp, #32]
 80089e8:	2f00      	cmp	r7, #0
 80089ea:	db39      	blt.n	8008a60 <_dtoa_r+0x218>
 80089ec:	9b08      	ldr	r3, [sp, #32]
 80089ee:	970f      	str	r7, [sp, #60]	@ 0x3c
 80089f0:	443b      	add	r3, r7
 80089f2:	9308      	str	r3, [sp, #32]
 80089f4:	2300      	movs	r3, #0
 80089f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80089f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089fa:	2b09      	cmp	r3, #9
 80089fc:	d864      	bhi.n	8008ac8 <_dtoa_r+0x280>
 80089fe:	2b05      	cmp	r3, #5
 8008a00:	bfc4      	itt	gt
 8008a02:	3b04      	subgt	r3, #4
 8008a04:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008a06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a08:	f1a3 0302 	sub.w	r3, r3, #2
 8008a0c:	bfcc      	ite	gt
 8008a0e:	2400      	movgt	r4, #0
 8008a10:	2401      	movle	r4, #1
 8008a12:	2b03      	cmp	r3, #3
 8008a14:	d863      	bhi.n	8008ade <_dtoa_r+0x296>
 8008a16:	e8df f003 	tbb	[pc, r3]
 8008a1a:	372a      	.short	0x372a
 8008a1c:	5535      	.short	0x5535
 8008a1e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008a22:	441e      	add	r6, r3
 8008a24:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008a28:	2b20      	cmp	r3, #32
 8008a2a:	bfc1      	itttt	gt
 8008a2c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008a30:	409f      	lslgt	r7, r3
 8008a32:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008a36:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008a3a:	bfd6      	itet	le
 8008a3c:	f1c3 0320 	rsble	r3, r3, #32
 8008a40:	ea47 0003 	orrgt.w	r0, r7, r3
 8008a44:	fa04 f003 	lslle.w	r0, r4, r3
 8008a48:	f7f7 fd6c 	bl	8000524 <__aeabi_ui2d>
 8008a4c:	2201      	movs	r2, #1
 8008a4e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008a52:	3e01      	subs	r6, #1
 8008a54:	9214      	str	r2, [sp, #80]	@ 0x50
 8008a56:	e777      	b.n	8008948 <_dtoa_r+0x100>
 8008a58:	2301      	movs	r3, #1
 8008a5a:	e7b8      	b.n	80089ce <_dtoa_r+0x186>
 8008a5c:	9012      	str	r0, [sp, #72]	@ 0x48
 8008a5e:	e7b7      	b.n	80089d0 <_dtoa_r+0x188>
 8008a60:	427b      	negs	r3, r7
 8008a62:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a64:	2300      	movs	r3, #0
 8008a66:	eba8 0807 	sub.w	r8, r8, r7
 8008a6a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008a6c:	e7c4      	b.n	80089f8 <_dtoa_r+0x1b0>
 8008a6e:	2300      	movs	r3, #0
 8008a70:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	dc35      	bgt.n	8008ae4 <_dtoa_r+0x29c>
 8008a78:	2301      	movs	r3, #1
 8008a7a:	9300      	str	r3, [sp, #0]
 8008a7c:	9307      	str	r3, [sp, #28]
 8008a7e:	461a      	mov	r2, r3
 8008a80:	920e      	str	r2, [sp, #56]	@ 0x38
 8008a82:	e00b      	b.n	8008a9c <_dtoa_r+0x254>
 8008a84:	2301      	movs	r3, #1
 8008a86:	e7f3      	b.n	8008a70 <_dtoa_r+0x228>
 8008a88:	2300      	movs	r3, #0
 8008a8a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a8e:	18fb      	adds	r3, r7, r3
 8008a90:	9300      	str	r3, [sp, #0]
 8008a92:	3301      	adds	r3, #1
 8008a94:	2b01      	cmp	r3, #1
 8008a96:	9307      	str	r3, [sp, #28]
 8008a98:	bfb8      	it	lt
 8008a9a:	2301      	movlt	r3, #1
 8008a9c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008aa0:	2100      	movs	r1, #0
 8008aa2:	2204      	movs	r2, #4
 8008aa4:	f102 0514 	add.w	r5, r2, #20
 8008aa8:	429d      	cmp	r5, r3
 8008aaa:	d91f      	bls.n	8008aec <_dtoa_r+0x2a4>
 8008aac:	6041      	str	r1, [r0, #4]
 8008aae:	4658      	mov	r0, fp
 8008ab0:	f000 fd8e 	bl	80095d0 <_Balloc>
 8008ab4:	4682      	mov	sl, r0
 8008ab6:	2800      	cmp	r0, #0
 8008ab8:	d13c      	bne.n	8008b34 <_dtoa_r+0x2ec>
 8008aba:	4b1b      	ldr	r3, [pc, #108]	@ (8008b28 <_dtoa_r+0x2e0>)
 8008abc:	4602      	mov	r2, r0
 8008abe:	f240 11af 	movw	r1, #431	@ 0x1af
 8008ac2:	e6d8      	b.n	8008876 <_dtoa_r+0x2e>
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	e7e0      	b.n	8008a8a <_dtoa_r+0x242>
 8008ac8:	2401      	movs	r4, #1
 8008aca:	2300      	movs	r3, #0
 8008acc:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ace:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008ad0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008ad4:	9300      	str	r3, [sp, #0]
 8008ad6:	9307      	str	r3, [sp, #28]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	2312      	movs	r3, #18
 8008adc:	e7d0      	b.n	8008a80 <_dtoa_r+0x238>
 8008ade:	2301      	movs	r3, #1
 8008ae0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008ae2:	e7f5      	b.n	8008ad0 <_dtoa_r+0x288>
 8008ae4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ae6:	9300      	str	r3, [sp, #0]
 8008ae8:	9307      	str	r3, [sp, #28]
 8008aea:	e7d7      	b.n	8008a9c <_dtoa_r+0x254>
 8008aec:	3101      	adds	r1, #1
 8008aee:	0052      	lsls	r2, r2, #1
 8008af0:	e7d8      	b.n	8008aa4 <_dtoa_r+0x25c>
 8008af2:	bf00      	nop
 8008af4:	f3af 8000 	nop.w
 8008af8:	636f4361 	.word	0x636f4361
 8008afc:	3fd287a7 	.word	0x3fd287a7
 8008b00:	8b60c8b3 	.word	0x8b60c8b3
 8008b04:	3fc68a28 	.word	0x3fc68a28
 8008b08:	509f79fb 	.word	0x509f79fb
 8008b0c:	3fd34413 	.word	0x3fd34413
 8008b10:	0800bea2 	.word	0x0800bea2
 8008b14:	0800beb9 	.word	0x0800beb9
 8008b18:	7ff00000 	.word	0x7ff00000
 8008b1c:	0800be6d 	.word	0x0800be6d
 8008b20:	3ff80000 	.word	0x3ff80000
 8008b24:	0800bfb0 	.word	0x0800bfb0
 8008b28:	0800bf11 	.word	0x0800bf11
 8008b2c:	0800be9e 	.word	0x0800be9e
 8008b30:	0800be6c 	.word	0x0800be6c
 8008b34:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008b38:	6018      	str	r0, [r3, #0]
 8008b3a:	9b07      	ldr	r3, [sp, #28]
 8008b3c:	2b0e      	cmp	r3, #14
 8008b3e:	f200 80a4 	bhi.w	8008c8a <_dtoa_r+0x442>
 8008b42:	2c00      	cmp	r4, #0
 8008b44:	f000 80a1 	beq.w	8008c8a <_dtoa_r+0x442>
 8008b48:	2f00      	cmp	r7, #0
 8008b4a:	dd33      	ble.n	8008bb4 <_dtoa_r+0x36c>
 8008b4c:	4bad      	ldr	r3, [pc, #692]	@ (8008e04 <_dtoa_r+0x5bc>)
 8008b4e:	f007 020f 	and.w	r2, r7, #15
 8008b52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b56:	ed93 7b00 	vldr	d7, [r3]
 8008b5a:	05f8      	lsls	r0, r7, #23
 8008b5c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008b60:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008b64:	d516      	bpl.n	8008b94 <_dtoa_r+0x34c>
 8008b66:	4ba8      	ldr	r3, [pc, #672]	@ (8008e08 <_dtoa_r+0x5c0>)
 8008b68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008b6c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008b70:	f7f7 fe7c 	bl	800086c <__aeabi_ddiv>
 8008b74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b78:	f004 040f 	and.w	r4, r4, #15
 8008b7c:	2603      	movs	r6, #3
 8008b7e:	4da2      	ldr	r5, [pc, #648]	@ (8008e08 <_dtoa_r+0x5c0>)
 8008b80:	b954      	cbnz	r4, 8008b98 <_dtoa_r+0x350>
 8008b82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b8a:	f7f7 fe6f 	bl	800086c <__aeabi_ddiv>
 8008b8e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b92:	e028      	b.n	8008be6 <_dtoa_r+0x39e>
 8008b94:	2602      	movs	r6, #2
 8008b96:	e7f2      	b.n	8008b7e <_dtoa_r+0x336>
 8008b98:	07e1      	lsls	r1, r4, #31
 8008b9a:	d508      	bpl.n	8008bae <_dtoa_r+0x366>
 8008b9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ba0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008ba4:	f7f7 fd38 	bl	8000618 <__aeabi_dmul>
 8008ba8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008bac:	3601      	adds	r6, #1
 8008bae:	1064      	asrs	r4, r4, #1
 8008bb0:	3508      	adds	r5, #8
 8008bb2:	e7e5      	b.n	8008b80 <_dtoa_r+0x338>
 8008bb4:	f000 80d2 	beq.w	8008d5c <_dtoa_r+0x514>
 8008bb8:	427c      	negs	r4, r7
 8008bba:	4b92      	ldr	r3, [pc, #584]	@ (8008e04 <_dtoa_r+0x5bc>)
 8008bbc:	4d92      	ldr	r5, [pc, #584]	@ (8008e08 <_dtoa_r+0x5c0>)
 8008bbe:	f004 020f 	and.w	r2, r4, #15
 8008bc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008bce:	f7f7 fd23 	bl	8000618 <__aeabi_dmul>
 8008bd2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008bd6:	1124      	asrs	r4, r4, #4
 8008bd8:	2300      	movs	r3, #0
 8008bda:	2602      	movs	r6, #2
 8008bdc:	2c00      	cmp	r4, #0
 8008bde:	f040 80b2 	bne.w	8008d46 <_dtoa_r+0x4fe>
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d1d3      	bne.n	8008b8e <_dtoa_r+0x346>
 8008be6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008be8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	f000 80b7 	beq.w	8008d60 <_dtoa_r+0x518>
 8008bf2:	4b86      	ldr	r3, [pc, #536]	@ (8008e0c <_dtoa_r+0x5c4>)
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	4620      	mov	r0, r4
 8008bf8:	4629      	mov	r1, r5
 8008bfa:	f7f7 ff7f 	bl	8000afc <__aeabi_dcmplt>
 8008bfe:	2800      	cmp	r0, #0
 8008c00:	f000 80ae 	beq.w	8008d60 <_dtoa_r+0x518>
 8008c04:	9b07      	ldr	r3, [sp, #28]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	f000 80aa 	beq.w	8008d60 <_dtoa_r+0x518>
 8008c0c:	9b00      	ldr	r3, [sp, #0]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	dd37      	ble.n	8008c82 <_dtoa_r+0x43a>
 8008c12:	1e7b      	subs	r3, r7, #1
 8008c14:	9304      	str	r3, [sp, #16]
 8008c16:	4620      	mov	r0, r4
 8008c18:	4b7d      	ldr	r3, [pc, #500]	@ (8008e10 <_dtoa_r+0x5c8>)
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	4629      	mov	r1, r5
 8008c1e:	f7f7 fcfb 	bl	8000618 <__aeabi_dmul>
 8008c22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c26:	9c00      	ldr	r4, [sp, #0]
 8008c28:	3601      	adds	r6, #1
 8008c2a:	4630      	mov	r0, r6
 8008c2c:	f7f7 fc8a 	bl	8000544 <__aeabi_i2d>
 8008c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c34:	f7f7 fcf0 	bl	8000618 <__aeabi_dmul>
 8008c38:	4b76      	ldr	r3, [pc, #472]	@ (8008e14 <_dtoa_r+0x5cc>)
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	f7f7 fb36 	bl	80002ac <__adddf3>
 8008c40:	4605      	mov	r5, r0
 8008c42:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008c46:	2c00      	cmp	r4, #0
 8008c48:	f040 808d 	bne.w	8008d66 <_dtoa_r+0x51e>
 8008c4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c50:	4b71      	ldr	r3, [pc, #452]	@ (8008e18 <_dtoa_r+0x5d0>)
 8008c52:	2200      	movs	r2, #0
 8008c54:	f7f7 fb28 	bl	80002a8 <__aeabi_dsub>
 8008c58:	4602      	mov	r2, r0
 8008c5a:	460b      	mov	r3, r1
 8008c5c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008c60:	462a      	mov	r2, r5
 8008c62:	4633      	mov	r3, r6
 8008c64:	f7f7 ff68 	bl	8000b38 <__aeabi_dcmpgt>
 8008c68:	2800      	cmp	r0, #0
 8008c6a:	f040 828b 	bne.w	8009184 <_dtoa_r+0x93c>
 8008c6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c72:	462a      	mov	r2, r5
 8008c74:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008c78:	f7f7 ff40 	bl	8000afc <__aeabi_dcmplt>
 8008c7c:	2800      	cmp	r0, #0
 8008c7e:	f040 8128 	bne.w	8008ed2 <_dtoa_r+0x68a>
 8008c82:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008c86:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008c8a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	f2c0 815a 	blt.w	8008f46 <_dtoa_r+0x6fe>
 8008c92:	2f0e      	cmp	r7, #14
 8008c94:	f300 8157 	bgt.w	8008f46 <_dtoa_r+0x6fe>
 8008c98:	4b5a      	ldr	r3, [pc, #360]	@ (8008e04 <_dtoa_r+0x5bc>)
 8008c9a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008c9e:	ed93 7b00 	vldr	d7, [r3]
 8008ca2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	ed8d 7b00 	vstr	d7, [sp]
 8008caa:	da03      	bge.n	8008cb4 <_dtoa_r+0x46c>
 8008cac:	9b07      	ldr	r3, [sp, #28]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	f340 8101 	ble.w	8008eb6 <_dtoa_r+0x66e>
 8008cb4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008cb8:	4656      	mov	r6, sl
 8008cba:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008cbe:	4620      	mov	r0, r4
 8008cc0:	4629      	mov	r1, r5
 8008cc2:	f7f7 fdd3 	bl	800086c <__aeabi_ddiv>
 8008cc6:	f7f7 ff57 	bl	8000b78 <__aeabi_d2iz>
 8008cca:	4680      	mov	r8, r0
 8008ccc:	f7f7 fc3a 	bl	8000544 <__aeabi_i2d>
 8008cd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008cd4:	f7f7 fca0 	bl	8000618 <__aeabi_dmul>
 8008cd8:	4602      	mov	r2, r0
 8008cda:	460b      	mov	r3, r1
 8008cdc:	4620      	mov	r0, r4
 8008cde:	4629      	mov	r1, r5
 8008ce0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008ce4:	f7f7 fae0 	bl	80002a8 <__aeabi_dsub>
 8008ce8:	f806 4b01 	strb.w	r4, [r6], #1
 8008cec:	9d07      	ldr	r5, [sp, #28]
 8008cee:	eba6 040a 	sub.w	r4, r6, sl
 8008cf2:	42a5      	cmp	r5, r4
 8008cf4:	4602      	mov	r2, r0
 8008cf6:	460b      	mov	r3, r1
 8008cf8:	f040 8117 	bne.w	8008f2a <_dtoa_r+0x6e2>
 8008cfc:	f7f7 fad6 	bl	80002ac <__adddf3>
 8008d00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d04:	4604      	mov	r4, r0
 8008d06:	460d      	mov	r5, r1
 8008d08:	f7f7 ff16 	bl	8000b38 <__aeabi_dcmpgt>
 8008d0c:	2800      	cmp	r0, #0
 8008d0e:	f040 80f9 	bne.w	8008f04 <_dtoa_r+0x6bc>
 8008d12:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d16:	4620      	mov	r0, r4
 8008d18:	4629      	mov	r1, r5
 8008d1a:	f7f7 fee5 	bl	8000ae8 <__aeabi_dcmpeq>
 8008d1e:	b118      	cbz	r0, 8008d28 <_dtoa_r+0x4e0>
 8008d20:	f018 0f01 	tst.w	r8, #1
 8008d24:	f040 80ee 	bne.w	8008f04 <_dtoa_r+0x6bc>
 8008d28:	4649      	mov	r1, r9
 8008d2a:	4658      	mov	r0, fp
 8008d2c:	f000 fc90 	bl	8009650 <_Bfree>
 8008d30:	2300      	movs	r3, #0
 8008d32:	7033      	strb	r3, [r6, #0]
 8008d34:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008d36:	3701      	adds	r7, #1
 8008d38:	601f      	str	r7, [r3, #0]
 8008d3a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	f000 831d 	beq.w	800937c <_dtoa_r+0xb34>
 8008d42:	601e      	str	r6, [r3, #0]
 8008d44:	e31a      	b.n	800937c <_dtoa_r+0xb34>
 8008d46:	07e2      	lsls	r2, r4, #31
 8008d48:	d505      	bpl.n	8008d56 <_dtoa_r+0x50e>
 8008d4a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008d4e:	f7f7 fc63 	bl	8000618 <__aeabi_dmul>
 8008d52:	3601      	adds	r6, #1
 8008d54:	2301      	movs	r3, #1
 8008d56:	1064      	asrs	r4, r4, #1
 8008d58:	3508      	adds	r5, #8
 8008d5a:	e73f      	b.n	8008bdc <_dtoa_r+0x394>
 8008d5c:	2602      	movs	r6, #2
 8008d5e:	e742      	b.n	8008be6 <_dtoa_r+0x39e>
 8008d60:	9c07      	ldr	r4, [sp, #28]
 8008d62:	9704      	str	r7, [sp, #16]
 8008d64:	e761      	b.n	8008c2a <_dtoa_r+0x3e2>
 8008d66:	4b27      	ldr	r3, [pc, #156]	@ (8008e04 <_dtoa_r+0x5bc>)
 8008d68:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008d6a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008d6e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008d72:	4454      	add	r4, sl
 8008d74:	2900      	cmp	r1, #0
 8008d76:	d053      	beq.n	8008e20 <_dtoa_r+0x5d8>
 8008d78:	4928      	ldr	r1, [pc, #160]	@ (8008e1c <_dtoa_r+0x5d4>)
 8008d7a:	2000      	movs	r0, #0
 8008d7c:	f7f7 fd76 	bl	800086c <__aeabi_ddiv>
 8008d80:	4633      	mov	r3, r6
 8008d82:	462a      	mov	r2, r5
 8008d84:	f7f7 fa90 	bl	80002a8 <__aeabi_dsub>
 8008d88:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008d8c:	4656      	mov	r6, sl
 8008d8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d92:	f7f7 fef1 	bl	8000b78 <__aeabi_d2iz>
 8008d96:	4605      	mov	r5, r0
 8008d98:	f7f7 fbd4 	bl	8000544 <__aeabi_i2d>
 8008d9c:	4602      	mov	r2, r0
 8008d9e:	460b      	mov	r3, r1
 8008da0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008da4:	f7f7 fa80 	bl	80002a8 <__aeabi_dsub>
 8008da8:	3530      	adds	r5, #48	@ 0x30
 8008daa:	4602      	mov	r2, r0
 8008dac:	460b      	mov	r3, r1
 8008dae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008db2:	f806 5b01 	strb.w	r5, [r6], #1
 8008db6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008dba:	f7f7 fe9f 	bl	8000afc <__aeabi_dcmplt>
 8008dbe:	2800      	cmp	r0, #0
 8008dc0:	d171      	bne.n	8008ea6 <_dtoa_r+0x65e>
 8008dc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008dc6:	4911      	ldr	r1, [pc, #68]	@ (8008e0c <_dtoa_r+0x5c4>)
 8008dc8:	2000      	movs	r0, #0
 8008dca:	f7f7 fa6d 	bl	80002a8 <__aeabi_dsub>
 8008dce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008dd2:	f7f7 fe93 	bl	8000afc <__aeabi_dcmplt>
 8008dd6:	2800      	cmp	r0, #0
 8008dd8:	f040 8095 	bne.w	8008f06 <_dtoa_r+0x6be>
 8008ddc:	42a6      	cmp	r6, r4
 8008dde:	f43f af50 	beq.w	8008c82 <_dtoa_r+0x43a>
 8008de2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008de6:	4b0a      	ldr	r3, [pc, #40]	@ (8008e10 <_dtoa_r+0x5c8>)
 8008de8:	2200      	movs	r2, #0
 8008dea:	f7f7 fc15 	bl	8000618 <__aeabi_dmul>
 8008dee:	4b08      	ldr	r3, [pc, #32]	@ (8008e10 <_dtoa_r+0x5c8>)
 8008df0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008df4:	2200      	movs	r2, #0
 8008df6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008dfa:	f7f7 fc0d 	bl	8000618 <__aeabi_dmul>
 8008dfe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e02:	e7c4      	b.n	8008d8e <_dtoa_r+0x546>
 8008e04:	0800bfb0 	.word	0x0800bfb0
 8008e08:	0800bf88 	.word	0x0800bf88
 8008e0c:	3ff00000 	.word	0x3ff00000
 8008e10:	40240000 	.word	0x40240000
 8008e14:	401c0000 	.word	0x401c0000
 8008e18:	40140000 	.word	0x40140000
 8008e1c:	3fe00000 	.word	0x3fe00000
 8008e20:	4631      	mov	r1, r6
 8008e22:	4628      	mov	r0, r5
 8008e24:	f7f7 fbf8 	bl	8000618 <__aeabi_dmul>
 8008e28:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008e2c:	9415      	str	r4, [sp, #84]	@ 0x54
 8008e2e:	4656      	mov	r6, sl
 8008e30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e34:	f7f7 fea0 	bl	8000b78 <__aeabi_d2iz>
 8008e38:	4605      	mov	r5, r0
 8008e3a:	f7f7 fb83 	bl	8000544 <__aeabi_i2d>
 8008e3e:	4602      	mov	r2, r0
 8008e40:	460b      	mov	r3, r1
 8008e42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e46:	f7f7 fa2f 	bl	80002a8 <__aeabi_dsub>
 8008e4a:	3530      	adds	r5, #48	@ 0x30
 8008e4c:	f806 5b01 	strb.w	r5, [r6], #1
 8008e50:	4602      	mov	r2, r0
 8008e52:	460b      	mov	r3, r1
 8008e54:	42a6      	cmp	r6, r4
 8008e56:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008e5a:	f04f 0200 	mov.w	r2, #0
 8008e5e:	d124      	bne.n	8008eaa <_dtoa_r+0x662>
 8008e60:	4bac      	ldr	r3, [pc, #688]	@ (8009114 <_dtoa_r+0x8cc>)
 8008e62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008e66:	f7f7 fa21 	bl	80002ac <__adddf3>
 8008e6a:	4602      	mov	r2, r0
 8008e6c:	460b      	mov	r3, r1
 8008e6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e72:	f7f7 fe61 	bl	8000b38 <__aeabi_dcmpgt>
 8008e76:	2800      	cmp	r0, #0
 8008e78:	d145      	bne.n	8008f06 <_dtoa_r+0x6be>
 8008e7a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008e7e:	49a5      	ldr	r1, [pc, #660]	@ (8009114 <_dtoa_r+0x8cc>)
 8008e80:	2000      	movs	r0, #0
 8008e82:	f7f7 fa11 	bl	80002a8 <__aeabi_dsub>
 8008e86:	4602      	mov	r2, r0
 8008e88:	460b      	mov	r3, r1
 8008e8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e8e:	f7f7 fe35 	bl	8000afc <__aeabi_dcmplt>
 8008e92:	2800      	cmp	r0, #0
 8008e94:	f43f aef5 	beq.w	8008c82 <_dtoa_r+0x43a>
 8008e98:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008e9a:	1e73      	subs	r3, r6, #1
 8008e9c:	9315      	str	r3, [sp, #84]	@ 0x54
 8008e9e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008ea2:	2b30      	cmp	r3, #48	@ 0x30
 8008ea4:	d0f8      	beq.n	8008e98 <_dtoa_r+0x650>
 8008ea6:	9f04      	ldr	r7, [sp, #16]
 8008ea8:	e73e      	b.n	8008d28 <_dtoa_r+0x4e0>
 8008eaa:	4b9b      	ldr	r3, [pc, #620]	@ (8009118 <_dtoa_r+0x8d0>)
 8008eac:	f7f7 fbb4 	bl	8000618 <__aeabi_dmul>
 8008eb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008eb4:	e7bc      	b.n	8008e30 <_dtoa_r+0x5e8>
 8008eb6:	d10c      	bne.n	8008ed2 <_dtoa_r+0x68a>
 8008eb8:	4b98      	ldr	r3, [pc, #608]	@ (800911c <_dtoa_r+0x8d4>)
 8008eba:	2200      	movs	r2, #0
 8008ebc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ec0:	f7f7 fbaa 	bl	8000618 <__aeabi_dmul>
 8008ec4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ec8:	f7f7 fe2c 	bl	8000b24 <__aeabi_dcmpge>
 8008ecc:	2800      	cmp	r0, #0
 8008ece:	f000 8157 	beq.w	8009180 <_dtoa_r+0x938>
 8008ed2:	2400      	movs	r4, #0
 8008ed4:	4625      	mov	r5, r4
 8008ed6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ed8:	43db      	mvns	r3, r3
 8008eda:	9304      	str	r3, [sp, #16]
 8008edc:	4656      	mov	r6, sl
 8008ede:	2700      	movs	r7, #0
 8008ee0:	4621      	mov	r1, r4
 8008ee2:	4658      	mov	r0, fp
 8008ee4:	f000 fbb4 	bl	8009650 <_Bfree>
 8008ee8:	2d00      	cmp	r5, #0
 8008eea:	d0dc      	beq.n	8008ea6 <_dtoa_r+0x65e>
 8008eec:	b12f      	cbz	r7, 8008efa <_dtoa_r+0x6b2>
 8008eee:	42af      	cmp	r7, r5
 8008ef0:	d003      	beq.n	8008efa <_dtoa_r+0x6b2>
 8008ef2:	4639      	mov	r1, r7
 8008ef4:	4658      	mov	r0, fp
 8008ef6:	f000 fbab 	bl	8009650 <_Bfree>
 8008efa:	4629      	mov	r1, r5
 8008efc:	4658      	mov	r0, fp
 8008efe:	f000 fba7 	bl	8009650 <_Bfree>
 8008f02:	e7d0      	b.n	8008ea6 <_dtoa_r+0x65e>
 8008f04:	9704      	str	r7, [sp, #16]
 8008f06:	4633      	mov	r3, r6
 8008f08:	461e      	mov	r6, r3
 8008f0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008f0e:	2a39      	cmp	r2, #57	@ 0x39
 8008f10:	d107      	bne.n	8008f22 <_dtoa_r+0x6da>
 8008f12:	459a      	cmp	sl, r3
 8008f14:	d1f8      	bne.n	8008f08 <_dtoa_r+0x6c0>
 8008f16:	9a04      	ldr	r2, [sp, #16]
 8008f18:	3201      	adds	r2, #1
 8008f1a:	9204      	str	r2, [sp, #16]
 8008f1c:	2230      	movs	r2, #48	@ 0x30
 8008f1e:	f88a 2000 	strb.w	r2, [sl]
 8008f22:	781a      	ldrb	r2, [r3, #0]
 8008f24:	3201      	adds	r2, #1
 8008f26:	701a      	strb	r2, [r3, #0]
 8008f28:	e7bd      	b.n	8008ea6 <_dtoa_r+0x65e>
 8008f2a:	4b7b      	ldr	r3, [pc, #492]	@ (8009118 <_dtoa_r+0x8d0>)
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	f7f7 fb73 	bl	8000618 <__aeabi_dmul>
 8008f32:	2200      	movs	r2, #0
 8008f34:	2300      	movs	r3, #0
 8008f36:	4604      	mov	r4, r0
 8008f38:	460d      	mov	r5, r1
 8008f3a:	f7f7 fdd5 	bl	8000ae8 <__aeabi_dcmpeq>
 8008f3e:	2800      	cmp	r0, #0
 8008f40:	f43f aebb 	beq.w	8008cba <_dtoa_r+0x472>
 8008f44:	e6f0      	b.n	8008d28 <_dtoa_r+0x4e0>
 8008f46:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008f48:	2a00      	cmp	r2, #0
 8008f4a:	f000 80db 	beq.w	8009104 <_dtoa_r+0x8bc>
 8008f4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f50:	2a01      	cmp	r2, #1
 8008f52:	f300 80bf 	bgt.w	80090d4 <_dtoa_r+0x88c>
 8008f56:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008f58:	2a00      	cmp	r2, #0
 8008f5a:	f000 80b7 	beq.w	80090cc <_dtoa_r+0x884>
 8008f5e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008f62:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008f64:	4646      	mov	r6, r8
 8008f66:	9a08      	ldr	r2, [sp, #32]
 8008f68:	2101      	movs	r1, #1
 8008f6a:	441a      	add	r2, r3
 8008f6c:	4658      	mov	r0, fp
 8008f6e:	4498      	add	r8, r3
 8008f70:	9208      	str	r2, [sp, #32]
 8008f72:	f000 fc6b 	bl	800984c <__i2b>
 8008f76:	4605      	mov	r5, r0
 8008f78:	b15e      	cbz	r6, 8008f92 <_dtoa_r+0x74a>
 8008f7a:	9b08      	ldr	r3, [sp, #32]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	dd08      	ble.n	8008f92 <_dtoa_r+0x74a>
 8008f80:	42b3      	cmp	r3, r6
 8008f82:	9a08      	ldr	r2, [sp, #32]
 8008f84:	bfa8      	it	ge
 8008f86:	4633      	movge	r3, r6
 8008f88:	eba8 0803 	sub.w	r8, r8, r3
 8008f8c:	1af6      	subs	r6, r6, r3
 8008f8e:	1ad3      	subs	r3, r2, r3
 8008f90:	9308      	str	r3, [sp, #32]
 8008f92:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f94:	b1f3      	cbz	r3, 8008fd4 <_dtoa_r+0x78c>
 8008f96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	f000 80b7 	beq.w	800910c <_dtoa_r+0x8c4>
 8008f9e:	b18c      	cbz	r4, 8008fc4 <_dtoa_r+0x77c>
 8008fa0:	4629      	mov	r1, r5
 8008fa2:	4622      	mov	r2, r4
 8008fa4:	4658      	mov	r0, fp
 8008fa6:	f000 fd11 	bl	80099cc <__pow5mult>
 8008faa:	464a      	mov	r2, r9
 8008fac:	4601      	mov	r1, r0
 8008fae:	4605      	mov	r5, r0
 8008fb0:	4658      	mov	r0, fp
 8008fb2:	f000 fc61 	bl	8009878 <__multiply>
 8008fb6:	4649      	mov	r1, r9
 8008fb8:	9004      	str	r0, [sp, #16]
 8008fba:	4658      	mov	r0, fp
 8008fbc:	f000 fb48 	bl	8009650 <_Bfree>
 8008fc0:	9b04      	ldr	r3, [sp, #16]
 8008fc2:	4699      	mov	r9, r3
 8008fc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008fc6:	1b1a      	subs	r2, r3, r4
 8008fc8:	d004      	beq.n	8008fd4 <_dtoa_r+0x78c>
 8008fca:	4649      	mov	r1, r9
 8008fcc:	4658      	mov	r0, fp
 8008fce:	f000 fcfd 	bl	80099cc <__pow5mult>
 8008fd2:	4681      	mov	r9, r0
 8008fd4:	2101      	movs	r1, #1
 8008fd6:	4658      	mov	r0, fp
 8008fd8:	f000 fc38 	bl	800984c <__i2b>
 8008fdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008fde:	4604      	mov	r4, r0
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	f000 81cf 	beq.w	8009384 <_dtoa_r+0xb3c>
 8008fe6:	461a      	mov	r2, r3
 8008fe8:	4601      	mov	r1, r0
 8008fea:	4658      	mov	r0, fp
 8008fec:	f000 fcee 	bl	80099cc <__pow5mult>
 8008ff0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ff2:	2b01      	cmp	r3, #1
 8008ff4:	4604      	mov	r4, r0
 8008ff6:	f300 8095 	bgt.w	8009124 <_dtoa_r+0x8dc>
 8008ffa:	9b02      	ldr	r3, [sp, #8]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	f040 8087 	bne.w	8009110 <_dtoa_r+0x8c8>
 8009002:	9b03      	ldr	r3, [sp, #12]
 8009004:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009008:	2b00      	cmp	r3, #0
 800900a:	f040 8089 	bne.w	8009120 <_dtoa_r+0x8d8>
 800900e:	9b03      	ldr	r3, [sp, #12]
 8009010:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009014:	0d1b      	lsrs	r3, r3, #20
 8009016:	051b      	lsls	r3, r3, #20
 8009018:	b12b      	cbz	r3, 8009026 <_dtoa_r+0x7de>
 800901a:	9b08      	ldr	r3, [sp, #32]
 800901c:	3301      	adds	r3, #1
 800901e:	9308      	str	r3, [sp, #32]
 8009020:	f108 0801 	add.w	r8, r8, #1
 8009024:	2301      	movs	r3, #1
 8009026:	930a      	str	r3, [sp, #40]	@ 0x28
 8009028:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800902a:	2b00      	cmp	r3, #0
 800902c:	f000 81b0 	beq.w	8009390 <_dtoa_r+0xb48>
 8009030:	6923      	ldr	r3, [r4, #16]
 8009032:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009036:	6918      	ldr	r0, [r3, #16]
 8009038:	f000 fbbc 	bl	80097b4 <__hi0bits>
 800903c:	f1c0 0020 	rsb	r0, r0, #32
 8009040:	9b08      	ldr	r3, [sp, #32]
 8009042:	4418      	add	r0, r3
 8009044:	f010 001f 	ands.w	r0, r0, #31
 8009048:	d077      	beq.n	800913a <_dtoa_r+0x8f2>
 800904a:	f1c0 0320 	rsb	r3, r0, #32
 800904e:	2b04      	cmp	r3, #4
 8009050:	dd6b      	ble.n	800912a <_dtoa_r+0x8e2>
 8009052:	9b08      	ldr	r3, [sp, #32]
 8009054:	f1c0 001c 	rsb	r0, r0, #28
 8009058:	4403      	add	r3, r0
 800905a:	4480      	add	r8, r0
 800905c:	4406      	add	r6, r0
 800905e:	9308      	str	r3, [sp, #32]
 8009060:	f1b8 0f00 	cmp.w	r8, #0
 8009064:	dd05      	ble.n	8009072 <_dtoa_r+0x82a>
 8009066:	4649      	mov	r1, r9
 8009068:	4642      	mov	r2, r8
 800906a:	4658      	mov	r0, fp
 800906c:	f000 fd08 	bl	8009a80 <__lshift>
 8009070:	4681      	mov	r9, r0
 8009072:	9b08      	ldr	r3, [sp, #32]
 8009074:	2b00      	cmp	r3, #0
 8009076:	dd05      	ble.n	8009084 <_dtoa_r+0x83c>
 8009078:	4621      	mov	r1, r4
 800907a:	461a      	mov	r2, r3
 800907c:	4658      	mov	r0, fp
 800907e:	f000 fcff 	bl	8009a80 <__lshift>
 8009082:	4604      	mov	r4, r0
 8009084:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009086:	2b00      	cmp	r3, #0
 8009088:	d059      	beq.n	800913e <_dtoa_r+0x8f6>
 800908a:	4621      	mov	r1, r4
 800908c:	4648      	mov	r0, r9
 800908e:	f000 fd63 	bl	8009b58 <__mcmp>
 8009092:	2800      	cmp	r0, #0
 8009094:	da53      	bge.n	800913e <_dtoa_r+0x8f6>
 8009096:	1e7b      	subs	r3, r7, #1
 8009098:	9304      	str	r3, [sp, #16]
 800909a:	4649      	mov	r1, r9
 800909c:	2300      	movs	r3, #0
 800909e:	220a      	movs	r2, #10
 80090a0:	4658      	mov	r0, fp
 80090a2:	f000 faf7 	bl	8009694 <__multadd>
 80090a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80090a8:	4681      	mov	r9, r0
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	f000 8172 	beq.w	8009394 <_dtoa_r+0xb4c>
 80090b0:	2300      	movs	r3, #0
 80090b2:	4629      	mov	r1, r5
 80090b4:	220a      	movs	r2, #10
 80090b6:	4658      	mov	r0, fp
 80090b8:	f000 faec 	bl	8009694 <__multadd>
 80090bc:	9b00      	ldr	r3, [sp, #0]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	4605      	mov	r5, r0
 80090c2:	dc67      	bgt.n	8009194 <_dtoa_r+0x94c>
 80090c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090c6:	2b02      	cmp	r3, #2
 80090c8:	dc41      	bgt.n	800914e <_dtoa_r+0x906>
 80090ca:	e063      	b.n	8009194 <_dtoa_r+0x94c>
 80090cc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80090ce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80090d2:	e746      	b.n	8008f62 <_dtoa_r+0x71a>
 80090d4:	9b07      	ldr	r3, [sp, #28]
 80090d6:	1e5c      	subs	r4, r3, #1
 80090d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80090da:	42a3      	cmp	r3, r4
 80090dc:	bfbf      	itttt	lt
 80090de:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80090e0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80090e2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80090e4:	1ae3      	sublt	r3, r4, r3
 80090e6:	bfb4      	ite	lt
 80090e8:	18d2      	addlt	r2, r2, r3
 80090ea:	1b1c      	subge	r4, r3, r4
 80090ec:	9b07      	ldr	r3, [sp, #28]
 80090ee:	bfbc      	itt	lt
 80090f0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80090f2:	2400      	movlt	r4, #0
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	bfb5      	itete	lt
 80090f8:	eba8 0603 	sublt.w	r6, r8, r3
 80090fc:	9b07      	ldrge	r3, [sp, #28]
 80090fe:	2300      	movlt	r3, #0
 8009100:	4646      	movge	r6, r8
 8009102:	e730      	b.n	8008f66 <_dtoa_r+0x71e>
 8009104:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009106:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009108:	4646      	mov	r6, r8
 800910a:	e735      	b.n	8008f78 <_dtoa_r+0x730>
 800910c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800910e:	e75c      	b.n	8008fca <_dtoa_r+0x782>
 8009110:	2300      	movs	r3, #0
 8009112:	e788      	b.n	8009026 <_dtoa_r+0x7de>
 8009114:	3fe00000 	.word	0x3fe00000
 8009118:	40240000 	.word	0x40240000
 800911c:	40140000 	.word	0x40140000
 8009120:	9b02      	ldr	r3, [sp, #8]
 8009122:	e780      	b.n	8009026 <_dtoa_r+0x7de>
 8009124:	2300      	movs	r3, #0
 8009126:	930a      	str	r3, [sp, #40]	@ 0x28
 8009128:	e782      	b.n	8009030 <_dtoa_r+0x7e8>
 800912a:	d099      	beq.n	8009060 <_dtoa_r+0x818>
 800912c:	9a08      	ldr	r2, [sp, #32]
 800912e:	331c      	adds	r3, #28
 8009130:	441a      	add	r2, r3
 8009132:	4498      	add	r8, r3
 8009134:	441e      	add	r6, r3
 8009136:	9208      	str	r2, [sp, #32]
 8009138:	e792      	b.n	8009060 <_dtoa_r+0x818>
 800913a:	4603      	mov	r3, r0
 800913c:	e7f6      	b.n	800912c <_dtoa_r+0x8e4>
 800913e:	9b07      	ldr	r3, [sp, #28]
 8009140:	9704      	str	r7, [sp, #16]
 8009142:	2b00      	cmp	r3, #0
 8009144:	dc20      	bgt.n	8009188 <_dtoa_r+0x940>
 8009146:	9300      	str	r3, [sp, #0]
 8009148:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800914a:	2b02      	cmp	r3, #2
 800914c:	dd1e      	ble.n	800918c <_dtoa_r+0x944>
 800914e:	9b00      	ldr	r3, [sp, #0]
 8009150:	2b00      	cmp	r3, #0
 8009152:	f47f aec0 	bne.w	8008ed6 <_dtoa_r+0x68e>
 8009156:	4621      	mov	r1, r4
 8009158:	2205      	movs	r2, #5
 800915a:	4658      	mov	r0, fp
 800915c:	f000 fa9a 	bl	8009694 <__multadd>
 8009160:	4601      	mov	r1, r0
 8009162:	4604      	mov	r4, r0
 8009164:	4648      	mov	r0, r9
 8009166:	f000 fcf7 	bl	8009b58 <__mcmp>
 800916a:	2800      	cmp	r0, #0
 800916c:	f77f aeb3 	ble.w	8008ed6 <_dtoa_r+0x68e>
 8009170:	4656      	mov	r6, sl
 8009172:	2331      	movs	r3, #49	@ 0x31
 8009174:	f806 3b01 	strb.w	r3, [r6], #1
 8009178:	9b04      	ldr	r3, [sp, #16]
 800917a:	3301      	adds	r3, #1
 800917c:	9304      	str	r3, [sp, #16]
 800917e:	e6ae      	b.n	8008ede <_dtoa_r+0x696>
 8009180:	9c07      	ldr	r4, [sp, #28]
 8009182:	9704      	str	r7, [sp, #16]
 8009184:	4625      	mov	r5, r4
 8009186:	e7f3      	b.n	8009170 <_dtoa_r+0x928>
 8009188:	9b07      	ldr	r3, [sp, #28]
 800918a:	9300      	str	r3, [sp, #0]
 800918c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800918e:	2b00      	cmp	r3, #0
 8009190:	f000 8104 	beq.w	800939c <_dtoa_r+0xb54>
 8009194:	2e00      	cmp	r6, #0
 8009196:	dd05      	ble.n	80091a4 <_dtoa_r+0x95c>
 8009198:	4629      	mov	r1, r5
 800919a:	4632      	mov	r2, r6
 800919c:	4658      	mov	r0, fp
 800919e:	f000 fc6f 	bl	8009a80 <__lshift>
 80091a2:	4605      	mov	r5, r0
 80091a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d05a      	beq.n	8009260 <_dtoa_r+0xa18>
 80091aa:	6869      	ldr	r1, [r5, #4]
 80091ac:	4658      	mov	r0, fp
 80091ae:	f000 fa0f 	bl	80095d0 <_Balloc>
 80091b2:	4606      	mov	r6, r0
 80091b4:	b928      	cbnz	r0, 80091c2 <_dtoa_r+0x97a>
 80091b6:	4b84      	ldr	r3, [pc, #528]	@ (80093c8 <_dtoa_r+0xb80>)
 80091b8:	4602      	mov	r2, r0
 80091ba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80091be:	f7ff bb5a 	b.w	8008876 <_dtoa_r+0x2e>
 80091c2:	692a      	ldr	r2, [r5, #16]
 80091c4:	3202      	adds	r2, #2
 80091c6:	0092      	lsls	r2, r2, #2
 80091c8:	f105 010c 	add.w	r1, r5, #12
 80091cc:	300c      	adds	r0, #12
 80091ce:	f001 ff75 	bl	800b0bc <memcpy>
 80091d2:	2201      	movs	r2, #1
 80091d4:	4631      	mov	r1, r6
 80091d6:	4658      	mov	r0, fp
 80091d8:	f000 fc52 	bl	8009a80 <__lshift>
 80091dc:	f10a 0301 	add.w	r3, sl, #1
 80091e0:	9307      	str	r3, [sp, #28]
 80091e2:	9b00      	ldr	r3, [sp, #0]
 80091e4:	4453      	add	r3, sl
 80091e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80091e8:	9b02      	ldr	r3, [sp, #8]
 80091ea:	f003 0301 	and.w	r3, r3, #1
 80091ee:	462f      	mov	r7, r5
 80091f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80091f2:	4605      	mov	r5, r0
 80091f4:	9b07      	ldr	r3, [sp, #28]
 80091f6:	4621      	mov	r1, r4
 80091f8:	3b01      	subs	r3, #1
 80091fa:	4648      	mov	r0, r9
 80091fc:	9300      	str	r3, [sp, #0]
 80091fe:	f7ff fa9b 	bl	8008738 <quorem>
 8009202:	4639      	mov	r1, r7
 8009204:	9002      	str	r0, [sp, #8]
 8009206:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800920a:	4648      	mov	r0, r9
 800920c:	f000 fca4 	bl	8009b58 <__mcmp>
 8009210:	462a      	mov	r2, r5
 8009212:	9008      	str	r0, [sp, #32]
 8009214:	4621      	mov	r1, r4
 8009216:	4658      	mov	r0, fp
 8009218:	f000 fcba 	bl	8009b90 <__mdiff>
 800921c:	68c2      	ldr	r2, [r0, #12]
 800921e:	4606      	mov	r6, r0
 8009220:	bb02      	cbnz	r2, 8009264 <_dtoa_r+0xa1c>
 8009222:	4601      	mov	r1, r0
 8009224:	4648      	mov	r0, r9
 8009226:	f000 fc97 	bl	8009b58 <__mcmp>
 800922a:	4602      	mov	r2, r0
 800922c:	4631      	mov	r1, r6
 800922e:	4658      	mov	r0, fp
 8009230:	920e      	str	r2, [sp, #56]	@ 0x38
 8009232:	f000 fa0d 	bl	8009650 <_Bfree>
 8009236:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009238:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800923a:	9e07      	ldr	r6, [sp, #28]
 800923c:	ea43 0102 	orr.w	r1, r3, r2
 8009240:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009242:	4319      	orrs	r1, r3
 8009244:	d110      	bne.n	8009268 <_dtoa_r+0xa20>
 8009246:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800924a:	d029      	beq.n	80092a0 <_dtoa_r+0xa58>
 800924c:	9b08      	ldr	r3, [sp, #32]
 800924e:	2b00      	cmp	r3, #0
 8009250:	dd02      	ble.n	8009258 <_dtoa_r+0xa10>
 8009252:	9b02      	ldr	r3, [sp, #8]
 8009254:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009258:	9b00      	ldr	r3, [sp, #0]
 800925a:	f883 8000 	strb.w	r8, [r3]
 800925e:	e63f      	b.n	8008ee0 <_dtoa_r+0x698>
 8009260:	4628      	mov	r0, r5
 8009262:	e7bb      	b.n	80091dc <_dtoa_r+0x994>
 8009264:	2201      	movs	r2, #1
 8009266:	e7e1      	b.n	800922c <_dtoa_r+0x9e4>
 8009268:	9b08      	ldr	r3, [sp, #32]
 800926a:	2b00      	cmp	r3, #0
 800926c:	db04      	blt.n	8009278 <_dtoa_r+0xa30>
 800926e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009270:	430b      	orrs	r3, r1
 8009272:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009274:	430b      	orrs	r3, r1
 8009276:	d120      	bne.n	80092ba <_dtoa_r+0xa72>
 8009278:	2a00      	cmp	r2, #0
 800927a:	dded      	ble.n	8009258 <_dtoa_r+0xa10>
 800927c:	4649      	mov	r1, r9
 800927e:	2201      	movs	r2, #1
 8009280:	4658      	mov	r0, fp
 8009282:	f000 fbfd 	bl	8009a80 <__lshift>
 8009286:	4621      	mov	r1, r4
 8009288:	4681      	mov	r9, r0
 800928a:	f000 fc65 	bl	8009b58 <__mcmp>
 800928e:	2800      	cmp	r0, #0
 8009290:	dc03      	bgt.n	800929a <_dtoa_r+0xa52>
 8009292:	d1e1      	bne.n	8009258 <_dtoa_r+0xa10>
 8009294:	f018 0f01 	tst.w	r8, #1
 8009298:	d0de      	beq.n	8009258 <_dtoa_r+0xa10>
 800929a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800929e:	d1d8      	bne.n	8009252 <_dtoa_r+0xa0a>
 80092a0:	9a00      	ldr	r2, [sp, #0]
 80092a2:	2339      	movs	r3, #57	@ 0x39
 80092a4:	7013      	strb	r3, [r2, #0]
 80092a6:	4633      	mov	r3, r6
 80092a8:	461e      	mov	r6, r3
 80092aa:	3b01      	subs	r3, #1
 80092ac:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80092b0:	2a39      	cmp	r2, #57	@ 0x39
 80092b2:	d052      	beq.n	800935a <_dtoa_r+0xb12>
 80092b4:	3201      	adds	r2, #1
 80092b6:	701a      	strb	r2, [r3, #0]
 80092b8:	e612      	b.n	8008ee0 <_dtoa_r+0x698>
 80092ba:	2a00      	cmp	r2, #0
 80092bc:	dd07      	ble.n	80092ce <_dtoa_r+0xa86>
 80092be:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80092c2:	d0ed      	beq.n	80092a0 <_dtoa_r+0xa58>
 80092c4:	9a00      	ldr	r2, [sp, #0]
 80092c6:	f108 0301 	add.w	r3, r8, #1
 80092ca:	7013      	strb	r3, [r2, #0]
 80092cc:	e608      	b.n	8008ee0 <_dtoa_r+0x698>
 80092ce:	9b07      	ldr	r3, [sp, #28]
 80092d0:	9a07      	ldr	r2, [sp, #28]
 80092d2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80092d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80092d8:	4293      	cmp	r3, r2
 80092da:	d028      	beq.n	800932e <_dtoa_r+0xae6>
 80092dc:	4649      	mov	r1, r9
 80092de:	2300      	movs	r3, #0
 80092e0:	220a      	movs	r2, #10
 80092e2:	4658      	mov	r0, fp
 80092e4:	f000 f9d6 	bl	8009694 <__multadd>
 80092e8:	42af      	cmp	r7, r5
 80092ea:	4681      	mov	r9, r0
 80092ec:	f04f 0300 	mov.w	r3, #0
 80092f0:	f04f 020a 	mov.w	r2, #10
 80092f4:	4639      	mov	r1, r7
 80092f6:	4658      	mov	r0, fp
 80092f8:	d107      	bne.n	800930a <_dtoa_r+0xac2>
 80092fa:	f000 f9cb 	bl	8009694 <__multadd>
 80092fe:	4607      	mov	r7, r0
 8009300:	4605      	mov	r5, r0
 8009302:	9b07      	ldr	r3, [sp, #28]
 8009304:	3301      	adds	r3, #1
 8009306:	9307      	str	r3, [sp, #28]
 8009308:	e774      	b.n	80091f4 <_dtoa_r+0x9ac>
 800930a:	f000 f9c3 	bl	8009694 <__multadd>
 800930e:	4629      	mov	r1, r5
 8009310:	4607      	mov	r7, r0
 8009312:	2300      	movs	r3, #0
 8009314:	220a      	movs	r2, #10
 8009316:	4658      	mov	r0, fp
 8009318:	f000 f9bc 	bl	8009694 <__multadd>
 800931c:	4605      	mov	r5, r0
 800931e:	e7f0      	b.n	8009302 <_dtoa_r+0xaba>
 8009320:	9b00      	ldr	r3, [sp, #0]
 8009322:	2b00      	cmp	r3, #0
 8009324:	bfcc      	ite	gt
 8009326:	461e      	movgt	r6, r3
 8009328:	2601      	movle	r6, #1
 800932a:	4456      	add	r6, sl
 800932c:	2700      	movs	r7, #0
 800932e:	4649      	mov	r1, r9
 8009330:	2201      	movs	r2, #1
 8009332:	4658      	mov	r0, fp
 8009334:	f000 fba4 	bl	8009a80 <__lshift>
 8009338:	4621      	mov	r1, r4
 800933a:	4681      	mov	r9, r0
 800933c:	f000 fc0c 	bl	8009b58 <__mcmp>
 8009340:	2800      	cmp	r0, #0
 8009342:	dcb0      	bgt.n	80092a6 <_dtoa_r+0xa5e>
 8009344:	d102      	bne.n	800934c <_dtoa_r+0xb04>
 8009346:	f018 0f01 	tst.w	r8, #1
 800934a:	d1ac      	bne.n	80092a6 <_dtoa_r+0xa5e>
 800934c:	4633      	mov	r3, r6
 800934e:	461e      	mov	r6, r3
 8009350:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009354:	2a30      	cmp	r2, #48	@ 0x30
 8009356:	d0fa      	beq.n	800934e <_dtoa_r+0xb06>
 8009358:	e5c2      	b.n	8008ee0 <_dtoa_r+0x698>
 800935a:	459a      	cmp	sl, r3
 800935c:	d1a4      	bne.n	80092a8 <_dtoa_r+0xa60>
 800935e:	9b04      	ldr	r3, [sp, #16]
 8009360:	3301      	adds	r3, #1
 8009362:	9304      	str	r3, [sp, #16]
 8009364:	2331      	movs	r3, #49	@ 0x31
 8009366:	f88a 3000 	strb.w	r3, [sl]
 800936a:	e5b9      	b.n	8008ee0 <_dtoa_r+0x698>
 800936c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800936e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80093cc <_dtoa_r+0xb84>
 8009372:	b11b      	cbz	r3, 800937c <_dtoa_r+0xb34>
 8009374:	f10a 0308 	add.w	r3, sl, #8
 8009378:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800937a:	6013      	str	r3, [r2, #0]
 800937c:	4650      	mov	r0, sl
 800937e:	b019      	add	sp, #100	@ 0x64
 8009380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009384:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009386:	2b01      	cmp	r3, #1
 8009388:	f77f ae37 	ble.w	8008ffa <_dtoa_r+0x7b2>
 800938c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800938e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009390:	2001      	movs	r0, #1
 8009392:	e655      	b.n	8009040 <_dtoa_r+0x7f8>
 8009394:	9b00      	ldr	r3, [sp, #0]
 8009396:	2b00      	cmp	r3, #0
 8009398:	f77f aed6 	ble.w	8009148 <_dtoa_r+0x900>
 800939c:	4656      	mov	r6, sl
 800939e:	4621      	mov	r1, r4
 80093a0:	4648      	mov	r0, r9
 80093a2:	f7ff f9c9 	bl	8008738 <quorem>
 80093a6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80093aa:	f806 8b01 	strb.w	r8, [r6], #1
 80093ae:	9b00      	ldr	r3, [sp, #0]
 80093b0:	eba6 020a 	sub.w	r2, r6, sl
 80093b4:	4293      	cmp	r3, r2
 80093b6:	ddb3      	ble.n	8009320 <_dtoa_r+0xad8>
 80093b8:	4649      	mov	r1, r9
 80093ba:	2300      	movs	r3, #0
 80093bc:	220a      	movs	r2, #10
 80093be:	4658      	mov	r0, fp
 80093c0:	f000 f968 	bl	8009694 <__multadd>
 80093c4:	4681      	mov	r9, r0
 80093c6:	e7ea      	b.n	800939e <_dtoa_r+0xb56>
 80093c8:	0800bf11 	.word	0x0800bf11
 80093cc:	0800be95 	.word	0x0800be95

080093d0 <_free_r>:
 80093d0:	b538      	push	{r3, r4, r5, lr}
 80093d2:	4605      	mov	r5, r0
 80093d4:	2900      	cmp	r1, #0
 80093d6:	d041      	beq.n	800945c <_free_r+0x8c>
 80093d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093dc:	1f0c      	subs	r4, r1, #4
 80093de:	2b00      	cmp	r3, #0
 80093e0:	bfb8      	it	lt
 80093e2:	18e4      	addlt	r4, r4, r3
 80093e4:	f000 f8e8 	bl	80095b8 <__malloc_lock>
 80093e8:	4a1d      	ldr	r2, [pc, #116]	@ (8009460 <_free_r+0x90>)
 80093ea:	6813      	ldr	r3, [r2, #0]
 80093ec:	b933      	cbnz	r3, 80093fc <_free_r+0x2c>
 80093ee:	6063      	str	r3, [r4, #4]
 80093f0:	6014      	str	r4, [r2, #0]
 80093f2:	4628      	mov	r0, r5
 80093f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093f8:	f000 b8e4 	b.w	80095c4 <__malloc_unlock>
 80093fc:	42a3      	cmp	r3, r4
 80093fe:	d908      	bls.n	8009412 <_free_r+0x42>
 8009400:	6820      	ldr	r0, [r4, #0]
 8009402:	1821      	adds	r1, r4, r0
 8009404:	428b      	cmp	r3, r1
 8009406:	bf01      	itttt	eq
 8009408:	6819      	ldreq	r1, [r3, #0]
 800940a:	685b      	ldreq	r3, [r3, #4]
 800940c:	1809      	addeq	r1, r1, r0
 800940e:	6021      	streq	r1, [r4, #0]
 8009410:	e7ed      	b.n	80093ee <_free_r+0x1e>
 8009412:	461a      	mov	r2, r3
 8009414:	685b      	ldr	r3, [r3, #4]
 8009416:	b10b      	cbz	r3, 800941c <_free_r+0x4c>
 8009418:	42a3      	cmp	r3, r4
 800941a:	d9fa      	bls.n	8009412 <_free_r+0x42>
 800941c:	6811      	ldr	r1, [r2, #0]
 800941e:	1850      	adds	r0, r2, r1
 8009420:	42a0      	cmp	r0, r4
 8009422:	d10b      	bne.n	800943c <_free_r+0x6c>
 8009424:	6820      	ldr	r0, [r4, #0]
 8009426:	4401      	add	r1, r0
 8009428:	1850      	adds	r0, r2, r1
 800942a:	4283      	cmp	r3, r0
 800942c:	6011      	str	r1, [r2, #0]
 800942e:	d1e0      	bne.n	80093f2 <_free_r+0x22>
 8009430:	6818      	ldr	r0, [r3, #0]
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	6053      	str	r3, [r2, #4]
 8009436:	4408      	add	r0, r1
 8009438:	6010      	str	r0, [r2, #0]
 800943a:	e7da      	b.n	80093f2 <_free_r+0x22>
 800943c:	d902      	bls.n	8009444 <_free_r+0x74>
 800943e:	230c      	movs	r3, #12
 8009440:	602b      	str	r3, [r5, #0]
 8009442:	e7d6      	b.n	80093f2 <_free_r+0x22>
 8009444:	6820      	ldr	r0, [r4, #0]
 8009446:	1821      	adds	r1, r4, r0
 8009448:	428b      	cmp	r3, r1
 800944a:	bf04      	itt	eq
 800944c:	6819      	ldreq	r1, [r3, #0]
 800944e:	685b      	ldreq	r3, [r3, #4]
 8009450:	6063      	str	r3, [r4, #4]
 8009452:	bf04      	itt	eq
 8009454:	1809      	addeq	r1, r1, r0
 8009456:	6021      	streq	r1, [r4, #0]
 8009458:	6054      	str	r4, [r2, #4]
 800945a:	e7ca      	b.n	80093f2 <_free_r+0x22>
 800945c:	bd38      	pop	{r3, r4, r5, pc}
 800945e:	bf00      	nop
 8009460:	20000bfc 	.word	0x20000bfc

08009464 <malloc>:
 8009464:	4b02      	ldr	r3, [pc, #8]	@ (8009470 <malloc+0xc>)
 8009466:	4601      	mov	r1, r0
 8009468:	6818      	ldr	r0, [r3, #0]
 800946a:	f000 b825 	b.w	80094b8 <_malloc_r>
 800946e:	bf00      	nop
 8009470:	20000018 	.word	0x20000018

08009474 <sbrk_aligned>:
 8009474:	b570      	push	{r4, r5, r6, lr}
 8009476:	4e0f      	ldr	r6, [pc, #60]	@ (80094b4 <sbrk_aligned+0x40>)
 8009478:	460c      	mov	r4, r1
 800947a:	6831      	ldr	r1, [r6, #0]
 800947c:	4605      	mov	r5, r0
 800947e:	b911      	cbnz	r1, 8009486 <sbrk_aligned+0x12>
 8009480:	f001 fe0c 	bl	800b09c <_sbrk_r>
 8009484:	6030      	str	r0, [r6, #0]
 8009486:	4621      	mov	r1, r4
 8009488:	4628      	mov	r0, r5
 800948a:	f001 fe07 	bl	800b09c <_sbrk_r>
 800948e:	1c43      	adds	r3, r0, #1
 8009490:	d103      	bne.n	800949a <sbrk_aligned+0x26>
 8009492:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8009496:	4620      	mov	r0, r4
 8009498:	bd70      	pop	{r4, r5, r6, pc}
 800949a:	1cc4      	adds	r4, r0, #3
 800949c:	f024 0403 	bic.w	r4, r4, #3
 80094a0:	42a0      	cmp	r0, r4
 80094a2:	d0f8      	beq.n	8009496 <sbrk_aligned+0x22>
 80094a4:	1a21      	subs	r1, r4, r0
 80094a6:	4628      	mov	r0, r5
 80094a8:	f001 fdf8 	bl	800b09c <_sbrk_r>
 80094ac:	3001      	adds	r0, #1
 80094ae:	d1f2      	bne.n	8009496 <sbrk_aligned+0x22>
 80094b0:	e7ef      	b.n	8009492 <sbrk_aligned+0x1e>
 80094b2:	bf00      	nop
 80094b4:	20000bf8 	.word	0x20000bf8

080094b8 <_malloc_r>:
 80094b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094bc:	1ccd      	adds	r5, r1, #3
 80094be:	f025 0503 	bic.w	r5, r5, #3
 80094c2:	3508      	adds	r5, #8
 80094c4:	2d0c      	cmp	r5, #12
 80094c6:	bf38      	it	cc
 80094c8:	250c      	movcc	r5, #12
 80094ca:	2d00      	cmp	r5, #0
 80094cc:	4606      	mov	r6, r0
 80094ce:	db01      	blt.n	80094d4 <_malloc_r+0x1c>
 80094d0:	42a9      	cmp	r1, r5
 80094d2:	d904      	bls.n	80094de <_malloc_r+0x26>
 80094d4:	230c      	movs	r3, #12
 80094d6:	6033      	str	r3, [r6, #0]
 80094d8:	2000      	movs	r0, #0
 80094da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80095b4 <_malloc_r+0xfc>
 80094e2:	f000 f869 	bl	80095b8 <__malloc_lock>
 80094e6:	f8d8 3000 	ldr.w	r3, [r8]
 80094ea:	461c      	mov	r4, r3
 80094ec:	bb44      	cbnz	r4, 8009540 <_malloc_r+0x88>
 80094ee:	4629      	mov	r1, r5
 80094f0:	4630      	mov	r0, r6
 80094f2:	f7ff ffbf 	bl	8009474 <sbrk_aligned>
 80094f6:	1c43      	adds	r3, r0, #1
 80094f8:	4604      	mov	r4, r0
 80094fa:	d158      	bne.n	80095ae <_malloc_r+0xf6>
 80094fc:	f8d8 4000 	ldr.w	r4, [r8]
 8009500:	4627      	mov	r7, r4
 8009502:	2f00      	cmp	r7, #0
 8009504:	d143      	bne.n	800958e <_malloc_r+0xd6>
 8009506:	2c00      	cmp	r4, #0
 8009508:	d04b      	beq.n	80095a2 <_malloc_r+0xea>
 800950a:	6823      	ldr	r3, [r4, #0]
 800950c:	4639      	mov	r1, r7
 800950e:	4630      	mov	r0, r6
 8009510:	eb04 0903 	add.w	r9, r4, r3
 8009514:	f001 fdc2 	bl	800b09c <_sbrk_r>
 8009518:	4581      	cmp	r9, r0
 800951a:	d142      	bne.n	80095a2 <_malloc_r+0xea>
 800951c:	6821      	ldr	r1, [r4, #0]
 800951e:	1a6d      	subs	r5, r5, r1
 8009520:	4629      	mov	r1, r5
 8009522:	4630      	mov	r0, r6
 8009524:	f7ff ffa6 	bl	8009474 <sbrk_aligned>
 8009528:	3001      	adds	r0, #1
 800952a:	d03a      	beq.n	80095a2 <_malloc_r+0xea>
 800952c:	6823      	ldr	r3, [r4, #0]
 800952e:	442b      	add	r3, r5
 8009530:	6023      	str	r3, [r4, #0]
 8009532:	f8d8 3000 	ldr.w	r3, [r8]
 8009536:	685a      	ldr	r2, [r3, #4]
 8009538:	bb62      	cbnz	r2, 8009594 <_malloc_r+0xdc>
 800953a:	f8c8 7000 	str.w	r7, [r8]
 800953e:	e00f      	b.n	8009560 <_malloc_r+0xa8>
 8009540:	6822      	ldr	r2, [r4, #0]
 8009542:	1b52      	subs	r2, r2, r5
 8009544:	d420      	bmi.n	8009588 <_malloc_r+0xd0>
 8009546:	2a0b      	cmp	r2, #11
 8009548:	d917      	bls.n	800957a <_malloc_r+0xc2>
 800954a:	1961      	adds	r1, r4, r5
 800954c:	42a3      	cmp	r3, r4
 800954e:	6025      	str	r5, [r4, #0]
 8009550:	bf18      	it	ne
 8009552:	6059      	strne	r1, [r3, #4]
 8009554:	6863      	ldr	r3, [r4, #4]
 8009556:	bf08      	it	eq
 8009558:	f8c8 1000 	streq.w	r1, [r8]
 800955c:	5162      	str	r2, [r4, r5]
 800955e:	604b      	str	r3, [r1, #4]
 8009560:	4630      	mov	r0, r6
 8009562:	f000 f82f 	bl	80095c4 <__malloc_unlock>
 8009566:	f104 000b 	add.w	r0, r4, #11
 800956a:	1d23      	adds	r3, r4, #4
 800956c:	f020 0007 	bic.w	r0, r0, #7
 8009570:	1ac2      	subs	r2, r0, r3
 8009572:	bf1c      	itt	ne
 8009574:	1a1b      	subne	r3, r3, r0
 8009576:	50a3      	strne	r3, [r4, r2]
 8009578:	e7af      	b.n	80094da <_malloc_r+0x22>
 800957a:	6862      	ldr	r2, [r4, #4]
 800957c:	42a3      	cmp	r3, r4
 800957e:	bf0c      	ite	eq
 8009580:	f8c8 2000 	streq.w	r2, [r8]
 8009584:	605a      	strne	r2, [r3, #4]
 8009586:	e7eb      	b.n	8009560 <_malloc_r+0xa8>
 8009588:	4623      	mov	r3, r4
 800958a:	6864      	ldr	r4, [r4, #4]
 800958c:	e7ae      	b.n	80094ec <_malloc_r+0x34>
 800958e:	463c      	mov	r4, r7
 8009590:	687f      	ldr	r7, [r7, #4]
 8009592:	e7b6      	b.n	8009502 <_malloc_r+0x4a>
 8009594:	461a      	mov	r2, r3
 8009596:	685b      	ldr	r3, [r3, #4]
 8009598:	42a3      	cmp	r3, r4
 800959a:	d1fb      	bne.n	8009594 <_malloc_r+0xdc>
 800959c:	2300      	movs	r3, #0
 800959e:	6053      	str	r3, [r2, #4]
 80095a0:	e7de      	b.n	8009560 <_malloc_r+0xa8>
 80095a2:	230c      	movs	r3, #12
 80095a4:	6033      	str	r3, [r6, #0]
 80095a6:	4630      	mov	r0, r6
 80095a8:	f000 f80c 	bl	80095c4 <__malloc_unlock>
 80095ac:	e794      	b.n	80094d8 <_malloc_r+0x20>
 80095ae:	6005      	str	r5, [r0, #0]
 80095b0:	e7d6      	b.n	8009560 <_malloc_r+0xa8>
 80095b2:	bf00      	nop
 80095b4:	20000bfc 	.word	0x20000bfc

080095b8 <__malloc_lock>:
 80095b8:	4801      	ldr	r0, [pc, #4]	@ (80095c0 <__malloc_lock+0x8>)
 80095ba:	f7ff b8b4 	b.w	8008726 <__retarget_lock_acquire_recursive>
 80095be:	bf00      	nop
 80095c0:	20000bf4 	.word	0x20000bf4

080095c4 <__malloc_unlock>:
 80095c4:	4801      	ldr	r0, [pc, #4]	@ (80095cc <__malloc_unlock+0x8>)
 80095c6:	f7ff b8af 	b.w	8008728 <__retarget_lock_release_recursive>
 80095ca:	bf00      	nop
 80095cc:	20000bf4 	.word	0x20000bf4

080095d0 <_Balloc>:
 80095d0:	b570      	push	{r4, r5, r6, lr}
 80095d2:	69c6      	ldr	r6, [r0, #28]
 80095d4:	4604      	mov	r4, r0
 80095d6:	460d      	mov	r5, r1
 80095d8:	b976      	cbnz	r6, 80095f8 <_Balloc+0x28>
 80095da:	2010      	movs	r0, #16
 80095dc:	f7ff ff42 	bl	8009464 <malloc>
 80095e0:	4602      	mov	r2, r0
 80095e2:	61e0      	str	r0, [r4, #28]
 80095e4:	b920      	cbnz	r0, 80095f0 <_Balloc+0x20>
 80095e6:	4b18      	ldr	r3, [pc, #96]	@ (8009648 <_Balloc+0x78>)
 80095e8:	4818      	ldr	r0, [pc, #96]	@ (800964c <_Balloc+0x7c>)
 80095ea:	216b      	movs	r1, #107	@ 0x6b
 80095ec:	f001 fd7c 	bl	800b0e8 <__assert_func>
 80095f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80095f4:	6006      	str	r6, [r0, #0]
 80095f6:	60c6      	str	r6, [r0, #12]
 80095f8:	69e6      	ldr	r6, [r4, #28]
 80095fa:	68f3      	ldr	r3, [r6, #12]
 80095fc:	b183      	cbz	r3, 8009620 <_Balloc+0x50>
 80095fe:	69e3      	ldr	r3, [r4, #28]
 8009600:	68db      	ldr	r3, [r3, #12]
 8009602:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009606:	b9b8      	cbnz	r0, 8009638 <_Balloc+0x68>
 8009608:	2101      	movs	r1, #1
 800960a:	fa01 f605 	lsl.w	r6, r1, r5
 800960e:	1d72      	adds	r2, r6, #5
 8009610:	0092      	lsls	r2, r2, #2
 8009612:	4620      	mov	r0, r4
 8009614:	f001 fd86 	bl	800b124 <_calloc_r>
 8009618:	b160      	cbz	r0, 8009634 <_Balloc+0x64>
 800961a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800961e:	e00e      	b.n	800963e <_Balloc+0x6e>
 8009620:	2221      	movs	r2, #33	@ 0x21
 8009622:	2104      	movs	r1, #4
 8009624:	4620      	mov	r0, r4
 8009626:	f001 fd7d 	bl	800b124 <_calloc_r>
 800962a:	69e3      	ldr	r3, [r4, #28]
 800962c:	60f0      	str	r0, [r6, #12]
 800962e:	68db      	ldr	r3, [r3, #12]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d1e4      	bne.n	80095fe <_Balloc+0x2e>
 8009634:	2000      	movs	r0, #0
 8009636:	bd70      	pop	{r4, r5, r6, pc}
 8009638:	6802      	ldr	r2, [r0, #0]
 800963a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800963e:	2300      	movs	r3, #0
 8009640:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009644:	e7f7      	b.n	8009636 <_Balloc+0x66>
 8009646:	bf00      	nop
 8009648:	0800bea2 	.word	0x0800bea2
 800964c:	0800bf22 	.word	0x0800bf22

08009650 <_Bfree>:
 8009650:	b570      	push	{r4, r5, r6, lr}
 8009652:	69c6      	ldr	r6, [r0, #28]
 8009654:	4605      	mov	r5, r0
 8009656:	460c      	mov	r4, r1
 8009658:	b976      	cbnz	r6, 8009678 <_Bfree+0x28>
 800965a:	2010      	movs	r0, #16
 800965c:	f7ff ff02 	bl	8009464 <malloc>
 8009660:	4602      	mov	r2, r0
 8009662:	61e8      	str	r0, [r5, #28]
 8009664:	b920      	cbnz	r0, 8009670 <_Bfree+0x20>
 8009666:	4b09      	ldr	r3, [pc, #36]	@ (800968c <_Bfree+0x3c>)
 8009668:	4809      	ldr	r0, [pc, #36]	@ (8009690 <_Bfree+0x40>)
 800966a:	218f      	movs	r1, #143	@ 0x8f
 800966c:	f001 fd3c 	bl	800b0e8 <__assert_func>
 8009670:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009674:	6006      	str	r6, [r0, #0]
 8009676:	60c6      	str	r6, [r0, #12]
 8009678:	b13c      	cbz	r4, 800968a <_Bfree+0x3a>
 800967a:	69eb      	ldr	r3, [r5, #28]
 800967c:	6862      	ldr	r2, [r4, #4]
 800967e:	68db      	ldr	r3, [r3, #12]
 8009680:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009684:	6021      	str	r1, [r4, #0]
 8009686:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800968a:	bd70      	pop	{r4, r5, r6, pc}
 800968c:	0800bea2 	.word	0x0800bea2
 8009690:	0800bf22 	.word	0x0800bf22

08009694 <__multadd>:
 8009694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009698:	690d      	ldr	r5, [r1, #16]
 800969a:	4607      	mov	r7, r0
 800969c:	460c      	mov	r4, r1
 800969e:	461e      	mov	r6, r3
 80096a0:	f101 0c14 	add.w	ip, r1, #20
 80096a4:	2000      	movs	r0, #0
 80096a6:	f8dc 3000 	ldr.w	r3, [ip]
 80096aa:	b299      	uxth	r1, r3
 80096ac:	fb02 6101 	mla	r1, r2, r1, r6
 80096b0:	0c1e      	lsrs	r6, r3, #16
 80096b2:	0c0b      	lsrs	r3, r1, #16
 80096b4:	fb02 3306 	mla	r3, r2, r6, r3
 80096b8:	b289      	uxth	r1, r1
 80096ba:	3001      	adds	r0, #1
 80096bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80096c0:	4285      	cmp	r5, r0
 80096c2:	f84c 1b04 	str.w	r1, [ip], #4
 80096c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80096ca:	dcec      	bgt.n	80096a6 <__multadd+0x12>
 80096cc:	b30e      	cbz	r6, 8009712 <__multadd+0x7e>
 80096ce:	68a3      	ldr	r3, [r4, #8]
 80096d0:	42ab      	cmp	r3, r5
 80096d2:	dc19      	bgt.n	8009708 <__multadd+0x74>
 80096d4:	6861      	ldr	r1, [r4, #4]
 80096d6:	4638      	mov	r0, r7
 80096d8:	3101      	adds	r1, #1
 80096da:	f7ff ff79 	bl	80095d0 <_Balloc>
 80096de:	4680      	mov	r8, r0
 80096e0:	b928      	cbnz	r0, 80096ee <__multadd+0x5a>
 80096e2:	4602      	mov	r2, r0
 80096e4:	4b0c      	ldr	r3, [pc, #48]	@ (8009718 <__multadd+0x84>)
 80096e6:	480d      	ldr	r0, [pc, #52]	@ (800971c <__multadd+0x88>)
 80096e8:	21ba      	movs	r1, #186	@ 0xba
 80096ea:	f001 fcfd 	bl	800b0e8 <__assert_func>
 80096ee:	6922      	ldr	r2, [r4, #16]
 80096f0:	3202      	adds	r2, #2
 80096f2:	f104 010c 	add.w	r1, r4, #12
 80096f6:	0092      	lsls	r2, r2, #2
 80096f8:	300c      	adds	r0, #12
 80096fa:	f001 fcdf 	bl	800b0bc <memcpy>
 80096fe:	4621      	mov	r1, r4
 8009700:	4638      	mov	r0, r7
 8009702:	f7ff ffa5 	bl	8009650 <_Bfree>
 8009706:	4644      	mov	r4, r8
 8009708:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800970c:	3501      	adds	r5, #1
 800970e:	615e      	str	r6, [r3, #20]
 8009710:	6125      	str	r5, [r4, #16]
 8009712:	4620      	mov	r0, r4
 8009714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009718:	0800bf11 	.word	0x0800bf11
 800971c:	0800bf22 	.word	0x0800bf22

08009720 <__s2b>:
 8009720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009724:	460c      	mov	r4, r1
 8009726:	4615      	mov	r5, r2
 8009728:	461f      	mov	r7, r3
 800972a:	2209      	movs	r2, #9
 800972c:	3308      	adds	r3, #8
 800972e:	4606      	mov	r6, r0
 8009730:	fb93 f3f2 	sdiv	r3, r3, r2
 8009734:	2100      	movs	r1, #0
 8009736:	2201      	movs	r2, #1
 8009738:	429a      	cmp	r2, r3
 800973a:	db09      	blt.n	8009750 <__s2b+0x30>
 800973c:	4630      	mov	r0, r6
 800973e:	f7ff ff47 	bl	80095d0 <_Balloc>
 8009742:	b940      	cbnz	r0, 8009756 <__s2b+0x36>
 8009744:	4602      	mov	r2, r0
 8009746:	4b19      	ldr	r3, [pc, #100]	@ (80097ac <__s2b+0x8c>)
 8009748:	4819      	ldr	r0, [pc, #100]	@ (80097b0 <__s2b+0x90>)
 800974a:	21d3      	movs	r1, #211	@ 0xd3
 800974c:	f001 fccc 	bl	800b0e8 <__assert_func>
 8009750:	0052      	lsls	r2, r2, #1
 8009752:	3101      	adds	r1, #1
 8009754:	e7f0      	b.n	8009738 <__s2b+0x18>
 8009756:	9b08      	ldr	r3, [sp, #32]
 8009758:	6143      	str	r3, [r0, #20]
 800975a:	2d09      	cmp	r5, #9
 800975c:	f04f 0301 	mov.w	r3, #1
 8009760:	6103      	str	r3, [r0, #16]
 8009762:	dd16      	ble.n	8009792 <__s2b+0x72>
 8009764:	f104 0909 	add.w	r9, r4, #9
 8009768:	46c8      	mov	r8, r9
 800976a:	442c      	add	r4, r5
 800976c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009770:	4601      	mov	r1, r0
 8009772:	3b30      	subs	r3, #48	@ 0x30
 8009774:	220a      	movs	r2, #10
 8009776:	4630      	mov	r0, r6
 8009778:	f7ff ff8c 	bl	8009694 <__multadd>
 800977c:	45a0      	cmp	r8, r4
 800977e:	d1f5      	bne.n	800976c <__s2b+0x4c>
 8009780:	f1a5 0408 	sub.w	r4, r5, #8
 8009784:	444c      	add	r4, r9
 8009786:	1b2d      	subs	r5, r5, r4
 8009788:	1963      	adds	r3, r4, r5
 800978a:	42bb      	cmp	r3, r7
 800978c:	db04      	blt.n	8009798 <__s2b+0x78>
 800978e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009792:	340a      	adds	r4, #10
 8009794:	2509      	movs	r5, #9
 8009796:	e7f6      	b.n	8009786 <__s2b+0x66>
 8009798:	f814 3b01 	ldrb.w	r3, [r4], #1
 800979c:	4601      	mov	r1, r0
 800979e:	3b30      	subs	r3, #48	@ 0x30
 80097a0:	220a      	movs	r2, #10
 80097a2:	4630      	mov	r0, r6
 80097a4:	f7ff ff76 	bl	8009694 <__multadd>
 80097a8:	e7ee      	b.n	8009788 <__s2b+0x68>
 80097aa:	bf00      	nop
 80097ac:	0800bf11 	.word	0x0800bf11
 80097b0:	0800bf22 	.word	0x0800bf22

080097b4 <__hi0bits>:
 80097b4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80097b8:	4603      	mov	r3, r0
 80097ba:	bf36      	itet	cc
 80097bc:	0403      	lslcc	r3, r0, #16
 80097be:	2000      	movcs	r0, #0
 80097c0:	2010      	movcc	r0, #16
 80097c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80097c6:	bf3c      	itt	cc
 80097c8:	021b      	lslcc	r3, r3, #8
 80097ca:	3008      	addcc	r0, #8
 80097cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80097d0:	bf3c      	itt	cc
 80097d2:	011b      	lslcc	r3, r3, #4
 80097d4:	3004      	addcc	r0, #4
 80097d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097da:	bf3c      	itt	cc
 80097dc:	009b      	lslcc	r3, r3, #2
 80097de:	3002      	addcc	r0, #2
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	db05      	blt.n	80097f0 <__hi0bits+0x3c>
 80097e4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80097e8:	f100 0001 	add.w	r0, r0, #1
 80097ec:	bf08      	it	eq
 80097ee:	2020      	moveq	r0, #32
 80097f0:	4770      	bx	lr

080097f2 <__lo0bits>:
 80097f2:	6803      	ldr	r3, [r0, #0]
 80097f4:	4602      	mov	r2, r0
 80097f6:	f013 0007 	ands.w	r0, r3, #7
 80097fa:	d00b      	beq.n	8009814 <__lo0bits+0x22>
 80097fc:	07d9      	lsls	r1, r3, #31
 80097fe:	d421      	bmi.n	8009844 <__lo0bits+0x52>
 8009800:	0798      	lsls	r0, r3, #30
 8009802:	bf49      	itett	mi
 8009804:	085b      	lsrmi	r3, r3, #1
 8009806:	089b      	lsrpl	r3, r3, #2
 8009808:	2001      	movmi	r0, #1
 800980a:	6013      	strmi	r3, [r2, #0]
 800980c:	bf5c      	itt	pl
 800980e:	6013      	strpl	r3, [r2, #0]
 8009810:	2002      	movpl	r0, #2
 8009812:	4770      	bx	lr
 8009814:	b299      	uxth	r1, r3
 8009816:	b909      	cbnz	r1, 800981c <__lo0bits+0x2a>
 8009818:	0c1b      	lsrs	r3, r3, #16
 800981a:	2010      	movs	r0, #16
 800981c:	b2d9      	uxtb	r1, r3
 800981e:	b909      	cbnz	r1, 8009824 <__lo0bits+0x32>
 8009820:	3008      	adds	r0, #8
 8009822:	0a1b      	lsrs	r3, r3, #8
 8009824:	0719      	lsls	r1, r3, #28
 8009826:	bf04      	itt	eq
 8009828:	091b      	lsreq	r3, r3, #4
 800982a:	3004      	addeq	r0, #4
 800982c:	0799      	lsls	r1, r3, #30
 800982e:	bf04      	itt	eq
 8009830:	089b      	lsreq	r3, r3, #2
 8009832:	3002      	addeq	r0, #2
 8009834:	07d9      	lsls	r1, r3, #31
 8009836:	d403      	bmi.n	8009840 <__lo0bits+0x4e>
 8009838:	085b      	lsrs	r3, r3, #1
 800983a:	f100 0001 	add.w	r0, r0, #1
 800983e:	d003      	beq.n	8009848 <__lo0bits+0x56>
 8009840:	6013      	str	r3, [r2, #0]
 8009842:	4770      	bx	lr
 8009844:	2000      	movs	r0, #0
 8009846:	4770      	bx	lr
 8009848:	2020      	movs	r0, #32
 800984a:	4770      	bx	lr

0800984c <__i2b>:
 800984c:	b510      	push	{r4, lr}
 800984e:	460c      	mov	r4, r1
 8009850:	2101      	movs	r1, #1
 8009852:	f7ff febd 	bl	80095d0 <_Balloc>
 8009856:	4602      	mov	r2, r0
 8009858:	b928      	cbnz	r0, 8009866 <__i2b+0x1a>
 800985a:	4b05      	ldr	r3, [pc, #20]	@ (8009870 <__i2b+0x24>)
 800985c:	4805      	ldr	r0, [pc, #20]	@ (8009874 <__i2b+0x28>)
 800985e:	f240 1145 	movw	r1, #325	@ 0x145
 8009862:	f001 fc41 	bl	800b0e8 <__assert_func>
 8009866:	2301      	movs	r3, #1
 8009868:	6144      	str	r4, [r0, #20]
 800986a:	6103      	str	r3, [r0, #16]
 800986c:	bd10      	pop	{r4, pc}
 800986e:	bf00      	nop
 8009870:	0800bf11 	.word	0x0800bf11
 8009874:	0800bf22 	.word	0x0800bf22

08009878 <__multiply>:
 8009878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800987c:	4614      	mov	r4, r2
 800987e:	690a      	ldr	r2, [r1, #16]
 8009880:	6923      	ldr	r3, [r4, #16]
 8009882:	429a      	cmp	r2, r3
 8009884:	bfa8      	it	ge
 8009886:	4623      	movge	r3, r4
 8009888:	460f      	mov	r7, r1
 800988a:	bfa4      	itt	ge
 800988c:	460c      	movge	r4, r1
 800988e:	461f      	movge	r7, r3
 8009890:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009894:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009898:	68a3      	ldr	r3, [r4, #8]
 800989a:	6861      	ldr	r1, [r4, #4]
 800989c:	eb0a 0609 	add.w	r6, sl, r9
 80098a0:	42b3      	cmp	r3, r6
 80098a2:	b085      	sub	sp, #20
 80098a4:	bfb8      	it	lt
 80098a6:	3101      	addlt	r1, #1
 80098a8:	f7ff fe92 	bl	80095d0 <_Balloc>
 80098ac:	b930      	cbnz	r0, 80098bc <__multiply+0x44>
 80098ae:	4602      	mov	r2, r0
 80098b0:	4b44      	ldr	r3, [pc, #272]	@ (80099c4 <__multiply+0x14c>)
 80098b2:	4845      	ldr	r0, [pc, #276]	@ (80099c8 <__multiply+0x150>)
 80098b4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80098b8:	f001 fc16 	bl	800b0e8 <__assert_func>
 80098bc:	f100 0514 	add.w	r5, r0, #20
 80098c0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80098c4:	462b      	mov	r3, r5
 80098c6:	2200      	movs	r2, #0
 80098c8:	4543      	cmp	r3, r8
 80098ca:	d321      	bcc.n	8009910 <__multiply+0x98>
 80098cc:	f107 0114 	add.w	r1, r7, #20
 80098d0:	f104 0214 	add.w	r2, r4, #20
 80098d4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80098d8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80098dc:	9302      	str	r3, [sp, #8]
 80098de:	1b13      	subs	r3, r2, r4
 80098e0:	3b15      	subs	r3, #21
 80098e2:	f023 0303 	bic.w	r3, r3, #3
 80098e6:	3304      	adds	r3, #4
 80098e8:	f104 0715 	add.w	r7, r4, #21
 80098ec:	42ba      	cmp	r2, r7
 80098ee:	bf38      	it	cc
 80098f0:	2304      	movcc	r3, #4
 80098f2:	9301      	str	r3, [sp, #4]
 80098f4:	9b02      	ldr	r3, [sp, #8]
 80098f6:	9103      	str	r1, [sp, #12]
 80098f8:	428b      	cmp	r3, r1
 80098fa:	d80c      	bhi.n	8009916 <__multiply+0x9e>
 80098fc:	2e00      	cmp	r6, #0
 80098fe:	dd03      	ble.n	8009908 <__multiply+0x90>
 8009900:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009904:	2b00      	cmp	r3, #0
 8009906:	d05b      	beq.n	80099c0 <__multiply+0x148>
 8009908:	6106      	str	r6, [r0, #16]
 800990a:	b005      	add	sp, #20
 800990c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009910:	f843 2b04 	str.w	r2, [r3], #4
 8009914:	e7d8      	b.n	80098c8 <__multiply+0x50>
 8009916:	f8b1 a000 	ldrh.w	sl, [r1]
 800991a:	f1ba 0f00 	cmp.w	sl, #0
 800991e:	d024      	beq.n	800996a <__multiply+0xf2>
 8009920:	f104 0e14 	add.w	lr, r4, #20
 8009924:	46a9      	mov	r9, r5
 8009926:	f04f 0c00 	mov.w	ip, #0
 800992a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800992e:	f8d9 3000 	ldr.w	r3, [r9]
 8009932:	fa1f fb87 	uxth.w	fp, r7
 8009936:	b29b      	uxth	r3, r3
 8009938:	fb0a 330b 	mla	r3, sl, fp, r3
 800993c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009940:	f8d9 7000 	ldr.w	r7, [r9]
 8009944:	4463      	add	r3, ip
 8009946:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800994a:	fb0a c70b 	mla	r7, sl, fp, ip
 800994e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009952:	b29b      	uxth	r3, r3
 8009954:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009958:	4572      	cmp	r2, lr
 800995a:	f849 3b04 	str.w	r3, [r9], #4
 800995e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009962:	d8e2      	bhi.n	800992a <__multiply+0xb2>
 8009964:	9b01      	ldr	r3, [sp, #4]
 8009966:	f845 c003 	str.w	ip, [r5, r3]
 800996a:	9b03      	ldr	r3, [sp, #12]
 800996c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009970:	3104      	adds	r1, #4
 8009972:	f1b9 0f00 	cmp.w	r9, #0
 8009976:	d021      	beq.n	80099bc <__multiply+0x144>
 8009978:	682b      	ldr	r3, [r5, #0]
 800997a:	f104 0c14 	add.w	ip, r4, #20
 800997e:	46ae      	mov	lr, r5
 8009980:	f04f 0a00 	mov.w	sl, #0
 8009984:	f8bc b000 	ldrh.w	fp, [ip]
 8009988:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800998c:	fb09 770b 	mla	r7, r9, fp, r7
 8009990:	4457      	add	r7, sl
 8009992:	b29b      	uxth	r3, r3
 8009994:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009998:	f84e 3b04 	str.w	r3, [lr], #4
 800999c:	f85c 3b04 	ldr.w	r3, [ip], #4
 80099a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80099a4:	f8be 3000 	ldrh.w	r3, [lr]
 80099a8:	fb09 330a 	mla	r3, r9, sl, r3
 80099ac:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80099b0:	4562      	cmp	r2, ip
 80099b2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80099b6:	d8e5      	bhi.n	8009984 <__multiply+0x10c>
 80099b8:	9f01      	ldr	r7, [sp, #4]
 80099ba:	51eb      	str	r3, [r5, r7]
 80099bc:	3504      	adds	r5, #4
 80099be:	e799      	b.n	80098f4 <__multiply+0x7c>
 80099c0:	3e01      	subs	r6, #1
 80099c2:	e79b      	b.n	80098fc <__multiply+0x84>
 80099c4:	0800bf11 	.word	0x0800bf11
 80099c8:	0800bf22 	.word	0x0800bf22

080099cc <__pow5mult>:
 80099cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099d0:	4615      	mov	r5, r2
 80099d2:	f012 0203 	ands.w	r2, r2, #3
 80099d6:	4607      	mov	r7, r0
 80099d8:	460e      	mov	r6, r1
 80099da:	d007      	beq.n	80099ec <__pow5mult+0x20>
 80099dc:	4c25      	ldr	r4, [pc, #148]	@ (8009a74 <__pow5mult+0xa8>)
 80099de:	3a01      	subs	r2, #1
 80099e0:	2300      	movs	r3, #0
 80099e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80099e6:	f7ff fe55 	bl	8009694 <__multadd>
 80099ea:	4606      	mov	r6, r0
 80099ec:	10ad      	asrs	r5, r5, #2
 80099ee:	d03d      	beq.n	8009a6c <__pow5mult+0xa0>
 80099f0:	69fc      	ldr	r4, [r7, #28]
 80099f2:	b97c      	cbnz	r4, 8009a14 <__pow5mult+0x48>
 80099f4:	2010      	movs	r0, #16
 80099f6:	f7ff fd35 	bl	8009464 <malloc>
 80099fa:	4602      	mov	r2, r0
 80099fc:	61f8      	str	r0, [r7, #28]
 80099fe:	b928      	cbnz	r0, 8009a0c <__pow5mult+0x40>
 8009a00:	4b1d      	ldr	r3, [pc, #116]	@ (8009a78 <__pow5mult+0xac>)
 8009a02:	481e      	ldr	r0, [pc, #120]	@ (8009a7c <__pow5mult+0xb0>)
 8009a04:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009a08:	f001 fb6e 	bl	800b0e8 <__assert_func>
 8009a0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009a10:	6004      	str	r4, [r0, #0]
 8009a12:	60c4      	str	r4, [r0, #12]
 8009a14:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009a18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009a1c:	b94c      	cbnz	r4, 8009a32 <__pow5mult+0x66>
 8009a1e:	f240 2171 	movw	r1, #625	@ 0x271
 8009a22:	4638      	mov	r0, r7
 8009a24:	f7ff ff12 	bl	800984c <__i2b>
 8009a28:	2300      	movs	r3, #0
 8009a2a:	f8c8 0008 	str.w	r0, [r8, #8]
 8009a2e:	4604      	mov	r4, r0
 8009a30:	6003      	str	r3, [r0, #0]
 8009a32:	f04f 0900 	mov.w	r9, #0
 8009a36:	07eb      	lsls	r3, r5, #31
 8009a38:	d50a      	bpl.n	8009a50 <__pow5mult+0x84>
 8009a3a:	4631      	mov	r1, r6
 8009a3c:	4622      	mov	r2, r4
 8009a3e:	4638      	mov	r0, r7
 8009a40:	f7ff ff1a 	bl	8009878 <__multiply>
 8009a44:	4631      	mov	r1, r6
 8009a46:	4680      	mov	r8, r0
 8009a48:	4638      	mov	r0, r7
 8009a4a:	f7ff fe01 	bl	8009650 <_Bfree>
 8009a4e:	4646      	mov	r6, r8
 8009a50:	106d      	asrs	r5, r5, #1
 8009a52:	d00b      	beq.n	8009a6c <__pow5mult+0xa0>
 8009a54:	6820      	ldr	r0, [r4, #0]
 8009a56:	b938      	cbnz	r0, 8009a68 <__pow5mult+0x9c>
 8009a58:	4622      	mov	r2, r4
 8009a5a:	4621      	mov	r1, r4
 8009a5c:	4638      	mov	r0, r7
 8009a5e:	f7ff ff0b 	bl	8009878 <__multiply>
 8009a62:	6020      	str	r0, [r4, #0]
 8009a64:	f8c0 9000 	str.w	r9, [r0]
 8009a68:	4604      	mov	r4, r0
 8009a6a:	e7e4      	b.n	8009a36 <__pow5mult+0x6a>
 8009a6c:	4630      	mov	r0, r6
 8009a6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a72:	bf00      	nop
 8009a74:	0800bf7c 	.word	0x0800bf7c
 8009a78:	0800bea2 	.word	0x0800bea2
 8009a7c:	0800bf22 	.word	0x0800bf22

08009a80 <__lshift>:
 8009a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a84:	460c      	mov	r4, r1
 8009a86:	6849      	ldr	r1, [r1, #4]
 8009a88:	6923      	ldr	r3, [r4, #16]
 8009a8a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009a8e:	68a3      	ldr	r3, [r4, #8]
 8009a90:	4607      	mov	r7, r0
 8009a92:	4691      	mov	r9, r2
 8009a94:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009a98:	f108 0601 	add.w	r6, r8, #1
 8009a9c:	42b3      	cmp	r3, r6
 8009a9e:	db0b      	blt.n	8009ab8 <__lshift+0x38>
 8009aa0:	4638      	mov	r0, r7
 8009aa2:	f7ff fd95 	bl	80095d0 <_Balloc>
 8009aa6:	4605      	mov	r5, r0
 8009aa8:	b948      	cbnz	r0, 8009abe <__lshift+0x3e>
 8009aaa:	4602      	mov	r2, r0
 8009aac:	4b28      	ldr	r3, [pc, #160]	@ (8009b50 <__lshift+0xd0>)
 8009aae:	4829      	ldr	r0, [pc, #164]	@ (8009b54 <__lshift+0xd4>)
 8009ab0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009ab4:	f001 fb18 	bl	800b0e8 <__assert_func>
 8009ab8:	3101      	adds	r1, #1
 8009aba:	005b      	lsls	r3, r3, #1
 8009abc:	e7ee      	b.n	8009a9c <__lshift+0x1c>
 8009abe:	2300      	movs	r3, #0
 8009ac0:	f100 0114 	add.w	r1, r0, #20
 8009ac4:	f100 0210 	add.w	r2, r0, #16
 8009ac8:	4618      	mov	r0, r3
 8009aca:	4553      	cmp	r3, sl
 8009acc:	db33      	blt.n	8009b36 <__lshift+0xb6>
 8009ace:	6920      	ldr	r0, [r4, #16]
 8009ad0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009ad4:	f104 0314 	add.w	r3, r4, #20
 8009ad8:	f019 091f 	ands.w	r9, r9, #31
 8009adc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009ae0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009ae4:	d02b      	beq.n	8009b3e <__lshift+0xbe>
 8009ae6:	f1c9 0e20 	rsb	lr, r9, #32
 8009aea:	468a      	mov	sl, r1
 8009aec:	2200      	movs	r2, #0
 8009aee:	6818      	ldr	r0, [r3, #0]
 8009af0:	fa00 f009 	lsl.w	r0, r0, r9
 8009af4:	4310      	orrs	r0, r2
 8009af6:	f84a 0b04 	str.w	r0, [sl], #4
 8009afa:	f853 2b04 	ldr.w	r2, [r3], #4
 8009afe:	459c      	cmp	ip, r3
 8009b00:	fa22 f20e 	lsr.w	r2, r2, lr
 8009b04:	d8f3      	bhi.n	8009aee <__lshift+0x6e>
 8009b06:	ebac 0304 	sub.w	r3, ip, r4
 8009b0a:	3b15      	subs	r3, #21
 8009b0c:	f023 0303 	bic.w	r3, r3, #3
 8009b10:	3304      	adds	r3, #4
 8009b12:	f104 0015 	add.w	r0, r4, #21
 8009b16:	4584      	cmp	ip, r0
 8009b18:	bf38      	it	cc
 8009b1a:	2304      	movcc	r3, #4
 8009b1c:	50ca      	str	r2, [r1, r3]
 8009b1e:	b10a      	cbz	r2, 8009b24 <__lshift+0xa4>
 8009b20:	f108 0602 	add.w	r6, r8, #2
 8009b24:	3e01      	subs	r6, #1
 8009b26:	4638      	mov	r0, r7
 8009b28:	612e      	str	r6, [r5, #16]
 8009b2a:	4621      	mov	r1, r4
 8009b2c:	f7ff fd90 	bl	8009650 <_Bfree>
 8009b30:	4628      	mov	r0, r5
 8009b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b36:	f842 0f04 	str.w	r0, [r2, #4]!
 8009b3a:	3301      	adds	r3, #1
 8009b3c:	e7c5      	b.n	8009aca <__lshift+0x4a>
 8009b3e:	3904      	subs	r1, #4
 8009b40:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b44:	f841 2f04 	str.w	r2, [r1, #4]!
 8009b48:	459c      	cmp	ip, r3
 8009b4a:	d8f9      	bhi.n	8009b40 <__lshift+0xc0>
 8009b4c:	e7ea      	b.n	8009b24 <__lshift+0xa4>
 8009b4e:	bf00      	nop
 8009b50:	0800bf11 	.word	0x0800bf11
 8009b54:	0800bf22 	.word	0x0800bf22

08009b58 <__mcmp>:
 8009b58:	690a      	ldr	r2, [r1, #16]
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	6900      	ldr	r0, [r0, #16]
 8009b5e:	1a80      	subs	r0, r0, r2
 8009b60:	b530      	push	{r4, r5, lr}
 8009b62:	d10e      	bne.n	8009b82 <__mcmp+0x2a>
 8009b64:	3314      	adds	r3, #20
 8009b66:	3114      	adds	r1, #20
 8009b68:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009b6c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009b70:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009b74:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009b78:	4295      	cmp	r5, r2
 8009b7a:	d003      	beq.n	8009b84 <__mcmp+0x2c>
 8009b7c:	d205      	bcs.n	8009b8a <__mcmp+0x32>
 8009b7e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009b82:	bd30      	pop	{r4, r5, pc}
 8009b84:	42a3      	cmp	r3, r4
 8009b86:	d3f3      	bcc.n	8009b70 <__mcmp+0x18>
 8009b88:	e7fb      	b.n	8009b82 <__mcmp+0x2a>
 8009b8a:	2001      	movs	r0, #1
 8009b8c:	e7f9      	b.n	8009b82 <__mcmp+0x2a>
	...

08009b90 <__mdiff>:
 8009b90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b94:	4689      	mov	r9, r1
 8009b96:	4606      	mov	r6, r0
 8009b98:	4611      	mov	r1, r2
 8009b9a:	4648      	mov	r0, r9
 8009b9c:	4614      	mov	r4, r2
 8009b9e:	f7ff ffdb 	bl	8009b58 <__mcmp>
 8009ba2:	1e05      	subs	r5, r0, #0
 8009ba4:	d112      	bne.n	8009bcc <__mdiff+0x3c>
 8009ba6:	4629      	mov	r1, r5
 8009ba8:	4630      	mov	r0, r6
 8009baa:	f7ff fd11 	bl	80095d0 <_Balloc>
 8009bae:	4602      	mov	r2, r0
 8009bb0:	b928      	cbnz	r0, 8009bbe <__mdiff+0x2e>
 8009bb2:	4b3f      	ldr	r3, [pc, #252]	@ (8009cb0 <__mdiff+0x120>)
 8009bb4:	f240 2137 	movw	r1, #567	@ 0x237
 8009bb8:	483e      	ldr	r0, [pc, #248]	@ (8009cb4 <__mdiff+0x124>)
 8009bba:	f001 fa95 	bl	800b0e8 <__assert_func>
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009bc4:	4610      	mov	r0, r2
 8009bc6:	b003      	add	sp, #12
 8009bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bcc:	bfbc      	itt	lt
 8009bce:	464b      	movlt	r3, r9
 8009bd0:	46a1      	movlt	r9, r4
 8009bd2:	4630      	mov	r0, r6
 8009bd4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009bd8:	bfba      	itte	lt
 8009bda:	461c      	movlt	r4, r3
 8009bdc:	2501      	movlt	r5, #1
 8009bde:	2500      	movge	r5, #0
 8009be0:	f7ff fcf6 	bl	80095d0 <_Balloc>
 8009be4:	4602      	mov	r2, r0
 8009be6:	b918      	cbnz	r0, 8009bf0 <__mdiff+0x60>
 8009be8:	4b31      	ldr	r3, [pc, #196]	@ (8009cb0 <__mdiff+0x120>)
 8009bea:	f240 2145 	movw	r1, #581	@ 0x245
 8009bee:	e7e3      	b.n	8009bb8 <__mdiff+0x28>
 8009bf0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009bf4:	6926      	ldr	r6, [r4, #16]
 8009bf6:	60c5      	str	r5, [r0, #12]
 8009bf8:	f109 0310 	add.w	r3, r9, #16
 8009bfc:	f109 0514 	add.w	r5, r9, #20
 8009c00:	f104 0e14 	add.w	lr, r4, #20
 8009c04:	f100 0b14 	add.w	fp, r0, #20
 8009c08:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009c0c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009c10:	9301      	str	r3, [sp, #4]
 8009c12:	46d9      	mov	r9, fp
 8009c14:	f04f 0c00 	mov.w	ip, #0
 8009c18:	9b01      	ldr	r3, [sp, #4]
 8009c1a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009c1e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009c22:	9301      	str	r3, [sp, #4]
 8009c24:	fa1f f38a 	uxth.w	r3, sl
 8009c28:	4619      	mov	r1, r3
 8009c2a:	b283      	uxth	r3, r0
 8009c2c:	1acb      	subs	r3, r1, r3
 8009c2e:	0c00      	lsrs	r0, r0, #16
 8009c30:	4463      	add	r3, ip
 8009c32:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009c36:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009c3a:	b29b      	uxth	r3, r3
 8009c3c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009c40:	4576      	cmp	r6, lr
 8009c42:	f849 3b04 	str.w	r3, [r9], #4
 8009c46:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009c4a:	d8e5      	bhi.n	8009c18 <__mdiff+0x88>
 8009c4c:	1b33      	subs	r3, r6, r4
 8009c4e:	3b15      	subs	r3, #21
 8009c50:	f023 0303 	bic.w	r3, r3, #3
 8009c54:	3415      	adds	r4, #21
 8009c56:	3304      	adds	r3, #4
 8009c58:	42a6      	cmp	r6, r4
 8009c5a:	bf38      	it	cc
 8009c5c:	2304      	movcc	r3, #4
 8009c5e:	441d      	add	r5, r3
 8009c60:	445b      	add	r3, fp
 8009c62:	461e      	mov	r6, r3
 8009c64:	462c      	mov	r4, r5
 8009c66:	4544      	cmp	r4, r8
 8009c68:	d30e      	bcc.n	8009c88 <__mdiff+0xf8>
 8009c6a:	f108 0103 	add.w	r1, r8, #3
 8009c6e:	1b49      	subs	r1, r1, r5
 8009c70:	f021 0103 	bic.w	r1, r1, #3
 8009c74:	3d03      	subs	r5, #3
 8009c76:	45a8      	cmp	r8, r5
 8009c78:	bf38      	it	cc
 8009c7a:	2100      	movcc	r1, #0
 8009c7c:	440b      	add	r3, r1
 8009c7e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009c82:	b191      	cbz	r1, 8009caa <__mdiff+0x11a>
 8009c84:	6117      	str	r7, [r2, #16]
 8009c86:	e79d      	b.n	8009bc4 <__mdiff+0x34>
 8009c88:	f854 1b04 	ldr.w	r1, [r4], #4
 8009c8c:	46e6      	mov	lr, ip
 8009c8e:	0c08      	lsrs	r0, r1, #16
 8009c90:	fa1c fc81 	uxtah	ip, ip, r1
 8009c94:	4471      	add	r1, lr
 8009c96:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009c9a:	b289      	uxth	r1, r1
 8009c9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009ca0:	f846 1b04 	str.w	r1, [r6], #4
 8009ca4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009ca8:	e7dd      	b.n	8009c66 <__mdiff+0xd6>
 8009caa:	3f01      	subs	r7, #1
 8009cac:	e7e7      	b.n	8009c7e <__mdiff+0xee>
 8009cae:	bf00      	nop
 8009cb0:	0800bf11 	.word	0x0800bf11
 8009cb4:	0800bf22 	.word	0x0800bf22

08009cb8 <__ulp>:
 8009cb8:	b082      	sub	sp, #8
 8009cba:	ed8d 0b00 	vstr	d0, [sp]
 8009cbe:	9a01      	ldr	r2, [sp, #4]
 8009cc0:	4b0f      	ldr	r3, [pc, #60]	@ (8009d00 <__ulp+0x48>)
 8009cc2:	4013      	ands	r3, r2
 8009cc4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	dc08      	bgt.n	8009cde <__ulp+0x26>
 8009ccc:	425b      	negs	r3, r3
 8009cce:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009cd2:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009cd6:	da04      	bge.n	8009ce2 <__ulp+0x2a>
 8009cd8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009cdc:	4113      	asrs	r3, r2
 8009cde:	2200      	movs	r2, #0
 8009ce0:	e008      	b.n	8009cf4 <__ulp+0x3c>
 8009ce2:	f1a2 0314 	sub.w	r3, r2, #20
 8009ce6:	2b1e      	cmp	r3, #30
 8009ce8:	bfda      	itte	le
 8009cea:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009cee:	40da      	lsrle	r2, r3
 8009cf0:	2201      	movgt	r2, #1
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	4619      	mov	r1, r3
 8009cf6:	4610      	mov	r0, r2
 8009cf8:	ec41 0b10 	vmov	d0, r0, r1
 8009cfc:	b002      	add	sp, #8
 8009cfe:	4770      	bx	lr
 8009d00:	7ff00000 	.word	0x7ff00000

08009d04 <__b2d>:
 8009d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d08:	6906      	ldr	r6, [r0, #16]
 8009d0a:	f100 0814 	add.w	r8, r0, #20
 8009d0e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009d12:	1f37      	subs	r7, r6, #4
 8009d14:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009d18:	4610      	mov	r0, r2
 8009d1a:	f7ff fd4b 	bl	80097b4 <__hi0bits>
 8009d1e:	f1c0 0320 	rsb	r3, r0, #32
 8009d22:	280a      	cmp	r0, #10
 8009d24:	600b      	str	r3, [r1, #0]
 8009d26:	491b      	ldr	r1, [pc, #108]	@ (8009d94 <__b2d+0x90>)
 8009d28:	dc15      	bgt.n	8009d56 <__b2d+0x52>
 8009d2a:	f1c0 0c0b 	rsb	ip, r0, #11
 8009d2e:	fa22 f30c 	lsr.w	r3, r2, ip
 8009d32:	45b8      	cmp	r8, r7
 8009d34:	ea43 0501 	orr.w	r5, r3, r1
 8009d38:	bf34      	ite	cc
 8009d3a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009d3e:	2300      	movcs	r3, #0
 8009d40:	3015      	adds	r0, #21
 8009d42:	fa02 f000 	lsl.w	r0, r2, r0
 8009d46:	fa23 f30c 	lsr.w	r3, r3, ip
 8009d4a:	4303      	orrs	r3, r0
 8009d4c:	461c      	mov	r4, r3
 8009d4e:	ec45 4b10 	vmov	d0, r4, r5
 8009d52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d56:	45b8      	cmp	r8, r7
 8009d58:	bf3a      	itte	cc
 8009d5a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009d5e:	f1a6 0708 	subcc.w	r7, r6, #8
 8009d62:	2300      	movcs	r3, #0
 8009d64:	380b      	subs	r0, #11
 8009d66:	d012      	beq.n	8009d8e <__b2d+0x8a>
 8009d68:	f1c0 0120 	rsb	r1, r0, #32
 8009d6c:	fa23 f401 	lsr.w	r4, r3, r1
 8009d70:	4082      	lsls	r2, r0
 8009d72:	4322      	orrs	r2, r4
 8009d74:	4547      	cmp	r7, r8
 8009d76:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009d7a:	bf8c      	ite	hi
 8009d7c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009d80:	2200      	movls	r2, #0
 8009d82:	4083      	lsls	r3, r0
 8009d84:	40ca      	lsrs	r2, r1
 8009d86:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009d8a:	4313      	orrs	r3, r2
 8009d8c:	e7de      	b.n	8009d4c <__b2d+0x48>
 8009d8e:	ea42 0501 	orr.w	r5, r2, r1
 8009d92:	e7db      	b.n	8009d4c <__b2d+0x48>
 8009d94:	3ff00000 	.word	0x3ff00000

08009d98 <__d2b>:
 8009d98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009d9c:	460f      	mov	r7, r1
 8009d9e:	2101      	movs	r1, #1
 8009da0:	ec59 8b10 	vmov	r8, r9, d0
 8009da4:	4616      	mov	r6, r2
 8009da6:	f7ff fc13 	bl	80095d0 <_Balloc>
 8009daa:	4604      	mov	r4, r0
 8009dac:	b930      	cbnz	r0, 8009dbc <__d2b+0x24>
 8009dae:	4602      	mov	r2, r0
 8009db0:	4b23      	ldr	r3, [pc, #140]	@ (8009e40 <__d2b+0xa8>)
 8009db2:	4824      	ldr	r0, [pc, #144]	@ (8009e44 <__d2b+0xac>)
 8009db4:	f240 310f 	movw	r1, #783	@ 0x30f
 8009db8:	f001 f996 	bl	800b0e8 <__assert_func>
 8009dbc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009dc0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009dc4:	b10d      	cbz	r5, 8009dca <__d2b+0x32>
 8009dc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009dca:	9301      	str	r3, [sp, #4]
 8009dcc:	f1b8 0300 	subs.w	r3, r8, #0
 8009dd0:	d023      	beq.n	8009e1a <__d2b+0x82>
 8009dd2:	4668      	mov	r0, sp
 8009dd4:	9300      	str	r3, [sp, #0]
 8009dd6:	f7ff fd0c 	bl	80097f2 <__lo0bits>
 8009dda:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009dde:	b1d0      	cbz	r0, 8009e16 <__d2b+0x7e>
 8009de0:	f1c0 0320 	rsb	r3, r0, #32
 8009de4:	fa02 f303 	lsl.w	r3, r2, r3
 8009de8:	430b      	orrs	r3, r1
 8009dea:	40c2      	lsrs	r2, r0
 8009dec:	6163      	str	r3, [r4, #20]
 8009dee:	9201      	str	r2, [sp, #4]
 8009df0:	9b01      	ldr	r3, [sp, #4]
 8009df2:	61a3      	str	r3, [r4, #24]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	bf0c      	ite	eq
 8009df8:	2201      	moveq	r2, #1
 8009dfa:	2202      	movne	r2, #2
 8009dfc:	6122      	str	r2, [r4, #16]
 8009dfe:	b1a5      	cbz	r5, 8009e2a <__d2b+0x92>
 8009e00:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009e04:	4405      	add	r5, r0
 8009e06:	603d      	str	r5, [r7, #0]
 8009e08:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009e0c:	6030      	str	r0, [r6, #0]
 8009e0e:	4620      	mov	r0, r4
 8009e10:	b003      	add	sp, #12
 8009e12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e16:	6161      	str	r1, [r4, #20]
 8009e18:	e7ea      	b.n	8009df0 <__d2b+0x58>
 8009e1a:	a801      	add	r0, sp, #4
 8009e1c:	f7ff fce9 	bl	80097f2 <__lo0bits>
 8009e20:	9b01      	ldr	r3, [sp, #4]
 8009e22:	6163      	str	r3, [r4, #20]
 8009e24:	3020      	adds	r0, #32
 8009e26:	2201      	movs	r2, #1
 8009e28:	e7e8      	b.n	8009dfc <__d2b+0x64>
 8009e2a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009e2e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009e32:	6038      	str	r0, [r7, #0]
 8009e34:	6918      	ldr	r0, [r3, #16]
 8009e36:	f7ff fcbd 	bl	80097b4 <__hi0bits>
 8009e3a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009e3e:	e7e5      	b.n	8009e0c <__d2b+0x74>
 8009e40:	0800bf11 	.word	0x0800bf11
 8009e44:	0800bf22 	.word	0x0800bf22

08009e48 <__ratio>:
 8009e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e4c:	b085      	sub	sp, #20
 8009e4e:	e9cd 1000 	strd	r1, r0, [sp]
 8009e52:	a902      	add	r1, sp, #8
 8009e54:	f7ff ff56 	bl	8009d04 <__b2d>
 8009e58:	9800      	ldr	r0, [sp, #0]
 8009e5a:	a903      	add	r1, sp, #12
 8009e5c:	ec55 4b10 	vmov	r4, r5, d0
 8009e60:	f7ff ff50 	bl	8009d04 <__b2d>
 8009e64:	9b01      	ldr	r3, [sp, #4]
 8009e66:	6919      	ldr	r1, [r3, #16]
 8009e68:	9b00      	ldr	r3, [sp, #0]
 8009e6a:	691b      	ldr	r3, [r3, #16]
 8009e6c:	1ac9      	subs	r1, r1, r3
 8009e6e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009e72:	1a9b      	subs	r3, r3, r2
 8009e74:	ec5b ab10 	vmov	sl, fp, d0
 8009e78:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	bfce      	itee	gt
 8009e80:	462a      	movgt	r2, r5
 8009e82:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009e86:	465a      	movle	r2, fp
 8009e88:	462f      	mov	r7, r5
 8009e8a:	46d9      	mov	r9, fp
 8009e8c:	bfcc      	ite	gt
 8009e8e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009e92:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009e96:	464b      	mov	r3, r9
 8009e98:	4652      	mov	r2, sl
 8009e9a:	4620      	mov	r0, r4
 8009e9c:	4639      	mov	r1, r7
 8009e9e:	f7f6 fce5 	bl	800086c <__aeabi_ddiv>
 8009ea2:	ec41 0b10 	vmov	d0, r0, r1
 8009ea6:	b005      	add	sp, #20
 8009ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009eac <__copybits>:
 8009eac:	3901      	subs	r1, #1
 8009eae:	b570      	push	{r4, r5, r6, lr}
 8009eb0:	1149      	asrs	r1, r1, #5
 8009eb2:	6914      	ldr	r4, [r2, #16]
 8009eb4:	3101      	adds	r1, #1
 8009eb6:	f102 0314 	add.w	r3, r2, #20
 8009eba:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009ebe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009ec2:	1f05      	subs	r5, r0, #4
 8009ec4:	42a3      	cmp	r3, r4
 8009ec6:	d30c      	bcc.n	8009ee2 <__copybits+0x36>
 8009ec8:	1aa3      	subs	r3, r4, r2
 8009eca:	3b11      	subs	r3, #17
 8009ecc:	f023 0303 	bic.w	r3, r3, #3
 8009ed0:	3211      	adds	r2, #17
 8009ed2:	42a2      	cmp	r2, r4
 8009ed4:	bf88      	it	hi
 8009ed6:	2300      	movhi	r3, #0
 8009ed8:	4418      	add	r0, r3
 8009eda:	2300      	movs	r3, #0
 8009edc:	4288      	cmp	r0, r1
 8009ede:	d305      	bcc.n	8009eec <__copybits+0x40>
 8009ee0:	bd70      	pop	{r4, r5, r6, pc}
 8009ee2:	f853 6b04 	ldr.w	r6, [r3], #4
 8009ee6:	f845 6f04 	str.w	r6, [r5, #4]!
 8009eea:	e7eb      	b.n	8009ec4 <__copybits+0x18>
 8009eec:	f840 3b04 	str.w	r3, [r0], #4
 8009ef0:	e7f4      	b.n	8009edc <__copybits+0x30>

08009ef2 <__any_on>:
 8009ef2:	f100 0214 	add.w	r2, r0, #20
 8009ef6:	6900      	ldr	r0, [r0, #16]
 8009ef8:	114b      	asrs	r3, r1, #5
 8009efa:	4298      	cmp	r0, r3
 8009efc:	b510      	push	{r4, lr}
 8009efe:	db11      	blt.n	8009f24 <__any_on+0x32>
 8009f00:	dd0a      	ble.n	8009f18 <__any_on+0x26>
 8009f02:	f011 011f 	ands.w	r1, r1, #31
 8009f06:	d007      	beq.n	8009f18 <__any_on+0x26>
 8009f08:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009f0c:	fa24 f001 	lsr.w	r0, r4, r1
 8009f10:	fa00 f101 	lsl.w	r1, r0, r1
 8009f14:	428c      	cmp	r4, r1
 8009f16:	d10b      	bne.n	8009f30 <__any_on+0x3e>
 8009f18:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009f1c:	4293      	cmp	r3, r2
 8009f1e:	d803      	bhi.n	8009f28 <__any_on+0x36>
 8009f20:	2000      	movs	r0, #0
 8009f22:	bd10      	pop	{r4, pc}
 8009f24:	4603      	mov	r3, r0
 8009f26:	e7f7      	b.n	8009f18 <__any_on+0x26>
 8009f28:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009f2c:	2900      	cmp	r1, #0
 8009f2e:	d0f5      	beq.n	8009f1c <__any_on+0x2a>
 8009f30:	2001      	movs	r0, #1
 8009f32:	e7f6      	b.n	8009f22 <__any_on+0x30>

08009f34 <sulp>:
 8009f34:	b570      	push	{r4, r5, r6, lr}
 8009f36:	4604      	mov	r4, r0
 8009f38:	460d      	mov	r5, r1
 8009f3a:	ec45 4b10 	vmov	d0, r4, r5
 8009f3e:	4616      	mov	r6, r2
 8009f40:	f7ff feba 	bl	8009cb8 <__ulp>
 8009f44:	ec51 0b10 	vmov	r0, r1, d0
 8009f48:	b17e      	cbz	r6, 8009f6a <sulp+0x36>
 8009f4a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009f4e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	dd09      	ble.n	8009f6a <sulp+0x36>
 8009f56:	051b      	lsls	r3, r3, #20
 8009f58:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009f5c:	2400      	movs	r4, #0
 8009f5e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009f62:	4622      	mov	r2, r4
 8009f64:	462b      	mov	r3, r5
 8009f66:	f7f6 fb57 	bl	8000618 <__aeabi_dmul>
 8009f6a:	ec41 0b10 	vmov	d0, r0, r1
 8009f6e:	bd70      	pop	{r4, r5, r6, pc}

08009f70 <_strtod_l>:
 8009f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f74:	b09f      	sub	sp, #124	@ 0x7c
 8009f76:	460c      	mov	r4, r1
 8009f78:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	921a      	str	r2, [sp, #104]	@ 0x68
 8009f7e:	9005      	str	r0, [sp, #20]
 8009f80:	f04f 0a00 	mov.w	sl, #0
 8009f84:	f04f 0b00 	mov.w	fp, #0
 8009f88:	460a      	mov	r2, r1
 8009f8a:	9219      	str	r2, [sp, #100]	@ 0x64
 8009f8c:	7811      	ldrb	r1, [r2, #0]
 8009f8e:	292b      	cmp	r1, #43	@ 0x2b
 8009f90:	d04a      	beq.n	800a028 <_strtod_l+0xb8>
 8009f92:	d838      	bhi.n	800a006 <_strtod_l+0x96>
 8009f94:	290d      	cmp	r1, #13
 8009f96:	d832      	bhi.n	8009ffe <_strtod_l+0x8e>
 8009f98:	2908      	cmp	r1, #8
 8009f9a:	d832      	bhi.n	800a002 <_strtod_l+0x92>
 8009f9c:	2900      	cmp	r1, #0
 8009f9e:	d03b      	beq.n	800a018 <_strtod_l+0xa8>
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009fa4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009fa6:	782a      	ldrb	r2, [r5, #0]
 8009fa8:	2a30      	cmp	r2, #48	@ 0x30
 8009faa:	f040 80b3 	bne.w	800a114 <_strtod_l+0x1a4>
 8009fae:	786a      	ldrb	r2, [r5, #1]
 8009fb0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009fb4:	2a58      	cmp	r2, #88	@ 0x58
 8009fb6:	d16e      	bne.n	800a096 <_strtod_l+0x126>
 8009fb8:	9302      	str	r3, [sp, #8]
 8009fba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009fbc:	9301      	str	r3, [sp, #4]
 8009fbe:	ab1a      	add	r3, sp, #104	@ 0x68
 8009fc0:	9300      	str	r3, [sp, #0]
 8009fc2:	4a8e      	ldr	r2, [pc, #568]	@ (800a1fc <_strtod_l+0x28c>)
 8009fc4:	9805      	ldr	r0, [sp, #20]
 8009fc6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009fc8:	a919      	add	r1, sp, #100	@ 0x64
 8009fca:	f001 f927 	bl	800b21c <__gethex>
 8009fce:	f010 060f 	ands.w	r6, r0, #15
 8009fd2:	4604      	mov	r4, r0
 8009fd4:	d005      	beq.n	8009fe2 <_strtod_l+0x72>
 8009fd6:	2e06      	cmp	r6, #6
 8009fd8:	d128      	bne.n	800a02c <_strtod_l+0xbc>
 8009fda:	3501      	adds	r5, #1
 8009fdc:	2300      	movs	r3, #0
 8009fde:	9519      	str	r5, [sp, #100]	@ 0x64
 8009fe0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009fe2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	f040 858e 	bne.w	800ab06 <_strtod_l+0xb96>
 8009fea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009fec:	b1cb      	cbz	r3, 800a022 <_strtod_l+0xb2>
 8009fee:	4652      	mov	r2, sl
 8009ff0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8009ff4:	ec43 2b10 	vmov	d0, r2, r3
 8009ff8:	b01f      	add	sp, #124	@ 0x7c
 8009ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ffe:	2920      	cmp	r1, #32
 800a000:	d1ce      	bne.n	8009fa0 <_strtod_l+0x30>
 800a002:	3201      	adds	r2, #1
 800a004:	e7c1      	b.n	8009f8a <_strtod_l+0x1a>
 800a006:	292d      	cmp	r1, #45	@ 0x2d
 800a008:	d1ca      	bne.n	8009fa0 <_strtod_l+0x30>
 800a00a:	2101      	movs	r1, #1
 800a00c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a00e:	1c51      	adds	r1, r2, #1
 800a010:	9119      	str	r1, [sp, #100]	@ 0x64
 800a012:	7852      	ldrb	r2, [r2, #1]
 800a014:	2a00      	cmp	r2, #0
 800a016:	d1c5      	bne.n	8009fa4 <_strtod_l+0x34>
 800a018:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a01a:	9419      	str	r4, [sp, #100]	@ 0x64
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	f040 8570 	bne.w	800ab02 <_strtod_l+0xb92>
 800a022:	4652      	mov	r2, sl
 800a024:	465b      	mov	r3, fp
 800a026:	e7e5      	b.n	8009ff4 <_strtod_l+0x84>
 800a028:	2100      	movs	r1, #0
 800a02a:	e7ef      	b.n	800a00c <_strtod_l+0x9c>
 800a02c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a02e:	b13a      	cbz	r2, 800a040 <_strtod_l+0xd0>
 800a030:	2135      	movs	r1, #53	@ 0x35
 800a032:	a81c      	add	r0, sp, #112	@ 0x70
 800a034:	f7ff ff3a 	bl	8009eac <__copybits>
 800a038:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a03a:	9805      	ldr	r0, [sp, #20]
 800a03c:	f7ff fb08 	bl	8009650 <_Bfree>
 800a040:	3e01      	subs	r6, #1
 800a042:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a044:	2e04      	cmp	r6, #4
 800a046:	d806      	bhi.n	800a056 <_strtod_l+0xe6>
 800a048:	e8df f006 	tbb	[pc, r6]
 800a04c:	201d0314 	.word	0x201d0314
 800a050:	14          	.byte	0x14
 800a051:	00          	.byte	0x00
 800a052:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a056:	05e1      	lsls	r1, r4, #23
 800a058:	bf48      	it	mi
 800a05a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a05e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a062:	0d1b      	lsrs	r3, r3, #20
 800a064:	051b      	lsls	r3, r3, #20
 800a066:	2b00      	cmp	r3, #0
 800a068:	d1bb      	bne.n	8009fe2 <_strtod_l+0x72>
 800a06a:	f7fe fb31 	bl	80086d0 <__errno>
 800a06e:	2322      	movs	r3, #34	@ 0x22
 800a070:	6003      	str	r3, [r0, #0]
 800a072:	e7b6      	b.n	8009fe2 <_strtod_l+0x72>
 800a074:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a078:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a07c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a080:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a084:	e7e7      	b.n	800a056 <_strtod_l+0xe6>
 800a086:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800a204 <_strtod_l+0x294>
 800a08a:	e7e4      	b.n	800a056 <_strtod_l+0xe6>
 800a08c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a090:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800a094:	e7df      	b.n	800a056 <_strtod_l+0xe6>
 800a096:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a098:	1c5a      	adds	r2, r3, #1
 800a09a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a09c:	785b      	ldrb	r3, [r3, #1]
 800a09e:	2b30      	cmp	r3, #48	@ 0x30
 800a0a0:	d0f9      	beq.n	800a096 <_strtod_l+0x126>
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d09d      	beq.n	8009fe2 <_strtod_l+0x72>
 800a0a6:	2301      	movs	r3, #1
 800a0a8:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a0ac:	930c      	str	r3, [sp, #48]	@ 0x30
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	9308      	str	r3, [sp, #32]
 800a0b2:	930a      	str	r3, [sp, #40]	@ 0x28
 800a0b4:	461f      	mov	r7, r3
 800a0b6:	220a      	movs	r2, #10
 800a0b8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a0ba:	7805      	ldrb	r5, [r0, #0]
 800a0bc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a0c0:	b2d9      	uxtb	r1, r3
 800a0c2:	2909      	cmp	r1, #9
 800a0c4:	d928      	bls.n	800a118 <_strtod_l+0x1a8>
 800a0c6:	494e      	ldr	r1, [pc, #312]	@ (800a200 <_strtod_l+0x290>)
 800a0c8:	2201      	movs	r2, #1
 800a0ca:	f000 ffd5 	bl	800b078 <strncmp>
 800a0ce:	2800      	cmp	r0, #0
 800a0d0:	d032      	beq.n	800a138 <_strtod_l+0x1c8>
 800a0d2:	2000      	movs	r0, #0
 800a0d4:	462a      	mov	r2, r5
 800a0d6:	4681      	mov	r9, r0
 800a0d8:	463d      	mov	r5, r7
 800a0da:	4603      	mov	r3, r0
 800a0dc:	2a65      	cmp	r2, #101	@ 0x65
 800a0de:	d001      	beq.n	800a0e4 <_strtod_l+0x174>
 800a0e0:	2a45      	cmp	r2, #69	@ 0x45
 800a0e2:	d114      	bne.n	800a10e <_strtod_l+0x19e>
 800a0e4:	b91d      	cbnz	r5, 800a0ee <_strtod_l+0x17e>
 800a0e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a0e8:	4302      	orrs	r2, r0
 800a0ea:	d095      	beq.n	800a018 <_strtod_l+0xa8>
 800a0ec:	2500      	movs	r5, #0
 800a0ee:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a0f0:	1c62      	adds	r2, r4, #1
 800a0f2:	9219      	str	r2, [sp, #100]	@ 0x64
 800a0f4:	7862      	ldrb	r2, [r4, #1]
 800a0f6:	2a2b      	cmp	r2, #43	@ 0x2b
 800a0f8:	d077      	beq.n	800a1ea <_strtod_l+0x27a>
 800a0fa:	2a2d      	cmp	r2, #45	@ 0x2d
 800a0fc:	d07b      	beq.n	800a1f6 <_strtod_l+0x286>
 800a0fe:	f04f 0c00 	mov.w	ip, #0
 800a102:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a106:	2909      	cmp	r1, #9
 800a108:	f240 8082 	bls.w	800a210 <_strtod_l+0x2a0>
 800a10c:	9419      	str	r4, [sp, #100]	@ 0x64
 800a10e:	f04f 0800 	mov.w	r8, #0
 800a112:	e0a2      	b.n	800a25a <_strtod_l+0x2ea>
 800a114:	2300      	movs	r3, #0
 800a116:	e7c7      	b.n	800a0a8 <_strtod_l+0x138>
 800a118:	2f08      	cmp	r7, #8
 800a11a:	bfd5      	itete	le
 800a11c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800a11e:	9908      	ldrgt	r1, [sp, #32]
 800a120:	fb02 3301 	mlale	r3, r2, r1, r3
 800a124:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a128:	f100 0001 	add.w	r0, r0, #1
 800a12c:	bfd4      	ite	le
 800a12e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800a130:	9308      	strgt	r3, [sp, #32]
 800a132:	3701      	adds	r7, #1
 800a134:	9019      	str	r0, [sp, #100]	@ 0x64
 800a136:	e7bf      	b.n	800a0b8 <_strtod_l+0x148>
 800a138:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a13a:	1c5a      	adds	r2, r3, #1
 800a13c:	9219      	str	r2, [sp, #100]	@ 0x64
 800a13e:	785a      	ldrb	r2, [r3, #1]
 800a140:	b37f      	cbz	r7, 800a1a2 <_strtod_l+0x232>
 800a142:	4681      	mov	r9, r0
 800a144:	463d      	mov	r5, r7
 800a146:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a14a:	2b09      	cmp	r3, #9
 800a14c:	d912      	bls.n	800a174 <_strtod_l+0x204>
 800a14e:	2301      	movs	r3, #1
 800a150:	e7c4      	b.n	800a0dc <_strtod_l+0x16c>
 800a152:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a154:	1c5a      	adds	r2, r3, #1
 800a156:	9219      	str	r2, [sp, #100]	@ 0x64
 800a158:	785a      	ldrb	r2, [r3, #1]
 800a15a:	3001      	adds	r0, #1
 800a15c:	2a30      	cmp	r2, #48	@ 0x30
 800a15e:	d0f8      	beq.n	800a152 <_strtod_l+0x1e2>
 800a160:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a164:	2b08      	cmp	r3, #8
 800a166:	f200 84d3 	bhi.w	800ab10 <_strtod_l+0xba0>
 800a16a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a16c:	930c      	str	r3, [sp, #48]	@ 0x30
 800a16e:	4681      	mov	r9, r0
 800a170:	2000      	movs	r0, #0
 800a172:	4605      	mov	r5, r0
 800a174:	3a30      	subs	r2, #48	@ 0x30
 800a176:	f100 0301 	add.w	r3, r0, #1
 800a17a:	d02a      	beq.n	800a1d2 <_strtod_l+0x262>
 800a17c:	4499      	add	r9, r3
 800a17e:	eb00 0c05 	add.w	ip, r0, r5
 800a182:	462b      	mov	r3, r5
 800a184:	210a      	movs	r1, #10
 800a186:	4563      	cmp	r3, ip
 800a188:	d10d      	bne.n	800a1a6 <_strtod_l+0x236>
 800a18a:	1c69      	adds	r1, r5, #1
 800a18c:	4401      	add	r1, r0
 800a18e:	4428      	add	r0, r5
 800a190:	2808      	cmp	r0, #8
 800a192:	dc16      	bgt.n	800a1c2 <_strtod_l+0x252>
 800a194:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a196:	230a      	movs	r3, #10
 800a198:	fb03 2300 	mla	r3, r3, r0, r2
 800a19c:	930a      	str	r3, [sp, #40]	@ 0x28
 800a19e:	2300      	movs	r3, #0
 800a1a0:	e018      	b.n	800a1d4 <_strtod_l+0x264>
 800a1a2:	4638      	mov	r0, r7
 800a1a4:	e7da      	b.n	800a15c <_strtod_l+0x1ec>
 800a1a6:	2b08      	cmp	r3, #8
 800a1a8:	f103 0301 	add.w	r3, r3, #1
 800a1ac:	dc03      	bgt.n	800a1b6 <_strtod_l+0x246>
 800a1ae:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a1b0:	434e      	muls	r6, r1
 800a1b2:	960a      	str	r6, [sp, #40]	@ 0x28
 800a1b4:	e7e7      	b.n	800a186 <_strtod_l+0x216>
 800a1b6:	2b10      	cmp	r3, #16
 800a1b8:	bfde      	ittt	le
 800a1ba:	9e08      	ldrle	r6, [sp, #32]
 800a1bc:	434e      	mulle	r6, r1
 800a1be:	9608      	strle	r6, [sp, #32]
 800a1c0:	e7e1      	b.n	800a186 <_strtod_l+0x216>
 800a1c2:	280f      	cmp	r0, #15
 800a1c4:	dceb      	bgt.n	800a19e <_strtod_l+0x22e>
 800a1c6:	9808      	ldr	r0, [sp, #32]
 800a1c8:	230a      	movs	r3, #10
 800a1ca:	fb03 2300 	mla	r3, r3, r0, r2
 800a1ce:	9308      	str	r3, [sp, #32]
 800a1d0:	e7e5      	b.n	800a19e <_strtod_l+0x22e>
 800a1d2:	4629      	mov	r1, r5
 800a1d4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a1d6:	1c50      	adds	r0, r2, #1
 800a1d8:	9019      	str	r0, [sp, #100]	@ 0x64
 800a1da:	7852      	ldrb	r2, [r2, #1]
 800a1dc:	4618      	mov	r0, r3
 800a1de:	460d      	mov	r5, r1
 800a1e0:	e7b1      	b.n	800a146 <_strtod_l+0x1d6>
 800a1e2:	f04f 0900 	mov.w	r9, #0
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	e77d      	b.n	800a0e6 <_strtod_l+0x176>
 800a1ea:	f04f 0c00 	mov.w	ip, #0
 800a1ee:	1ca2      	adds	r2, r4, #2
 800a1f0:	9219      	str	r2, [sp, #100]	@ 0x64
 800a1f2:	78a2      	ldrb	r2, [r4, #2]
 800a1f4:	e785      	b.n	800a102 <_strtod_l+0x192>
 800a1f6:	f04f 0c01 	mov.w	ip, #1
 800a1fa:	e7f8      	b.n	800a1ee <_strtod_l+0x27e>
 800a1fc:	0800c090 	.word	0x0800c090
 800a200:	0800c078 	.word	0x0800c078
 800a204:	7ff00000 	.word	0x7ff00000
 800a208:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a20a:	1c51      	adds	r1, r2, #1
 800a20c:	9119      	str	r1, [sp, #100]	@ 0x64
 800a20e:	7852      	ldrb	r2, [r2, #1]
 800a210:	2a30      	cmp	r2, #48	@ 0x30
 800a212:	d0f9      	beq.n	800a208 <_strtod_l+0x298>
 800a214:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a218:	2908      	cmp	r1, #8
 800a21a:	f63f af78 	bhi.w	800a10e <_strtod_l+0x19e>
 800a21e:	3a30      	subs	r2, #48	@ 0x30
 800a220:	920e      	str	r2, [sp, #56]	@ 0x38
 800a222:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a224:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a226:	f04f 080a 	mov.w	r8, #10
 800a22a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a22c:	1c56      	adds	r6, r2, #1
 800a22e:	9619      	str	r6, [sp, #100]	@ 0x64
 800a230:	7852      	ldrb	r2, [r2, #1]
 800a232:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a236:	f1be 0f09 	cmp.w	lr, #9
 800a23a:	d939      	bls.n	800a2b0 <_strtod_l+0x340>
 800a23c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a23e:	1a76      	subs	r6, r6, r1
 800a240:	2e08      	cmp	r6, #8
 800a242:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a246:	dc03      	bgt.n	800a250 <_strtod_l+0x2e0>
 800a248:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a24a:	4588      	cmp	r8, r1
 800a24c:	bfa8      	it	ge
 800a24e:	4688      	movge	r8, r1
 800a250:	f1bc 0f00 	cmp.w	ip, #0
 800a254:	d001      	beq.n	800a25a <_strtod_l+0x2ea>
 800a256:	f1c8 0800 	rsb	r8, r8, #0
 800a25a:	2d00      	cmp	r5, #0
 800a25c:	d14e      	bne.n	800a2fc <_strtod_l+0x38c>
 800a25e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a260:	4308      	orrs	r0, r1
 800a262:	f47f aebe 	bne.w	8009fe2 <_strtod_l+0x72>
 800a266:	2b00      	cmp	r3, #0
 800a268:	f47f aed6 	bne.w	800a018 <_strtod_l+0xa8>
 800a26c:	2a69      	cmp	r2, #105	@ 0x69
 800a26e:	d028      	beq.n	800a2c2 <_strtod_l+0x352>
 800a270:	dc25      	bgt.n	800a2be <_strtod_l+0x34e>
 800a272:	2a49      	cmp	r2, #73	@ 0x49
 800a274:	d025      	beq.n	800a2c2 <_strtod_l+0x352>
 800a276:	2a4e      	cmp	r2, #78	@ 0x4e
 800a278:	f47f aece 	bne.w	800a018 <_strtod_l+0xa8>
 800a27c:	499b      	ldr	r1, [pc, #620]	@ (800a4ec <_strtod_l+0x57c>)
 800a27e:	a819      	add	r0, sp, #100	@ 0x64
 800a280:	f001 f9ee 	bl	800b660 <__match>
 800a284:	2800      	cmp	r0, #0
 800a286:	f43f aec7 	beq.w	800a018 <_strtod_l+0xa8>
 800a28a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a28c:	781b      	ldrb	r3, [r3, #0]
 800a28e:	2b28      	cmp	r3, #40	@ 0x28
 800a290:	d12e      	bne.n	800a2f0 <_strtod_l+0x380>
 800a292:	4997      	ldr	r1, [pc, #604]	@ (800a4f0 <_strtod_l+0x580>)
 800a294:	aa1c      	add	r2, sp, #112	@ 0x70
 800a296:	a819      	add	r0, sp, #100	@ 0x64
 800a298:	f001 f9f6 	bl	800b688 <__hexnan>
 800a29c:	2805      	cmp	r0, #5
 800a29e:	d127      	bne.n	800a2f0 <_strtod_l+0x380>
 800a2a0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a2a2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a2a6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a2aa:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a2ae:	e698      	b.n	8009fe2 <_strtod_l+0x72>
 800a2b0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a2b2:	fb08 2101 	mla	r1, r8, r1, r2
 800a2b6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a2ba:	920e      	str	r2, [sp, #56]	@ 0x38
 800a2bc:	e7b5      	b.n	800a22a <_strtod_l+0x2ba>
 800a2be:	2a6e      	cmp	r2, #110	@ 0x6e
 800a2c0:	e7da      	b.n	800a278 <_strtod_l+0x308>
 800a2c2:	498c      	ldr	r1, [pc, #560]	@ (800a4f4 <_strtod_l+0x584>)
 800a2c4:	a819      	add	r0, sp, #100	@ 0x64
 800a2c6:	f001 f9cb 	bl	800b660 <__match>
 800a2ca:	2800      	cmp	r0, #0
 800a2cc:	f43f aea4 	beq.w	800a018 <_strtod_l+0xa8>
 800a2d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a2d2:	4989      	ldr	r1, [pc, #548]	@ (800a4f8 <_strtod_l+0x588>)
 800a2d4:	3b01      	subs	r3, #1
 800a2d6:	a819      	add	r0, sp, #100	@ 0x64
 800a2d8:	9319      	str	r3, [sp, #100]	@ 0x64
 800a2da:	f001 f9c1 	bl	800b660 <__match>
 800a2de:	b910      	cbnz	r0, 800a2e6 <_strtod_l+0x376>
 800a2e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a2e2:	3301      	adds	r3, #1
 800a2e4:	9319      	str	r3, [sp, #100]	@ 0x64
 800a2e6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800a508 <_strtod_l+0x598>
 800a2ea:	f04f 0a00 	mov.w	sl, #0
 800a2ee:	e678      	b.n	8009fe2 <_strtod_l+0x72>
 800a2f0:	4882      	ldr	r0, [pc, #520]	@ (800a4fc <_strtod_l+0x58c>)
 800a2f2:	f000 fef1 	bl	800b0d8 <nan>
 800a2f6:	ec5b ab10 	vmov	sl, fp, d0
 800a2fa:	e672      	b.n	8009fe2 <_strtod_l+0x72>
 800a2fc:	eba8 0309 	sub.w	r3, r8, r9
 800a300:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a302:	9309      	str	r3, [sp, #36]	@ 0x24
 800a304:	2f00      	cmp	r7, #0
 800a306:	bf08      	it	eq
 800a308:	462f      	moveq	r7, r5
 800a30a:	2d10      	cmp	r5, #16
 800a30c:	462c      	mov	r4, r5
 800a30e:	bfa8      	it	ge
 800a310:	2410      	movge	r4, #16
 800a312:	f7f6 f907 	bl	8000524 <__aeabi_ui2d>
 800a316:	2d09      	cmp	r5, #9
 800a318:	4682      	mov	sl, r0
 800a31a:	468b      	mov	fp, r1
 800a31c:	dc13      	bgt.n	800a346 <_strtod_l+0x3d6>
 800a31e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a320:	2b00      	cmp	r3, #0
 800a322:	f43f ae5e 	beq.w	8009fe2 <_strtod_l+0x72>
 800a326:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a328:	dd78      	ble.n	800a41c <_strtod_l+0x4ac>
 800a32a:	2b16      	cmp	r3, #22
 800a32c:	dc5f      	bgt.n	800a3ee <_strtod_l+0x47e>
 800a32e:	4974      	ldr	r1, [pc, #464]	@ (800a500 <_strtod_l+0x590>)
 800a330:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a334:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a338:	4652      	mov	r2, sl
 800a33a:	465b      	mov	r3, fp
 800a33c:	f7f6 f96c 	bl	8000618 <__aeabi_dmul>
 800a340:	4682      	mov	sl, r0
 800a342:	468b      	mov	fp, r1
 800a344:	e64d      	b.n	8009fe2 <_strtod_l+0x72>
 800a346:	4b6e      	ldr	r3, [pc, #440]	@ (800a500 <_strtod_l+0x590>)
 800a348:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a34c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a350:	f7f6 f962 	bl	8000618 <__aeabi_dmul>
 800a354:	4682      	mov	sl, r0
 800a356:	9808      	ldr	r0, [sp, #32]
 800a358:	468b      	mov	fp, r1
 800a35a:	f7f6 f8e3 	bl	8000524 <__aeabi_ui2d>
 800a35e:	4602      	mov	r2, r0
 800a360:	460b      	mov	r3, r1
 800a362:	4650      	mov	r0, sl
 800a364:	4659      	mov	r1, fp
 800a366:	f7f5 ffa1 	bl	80002ac <__adddf3>
 800a36a:	2d0f      	cmp	r5, #15
 800a36c:	4682      	mov	sl, r0
 800a36e:	468b      	mov	fp, r1
 800a370:	ddd5      	ble.n	800a31e <_strtod_l+0x3ae>
 800a372:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a374:	1b2c      	subs	r4, r5, r4
 800a376:	441c      	add	r4, r3
 800a378:	2c00      	cmp	r4, #0
 800a37a:	f340 8096 	ble.w	800a4aa <_strtod_l+0x53a>
 800a37e:	f014 030f 	ands.w	r3, r4, #15
 800a382:	d00a      	beq.n	800a39a <_strtod_l+0x42a>
 800a384:	495e      	ldr	r1, [pc, #376]	@ (800a500 <_strtod_l+0x590>)
 800a386:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a38a:	4652      	mov	r2, sl
 800a38c:	465b      	mov	r3, fp
 800a38e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a392:	f7f6 f941 	bl	8000618 <__aeabi_dmul>
 800a396:	4682      	mov	sl, r0
 800a398:	468b      	mov	fp, r1
 800a39a:	f034 040f 	bics.w	r4, r4, #15
 800a39e:	d073      	beq.n	800a488 <_strtod_l+0x518>
 800a3a0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a3a4:	dd48      	ble.n	800a438 <_strtod_l+0x4c8>
 800a3a6:	2400      	movs	r4, #0
 800a3a8:	46a0      	mov	r8, r4
 800a3aa:	940a      	str	r4, [sp, #40]	@ 0x28
 800a3ac:	46a1      	mov	r9, r4
 800a3ae:	9a05      	ldr	r2, [sp, #20]
 800a3b0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800a508 <_strtod_l+0x598>
 800a3b4:	2322      	movs	r3, #34	@ 0x22
 800a3b6:	6013      	str	r3, [r2, #0]
 800a3b8:	f04f 0a00 	mov.w	sl, #0
 800a3bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	f43f ae0f 	beq.w	8009fe2 <_strtod_l+0x72>
 800a3c4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a3c6:	9805      	ldr	r0, [sp, #20]
 800a3c8:	f7ff f942 	bl	8009650 <_Bfree>
 800a3cc:	9805      	ldr	r0, [sp, #20]
 800a3ce:	4649      	mov	r1, r9
 800a3d0:	f7ff f93e 	bl	8009650 <_Bfree>
 800a3d4:	9805      	ldr	r0, [sp, #20]
 800a3d6:	4641      	mov	r1, r8
 800a3d8:	f7ff f93a 	bl	8009650 <_Bfree>
 800a3dc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a3de:	9805      	ldr	r0, [sp, #20]
 800a3e0:	f7ff f936 	bl	8009650 <_Bfree>
 800a3e4:	9805      	ldr	r0, [sp, #20]
 800a3e6:	4621      	mov	r1, r4
 800a3e8:	f7ff f932 	bl	8009650 <_Bfree>
 800a3ec:	e5f9      	b.n	8009fe2 <_strtod_l+0x72>
 800a3ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a3f0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	dbbc      	blt.n	800a372 <_strtod_l+0x402>
 800a3f8:	4c41      	ldr	r4, [pc, #260]	@ (800a500 <_strtod_l+0x590>)
 800a3fa:	f1c5 050f 	rsb	r5, r5, #15
 800a3fe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a402:	4652      	mov	r2, sl
 800a404:	465b      	mov	r3, fp
 800a406:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a40a:	f7f6 f905 	bl	8000618 <__aeabi_dmul>
 800a40e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a410:	1b5d      	subs	r5, r3, r5
 800a412:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a416:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a41a:	e78f      	b.n	800a33c <_strtod_l+0x3cc>
 800a41c:	3316      	adds	r3, #22
 800a41e:	dba8      	blt.n	800a372 <_strtod_l+0x402>
 800a420:	4b37      	ldr	r3, [pc, #220]	@ (800a500 <_strtod_l+0x590>)
 800a422:	eba9 0808 	sub.w	r8, r9, r8
 800a426:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a42a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a42e:	4650      	mov	r0, sl
 800a430:	4659      	mov	r1, fp
 800a432:	f7f6 fa1b 	bl	800086c <__aeabi_ddiv>
 800a436:	e783      	b.n	800a340 <_strtod_l+0x3d0>
 800a438:	4b32      	ldr	r3, [pc, #200]	@ (800a504 <_strtod_l+0x594>)
 800a43a:	9308      	str	r3, [sp, #32]
 800a43c:	2300      	movs	r3, #0
 800a43e:	1124      	asrs	r4, r4, #4
 800a440:	4650      	mov	r0, sl
 800a442:	4659      	mov	r1, fp
 800a444:	461e      	mov	r6, r3
 800a446:	2c01      	cmp	r4, #1
 800a448:	dc21      	bgt.n	800a48e <_strtod_l+0x51e>
 800a44a:	b10b      	cbz	r3, 800a450 <_strtod_l+0x4e0>
 800a44c:	4682      	mov	sl, r0
 800a44e:	468b      	mov	fp, r1
 800a450:	492c      	ldr	r1, [pc, #176]	@ (800a504 <_strtod_l+0x594>)
 800a452:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a456:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a45a:	4652      	mov	r2, sl
 800a45c:	465b      	mov	r3, fp
 800a45e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a462:	f7f6 f8d9 	bl	8000618 <__aeabi_dmul>
 800a466:	4b28      	ldr	r3, [pc, #160]	@ (800a508 <_strtod_l+0x598>)
 800a468:	460a      	mov	r2, r1
 800a46a:	400b      	ands	r3, r1
 800a46c:	4927      	ldr	r1, [pc, #156]	@ (800a50c <_strtod_l+0x59c>)
 800a46e:	428b      	cmp	r3, r1
 800a470:	4682      	mov	sl, r0
 800a472:	d898      	bhi.n	800a3a6 <_strtod_l+0x436>
 800a474:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a478:	428b      	cmp	r3, r1
 800a47a:	bf86      	itte	hi
 800a47c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800a510 <_strtod_l+0x5a0>
 800a480:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800a484:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a488:	2300      	movs	r3, #0
 800a48a:	9308      	str	r3, [sp, #32]
 800a48c:	e07a      	b.n	800a584 <_strtod_l+0x614>
 800a48e:	07e2      	lsls	r2, r4, #31
 800a490:	d505      	bpl.n	800a49e <_strtod_l+0x52e>
 800a492:	9b08      	ldr	r3, [sp, #32]
 800a494:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a498:	f7f6 f8be 	bl	8000618 <__aeabi_dmul>
 800a49c:	2301      	movs	r3, #1
 800a49e:	9a08      	ldr	r2, [sp, #32]
 800a4a0:	3208      	adds	r2, #8
 800a4a2:	3601      	adds	r6, #1
 800a4a4:	1064      	asrs	r4, r4, #1
 800a4a6:	9208      	str	r2, [sp, #32]
 800a4a8:	e7cd      	b.n	800a446 <_strtod_l+0x4d6>
 800a4aa:	d0ed      	beq.n	800a488 <_strtod_l+0x518>
 800a4ac:	4264      	negs	r4, r4
 800a4ae:	f014 020f 	ands.w	r2, r4, #15
 800a4b2:	d00a      	beq.n	800a4ca <_strtod_l+0x55a>
 800a4b4:	4b12      	ldr	r3, [pc, #72]	@ (800a500 <_strtod_l+0x590>)
 800a4b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a4ba:	4650      	mov	r0, sl
 800a4bc:	4659      	mov	r1, fp
 800a4be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4c2:	f7f6 f9d3 	bl	800086c <__aeabi_ddiv>
 800a4c6:	4682      	mov	sl, r0
 800a4c8:	468b      	mov	fp, r1
 800a4ca:	1124      	asrs	r4, r4, #4
 800a4cc:	d0dc      	beq.n	800a488 <_strtod_l+0x518>
 800a4ce:	2c1f      	cmp	r4, #31
 800a4d0:	dd20      	ble.n	800a514 <_strtod_l+0x5a4>
 800a4d2:	2400      	movs	r4, #0
 800a4d4:	46a0      	mov	r8, r4
 800a4d6:	940a      	str	r4, [sp, #40]	@ 0x28
 800a4d8:	46a1      	mov	r9, r4
 800a4da:	9a05      	ldr	r2, [sp, #20]
 800a4dc:	2322      	movs	r3, #34	@ 0x22
 800a4de:	f04f 0a00 	mov.w	sl, #0
 800a4e2:	f04f 0b00 	mov.w	fp, #0
 800a4e6:	6013      	str	r3, [r2, #0]
 800a4e8:	e768      	b.n	800a3bc <_strtod_l+0x44c>
 800a4ea:	bf00      	nop
 800a4ec:	0800be69 	.word	0x0800be69
 800a4f0:	0800c07c 	.word	0x0800c07c
 800a4f4:	0800be61 	.word	0x0800be61
 800a4f8:	0800be98 	.word	0x0800be98
 800a4fc:	0800c225 	.word	0x0800c225
 800a500:	0800bfb0 	.word	0x0800bfb0
 800a504:	0800bf88 	.word	0x0800bf88
 800a508:	7ff00000 	.word	0x7ff00000
 800a50c:	7ca00000 	.word	0x7ca00000
 800a510:	7fefffff 	.word	0x7fefffff
 800a514:	f014 0310 	ands.w	r3, r4, #16
 800a518:	bf18      	it	ne
 800a51a:	236a      	movne	r3, #106	@ 0x6a
 800a51c:	4ea9      	ldr	r6, [pc, #676]	@ (800a7c4 <_strtod_l+0x854>)
 800a51e:	9308      	str	r3, [sp, #32]
 800a520:	4650      	mov	r0, sl
 800a522:	4659      	mov	r1, fp
 800a524:	2300      	movs	r3, #0
 800a526:	07e2      	lsls	r2, r4, #31
 800a528:	d504      	bpl.n	800a534 <_strtod_l+0x5c4>
 800a52a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a52e:	f7f6 f873 	bl	8000618 <__aeabi_dmul>
 800a532:	2301      	movs	r3, #1
 800a534:	1064      	asrs	r4, r4, #1
 800a536:	f106 0608 	add.w	r6, r6, #8
 800a53a:	d1f4      	bne.n	800a526 <_strtod_l+0x5b6>
 800a53c:	b10b      	cbz	r3, 800a542 <_strtod_l+0x5d2>
 800a53e:	4682      	mov	sl, r0
 800a540:	468b      	mov	fp, r1
 800a542:	9b08      	ldr	r3, [sp, #32]
 800a544:	b1b3      	cbz	r3, 800a574 <_strtod_l+0x604>
 800a546:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a54a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a54e:	2b00      	cmp	r3, #0
 800a550:	4659      	mov	r1, fp
 800a552:	dd0f      	ble.n	800a574 <_strtod_l+0x604>
 800a554:	2b1f      	cmp	r3, #31
 800a556:	dd55      	ble.n	800a604 <_strtod_l+0x694>
 800a558:	2b34      	cmp	r3, #52	@ 0x34
 800a55a:	bfde      	ittt	le
 800a55c:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800a560:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a564:	4093      	lslle	r3, r2
 800a566:	f04f 0a00 	mov.w	sl, #0
 800a56a:	bfcc      	ite	gt
 800a56c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a570:	ea03 0b01 	andle.w	fp, r3, r1
 800a574:	2200      	movs	r2, #0
 800a576:	2300      	movs	r3, #0
 800a578:	4650      	mov	r0, sl
 800a57a:	4659      	mov	r1, fp
 800a57c:	f7f6 fab4 	bl	8000ae8 <__aeabi_dcmpeq>
 800a580:	2800      	cmp	r0, #0
 800a582:	d1a6      	bne.n	800a4d2 <_strtod_l+0x562>
 800a584:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a586:	9300      	str	r3, [sp, #0]
 800a588:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a58a:	9805      	ldr	r0, [sp, #20]
 800a58c:	462b      	mov	r3, r5
 800a58e:	463a      	mov	r2, r7
 800a590:	f7ff f8c6 	bl	8009720 <__s2b>
 800a594:	900a      	str	r0, [sp, #40]	@ 0x28
 800a596:	2800      	cmp	r0, #0
 800a598:	f43f af05 	beq.w	800a3a6 <_strtod_l+0x436>
 800a59c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a59e:	2a00      	cmp	r2, #0
 800a5a0:	eba9 0308 	sub.w	r3, r9, r8
 800a5a4:	bfa8      	it	ge
 800a5a6:	2300      	movge	r3, #0
 800a5a8:	9312      	str	r3, [sp, #72]	@ 0x48
 800a5aa:	2400      	movs	r4, #0
 800a5ac:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a5b0:	9316      	str	r3, [sp, #88]	@ 0x58
 800a5b2:	46a0      	mov	r8, r4
 800a5b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a5b6:	9805      	ldr	r0, [sp, #20]
 800a5b8:	6859      	ldr	r1, [r3, #4]
 800a5ba:	f7ff f809 	bl	80095d0 <_Balloc>
 800a5be:	4681      	mov	r9, r0
 800a5c0:	2800      	cmp	r0, #0
 800a5c2:	f43f aef4 	beq.w	800a3ae <_strtod_l+0x43e>
 800a5c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a5c8:	691a      	ldr	r2, [r3, #16]
 800a5ca:	3202      	adds	r2, #2
 800a5cc:	f103 010c 	add.w	r1, r3, #12
 800a5d0:	0092      	lsls	r2, r2, #2
 800a5d2:	300c      	adds	r0, #12
 800a5d4:	f000 fd72 	bl	800b0bc <memcpy>
 800a5d8:	ec4b ab10 	vmov	d0, sl, fp
 800a5dc:	9805      	ldr	r0, [sp, #20]
 800a5de:	aa1c      	add	r2, sp, #112	@ 0x70
 800a5e0:	a91b      	add	r1, sp, #108	@ 0x6c
 800a5e2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a5e6:	f7ff fbd7 	bl	8009d98 <__d2b>
 800a5ea:	901a      	str	r0, [sp, #104]	@ 0x68
 800a5ec:	2800      	cmp	r0, #0
 800a5ee:	f43f aede 	beq.w	800a3ae <_strtod_l+0x43e>
 800a5f2:	9805      	ldr	r0, [sp, #20]
 800a5f4:	2101      	movs	r1, #1
 800a5f6:	f7ff f929 	bl	800984c <__i2b>
 800a5fa:	4680      	mov	r8, r0
 800a5fc:	b948      	cbnz	r0, 800a612 <_strtod_l+0x6a2>
 800a5fe:	f04f 0800 	mov.w	r8, #0
 800a602:	e6d4      	b.n	800a3ae <_strtod_l+0x43e>
 800a604:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a608:	fa02 f303 	lsl.w	r3, r2, r3
 800a60c:	ea03 0a0a 	and.w	sl, r3, sl
 800a610:	e7b0      	b.n	800a574 <_strtod_l+0x604>
 800a612:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a614:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a616:	2d00      	cmp	r5, #0
 800a618:	bfab      	itete	ge
 800a61a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a61c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a61e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a620:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a622:	bfac      	ite	ge
 800a624:	18ef      	addge	r7, r5, r3
 800a626:	1b5e      	sublt	r6, r3, r5
 800a628:	9b08      	ldr	r3, [sp, #32]
 800a62a:	1aed      	subs	r5, r5, r3
 800a62c:	4415      	add	r5, r2
 800a62e:	4b66      	ldr	r3, [pc, #408]	@ (800a7c8 <_strtod_l+0x858>)
 800a630:	3d01      	subs	r5, #1
 800a632:	429d      	cmp	r5, r3
 800a634:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a638:	da50      	bge.n	800a6dc <_strtod_l+0x76c>
 800a63a:	1b5b      	subs	r3, r3, r5
 800a63c:	2b1f      	cmp	r3, #31
 800a63e:	eba2 0203 	sub.w	r2, r2, r3
 800a642:	f04f 0101 	mov.w	r1, #1
 800a646:	dc3d      	bgt.n	800a6c4 <_strtod_l+0x754>
 800a648:	fa01 f303 	lsl.w	r3, r1, r3
 800a64c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a64e:	2300      	movs	r3, #0
 800a650:	9310      	str	r3, [sp, #64]	@ 0x40
 800a652:	18bd      	adds	r5, r7, r2
 800a654:	9b08      	ldr	r3, [sp, #32]
 800a656:	42af      	cmp	r7, r5
 800a658:	4416      	add	r6, r2
 800a65a:	441e      	add	r6, r3
 800a65c:	463b      	mov	r3, r7
 800a65e:	bfa8      	it	ge
 800a660:	462b      	movge	r3, r5
 800a662:	42b3      	cmp	r3, r6
 800a664:	bfa8      	it	ge
 800a666:	4633      	movge	r3, r6
 800a668:	2b00      	cmp	r3, #0
 800a66a:	bfc2      	ittt	gt
 800a66c:	1aed      	subgt	r5, r5, r3
 800a66e:	1af6      	subgt	r6, r6, r3
 800a670:	1aff      	subgt	r7, r7, r3
 800a672:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a674:	2b00      	cmp	r3, #0
 800a676:	dd16      	ble.n	800a6a6 <_strtod_l+0x736>
 800a678:	4641      	mov	r1, r8
 800a67a:	9805      	ldr	r0, [sp, #20]
 800a67c:	461a      	mov	r2, r3
 800a67e:	f7ff f9a5 	bl	80099cc <__pow5mult>
 800a682:	4680      	mov	r8, r0
 800a684:	2800      	cmp	r0, #0
 800a686:	d0ba      	beq.n	800a5fe <_strtod_l+0x68e>
 800a688:	4601      	mov	r1, r0
 800a68a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a68c:	9805      	ldr	r0, [sp, #20]
 800a68e:	f7ff f8f3 	bl	8009878 <__multiply>
 800a692:	900e      	str	r0, [sp, #56]	@ 0x38
 800a694:	2800      	cmp	r0, #0
 800a696:	f43f ae8a 	beq.w	800a3ae <_strtod_l+0x43e>
 800a69a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a69c:	9805      	ldr	r0, [sp, #20]
 800a69e:	f7fe ffd7 	bl	8009650 <_Bfree>
 800a6a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a6a4:	931a      	str	r3, [sp, #104]	@ 0x68
 800a6a6:	2d00      	cmp	r5, #0
 800a6a8:	dc1d      	bgt.n	800a6e6 <_strtod_l+0x776>
 800a6aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	dd23      	ble.n	800a6f8 <_strtod_l+0x788>
 800a6b0:	4649      	mov	r1, r9
 800a6b2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a6b4:	9805      	ldr	r0, [sp, #20]
 800a6b6:	f7ff f989 	bl	80099cc <__pow5mult>
 800a6ba:	4681      	mov	r9, r0
 800a6bc:	b9e0      	cbnz	r0, 800a6f8 <_strtod_l+0x788>
 800a6be:	f04f 0900 	mov.w	r9, #0
 800a6c2:	e674      	b.n	800a3ae <_strtod_l+0x43e>
 800a6c4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a6c8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a6cc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a6d0:	35e2      	adds	r5, #226	@ 0xe2
 800a6d2:	fa01 f305 	lsl.w	r3, r1, r5
 800a6d6:	9310      	str	r3, [sp, #64]	@ 0x40
 800a6d8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a6da:	e7ba      	b.n	800a652 <_strtod_l+0x6e2>
 800a6dc:	2300      	movs	r3, #0
 800a6de:	9310      	str	r3, [sp, #64]	@ 0x40
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a6e4:	e7b5      	b.n	800a652 <_strtod_l+0x6e2>
 800a6e6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a6e8:	9805      	ldr	r0, [sp, #20]
 800a6ea:	462a      	mov	r2, r5
 800a6ec:	f7ff f9c8 	bl	8009a80 <__lshift>
 800a6f0:	901a      	str	r0, [sp, #104]	@ 0x68
 800a6f2:	2800      	cmp	r0, #0
 800a6f4:	d1d9      	bne.n	800a6aa <_strtod_l+0x73a>
 800a6f6:	e65a      	b.n	800a3ae <_strtod_l+0x43e>
 800a6f8:	2e00      	cmp	r6, #0
 800a6fa:	dd07      	ble.n	800a70c <_strtod_l+0x79c>
 800a6fc:	4649      	mov	r1, r9
 800a6fe:	9805      	ldr	r0, [sp, #20]
 800a700:	4632      	mov	r2, r6
 800a702:	f7ff f9bd 	bl	8009a80 <__lshift>
 800a706:	4681      	mov	r9, r0
 800a708:	2800      	cmp	r0, #0
 800a70a:	d0d8      	beq.n	800a6be <_strtod_l+0x74e>
 800a70c:	2f00      	cmp	r7, #0
 800a70e:	dd08      	ble.n	800a722 <_strtod_l+0x7b2>
 800a710:	4641      	mov	r1, r8
 800a712:	9805      	ldr	r0, [sp, #20]
 800a714:	463a      	mov	r2, r7
 800a716:	f7ff f9b3 	bl	8009a80 <__lshift>
 800a71a:	4680      	mov	r8, r0
 800a71c:	2800      	cmp	r0, #0
 800a71e:	f43f ae46 	beq.w	800a3ae <_strtod_l+0x43e>
 800a722:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a724:	9805      	ldr	r0, [sp, #20]
 800a726:	464a      	mov	r2, r9
 800a728:	f7ff fa32 	bl	8009b90 <__mdiff>
 800a72c:	4604      	mov	r4, r0
 800a72e:	2800      	cmp	r0, #0
 800a730:	f43f ae3d 	beq.w	800a3ae <_strtod_l+0x43e>
 800a734:	68c3      	ldr	r3, [r0, #12]
 800a736:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a738:	2300      	movs	r3, #0
 800a73a:	60c3      	str	r3, [r0, #12]
 800a73c:	4641      	mov	r1, r8
 800a73e:	f7ff fa0b 	bl	8009b58 <__mcmp>
 800a742:	2800      	cmp	r0, #0
 800a744:	da46      	bge.n	800a7d4 <_strtod_l+0x864>
 800a746:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a748:	ea53 030a 	orrs.w	r3, r3, sl
 800a74c:	d16c      	bne.n	800a828 <_strtod_l+0x8b8>
 800a74e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a752:	2b00      	cmp	r3, #0
 800a754:	d168      	bne.n	800a828 <_strtod_l+0x8b8>
 800a756:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a75a:	0d1b      	lsrs	r3, r3, #20
 800a75c:	051b      	lsls	r3, r3, #20
 800a75e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a762:	d961      	bls.n	800a828 <_strtod_l+0x8b8>
 800a764:	6963      	ldr	r3, [r4, #20]
 800a766:	b913      	cbnz	r3, 800a76e <_strtod_l+0x7fe>
 800a768:	6923      	ldr	r3, [r4, #16]
 800a76a:	2b01      	cmp	r3, #1
 800a76c:	dd5c      	ble.n	800a828 <_strtod_l+0x8b8>
 800a76e:	4621      	mov	r1, r4
 800a770:	2201      	movs	r2, #1
 800a772:	9805      	ldr	r0, [sp, #20]
 800a774:	f7ff f984 	bl	8009a80 <__lshift>
 800a778:	4641      	mov	r1, r8
 800a77a:	4604      	mov	r4, r0
 800a77c:	f7ff f9ec 	bl	8009b58 <__mcmp>
 800a780:	2800      	cmp	r0, #0
 800a782:	dd51      	ble.n	800a828 <_strtod_l+0x8b8>
 800a784:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a788:	9a08      	ldr	r2, [sp, #32]
 800a78a:	0d1b      	lsrs	r3, r3, #20
 800a78c:	051b      	lsls	r3, r3, #20
 800a78e:	2a00      	cmp	r2, #0
 800a790:	d06b      	beq.n	800a86a <_strtod_l+0x8fa>
 800a792:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a796:	d868      	bhi.n	800a86a <_strtod_l+0x8fa>
 800a798:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a79c:	f67f ae9d 	bls.w	800a4da <_strtod_l+0x56a>
 800a7a0:	4b0a      	ldr	r3, [pc, #40]	@ (800a7cc <_strtod_l+0x85c>)
 800a7a2:	4650      	mov	r0, sl
 800a7a4:	4659      	mov	r1, fp
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	f7f5 ff36 	bl	8000618 <__aeabi_dmul>
 800a7ac:	4b08      	ldr	r3, [pc, #32]	@ (800a7d0 <_strtod_l+0x860>)
 800a7ae:	400b      	ands	r3, r1
 800a7b0:	4682      	mov	sl, r0
 800a7b2:	468b      	mov	fp, r1
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	f47f ae05 	bne.w	800a3c4 <_strtod_l+0x454>
 800a7ba:	9a05      	ldr	r2, [sp, #20]
 800a7bc:	2322      	movs	r3, #34	@ 0x22
 800a7be:	6013      	str	r3, [r2, #0]
 800a7c0:	e600      	b.n	800a3c4 <_strtod_l+0x454>
 800a7c2:	bf00      	nop
 800a7c4:	0800c0a8 	.word	0x0800c0a8
 800a7c8:	fffffc02 	.word	0xfffffc02
 800a7cc:	39500000 	.word	0x39500000
 800a7d0:	7ff00000 	.word	0x7ff00000
 800a7d4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a7d8:	d165      	bne.n	800a8a6 <_strtod_l+0x936>
 800a7da:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a7dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a7e0:	b35a      	cbz	r2, 800a83a <_strtod_l+0x8ca>
 800a7e2:	4a9f      	ldr	r2, [pc, #636]	@ (800aa60 <_strtod_l+0xaf0>)
 800a7e4:	4293      	cmp	r3, r2
 800a7e6:	d12b      	bne.n	800a840 <_strtod_l+0x8d0>
 800a7e8:	9b08      	ldr	r3, [sp, #32]
 800a7ea:	4651      	mov	r1, sl
 800a7ec:	b303      	cbz	r3, 800a830 <_strtod_l+0x8c0>
 800a7ee:	4b9d      	ldr	r3, [pc, #628]	@ (800aa64 <_strtod_l+0xaf4>)
 800a7f0:	465a      	mov	r2, fp
 800a7f2:	4013      	ands	r3, r2
 800a7f4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a7f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a7fc:	d81b      	bhi.n	800a836 <_strtod_l+0x8c6>
 800a7fe:	0d1b      	lsrs	r3, r3, #20
 800a800:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a804:	fa02 f303 	lsl.w	r3, r2, r3
 800a808:	4299      	cmp	r1, r3
 800a80a:	d119      	bne.n	800a840 <_strtod_l+0x8d0>
 800a80c:	4b96      	ldr	r3, [pc, #600]	@ (800aa68 <_strtod_l+0xaf8>)
 800a80e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a810:	429a      	cmp	r2, r3
 800a812:	d102      	bne.n	800a81a <_strtod_l+0x8aa>
 800a814:	3101      	adds	r1, #1
 800a816:	f43f adca 	beq.w	800a3ae <_strtod_l+0x43e>
 800a81a:	4b92      	ldr	r3, [pc, #584]	@ (800aa64 <_strtod_l+0xaf4>)
 800a81c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a81e:	401a      	ands	r2, r3
 800a820:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a824:	f04f 0a00 	mov.w	sl, #0
 800a828:	9b08      	ldr	r3, [sp, #32]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d1b8      	bne.n	800a7a0 <_strtod_l+0x830>
 800a82e:	e5c9      	b.n	800a3c4 <_strtod_l+0x454>
 800a830:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a834:	e7e8      	b.n	800a808 <_strtod_l+0x898>
 800a836:	4613      	mov	r3, r2
 800a838:	e7e6      	b.n	800a808 <_strtod_l+0x898>
 800a83a:	ea53 030a 	orrs.w	r3, r3, sl
 800a83e:	d0a1      	beq.n	800a784 <_strtod_l+0x814>
 800a840:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a842:	b1db      	cbz	r3, 800a87c <_strtod_l+0x90c>
 800a844:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a846:	4213      	tst	r3, r2
 800a848:	d0ee      	beq.n	800a828 <_strtod_l+0x8b8>
 800a84a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a84c:	9a08      	ldr	r2, [sp, #32]
 800a84e:	4650      	mov	r0, sl
 800a850:	4659      	mov	r1, fp
 800a852:	b1bb      	cbz	r3, 800a884 <_strtod_l+0x914>
 800a854:	f7ff fb6e 	bl	8009f34 <sulp>
 800a858:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a85c:	ec53 2b10 	vmov	r2, r3, d0
 800a860:	f7f5 fd24 	bl	80002ac <__adddf3>
 800a864:	4682      	mov	sl, r0
 800a866:	468b      	mov	fp, r1
 800a868:	e7de      	b.n	800a828 <_strtod_l+0x8b8>
 800a86a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a86e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a872:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a876:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800a87a:	e7d5      	b.n	800a828 <_strtod_l+0x8b8>
 800a87c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a87e:	ea13 0f0a 	tst.w	r3, sl
 800a882:	e7e1      	b.n	800a848 <_strtod_l+0x8d8>
 800a884:	f7ff fb56 	bl	8009f34 <sulp>
 800a888:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a88c:	ec53 2b10 	vmov	r2, r3, d0
 800a890:	f7f5 fd0a 	bl	80002a8 <__aeabi_dsub>
 800a894:	2200      	movs	r2, #0
 800a896:	2300      	movs	r3, #0
 800a898:	4682      	mov	sl, r0
 800a89a:	468b      	mov	fp, r1
 800a89c:	f7f6 f924 	bl	8000ae8 <__aeabi_dcmpeq>
 800a8a0:	2800      	cmp	r0, #0
 800a8a2:	d0c1      	beq.n	800a828 <_strtod_l+0x8b8>
 800a8a4:	e619      	b.n	800a4da <_strtod_l+0x56a>
 800a8a6:	4641      	mov	r1, r8
 800a8a8:	4620      	mov	r0, r4
 800a8aa:	f7ff facd 	bl	8009e48 <__ratio>
 800a8ae:	ec57 6b10 	vmov	r6, r7, d0
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a8b8:	4630      	mov	r0, r6
 800a8ba:	4639      	mov	r1, r7
 800a8bc:	f7f6 f928 	bl	8000b10 <__aeabi_dcmple>
 800a8c0:	2800      	cmp	r0, #0
 800a8c2:	d06f      	beq.n	800a9a4 <_strtod_l+0xa34>
 800a8c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d17a      	bne.n	800a9c0 <_strtod_l+0xa50>
 800a8ca:	f1ba 0f00 	cmp.w	sl, #0
 800a8ce:	d158      	bne.n	800a982 <_strtod_l+0xa12>
 800a8d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a8d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d15a      	bne.n	800a990 <_strtod_l+0xa20>
 800a8da:	4b64      	ldr	r3, [pc, #400]	@ (800aa6c <_strtod_l+0xafc>)
 800a8dc:	2200      	movs	r2, #0
 800a8de:	4630      	mov	r0, r6
 800a8e0:	4639      	mov	r1, r7
 800a8e2:	f7f6 f90b 	bl	8000afc <__aeabi_dcmplt>
 800a8e6:	2800      	cmp	r0, #0
 800a8e8:	d159      	bne.n	800a99e <_strtod_l+0xa2e>
 800a8ea:	4630      	mov	r0, r6
 800a8ec:	4639      	mov	r1, r7
 800a8ee:	4b60      	ldr	r3, [pc, #384]	@ (800aa70 <_strtod_l+0xb00>)
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	f7f5 fe91 	bl	8000618 <__aeabi_dmul>
 800a8f6:	4606      	mov	r6, r0
 800a8f8:	460f      	mov	r7, r1
 800a8fa:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a8fe:	9606      	str	r6, [sp, #24]
 800a900:	9307      	str	r3, [sp, #28]
 800a902:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a906:	4d57      	ldr	r5, [pc, #348]	@ (800aa64 <_strtod_l+0xaf4>)
 800a908:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a90c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a90e:	401d      	ands	r5, r3
 800a910:	4b58      	ldr	r3, [pc, #352]	@ (800aa74 <_strtod_l+0xb04>)
 800a912:	429d      	cmp	r5, r3
 800a914:	f040 80b2 	bne.w	800aa7c <_strtod_l+0xb0c>
 800a918:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a91a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a91e:	ec4b ab10 	vmov	d0, sl, fp
 800a922:	f7ff f9c9 	bl	8009cb8 <__ulp>
 800a926:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a92a:	ec51 0b10 	vmov	r0, r1, d0
 800a92e:	f7f5 fe73 	bl	8000618 <__aeabi_dmul>
 800a932:	4652      	mov	r2, sl
 800a934:	465b      	mov	r3, fp
 800a936:	f7f5 fcb9 	bl	80002ac <__adddf3>
 800a93a:	460b      	mov	r3, r1
 800a93c:	4949      	ldr	r1, [pc, #292]	@ (800aa64 <_strtod_l+0xaf4>)
 800a93e:	4a4e      	ldr	r2, [pc, #312]	@ (800aa78 <_strtod_l+0xb08>)
 800a940:	4019      	ands	r1, r3
 800a942:	4291      	cmp	r1, r2
 800a944:	4682      	mov	sl, r0
 800a946:	d942      	bls.n	800a9ce <_strtod_l+0xa5e>
 800a948:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a94a:	4b47      	ldr	r3, [pc, #284]	@ (800aa68 <_strtod_l+0xaf8>)
 800a94c:	429a      	cmp	r2, r3
 800a94e:	d103      	bne.n	800a958 <_strtod_l+0x9e8>
 800a950:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a952:	3301      	adds	r3, #1
 800a954:	f43f ad2b 	beq.w	800a3ae <_strtod_l+0x43e>
 800a958:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800aa68 <_strtod_l+0xaf8>
 800a95c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800a960:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a962:	9805      	ldr	r0, [sp, #20]
 800a964:	f7fe fe74 	bl	8009650 <_Bfree>
 800a968:	9805      	ldr	r0, [sp, #20]
 800a96a:	4649      	mov	r1, r9
 800a96c:	f7fe fe70 	bl	8009650 <_Bfree>
 800a970:	9805      	ldr	r0, [sp, #20]
 800a972:	4641      	mov	r1, r8
 800a974:	f7fe fe6c 	bl	8009650 <_Bfree>
 800a978:	9805      	ldr	r0, [sp, #20]
 800a97a:	4621      	mov	r1, r4
 800a97c:	f7fe fe68 	bl	8009650 <_Bfree>
 800a980:	e618      	b.n	800a5b4 <_strtod_l+0x644>
 800a982:	f1ba 0f01 	cmp.w	sl, #1
 800a986:	d103      	bne.n	800a990 <_strtod_l+0xa20>
 800a988:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	f43f ada5 	beq.w	800a4da <_strtod_l+0x56a>
 800a990:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800aa40 <_strtod_l+0xad0>
 800a994:	4f35      	ldr	r7, [pc, #212]	@ (800aa6c <_strtod_l+0xafc>)
 800a996:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a99a:	2600      	movs	r6, #0
 800a99c:	e7b1      	b.n	800a902 <_strtod_l+0x992>
 800a99e:	4f34      	ldr	r7, [pc, #208]	@ (800aa70 <_strtod_l+0xb00>)
 800a9a0:	2600      	movs	r6, #0
 800a9a2:	e7aa      	b.n	800a8fa <_strtod_l+0x98a>
 800a9a4:	4b32      	ldr	r3, [pc, #200]	@ (800aa70 <_strtod_l+0xb00>)
 800a9a6:	4630      	mov	r0, r6
 800a9a8:	4639      	mov	r1, r7
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	f7f5 fe34 	bl	8000618 <__aeabi_dmul>
 800a9b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a9b2:	4606      	mov	r6, r0
 800a9b4:	460f      	mov	r7, r1
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d09f      	beq.n	800a8fa <_strtod_l+0x98a>
 800a9ba:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a9be:	e7a0      	b.n	800a902 <_strtod_l+0x992>
 800a9c0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800aa48 <_strtod_l+0xad8>
 800a9c4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a9c8:	ec57 6b17 	vmov	r6, r7, d7
 800a9cc:	e799      	b.n	800a902 <_strtod_l+0x992>
 800a9ce:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a9d2:	9b08      	ldr	r3, [sp, #32]
 800a9d4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d1c1      	bne.n	800a960 <_strtod_l+0x9f0>
 800a9dc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a9e0:	0d1b      	lsrs	r3, r3, #20
 800a9e2:	051b      	lsls	r3, r3, #20
 800a9e4:	429d      	cmp	r5, r3
 800a9e6:	d1bb      	bne.n	800a960 <_strtod_l+0x9f0>
 800a9e8:	4630      	mov	r0, r6
 800a9ea:	4639      	mov	r1, r7
 800a9ec:	f7f6 f9c4 	bl	8000d78 <__aeabi_d2lz>
 800a9f0:	f7f5 fde4 	bl	80005bc <__aeabi_l2d>
 800a9f4:	4602      	mov	r2, r0
 800a9f6:	460b      	mov	r3, r1
 800a9f8:	4630      	mov	r0, r6
 800a9fa:	4639      	mov	r1, r7
 800a9fc:	f7f5 fc54 	bl	80002a8 <__aeabi_dsub>
 800aa00:	460b      	mov	r3, r1
 800aa02:	4602      	mov	r2, r0
 800aa04:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800aa08:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800aa0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa0e:	ea46 060a 	orr.w	r6, r6, sl
 800aa12:	431e      	orrs	r6, r3
 800aa14:	d06f      	beq.n	800aaf6 <_strtod_l+0xb86>
 800aa16:	a30e      	add	r3, pc, #56	@ (adr r3, 800aa50 <_strtod_l+0xae0>)
 800aa18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa1c:	f7f6 f86e 	bl	8000afc <__aeabi_dcmplt>
 800aa20:	2800      	cmp	r0, #0
 800aa22:	f47f accf 	bne.w	800a3c4 <_strtod_l+0x454>
 800aa26:	a30c      	add	r3, pc, #48	@ (adr r3, 800aa58 <_strtod_l+0xae8>)
 800aa28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa2c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aa30:	f7f6 f882 	bl	8000b38 <__aeabi_dcmpgt>
 800aa34:	2800      	cmp	r0, #0
 800aa36:	d093      	beq.n	800a960 <_strtod_l+0x9f0>
 800aa38:	e4c4      	b.n	800a3c4 <_strtod_l+0x454>
 800aa3a:	bf00      	nop
 800aa3c:	f3af 8000 	nop.w
 800aa40:	00000000 	.word	0x00000000
 800aa44:	bff00000 	.word	0xbff00000
 800aa48:	00000000 	.word	0x00000000
 800aa4c:	3ff00000 	.word	0x3ff00000
 800aa50:	94a03595 	.word	0x94a03595
 800aa54:	3fdfffff 	.word	0x3fdfffff
 800aa58:	35afe535 	.word	0x35afe535
 800aa5c:	3fe00000 	.word	0x3fe00000
 800aa60:	000fffff 	.word	0x000fffff
 800aa64:	7ff00000 	.word	0x7ff00000
 800aa68:	7fefffff 	.word	0x7fefffff
 800aa6c:	3ff00000 	.word	0x3ff00000
 800aa70:	3fe00000 	.word	0x3fe00000
 800aa74:	7fe00000 	.word	0x7fe00000
 800aa78:	7c9fffff 	.word	0x7c9fffff
 800aa7c:	9b08      	ldr	r3, [sp, #32]
 800aa7e:	b323      	cbz	r3, 800aaca <_strtod_l+0xb5a>
 800aa80:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800aa84:	d821      	bhi.n	800aaca <_strtod_l+0xb5a>
 800aa86:	a328      	add	r3, pc, #160	@ (adr r3, 800ab28 <_strtod_l+0xbb8>)
 800aa88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa8c:	4630      	mov	r0, r6
 800aa8e:	4639      	mov	r1, r7
 800aa90:	f7f6 f83e 	bl	8000b10 <__aeabi_dcmple>
 800aa94:	b1a0      	cbz	r0, 800aac0 <_strtod_l+0xb50>
 800aa96:	4639      	mov	r1, r7
 800aa98:	4630      	mov	r0, r6
 800aa9a:	f7f6 f895 	bl	8000bc8 <__aeabi_d2uiz>
 800aa9e:	2801      	cmp	r0, #1
 800aaa0:	bf38      	it	cc
 800aaa2:	2001      	movcc	r0, #1
 800aaa4:	f7f5 fd3e 	bl	8000524 <__aeabi_ui2d>
 800aaa8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aaaa:	4606      	mov	r6, r0
 800aaac:	460f      	mov	r7, r1
 800aaae:	b9fb      	cbnz	r3, 800aaf0 <_strtod_l+0xb80>
 800aab0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800aab4:	9014      	str	r0, [sp, #80]	@ 0x50
 800aab6:	9315      	str	r3, [sp, #84]	@ 0x54
 800aab8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800aabc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800aac0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800aac2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800aac6:	1b5b      	subs	r3, r3, r5
 800aac8:	9311      	str	r3, [sp, #68]	@ 0x44
 800aaca:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800aace:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800aad2:	f7ff f8f1 	bl	8009cb8 <__ulp>
 800aad6:	4650      	mov	r0, sl
 800aad8:	ec53 2b10 	vmov	r2, r3, d0
 800aadc:	4659      	mov	r1, fp
 800aade:	f7f5 fd9b 	bl	8000618 <__aeabi_dmul>
 800aae2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800aae6:	f7f5 fbe1 	bl	80002ac <__adddf3>
 800aaea:	4682      	mov	sl, r0
 800aaec:	468b      	mov	fp, r1
 800aaee:	e770      	b.n	800a9d2 <_strtod_l+0xa62>
 800aaf0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800aaf4:	e7e0      	b.n	800aab8 <_strtod_l+0xb48>
 800aaf6:	a30e      	add	r3, pc, #56	@ (adr r3, 800ab30 <_strtod_l+0xbc0>)
 800aaf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aafc:	f7f5 fffe 	bl	8000afc <__aeabi_dcmplt>
 800ab00:	e798      	b.n	800aa34 <_strtod_l+0xac4>
 800ab02:	2300      	movs	r3, #0
 800ab04:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ab06:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800ab08:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ab0a:	6013      	str	r3, [r2, #0]
 800ab0c:	f7ff ba6d 	b.w	8009fea <_strtod_l+0x7a>
 800ab10:	2a65      	cmp	r2, #101	@ 0x65
 800ab12:	f43f ab66 	beq.w	800a1e2 <_strtod_l+0x272>
 800ab16:	2a45      	cmp	r2, #69	@ 0x45
 800ab18:	f43f ab63 	beq.w	800a1e2 <_strtod_l+0x272>
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	f7ff bb9e 	b.w	800a25e <_strtod_l+0x2ee>
 800ab22:	bf00      	nop
 800ab24:	f3af 8000 	nop.w
 800ab28:	ffc00000 	.word	0xffc00000
 800ab2c:	41dfffff 	.word	0x41dfffff
 800ab30:	94a03595 	.word	0x94a03595
 800ab34:	3fcfffff 	.word	0x3fcfffff

0800ab38 <_strtod_r>:
 800ab38:	4b01      	ldr	r3, [pc, #4]	@ (800ab40 <_strtod_r+0x8>)
 800ab3a:	f7ff ba19 	b.w	8009f70 <_strtod_l>
 800ab3e:	bf00      	nop
 800ab40:	20000068 	.word	0x20000068

0800ab44 <_strtol_l.constprop.0>:
 800ab44:	2b24      	cmp	r3, #36	@ 0x24
 800ab46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab4a:	4686      	mov	lr, r0
 800ab4c:	4690      	mov	r8, r2
 800ab4e:	d801      	bhi.n	800ab54 <_strtol_l.constprop.0+0x10>
 800ab50:	2b01      	cmp	r3, #1
 800ab52:	d106      	bne.n	800ab62 <_strtol_l.constprop.0+0x1e>
 800ab54:	f7fd fdbc 	bl	80086d0 <__errno>
 800ab58:	2316      	movs	r3, #22
 800ab5a:	6003      	str	r3, [r0, #0]
 800ab5c:	2000      	movs	r0, #0
 800ab5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab62:	4834      	ldr	r0, [pc, #208]	@ (800ac34 <_strtol_l.constprop.0+0xf0>)
 800ab64:	460d      	mov	r5, r1
 800ab66:	462a      	mov	r2, r5
 800ab68:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ab6c:	5d06      	ldrb	r6, [r0, r4]
 800ab6e:	f016 0608 	ands.w	r6, r6, #8
 800ab72:	d1f8      	bne.n	800ab66 <_strtol_l.constprop.0+0x22>
 800ab74:	2c2d      	cmp	r4, #45	@ 0x2d
 800ab76:	d12d      	bne.n	800abd4 <_strtol_l.constprop.0+0x90>
 800ab78:	782c      	ldrb	r4, [r5, #0]
 800ab7a:	2601      	movs	r6, #1
 800ab7c:	1c95      	adds	r5, r2, #2
 800ab7e:	f033 0210 	bics.w	r2, r3, #16
 800ab82:	d109      	bne.n	800ab98 <_strtol_l.constprop.0+0x54>
 800ab84:	2c30      	cmp	r4, #48	@ 0x30
 800ab86:	d12a      	bne.n	800abde <_strtol_l.constprop.0+0x9a>
 800ab88:	782a      	ldrb	r2, [r5, #0]
 800ab8a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ab8e:	2a58      	cmp	r2, #88	@ 0x58
 800ab90:	d125      	bne.n	800abde <_strtol_l.constprop.0+0x9a>
 800ab92:	786c      	ldrb	r4, [r5, #1]
 800ab94:	2310      	movs	r3, #16
 800ab96:	3502      	adds	r5, #2
 800ab98:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ab9c:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800aba0:	2200      	movs	r2, #0
 800aba2:	fbbc f9f3 	udiv	r9, ip, r3
 800aba6:	4610      	mov	r0, r2
 800aba8:	fb03 ca19 	mls	sl, r3, r9, ip
 800abac:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800abb0:	2f09      	cmp	r7, #9
 800abb2:	d81b      	bhi.n	800abec <_strtol_l.constprop.0+0xa8>
 800abb4:	463c      	mov	r4, r7
 800abb6:	42a3      	cmp	r3, r4
 800abb8:	dd27      	ble.n	800ac0a <_strtol_l.constprop.0+0xc6>
 800abba:	1c57      	adds	r7, r2, #1
 800abbc:	d007      	beq.n	800abce <_strtol_l.constprop.0+0x8a>
 800abbe:	4581      	cmp	r9, r0
 800abc0:	d320      	bcc.n	800ac04 <_strtol_l.constprop.0+0xc0>
 800abc2:	d101      	bne.n	800abc8 <_strtol_l.constprop.0+0x84>
 800abc4:	45a2      	cmp	sl, r4
 800abc6:	db1d      	blt.n	800ac04 <_strtol_l.constprop.0+0xc0>
 800abc8:	fb00 4003 	mla	r0, r0, r3, r4
 800abcc:	2201      	movs	r2, #1
 800abce:	f815 4b01 	ldrb.w	r4, [r5], #1
 800abd2:	e7eb      	b.n	800abac <_strtol_l.constprop.0+0x68>
 800abd4:	2c2b      	cmp	r4, #43	@ 0x2b
 800abd6:	bf04      	itt	eq
 800abd8:	782c      	ldrbeq	r4, [r5, #0]
 800abda:	1c95      	addeq	r5, r2, #2
 800abdc:	e7cf      	b.n	800ab7e <_strtol_l.constprop.0+0x3a>
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d1da      	bne.n	800ab98 <_strtol_l.constprop.0+0x54>
 800abe2:	2c30      	cmp	r4, #48	@ 0x30
 800abe4:	bf0c      	ite	eq
 800abe6:	2308      	moveq	r3, #8
 800abe8:	230a      	movne	r3, #10
 800abea:	e7d5      	b.n	800ab98 <_strtol_l.constprop.0+0x54>
 800abec:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800abf0:	2f19      	cmp	r7, #25
 800abf2:	d801      	bhi.n	800abf8 <_strtol_l.constprop.0+0xb4>
 800abf4:	3c37      	subs	r4, #55	@ 0x37
 800abf6:	e7de      	b.n	800abb6 <_strtol_l.constprop.0+0x72>
 800abf8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800abfc:	2f19      	cmp	r7, #25
 800abfe:	d804      	bhi.n	800ac0a <_strtol_l.constprop.0+0xc6>
 800ac00:	3c57      	subs	r4, #87	@ 0x57
 800ac02:	e7d8      	b.n	800abb6 <_strtol_l.constprop.0+0x72>
 800ac04:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ac08:	e7e1      	b.n	800abce <_strtol_l.constprop.0+0x8a>
 800ac0a:	1c53      	adds	r3, r2, #1
 800ac0c:	d108      	bne.n	800ac20 <_strtol_l.constprop.0+0xdc>
 800ac0e:	2322      	movs	r3, #34	@ 0x22
 800ac10:	f8ce 3000 	str.w	r3, [lr]
 800ac14:	4660      	mov	r0, ip
 800ac16:	f1b8 0f00 	cmp.w	r8, #0
 800ac1a:	d0a0      	beq.n	800ab5e <_strtol_l.constprop.0+0x1a>
 800ac1c:	1e69      	subs	r1, r5, #1
 800ac1e:	e006      	b.n	800ac2e <_strtol_l.constprop.0+0xea>
 800ac20:	b106      	cbz	r6, 800ac24 <_strtol_l.constprop.0+0xe0>
 800ac22:	4240      	negs	r0, r0
 800ac24:	f1b8 0f00 	cmp.w	r8, #0
 800ac28:	d099      	beq.n	800ab5e <_strtol_l.constprop.0+0x1a>
 800ac2a:	2a00      	cmp	r2, #0
 800ac2c:	d1f6      	bne.n	800ac1c <_strtol_l.constprop.0+0xd8>
 800ac2e:	f8c8 1000 	str.w	r1, [r8]
 800ac32:	e794      	b.n	800ab5e <_strtol_l.constprop.0+0x1a>
 800ac34:	0800c0d1 	.word	0x0800c0d1

0800ac38 <_strtol_r>:
 800ac38:	f7ff bf84 	b.w	800ab44 <_strtol_l.constprop.0>

0800ac3c <__ssputs_r>:
 800ac3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac40:	688e      	ldr	r6, [r1, #8]
 800ac42:	461f      	mov	r7, r3
 800ac44:	42be      	cmp	r6, r7
 800ac46:	680b      	ldr	r3, [r1, #0]
 800ac48:	4682      	mov	sl, r0
 800ac4a:	460c      	mov	r4, r1
 800ac4c:	4690      	mov	r8, r2
 800ac4e:	d82d      	bhi.n	800acac <__ssputs_r+0x70>
 800ac50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ac54:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ac58:	d026      	beq.n	800aca8 <__ssputs_r+0x6c>
 800ac5a:	6965      	ldr	r5, [r4, #20]
 800ac5c:	6909      	ldr	r1, [r1, #16]
 800ac5e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ac62:	eba3 0901 	sub.w	r9, r3, r1
 800ac66:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ac6a:	1c7b      	adds	r3, r7, #1
 800ac6c:	444b      	add	r3, r9
 800ac6e:	106d      	asrs	r5, r5, #1
 800ac70:	429d      	cmp	r5, r3
 800ac72:	bf38      	it	cc
 800ac74:	461d      	movcc	r5, r3
 800ac76:	0553      	lsls	r3, r2, #21
 800ac78:	d527      	bpl.n	800acca <__ssputs_r+0x8e>
 800ac7a:	4629      	mov	r1, r5
 800ac7c:	f7fe fc1c 	bl	80094b8 <_malloc_r>
 800ac80:	4606      	mov	r6, r0
 800ac82:	b360      	cbz	r0, 800acde <__ssputs_r+0xa2>
 800ac84:	6921      	ldr	r1, [r4, #16]
 800ac86:	464a      	mov	r2, r9
 800ac88:	f000 fa18 	bl	800b0bc <memcpy>
 800ac8c:	89a3      	ldrh	r3, [r4, #12]
 800ac8e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ac92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac96:	81a3      	strh	r3, [r4, #12]
 800ac98:	6126      	str	r6, [r4, #16]
 800ac9a:	6165      	str	r5, [r4, #20]
 800ac9c:	444e      	add	r6, r9
 800ac9e:	eba5 0509 	sub.w	r5, r5, r9
 800aca2:	6026      	str	r6, [r4, #0]
 800aca4:	60a5      	str	r5, [r4, #8]
 800aca6:	463e      	mov	r6, r7
 800aca8:	42be      	cmp	r6, r7
 800acaa:	d900      	bls.n	800acae <__ssputs_r+0x72>
 800acac:	463e      	mov	r6, r7
 800acae:	6820      	ldr	r0, [r4, #0]
 800acb0:	4632      	mov	r2, r6
 800acb2:	4641      	mov	r1, r8
 800acb4:	f000 f9c6 	bl	800b044 <memmove>
 800acb8:	68a3      	ldr	r3, [r4, #8]
 800acba:	1b9b      	subs	r3, r3, r6
 800acbc:	60a3      	str	r3, [r4, #8]
 800acbe:	6823      	ldr	r3, [r4, #0]
 800acc0:	4433      	add	r3, r6
 800acc2:	6023      	str	r3, [r4, #0]
 800acc4:	2000      	movs	r0, #0
 800acc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acca:	462a      	mov	r2, r5
 800accc:	f000 fd89 	bl	800b7e2 <_realloc_r>
 800acd0:	4606      	mov	r6, r0
 800acd2:	2800      	cmp	r0, #0
 800acd4:	d1e0      	bne.n	800ac98 <__ssputs_r+0x5c>
 800acd6:	6921      	ldr	r1, [r4, #16]
 800acd8:	4650      	mov	r0, sl
 800acda:	f7fe fb79 	bl	80093d0 <_free_r>
 800acde:	230c      	movs	r3, #12
 800ace0:	f8ca 3000 	str.w	r3, [sl]
 800ace4:	89a3      	ldrh	r3, [r4, #12]
 800ace6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800acea:	81a3      	strh	r3, [r4, #12]
 800acec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800acf0:	e7e9      	b.n	800acc6 <__ssputs_r+0x8a>
	...

0800acf4 <_svfiprintf_r>:
 800acf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acf8:	4698      	mov	r8, r3
 800acfa:	898b      	ldrh	r3, [r1, #12]
 800acfc:	061b      	lsls	r3, r3, #24
 800acfe:	b09d      	sub	sp, #116	@ 0x74
 800ad00:	4607      	mov	r7, r0
 800ad02:	460d      	mov	r5, r1
 800ad04:	4614      	mov	r4, r2
 800ad06:	d510      	bpl.n	800ad2a <_svfiprintf_r+0x36>
 800ad08:	690b      	ldr	r3, [r1, #16]
 800ad0a:	b973      	cbnz	r3, 800ad2a <_svfiprintf_r+0x36>
 800ad0c:	2140      	movs	r1, #64	@ 0x40
 800ad0e:	f7fe fbd3 	bl	80094b8 <_malloc_r>
 800ad12:	6028      	str	r0, [r5, #0]
 800ad14:	6128      	str	r0, [r5, #16]
 800ad16:	b930      	cbnz	r0, 800ad26 <_svfiprintf_r+0x32>
 800ad18:	230c      	movs	r3, #12
 800ad1a:	603b      	str	r3, [r7, #0]
 800ad1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ad20:	b01d      	add	sp, #116	@ 0x74
 800ad22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad26:	2340      	movs	r3, #64	@ 0x40
 800ad28:	616b      	str	r3, [r5, #20]
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad2e:	2320      	movs	r3, #32
 800ad30:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ad34:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad38:	2330      	movs	r3, #48	@ 0x30
 800ad3a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800aed8 <_svfiprintf_r+0x1e4>
 800ad3e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ad42:	f04f 0901 	mov.w	r9, #1
 800ad46:	4623      	mov	r3, r4
 800ad48:	469a      	mov	sl, r3
 800ad4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad4e:	b10a      	cbz	r2, 800ad54 <_svfiprintf_r+0x60>
 800ad50:	2a25      	cmp	r2, #37	@ 0x25
 800ad52:	d1f9      	bne.n	800ad48 <_svfiprintf_r+0x54>
 800ad54:	ebba 0b04 	subs.w	fp, sl, r4
 800ad58:	d00b      	beq.n	800ad72 <_svfiprintf_r+0x7e>
 800ad5a:	465b      	mov	r3, fp
 800ad5c:	4622      	mov	r2, r4
 800ad5e:	4629      	mov	r1, r5
 800ad60:	4638      	mov	r0, r7
 800ad62:	f7ff ff6b 	bl	800ac3c <__ssputs_r>
 800ad66:	3001      	adds	r0, #1
 800ad68:	f000 80a7 	beq.w	800aeba <_svfiprintf_r+0x1c6>
 800ad6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ad6e:	445a      	add	r2, fp
 800ad70:	9209      	str	r2, [sp, #36]	@ 0x24
 800ad72:	f89a 3000 	ldrb.w	r3, [sl]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	f000 809f 	beq.w	800aeba <_svfiprintf_r+0x1c6>
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ad82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad86:	f10a 0a01 	add.w	sl, sl, #1
 800ad8a:	9304      	str	r3, [sp, #16]
 800ad8c:	9307      	str	r3, [sp, #28]
 800ad8e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ad92:	931a      	str	r3, [sp, #104]	@ 0x68
 800ad94:	4654      	mov	r4, sl
 800ad96:	2205      	movs	r2, #5
 800ad98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad9c:	484e      	ldr	r0, [pc, #312]	@ (800aed8 <_svfiprintf_r+0x1e4>)
 800ad9e:	f7f5 fa27 	bl	80001f0 <memchr>
 800ada2:	9a04      	ldr	r2, [sp, #16]
 800ada4:	b9d8      	cbnz	r0, 800adde <_svfiprintf_r+0xea>
 800ada6:	06d0      	lsls	r0, r2, #27
 800ada8:	bf44      	itt	mi
 800adaa:	2320      	movmi	r3, #32
 800adac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800adb0:	0711      	lsls	r1, r2, #28
 800adb2:	bf44      	itt	mi
 800adb4:	232b      	movmi	r3, #43	@ 0x2b
 800adb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800adba:	f89a 3000 	ldrb.w	r3, [sl]
 800adbe:	2b2a      	cmp	r3, #42	@ 0x2a
 800adc0:	d015      	beq.n	800adee <_svfiprintf_r+0xfa>
 800adc2:	9a07      	ldr	r2, [sp, #28]
 800adc4:	4654      	mov	r4, sl
 800adc6:	2000      	movs	r0, #0
 800adc8:	f04f 0c0a 	mov.w	ip, #10
 800adcc:	4621      	mov	r1, r4
 800adce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800add2:	3b30      	subs	r3, #48	@ 0x30
 800add4:	2b09      	cmp	r3, #9
 800add6:	d94b      	bls.n	800ae70 <_svfiprintf_r+0x17c>
 800add8:	b1b0      	cbz	r0, 800ae08 <_svfiprintf_r+0x114>
 800adda:	9207      	str	r2, [sp, #28]
 800addc:	e014      	b.n	800ae08 <_svfiprintf_r+0x114>
 800adde:	eba0 0308 	sub.w	r3, r0, r8
 800ade2:	fa09 f303 	lsl.w	r3, r9, r3
 800ade6:	4313      	orrs	r3, r2
 800ade8:	9304      	str	r3, [sp, #16]
 800adea:	46a2      	mov	sl, r4
 800adec:	e7d2      	b.n	800ad94 <_svfiprintf_r+0xa0>
 800adee:	9b03      	ldr	r3, [sp, #12]
 800adf0:	1d19      	adds	r1, r3, #4
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	9103      	str	r1, [sp, #12]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	bfbb      	ittet	lt
 800adfa:	425b      	neglt	r3, r3
 800adfc:	f042 0202 	orrlt.w	r2, r2, #2
 800ae00:	9307      	strge	r3, [sp, #28]
 800ae02:	9307      	strlt	r3, [sp, #28]
 800ae04:	bfb8      	it	lt
 800ae06:	9204      	strlt	r2, [sp, #16]
 800ae08:	7823      	ldrb	r3, [r4, #0]
 800ae0a:	2b2e      	cmp	r3, #46	@ 0x2e
 800ae0c:	d10a      	bne.n	800ae24 <_svfiprintf_r+0x130>
 800ae0e:	7863      	ldrb	r3, [r4, #1]
 800ae10:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae12:	d132      	bne.n	800ae7a <_svfiprintf_r+0x186>
 800ae14:	9b03      	ldr	r3, [sp, #12]
 800ae16:	1d1a      	adds	r2, r3, #4
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	9203      	str	r2, [sp, #12]
 800ae1c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ae20:	3402      	adds	r4, #2
 800ae22:	9305      	str	r3, [sp, #20]
 800ae24:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800aee8 <_svfiprintf_r+0x1f4>
 800ae28:	7821      	ldrb	r1, [r4, #0]
 800ae2a:	2203      	movs	r2, #3
 800ae2c:	4650      	mov	r0, sl
 800ae2e:	f7f5 f9df 	bl	80001f0 <memchr>
 800ae32:	b138      	cbz	r0, 800ae44 <_svfiprintf_r+0x150>
 800ae34:	9b04      	ldr	r3, [sp, #16]
 800ae36:	eba0 000a 	sub.w	r0, r0, sl
 800ae3a:	2240      	movs	r2, #64	@ 0x40
 800ae3c:	4082      	lsls	r2, r0
 800ae3e:	4313      	orrs	r3, r2
 800ae40:	3401      	adds	r4, #1
 800ae42:	9304      	str	r3, [sp, #16]
 800ae44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae48:	4824      	ldr	r0, [pc, #144]	@ (800aedc <_svfiprintf_r+0x1e8>)
 800ae4a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ae4e:	2206      	movs	r2, #6
 800ae50:	f7f5 f9ce 	bl	80001f0 <memchr>
 800ae54:	2800      	cmp	r0, #0
 800ae56:	d036      	beq.n	800aec6 <_svfiprintf_r+0x1d2>
 800ae58:	4b21      	ldr	r3, [pc, #132]	@ (800aee0 <_svfiprintf_r+0x1ec>)
 800ae5a:	bb1b      	cbnz	r3, 800aea4 <_svfiprintf_r+0x1b0>
 800ae5c:	9b03      	ldr	r3, [sp, #12]
 800ae5e:	3307      	adds	r3, #7
 800ae60:	f023 0307 	bic.w	r3, r3, #7
 800ae64:	3308      	adds	r3, #8
 800ae66:	9303      	str	r3, [sp, #12]
 800ae68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae6a:	4433      	add	r3, r6
 800ae6c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae6e:	e76a      	b.n	800ad46 <_svfiprintf_r+0x52>
 800ae70:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae74:	460c      	mov	r4, r1
 800ae76:	2001      	movs	r0, #1
 800ae78:	e7a8      	b.n	800adcc <_svfiprintf_r+0xd8>
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	3401      	adds	r4, #1
 800ae7e:	9305      	str	r3, [sp, #20]
 800ae80:	4619      	mov	r1, r3
 800ae82:	f04f 0c0a 	mov.w	ip, #10
 800ae86:	4620      	mov	r0, r4
 800ae88:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae8c:	3a30      	subs	r2, #48	@ 0x30
 800ae8e:	2a09      	cmp	r2, #9
 800ae90:	d903      	bls.n	800ae9a <_svfiprintf_r+0x1a6>
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d0c6      	beq.n	800ae24 <_svfiprintf_r+0x130>
 800ae96:	9105      	str	r1, [sp, #20]
 800ae98:	e7c4      	b.n	800ae24 <_svfiprintf_r+0x130>
 800ae9a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae9e:	4604      	mov	r4, r0
 800aea0:	2301      	movs	r3, #1
 800aea2:	e7f0      	b.n	800ae86 <_svfiprintf_r+0x192>
 800aea4:	ab03      	add	r3, sp, #12
 800aea6:	9300      	str	r3, [sp, #0]
 800aea8:	462a      	mov	r2, r5
 800aeaa:	4b0e      	ldr	r3, [pc, #56]	@ (800aee4 <_svfiprintf_r+0x1f0>)
 800aeac:	a904      	add	r1, sp, #16
 800aeae:	4638      	mov	r0, r7
 800aeb0:	f7fc fcca 	bl	8007848 <_printf_float>
 800aeb4:	1c42      	adds	r2, r0, #1
 800aeb6:	4606      	mov	r6, r0
 800aeb8:	d1d6      	bne.n	800ae68 <_svfiprintf_r+0x174>
 800aeba:	89ab      	ldrh	r3, [r5, #12]
 800aebc:	065b      	lsls	r3, r3, #25
 800aebe:	f53f af2d 	bmi.w	800ad1c <_svfiprintf_r+0x28>
 800aec2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aec4:	e72c      	b.n	800ad20 <_svfiprintf_r+0x2c>
 800aec6:	ab03      	add	r3, sp, #12
 800aec8:	9300      	str	r3, [sp, #0]
 800aeca:	462a      	mov	r2, r5
 800aecc:	4b05      	ldr	r3, [pc, #20]	@ (800aee4 <_svfiprintf_r+0x1f0>)
 800aece:	a904      	add	r1, sp, #16
 800aed0:	4638      	mov	r0, r7
 800aed2:	f7fc ff51 	bl	8007d78 <_printf_i>
 800aed6:	e7ed      	b.n	800aeb4 <_svfiprintf_r+0x1c0>
 800aed8:	0800c1d1 	.word	0x0800c1d1
 800aedc:	0800c1db 	.word	0x0800c1db
 800aee0:	08007849 	.word	0x08007849
 800aee4:	0800ac3d 	.word	0x0800ac3d
 800aee8:	0800c1d7 	.word	0x0800c1d7

0800aeec <__sflush_r>:
 800aeec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aef4:	0716      	lsls	r6, r2, #28
 800aef6:	4605      	mov	r5, r0
 800aef8:	460c      	mov	r4, r1
 800aefa:	d454      	bmi.n	800afa6 <__sflush_r+0xba>
 800aefc:	684b      	ldr	r3, [r1, #4]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	dc02      	bgt.n	800af08 <__sflush_r+0x1c>
 800af02:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800af04:	2b00      	cmp	r3, #0
 800af06:	dd48      	ble.n	800af9a <__sflush_r+0xae>
 800af08:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800af0a:	2e00      	cmp	r6, #0
 800af0c:	d045      	beq.n	800af9a <__sflush_r+0xae>
 800af0e:	2300      	movs	r3, #0
 800af10:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800af14:	682f      	ldr	r7, [r5, #0]
 800af16:	6a21      	ldr	r1, [r4, #32]
 800af18:	602b      	str	r3, [r5, #0]
 800af1a:	d030      	beq.n	800af7e <__sflush_r+0x92>
 800af1c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800af1e:	89a3      	ldrh	r3, [r4, #12]
 800af20:	0759      	lsls	r1, r3, #29
 800af22:	d505      	bpl.n	800af30 <__sflush_r+0x44>
 800af24:	6863      	ldr	r3, [r4, #4]
 800af26:	1ad2      	subs	r2, r2, r3
 800af28:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800af2a:	b10b      	cbz	r3, 800af30 <__sflush_r+0x44>
 800af2c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800af2e:	1ad2      	subs	r2, r2, r3
 800af30:	2300      	movs	r3, #0
 800af32:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800af34:	6a21      	ldr	r1, [r4, #32]
 800af36:	4628      	mov	r0, r5
 800af38:	47b0      	blx	r6
 800af3a:	1c43      	adds	r3, r0, #1
 800af3c:	89a3      	ldrh	r3, [r4, #12]
 800af3e:	d106      	bne.n	800af4e <__sflush_r+0x62>
 800af40:	6829      	ldr	r1, [r5, #0]
 800af42:	291d      	cmp	r1, #29
 800af44:	d82b      	bhi.n	800af9e <__sflush_r+0xb2>
 800af46:	4a2a      	ldr	r2, [pc, #168]	@ (800aff0 <__sflush_r+0x104>)
 800af48:	410a      	asrs	r2, r1
 800af4a:	07d6      	lsls	r6, r2, #31
 800af4c:	d427      	bmi.n	800af9e <__sflush_r+0xb2>
 800af4e:	2200      	movs	r2, #0
 800af50:	6062      	str	r2, [r4, #4]
 800af52:	04d9      	lsls	r1, r3, #19
 800af54:	6922      	ldr	r2, [r4, #16]
 800af56:	6022      	str	r2, [r4, #0]
 800af58:	d504      	bpl.n	800af64 <__sflush_r+0x78>
 800af5a:	1c42      	adds	r2, r0, #1
 800af5c:	d101      	bne.n	800af62 <__sflush_r+0x76>
 800af5e:	682b      	ldr	r3, [r5, #0]
 800af60:	b903      	cbnz	r3, 800af64 <__sflush_r+0x78>
 800af62:	6560      	str	r0, [r4, #84]	@ 0x54
 800af64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800af66:	602f      	str	r7, [r5, #0]
 800af68:	b1b9      	cbz	r1, 800af9a <__sflush_r+0xae>
 800af6a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800af6e:	4299      	cmp	r1, r3
 800af70:	d002      	beq.n	800af78 <__sflush_r+0x8c>
 800af72:	4628      	mov	r0, r5
 800af74:	f7fe fa2c 	bl	80093d0 <_free_r>
 800af78:	2300      	movs	r3, #0
 800af7a:	6363      	str	r3, [r4, #52]	@ 0x34
 800af7c:	e00d      	b.n	800af9a <__sflush_r+0xae>
 800af7e:	2301      	movs	r3, #1
 800af80:	4628      	mov	r0, r5
 800af82:	47b0      	blx	r6
 800af84:	4602      	mov	r2, r0
 800af86:	1c50      	adds	r0, r2, #1
 800af88:	d1c9      	bne.n	800af1e <__sflush_r+0x32>
 800af8a:	682b      	ldr	r3, [r5, #0]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d0c6      	beq.n	800af1e <__sflush_r+0x32>
 800af90:	2b1d      	cmp	r3, #29
 800af92:	d001      	beq.n	800af98 <__sflush_r+0xac>
 800af94:	2b16      	cmp	r3, #22
 800af96:	d11e      	bne.n	800afd6 <__sflush_r+0xea>
 800af98:	602f      	str	r7, [r5, #0]
 800af9a:	2000      	movs	r0, #0
 800af9c:	e022      	b.n	800afe4 <__sflush_r+0xf8>
 800af9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800afa2:	b21b      	sxth	r3, r3
 800afa4:	e01b      	b.n	800afde <__sflush_r+0xf2>
 800afa6:	690f      	ldr	r7, [r1, #16]
 800afa8:	2f00      	cmp	r7, #0
 800afaa:	d0f6      	beq.n	800af9a <__sflush_r+0xae>
 800afac:	0793      	lsls	r3, r2, #30
 800afae:	680e      	ldr	r6, [r1, #0]
 800afb0:	bf08      	it	eq
 800afb2:	694b      	ldreq	r3, [r1, #20]
 800afb4:	600f      	str	r7, [r1, #0]
 800afb6:	bf18      	it	ne
 800afb8:	2300      	movne	r3, #0
 800afba:	eba6 0807 	sub.w	r8, r6, r7
 800afbe:	608b      	str	r3, [r1, #8]
 800afc0:	f1b8 0f00 	cmp.w	r8, #0
 800afc4:	dde9      	ble.n	800af9a <__sflush_r+0xae>
 800afc6:	6a21      	ldr	r1, [r4, #32]
 800afc8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800afca:	4643      	mov	r3, r8
 800afcc:	463a      	mov	r2, r7
 800afce:	4628      	mov	r0, r5
 800afd0:	47b0      	blx	r6
 800afd2:	2800      	cmp	r0, #0
 800afd4:	dc08      	bgt.n	800afe8 <__sflush_r+0xfc>
 800afd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800afde:	81a3      	strh	r3, [r4, #12]
 800afe0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800afe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afe8:	4407      	add	r7, r0
 800afea:	eba8 0800 	sub.w	r8, r8, r0
 800afee:	e7e7      	b.n	800afc0 <__sflush_r+0xd4>
 800aff0:	dfbffffe 	.word	0xdfbffffe

0800aff4 <_fflush_r>:
 800aff4:	b538      	push	{r3, r4, r5, lr}
 800aff6:	690b      	ldr	r3, [r1, #16]
 800aff8:	4605      	mov	r5, r0
 800affa:	460c      	mov	r4, r1
 800affc:	b913      	cbnz	r3, 800b004 <_fflush_r+0x10>
 800affe:	2500      	movs	r5, #0
 800b000:	4628      	mov	r0, r5
 800b002:	bd38      	pop	{r3, r4, r5, pc}
 800b004:	b118      	cbz	r0, 800b00e <_fflush_r+0x1a>
 800b006:	6a03      	ldr	r3, [r0, #32]
 800b008:	b90b      	cbnz	r3, 800b00e <_fflush_r+0x1a>
 800b00a:	f7fd fa75 	bl	80084f8 <__sinit>
 800b00e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d0f3      	beq.n	800affe <_fflush_r+0xa>
 800b016:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b018:	07d0      	lsls	r0, r2, #31
 800b01a:	d404      	bmi.n	800b026 <_fflush_r+0x32>
 800b01c:	0599      	lsls	r1, r3, #22
 800b01e:	d402      	bmi.n	800b026 <_fflush_r+0x32>
 800b020:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b022:	f7fd fb80 	bl	8008726 <__retarget_lock_acquire_recursive>
 800b026:	4628      	mov	r0, r5
 800b028:	4621      	mov	r1, r4
 800b02a:	f7ff ff5f 	bl	800aeec <__sflush_r>
 800b02e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b030:	07da      	lsls	r2, r3, #31
 800b032:	4605      	mov	r5, r0
 800b034:	d4e4      	bmi.n	800b000 <_fflush_r+0xc>
 800b036:	89a3      	ldrh	r3, [r4, #12]
 800b038:	059b      	lsls	r3, r3, #22
 800b03a:	d4e1      	bmi.n	800b000 <_fflush_r+0xc>
 800b03c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b03e:	f7fd fb73 	bl	8008728 <__retarget_lock_release_recursive>
 800b042:	e7dd      	b.n	800b000 <_fflush_r+0xc>

0800b044 <memmove>:
 800b044:	4288      	cmp	r0, r1
 800b046:	b510      	push	{r4, lr}
 800b048:	eb01 0402 	add.w	r4, r1, r2
 800b04c:	d902      	bls.n	800b054 <memmove+0x10>
 800b04e:	4284      	cmp	r4, r0
 800b050:	4623      	mov	r3, r4
 800b052:	d807      	bhi.n	800b064 <memmove+0x20>
 800b054:	1e43      	subs	r3, r0, #1
 800b056:	42a1      	cmp	r1, r4
 800b058:	d008      	beq.n	800b06c <memmove+0x28>
 800b05a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b05e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b062:	e7f8      	b.n	800b056 <memmove+0x12>
 800b064:	4402      	add	r2, r0
 800b066:	4601      	mov	r1, r0
 800b068:	428a      	cmp	r2, r1
 800b06a:	d100      	bne.n	800b06e <memmove+0x2a>
 800b06c:	bd10      	pop	{r4, pc}
 800b06e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b072:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b076:	e7f7      	b.n	800b068 <memmove+0x24>

0800b078 <strncmp>:
 800b078:	b510      	push	{r4, lr}
 800b07a:	b16a      	cbz	r2, 800b098 <strncmp+0x20>
 800b07c:	3901      	subs	r1, #1
 800b07e:	1884      	adds	r4, r0, r2
 800b080:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b084:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b088:	429a      	cmp	r2, r3
 800b08a:	d103      	bne.n	800b094 <strncmp+0x1c>
 800b08c:	42a0      	cmp	r0, r4
 800b08e:	d001      	beq.n	800b094 <strncmp+0x1c>
 800b090:	2a00      	cmp	r2, #0
 800b092:	d1f5      	bne.n	800b080 <strncmp+0x8>
 800b094:	1ad0      	subs	r0, r2, r3
 800b096:	bd10      	pop	{r4, pc}
 800b098:	4610      	mov	r0, r2
 800b09a:	e7fc      	b.n	800b096 <strncmp+0x1e>

0800b09c <_sbrk_r>:
 800b09c:	b538      	push	{r3, r4, r5, lr}
 800b09e:	4d06      	ldr	r5, [pc, #24]	@ (800b0b8 <_sbrk_r+0x1c>)
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	4604      	mov	r4, r0
 800b0a4:	4608      	mov	r0, r1
 800b0a6:	602b      	str	r3, [r5, #0]
 800b0a8:	f7f7 fea8 	bl	8002dfc <_sbrk>
 800b0ac:	1c43      	adds	r3, r0, #1
 800b0ae:	d102      	bne.n	800b0b6 <_sbrk_r+0x1a>
 800b0b0:	682b      	ldr	r3, [r5, #0]
 800b0b2:	b103      	cbz	r3, 800b0b6 <_sbrk_r+0x1a>
 800b0b4:	6023      	str	r3, [r4, #0]
 800b0b6:	bd38      	pop	{r3, r4, r5, pc}
 800b0b8:	20000bf0 	.word	0x20000bf0

0800b0bc <memcpy>:
 800b0bc:	440a      	add	r2, r1
 800b0be:	4291      	cmp	r1, r2
 800b0c0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800b0c4:	d100      	bne.n	800b0c8 <memcpy+0xc>
 800b0c6:	4770      	bx	lr
 800b0c8:	b510      	push	{r4, lr}
 800b0ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b0ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b0d2:	4291      	cmp	r1, r2
 800b0d4:	d1f9      	bne.n	800b0ca <memcpy+0xe>
 800b0d6:	bd10      	pop	{r4, pc}

0800b0d8 <nan>:
 800b0d8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b0e0 <nan+0x8>
 800b0dc:	4770      	bx	lr
 800b0de:	bf00      	nop
 800b0e0:	00000000 	.word	0x00000000
 800b0e4:	7ff80000 	.word	0x7ff80000

0800b0e8 <__assert_func>:
 800b0e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b0ea:	4614      	mov	r4, r2
 800b0ec:	461a      	mov	r2, r3
 800b0ee:	4b09      	ldr	r3, [pc, #36]	@ (800b114 <__assert_func+0x2c>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	4605      	mov	r5, r0
 800b0f4:	68d8      	ldr	r0, [r3, #12]
 800b0f6:	b954      	cbnz	r4, 800b10e <__assert_func+0x26>
 800b0f8:	4b07      	ldr	r3, [pc, #28]	@ (800b118 <__assert_func+0x30>)
 800b0fa:	461c      	mov	r4, r3
 800b0fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b100:	9100      	str	r1, [sp, #0]
 800b102:	462b      	mov	r3, r5
 800b104:	4905      	ldr	r1, [pc, #20]	@ (800b11c <__assert_func+0x34>)
 800b106:	f000 fba7 	bl	800b858 <fiprintf>
 800b10a:	f000 fbb7 	bl	800b87c <abort>
 800b10e:	4b04      	ldr	r3, [pc, #16]	@ (800b120 <__assert_func+0x38>)
 800b110:	e7f4      	b.n	800b0fc <__assert_func+0x14>
 800b112:	bf00      	nop
 800b114:	20000018 	.word	0x20000018
 800b118:	0800c225 	.word	0x0800c225
 800b11c:	0800c1f7 	.word	0x0800c1f7
 800b120:	0800c1ea 	.word	0x0800c1ea

0800b124 <_calloc_r>:
 800b124:	b570      	push	{r4, r5, r6, lr}
 800b126:	fba1 5402 	umull	r5, r4, r1, r2
 800b12a:	b93c      	cbnz	r4, 800b13c <_calloc_r+0x18>
 800b12c:	4629      	mov	r1, r5
 800b12e:	f7fe f9c3 	bl	80094b8 <_malloc_r>
 800b132:	4606      	mov	r6, r0
 800b134:	b928      	cbnz	r0, 800b142 <_calloc_r+0x1e>
 800b136:	2600      	movs	r6, #0
 800b138:	4630      	mov	r0, r6
 800b13a:	bd70      	pop	{r4, r5, r6, pc}
 800b13c:	220c      	movs	r2, #12
 800b13e:	6002      	str	r2, [r0, #0]
 800b140:	e7f9      	b.n	800b136 <_calloc_r+0x12>
 800b142:	462a      	mov	r2, r5
 800b144:	4621      	mov	r1, r4
 800b146:	f7fd fa70 	bl	800862a <memset>
 800b14a:	e7f5      	b.n	800b138 <_calloc_r+0x14>

0800b14c <rshift>:
 800b14c:	6903      	ldr	r3, [r0, #16]
 800b14e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b152:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b156:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b15a:	f100 0414 	add.w	r4, r0, #20
 800b15e:	dd45      	ble.n	800b1ec <rshift+0xa0>
 800b160:	f011 011f 	ands.w	r1, r1, #31
 800b164:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b168:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b16c:	d10c      	bne.n	800b188 <rshift+0x3c>
 800b16e:	f100 0710 	add.w	r7, r0, #16
 800b172:	4629      	mov	r1, r5
 800b174:	42b1      	cmp	r1, r6
 800b176:	d334      	bcc.n	800b1e2 <rshift+0x96>
 800b178:	1a9b      	subs	r3, r3, r2
 800b17a:	009b      	lsls	r3, r3, #2
 800b17c:	1eea      	subs	r2, r5, #3
 800b17e:	4296      	cmp	r6, r2
 800b180:	bf38      	it	cc
 800b182:	2300      	movcc	r3, #0
 800b184:	4423      	add	r3, r4
 800b186:	e015      	b.n	800b1b4 <rshift+0x68>
 800b188:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b18c:	f1c1 0820 	rsb	r8, r1, #32
 800b190:	40cf      	lsrs	r7, r1
 800b192:	f105 0e04 	add.w	lr, r5, #4
 800b196:	46a1      	mov	r9, r4
 800b198:	4576      	cmp	r6, lr
 800b19a:	46f4      	mov	ip, lr
 800b19c:	d815      	bhi.n	800b1ca <rshift+0x7e>
 800b19e:	1a9a      	subs	r2, r3, r2
 800b1a0:	0092      	lsls	r2, r2, #2
 800b1a2:	3a04      	subs	r2, #4
 800b1a4:	3501      	adds	r5, #1
 800b1a6:	42ae      	cmp	r6, r5
 800b1a8:	bf38      	it	cc
 800b1aa:	2200      	movcc	r2, #0
 800b1ac:	18a3      	adds	r3, r4, r2
 800b1ae:	50a7      	str	r7, [r4, r2]
 800b1b0:	b107      	cbz	r7, 800b1b4 <rshift+0x68>
 800b1b2:	3304      	adds	r3, #4
 800b1b4:	1b1a      	subs	r2, r3, r4
 800b1b6:	42a3      	cmp	r3, r4
 800b1b8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b1bc:	bf08      	it	eq
 800b1be:	2300      	moveq	r3, #0
 800b1c0:	6102      	str	r2, [r0, #16]
 800b1c2:	bf08      	it	eq
 800b1c4:	6143      	streq	r3, [r0, #20]
 800b1c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b1ca:	f8dc c000 	ldr.w	ip, [ip]
 800b1ce:	fa0c fc08 	lsl.w	ip, ip, r8
 800b1d2:	ea4c 0707 	orr.w	r7, ip, r7
 800b1d6:	f849 7b04 	str.w	r7, [r9], #4
 800b1da:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b1de:	40cf      	lsrs	r7, r1
 800b1e0:	e7da      	b.n	800b198 <rshift+0x4c>
 800b1e2:	f851 cb04 	ldr.w	ip, [r1], #4
 800b1e6:	f847 cf04 	str.w	ip, [r7, #4]!
 800b1ea:	e7c3      	b.n	800b174 <rshift+0x28>
 800b1ec:	4623      	mov	r3, r4
 800b1ee:	e7e1      	b.n	800b1b4 <rshift+0x68>

0800b1f0 <__hexdig_fun>:
 800b1f0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b1f4:	2b09      	cmp	r3, #9
 800b1f6:	d802      	bhi.n	800b1fe <__hexdig_fun+0xe>
 800b1f8:	3820      	subs	r0, #32
 800b1fa:	b2c0      	uxtb	r0, r0
 800b1fc:	4770      	bx	lr
 800b1fe:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b202:	2b05      	cmp	r3, #5
 800b204:	d801      	bhi.n	800b20a <__hexdig_fun+0x1a>
 800b206:	3847      	subs	r0, #71	@ 0x47
 800b208:	e7f7      	b.n	800b1fa <__hexdig_fun+0xa>
 800b20a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b20e:	2b05      	cmp	r3, #5
 800b210:	d801      	bhi.n	800b216 <__hexdig_fun+0x26>
 800b212:	3827      	subs	r0, #39	@ 0x27
 800b214:	e7f1      	b.n	800b1fa <__hexdig_fun+0xa>
 800b216:	2000      	movs	r0, #0
 800b218:	4770      	bx	lr
	...

0800b21c <__gethex>:
 800b21c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b220:	b085      	sub	sp, #20
 800b222:	468a      	mov	sl, r1
 800b224:	9302      	str	r3, [sp, #8]
 800b226:	680b      	ldr	r3, [r1, #0]
 800b228:	9001      	str	r0, [sp, #4]
 800b22a:	4690      	mov	r8, r2
 800b22c:	1c9c      	adds	r4, r3, #2
 800b22e:	46a1      	mov	r9, r4
 800b230:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b234:	2830      	cmp	r0, #48	@ 0x30
 800b236:	d0fa      	beq.n	800b22e <__gethex+0x12>
 800b238:	eba9 0303 	sub.w	r3, r9, r3
 800b23c:	f1a3 0b02 	sub.w	fp, r3, #2
 800b240:	f7ff ffd6 	bl	800b1f0 <__hexdig_fun>
 800b244:	4605      	mov	r5, r0
 800b246:	2800      	cmp	r0, #0
 800b248:	d168      	bne.n	800b31c <__gethex+0x100>
 800b24a:	49a0      	ldr	r1, [pc, #640]	@ (800b4cc <__gethex+0x2b0>)
 800b24c:	2201      	movs	r2, #1
 800b24e:	4648      	mov	r0, r9
 800b250:	f7ff ff12 	bl	800b078 <strncmp>
 800b254:	4607      	mov	r7, r0
 800b256:	2800      	cmp	r0, #0
 800b258:	d167      	bne.n	800b32a <__gethex+0x10e>
 800b25a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b25e:	4626      	mov	r6, r4
 800b260:	f7ff ffc6 	bl	800b1f0 <__hexdig_fun>
 800b264:	2800      	cmp	r0, #0
 800b266:	d062      	beq.n	800b32e <__gethex+0x112>
 800b268:	4623      	mov	r3, r4
 800b26a:	7818      	ldrb	r0, [r3, #0]
 800b26c:	2830      	cmp	r0, #48	@ 0x30
 800b26e:	4699      	mov	r9, r3
 800b270:	f103 0301 	add.w	r3, r3, #1
 800b274:	d0f9      	beq.n	800b26a <__gethex+0x4e>
 800b276:	f7ff ffbb 	bl	800b1f0 <__hexdig_fun>
 800b27a:	fab0 f580 	clz	r5, r0
 800b27e:	096d      	lsrs	r5, r5, #5
 800b280:	f04f 0b01 	mov.w	fp, #1
 800b284:	464a      	mov	r2, r9
 800b286:	4616      	mov	r6, r2
 800b288:	3201      	adds	r2, #1
 800b28a:	7830      	ldrb	r0, [r6, #0]
 800b28c:	f7ff ffb0 	bl	800b1f0 <__hexdig_fun>
 800b290:	2800      	cmp	r0, #0
 800b292:	d1f8      	bne.n	800b286 <__gethex+0x6a>
 800b294:	498d      	ldr	r1, [pc, #564]	@ (800b4cc <__gethex+0x2b0>)
 800b296:	2201      	movs	r2, #1
 800b298:	4630      	mov	r0, r6
 800b29a:	f7ff feed 	bl	800b078 <strncmp>
 800b29e:	2800      	cmp	r0, #0
 800b2a0:	d13f      	bne.n	800b322 <__gethex+0x106>
 800b2a2:	b944      	cbnz	r4, 800b2b6 <__gethex+0x9a>
 800b2a4:	1c74      	adds	r4, r6, #1
 800b2a6:	4622      	mov	r2, r4
 800b2a8:	4616      	mov	r6, r2
 800b2aa:	3201      	adds	r2, #1
 800b2ac:	7830      	ldrb	r0, [r6, #0]
 800b2ae:	f7ff ff9f 	bl	800b1f0 <__hexdig_fun>
 800b2b2:	2800      	cmp	r0, #0
 800b2b4:	d1f8      	bne.n	800b2a8 <__gethex+0x8c>
 800b2b6:	1ba4      	subs	r4, r4, r6
 800b2b8:	00a7      	lsls	r7, r4, #2
 800b2ba:	7833      	ldrb	r3, [r6, #0]
 800b2bc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b2c0:	2b50      	cmp	r3, #80	@ 0x50
 800b2c2:	d13e      	bne.n	800b342 <__gethex+0x126>
 800b2c4:	7873      	ldrb	r3, [r6, #1]
 800b2c6:	2b2b      	cmp	r3, #43	@ 0x2b
 800b2c8:	d033      	beq.n	800b332 <__gethex+0x116>
 800b2ca:	2b2d      	cmp	r3, #45	@ 0x2d
 800b2cc:	d034      	beq.n	800b338 <__gethex+0x11c>
 800b2ce:	1c71      	adds	r1, r6, #1
 800b2d0:	2400      	movs	r4, #0
 800b2d2:	7808      	ldrb	r0, [r1, #0]
 800b2d4:	f7ff ff8c 	bl	800b1f0 <__hexdig_fun>
 800b2d8:	1e43      	subs	r3, r0, #1
 800b2da:	b2db      	uxtb	r3, r3
 800b2dc:	2b18      	cmp	r3, #24
 800b2de:	d830      	bhi.n	800b342 <__gethex+0x126>
 800b2e0:	f1a0 0210 	sub.w	r2, r0, #16
 800b2e4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b2e8:	f7ff ff82 	bl	800b1f0 <__hexdig_fun>
 800b2ec:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800b2f0:	fa5f fc8c 	uxtb.w	ip, ip
 800b2f4:	f1bc 0f18 	cmp.w	ip, #24
 800b2f8:	f04f 030a 	mov.w	r3, #10
 800b2fc:	d91e      	bls.n	800b33c <__gethex+0x120>
 800b2fe:	b104      	cbz	r4, 800b302 <__gethex+0xe6>
 800b300:	4252      	negs	r2, r2
 800b302:	4417      	add	r7, r2
 800b304:	f8ca 1000 	str.w	r1, [sl]
 800b308:	b1ed      	cbz	r5, 800b346 <__gethex+0x12a>
 800b30a:	f1bb 0f00 	cmp.w	fp, #0
 800b30e:	bf0c      	ite	eq
 800b310:	2506      	moveq	r5, #6
 800b312:	2500      	movne	r5, #0
 800b314:	4628      	mov	r0, r5
 800b316:	b005      	add	sp, #20
 800b318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b31c:	2500      	movs	r5, #0
 800b31e:	462c      	mov	r4, r5
 800b320:	e7b0      	b.n	800b284 <__gethex+0x68>
 800b322:	2c00      	cmp	r4, #0
 800b324:	d1c7      	bne.n	800b2b6 <__gethex+0x9a>
 800b326:	4627      	mov	r7, r4
 800b328:	e7c7      	b.n	800b2ba <__gethex+0x9e>
 800b32a:	464e      	mov	r6, r9
 800b32c:	462f      	mov	r7, r5
 800b32e:	2501      	movs	r5, #1
 800b330:	e7c3      	b.n	800b2ba <__gethex+0x9e>
 800b332:	2400      	movs	r4, #0
 800b334:	1cb1      	adds	r1, r6, #2
 800b336:	e7cc      	b.n	800b2d2 <__gethex+0xb6>
 800b338:	2401      	movs	r4, #1
 800b33a:	e7fb      	b.n	800b334 <__gethex+0x118>
 800b33c:	fb03 0002 	mla	r0, r3, r2, r0
 800b340:	e7ce      	b.n	800b2e0 <__gethex+0xc4>
 800b342:	4631      	mov	r1, r6
 800b344:	e7de      	b.n	800b304 <__gethex+0xe8>
 800b346:	eba6 0309 	sub.w	r3, r6, r9
 800b34a:	3b01      	subs	r3, #1
 800b34c:	4629      	mov	r1, r5
 800b34e:	2b07      	cmp	r3, #7
 800b350:	dc0a      	bgt.n	800b368 <__gethex+0x14c>
 800b352:	9801      	ldr	r0, [sp, #4]
 800b354:	f7fe f93c 	bl	80095d0 <_Balloc>
 800b358:	4604      	mov	r4, r0
 800b35a:	b940      	cbnz	r0, 800b36e <__gethex+0x152>
 800b35c:	4b5c      	ldr	r3, [pc, #368]	@ (800b4d0 <__gethex+0x2b4>)
 800b35e:	4602      	mov	r2, r0
 800b360:	21e4      	movs	r1, #228	@ 0xe4
 800b362:	485c      	ldr	r0, [pc, #368]	@ (800b4d4 <__gethex+0x2b8>)
 800b364:	f7ff fec0 	bl	800b0e8 <__assert_func>
 800b368:	3101      	adds	r1, #1
 800b36a:	105b      	asrs	r3, r3, #1
 800b36c:	e7ef      	b.n	800b34e <__gethex+0x132>
 800b36e:	f100 0a14 	add.w	sl, r0, #20
 800b372:	2300      	movs	r3, #0
 800b374:	4655      	mov	r5, sl
 800b376:	469b      	mov	fp, r3
 800b378:	45b1      	cmp	r9, r6
 800b37a:	d337      	bcc.n	800b3ec <__gethex+0x1d0>
 800b37c:	f845 bb04 	str.w	fp, [r5], #4
 800b380:	eba5 050a 	sub.w	r5, r5, sl
 800b384:	10ad      	asrs	r5, r5, #2
 800b386:	6125      	str	r5, [r4, #16]
 800b388:	4658      	mov	r0, fp
 800b38a:	f7fe fa13 	bl	80097b4 <__hi0bits>
 800b38e:	016d      	lsls	r5, r5, #5
 800b390:	f8d8 6000 	ldr.w	r6, [r8]
 800b394:	1a2d      	subs	r5, r5, r0
 800b396:	42b5      	cmp	r5, r6
 800b398:	dd54      	ble.n	800b444 <__gethex+0x228>
 800b39a:	1bad      	subs	r5, r5, r6
 800b39c:	4629      	mov	r1, r5
 800b39e:	4620      	mov	r0, r4
 800b3a0:	f7fe fda7 	bl	8009ef2 <__any_on>
 800b3a4:	4681      	mov	r9, r0
 800b3a6:	b178      	cbz	r0, 800b3c8 <__gethex+0x1ac>
 800b3a8:	1e6b      	subs	r3, r5, #1
 800b3aa:	1159      	asrs	r1, r3, #5
 800b3ac:	f003 021f 	and.w	r2, r3, #31
 800b3b0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b3b4:	f04f 0901 	mov.w	r9, #1
 800b3b8:	fa09 f202 	lsl.w	r2, r9, r2
 800b3bc:	420a      	tst	r2, r1
 800b3be:	d003      	beq.n	800b3c8 <__gethex+0x1ac>
 800b3c0:	454b      	cmp	r3, r9
 800b3c2:	dc36      	bgt.n	800b432 <__gethex+0x216>
 800b3c4:	f04f 0902 	mov.w	r9, #2
 800b3c8:	4629      	mov	r1, r5
 800b3ca:	4620      	mov	r0, r4
 800b3cc:	f7ff febe 	bl	800b14c <rshift>
 800b3d0:	442f      	add	r7, r5
 800b3d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b3d6:	42bb      	cmp	r3, r7
 800b3d8:	da42      	bge.n	800b460 <__gethex+0x244>
 800b3da:	9801      	ldr	r0, [sp, #4]
 800b3dc:	4621      	mov	r1, r4
 800b3de:	f7fe f937 	bl	8009650 <_Bfree>
 800b3e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	6013      	str	r3, [r2, #0]
 800b3e8:	25a3      	movs	r5, #163	@ 0xa3
 800b3ea:	e793      	b.n	800b314 <__gethex+0xf8>
 800b3ec:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b3f0:	2a2e      	cmp	r2, #46	@ 0x2e
 800b3f2:	d012      	beq.n	800b41a <__gethex+0x1fe>
 800b3f4:	2b20      	cmp	r3, #32
 800b3f6:	d104      	bne.n	800b402 <__gethex+0x1e6>
 800b3f8:	f845 bb04 	str.w	fp, [r5], #4
 800b3fc:	f04f 0b00 	mov.w	fp, #0
 800b400:	465b      	mov	r3, fp
 800b402:	7830      	ldrb	r0, [r6, #0]
 800b404:	9303      	str	r3, [sp, #12]
 800b406:	f7ff fef3 	bl	800b1f0 <__hexdig_fun>
 800b40a:	9b03      	ldr	r3, [sp, #12]
 800b40c:	f000 000f 	and.w	r0, r0, #15
 800b410:	4098      	lsls	r0, r3
 800b412:	ea4b 0b00 	orr.w	fp, fp, r0
 800b416:	3304      	adds	r3, #4
 800b418:	e7ae      	b.n	800b378 <__gethex+0x15c>
 800b41a:	45b1      	cmp	r9, r6
 800b41c:	d8ea      	bhi.n	800b3f4 <__gethex+0x1d8>
 800b41e:	492b      	ldr	r1, [pc, #172]	@ (800b4cc <__gethex+0x2b0>)
 800b420:	9303      	str	r3, [sp, #12]
 800b422:	2201      	movs	r2, #1
 800b424:	4630      	mov	r0, r6
 800b426:	f7ff fe27 	bl	800b078 <strncmp>
 800b42a:	9b03      	ldr	r3, [sp, #12]
 800b42c:	2800      	cmp	r0, #0
 800b42e:	d1e1      	bne.n	800b3f4 <__gethex+0x1d8>
 800b430:	e7a2      	b.n	800b378 <__gethex+0x15c>
 800b432:	1ea9      	subs	r1, r5, #2
 800b434:	4620      	mov	r0, r4
 800b436:	f7fe fd5c 	bl	8009ef2 <__any_on>
 800b43a:	2800      	cmp	r0, #0
 800b43c:	d0c2      	beq.n	800b3c4 <__gethex+0x1a8>
 800b43e:	f04f 0903 	mov.w	r9, #3
 800b442:	e7c1      	b.n	800b3c8 <__gethex+0x1ac>
 800b444:	da09      	bge.n	800b45a <__gethex+0x23e>
 800b446:	1b75      	subs	r5, r6, r5
 800b448:	4621      	mov	r1, r4
 800b44a:	9801      	ldr	r0, [sp, #4]
 800b44c:	462a      	mov	r2, r5
 800b44e:	f7fe fb17 	bl	8009a80 <__lshift>
 800b452:	1b7f      	subs	r7, r7, r5
 800b454:	4604      	mov	r4, r0
 800b456:	f100 0a14 	add.w	sl, r0, #20
 800b45a:	f04f 0900 	mov.w	r9, #0
 800b45e:	e7b8      	b.n	800b3d2 <__gethex+0x1b6>
 800b460:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b464:	42bd      	cmp	r5, r7
 800b466:	dd6f      	ble.n	800b548 <__gethex+0x32c>
 800b468:	1bed      	subs	r5, r5, r7
 800b46a:	42ae      	cmp	r6, r5
 800b46c:	dc34      	bgt.n	800b4d8 <__gethex+0x2bc>
 800b46e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b472:	2b02      	cmp	r3, #2
 800b474:	d022      	beq.n	800b4bc <__gethex+0x2a0>
 800b476:	2b03      	cmp	r3, #3
 800b478:	d024      	beq.n	800b4c4 <__gethex+0x2a8>
 800b47a:	2b01      	cmp	r3, #1
 800b47c:	d115      	bne.n	800b4aa <__gethex+0x28e>
 800b47e:	42ae      	cmp	r6, r5
 800b480:	d113      	bne.n	800b4aa <__gethex+0x28e>
 800b482:	2e01      	cmp	r6, #1
 800b484:	d10b      	bne.n	800b49e <__gethex+0x282>
 800b486:	9a02      	ldr	r2, [sp, #8]
 800b488:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b48c:	6013      	str	r3, [r2, #0]
 800b48e:	2301      	movs	r3, #1
 800b490:	6123      	str	r3, [r4, #16]
 800b492:	f8ca 3000 	str.w	r3, [sl]
 800b496:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b498:	2562      	movs	r5, #98	@ 0x62
 800b49a:	601c      	str	r4, [r3, #0]
 800b49c:	e73a      	b.n	800b314 <__gethex+0xf8>
 800b49e:	1e71      	subs	r1, r6, #1
 800b4a0:	4620      	mov	r0, r4
 800b4a2:	f7fe fd26 	bl	8009ef2 <__any_on>
 800b4a6:	2800      	cmp	r0, #0
 800b4a8:	d1ed      	bne.n	800b486 <__gethex+0x26a>
 800b4aa:	9801      	ldr	r0, [sp, #4]
 800b4ac:	4621      	mov	r1, r4
 800b4ae:	f7fe f8cf 	bl	8009650 <_Bfree>
 800b4b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	6013      	str	r3, [r2, #0]
 800b4b8:	2550      	movs	r5, #80	@ 0x50
 800b4ba:	e72b      	b.n	800b314 <__gethex+0xf8>
 800b4bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d1f3      	bne.n	800b4aa <__gethex+0x28e>
 800b4c2:	e7e0      	b.n	800b486 <__gethex+0x26a>
 800b4c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d1dd      	bne.n	800b486 <__gethex+0x26a>
 800b4ca:	e7ee      	b.n	800b4aa <__gethex+0x28e>
 800b4cc:	0800c078 	.word	0x0800c078
 800b4d0:	0800bf11 	.word	0x0800bf11
 800b4d4:	0800c226 	.word	0x0800c226
 800b4d8:	1e6f      	subs	r7, r5, #1
 800b4da:	f1b9 0f00 	cmp.w	r9, #0
 800b4de:	d130      	bne.n	800b542 <__gethex+0x326>
 800b4e0:	b127      	cbz	r7, 800b4ec <__gethex+0x2d0>
 800b4e2:	4639      	mov	r1, r7
 800b4e4:	4620      	mov	r0, r4
 800b4e6:	f7fe fd04 	bl	8009ef2 <__any_on>
 800b4ea:	4681      	mov	r9, r0
 800b4ec:	117a      	asrs	r2, r7, #5
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b4f4:	f007 071f 	and.w	r7, r7, #31
 800b4f8:	40bb      	lsls	r3, r7
 800b4fa:	4213      	tst	r3, r2
 800b4fc:	4629      	mov	r1, r5
 800b4fe:	4620      	mov	r0, r4
 800b500:	bf18      	it	ne
 800b502:	f049 0902 	orrne.w	r9, r9, #2
 800b506:	f7ff fe21 	bl	800b14c <rshift>
 800b50a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b50e:	1b76      	subs	r6, r6, r5
 800b510:	2502      	movs	r5, #2
 800b512:	f1b9 0f00 	cmp.w	r9, #0
 800b516:	d047      	beq.n	800b5a8 <__gethex+0x38c>
 800b518:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b51c:	2b02      	cmp	r3, #2
 800b51e:	d015      	beq.n	800b54c <__gethex+0x330>
 800b520:	2b03      	cmp	r3, #3
 800b522:	d017      	beq.n	800b554 <__gethex+0x338>
 800b524:	2b01      	cmp	r3, #1
 800b526:	d109      	bne.n	800b53c <__gethex+0x320>
 800b528:	f019 0f02 	tst.w	r9, #2
 800b52c:	d006      	beq.n	800b53c <__gethex+0x320>
 800b52e:	f8da 3000 	ldr.w	r3, [sl]
 800b532:	ea49 0903 	orr.w	r9, r9, r3
 800b536:	f019 0f01 	tst.w	r9, #1
 800b53a:	d10e      	bne.n	800b55a <__gethex+0x33e>
 800b53c:	f045 0510 	orr.w	r5, r5, #16
 800b540:	e032      	b.n	800b5a8 <__gethex+0x38c>
 800b542:	f04f 0901 	mov.w	r9, #1
 800b546:	e7d1      	b.n	800b4ec <__gethex+0x2d0>
 800b548:	2501      	movs	r5, #1
 800b54a:	e7e2      	b.n	800b512 <__gethex+0x2f6>
 800b54c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b54e:	f1c3 0301 	rsb	r3, r3, #1
 800b552:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b554:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b556:	2b00      	cmp	r3, #0
 800b558:	d0f0      	beq.n	800b53c <__gethex+0x320>
 800b55a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b55e:	f104 0314 	add.w	r3, r4, #20
 800b562:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b566:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b56a:	f04f 0c00 	mov.w	ip, #0
 800b56e:	4618      	mov	r0, r3
 800b570:	f853 2b04 	ldr.w	r2, [r3], #4
 800b574:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800b578:	d01b      	beq.n	800b5b2 <__gethex+0x396>
 800b57a:	3201      	adds	r2, #1
 800b57c:	6002      	str	r2, [r0, #0]
 800b57e:	2d02      	cmp	r5, #2
 800b580:	f104 0314 	add.w	r3, r4, #20
 800b584:	d13c      	bne.n	800b600 <__gethex+0x3e4>
 800b586:	f8d8 2000 	ldr.w	r2, [r8]
 800b58a:	3a01      	subs	r2, #1
 800b58c:	42b2      	cmp	r2, r6
 800b58e:	d109      	bne.n	800b5a4 <__gethex+0x388>
 800b590:	1171      	asrs	r1, r6, #5
 800b592:	2201      	movs	r2, #1
 800b594:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b598:	f006 061f 	and.w	r6, r6, #31
 800b59c:	fa02 f606 	lsl.w	r6, r2, r6
 800b5a0:	421e      	tst	r6, r3
 800b5a2:	d13a      	bne.n	800b61a <__gethex+0x3fe>
 800b5a4:	f045 0520 	orr.w	r5, r5, #32
 800b5a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b5aa:	601c      	str	r4, [r3, #0]
 800b5ac:	9b02      	ldr	r3, [sp, #8]
 800b5ae:	601f      	str	r7, [r3, #0]
 800b5b0:	e6b0      	b.n	800b314 <__gethex+0xf8>
 800b5b2:	4299      	cmp	r1, r3
 800b5b4:	f843 cc04 	str.w	ip, [r3, #-4]
 800b5b8:	d8d9      	bhi.n	800b56e <__gethex+0x352>
 800b5ba:	68a3      	ldr	r3, [r4, #8]
 800b5bc:	459b      	cmp	fp, r3
 800b5be:	db17      	blt.n	800b5f0 <__gethex+0x3d4>
 800b5c0:	6861      	ldr	r1, [r4, #4]
 800b5c2:	9801      	ldr	r0, [sp, #4]
 800b5c4:	3101      	adds	r1, #1
 800b5c6:	f7fe f803 	bl	80095d0 <_Balloc>
 800b5ca:	4681      	mov	r9, r0
 800b5cc:	b918      	cbnz	r0, 800b5d6 <__gethex+0x3ba>
 800b5ce:	4b1a      	ldr	r3, [pc, #104]	@ (800b638 <__gethex+0x41c>)
 800b5d0:	4602      	mov	r2, r0
 800b5d2:	2184      	movs	r1, #132	@ 0x84
 800b5d4:	e6c5      	b.n	800b362 <__gethex+0x146>
 800b5d6:	6922      	ldr	r2, [r4, #16]
 800b5d8:	3202      	adds	r2, #2
 800b5da:	f104 010c 	add.w	r1, r4, #12
 800b5de:	0092      	lsls	r2, r2, #2
 800b5e0:	300c      	adds	r0, #12
 800b5e2:	f7ff fd6b 	bl	800b0bc <memcpy>
 800b5e6:	4621      	mov	r1, r4
 800b5e8:	9801      	ldr	r0, [sp, #4]
 800b5ea:	f7fe f831 	bl	8009650 <_Bfree>
 800b5ee:	464c      	mov	r4, r9
 800b5f0:	6923      	ldr	r3, [r4, #16]
 800b5f2:	1c5a      	adds	r2, r3, #1
 800b5f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b5f8:	6122      	str	r2, [r4, #16]
 800b5fa:	2201      	movs	r2, #1
 800b5fc:	615a      	str	r2, [r3, #20]
 800b5fe:	e7be      	b.n	800b57e <__gethex+0x362>
 800b600:	6922      	ldr	r2, [r4, #16]
 800b602:	455a      	cmp	r2, fp
 800b604:	dd0b      	ble.n	800b61e <__gethex+0x402>
 800b606:	2101      	movs	r1, #1
 800b608:	4620      	mov	r0, r4
 800b60a:	f7ff fd9f 	bl	800b14c <rshift>
 800b60e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b612:	3701      	adds	r7, #1
 800b614:	42bb      	cmp	r3, r7
 800b616:	f6ff aee0 	blt.w	800b3da <__gethex+0x1be>
 800b61a:	2501      	movs	r5, #1
 800b61c:	e7c2      	b.n	800b5a4 <__gethex+0x388>
 800b61e:	f016 061f 	ands.w	r6, r6, #31
 800b622:	d0fa      	beq.n	800b61a <__gethex+0x3fe>
 800b624:	4453      	add	r3, sl
 800b626:	f1c6 0620 	rsb	r6, r6, #32
 800b62a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b62e:	f7fe f8c1 	bl	80097b4 <__hi0bits>
 800b632:	42b0      	cmp	r0, r6
 800b634:	dbe7      	blt.n	800b606 <__gethex+0x3ea>
 800b636:	e7f0      	b.n	800b61a <__gethex+0x3fe>
 800b638:	0800bf11 	.word	0x0800bf11

0800b63c <L_shift>:
 800b63c:	f1c2 0208 	rsb	r2, r2, #8
 800b640:	0092      	lsls	r2, r2, #2
 800b642:	b570      	push	{r4, r5, r6, lr}
 800b644:	f1c2 0620 	rsb	r6, r2, #32
 800b648:	6843      	ldr	r3, [r0, #4]
 800b64a:	6804      	ldr	r4, [r0, #0]
 800b64c:	fa03 f506 	lsl.w	r5, r3, r6
 800b650:	432c      	orrs	r4, r5
 800b652:	40d3      	lsrs	r3, r2
 800b654:	6004      	str	r4, [r0, #0]
 800b656:	f840 3f04 	str.w	r3, [r0, #4]!
 800b65a:	4288      	cmp	r0, r1
 800b65c:	d3f4      	bcc.n	800b648 <L_shift+0xc>
 800b65e:	bd70      	pop	{r4, r5, r6, pc}

0800b660 <__match>:
 800b660:	b530      	push	{r4, r5, lr}
 800b662:	6803      	ldr	r3, [r0, #0]
 800b664:	3301      	adds	r3, #1
 800b666:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b66a:	b914      	cbnz	r4, 800b672 <__match+0x12>
 800b66c:	6003      	str	r3, [r0, #0]
 800b66e:	2001      	movs	r0, #1
 800b670:	bd30      	pop	{r4, r5, pc}
 800b672:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b676:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b67a:	2d19      	cmp	r5, #25
 800b67c:	bf98      	it	ls
 800b67e:	3220      	addls	r2, #32
 800b680:	42a2      	cmp	r2, r4
 800b682:	d0f0      	beq.n	800b666 <__match+0x6>
 800b684:	2000      	movs	r0, #0
 800b686:	e7f3      	b.n	800b670 <__match+0x10>

0800b688 <__hexnan>:
 800b688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b68c:	680b      	ldr	r3, [r1, #0]
 800b68e:	6801      	ldr	r1, [r0, #0]
 800b690:	115e      	asrs	r6, r3, #5
 800b692:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b696:	f013 031f 	ands.w	r3, r3, #31
 800b69a:	b087      	sub	sp, #28
 800b69c:	bf18      	it	ne
 800b69e:	3604      	addne	r6, #4
 800b6a0:	2500      	movs	r5, #0
 800b6a2:	1f37      	subs	r7, r6, #4
 800b6a4:	4682      	mov	sl, r0
 800b6a6:	4690      	mov	r8, r2
 800b6a8:	9301      	str	r3, [sp, #4]
 800b6aa:	f846 5c04 	str.w	r5, [r6, #-4]
 800b6ae:	46b9      	mov	r9, r7
 800b6b0:	463c      	mov	r4, r7
 800b6b2:	9502      	str	r5, [sp, #8]
 800b6b4:	46ab      	mov	fp, r5
 800b6b6:	784a      	ldrb	r2, [r1, #1]
 800b6b8:	1c4b      	adds	r3, r1, #1
 800b6ba:	9303      	str	r3, [sp, #12]
 800b6bc:	b342      	cbz	r2, 800b710 <__hexnan+0x88>
 800b6be:	4610      	mov	r0, r2
 800b6c0:	9105      	str	r1, [sp, #20]
 800b6c2:	9204      	str	r2, [sp, #16]
 800b6c4:	f7ff fd94 	bl	800b1f0 <__hexdig_fun>
 800b6c8:	2800      	cmp	r0, #0
 800b6ca:	d151      	bne.n	800b770 <__hexnan+0xe8>
 800b6cc:	9a04      	ldr	r2, [sp, #16]
 800b6ce:	9905      	ldr	r1, [sp, #20]
 800b6d0:	2a20      	cmp	r2, #32
 800b6d2:	d818      	bhi.n	800b706 <__hexnan+0x7e>
 800b6d4:	9b02      	ldr	r3, [sp, #8]
 800b6d6:	459b      	cmp	fp, r3
 800b6d8:	dd13      	ble.n	800b702 <__hexnan+0x7a>
 800b6da:	454c      	cmp	r4, r9
 800b6dc:	d206      	bcs.n	800b6ec <__hexnan+0x64>
 800b6de:	2d07      	cmp	r5, #7
 800b6e0:	dc04      	bgt.n	800b6ec <__hexnan+0x64>
 800b6e2:	462a      	mov	r2, r5
 800b6e4:	4649      	mov	r1, r9
 800b6e6:	4620      	mov	r0, r4
 800b6e8:	f7ff ffa8 	bl	800b63c <L_shift>
 800b6ec:	4544      	cmp	r4, r8
 800b6ee:	d952      	bls.n	800b796 <__hexnan+0x10e>
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	f1a4 0904 	sub.w	r9, r4, #4
 800b6f6:	f844 3c04 	str.w	r3, [r4, #-4]
 800b6fa:	f8cd b008 	str.w	fp, [sp, #8]
 800b6fe:	464c      	mov	r4, r9
 800b700:	461d      	mov	r5, r3
 800b702:	9903      	ldr	r1, [sp, #12]
 800b704:	e7d7      	b.n	800b6b6 <__hexnan+0x2e>
 800b706:	2a29      	cmp	r2, #41	@ 0x29
 800b708:	d157      	bne.n	800b7ba <__hexnan+0x132>
 800b70a:	3102      	adds	r1, #2
 800b70c:	f8ca 1000 	str.w	r1, [sl]
 800b710:	f1bb 0f00 	cmp.w	fp, #0
 800b714:	d051      	beq.n	800b7ba <__hexnan+0x132>
 800b716:	454c      	cmp	r4, r9
 800b718:	d206      	bcs.n	800b728 <__hexnan+0xa0>
 800b71a:	2d07      	cmp	r5, #7
 800b71c:	dc04      	bgt.n	800b728 <__hexnan+0xa0>
 800b71e:	462a      	mov	r2, r5
 800b720:	4649      	mov	r1, r9
 800b722:	4620      	mov	r0, r4
 800b724:	f7ff ff8a 	bl	800b63c <L_shift>
 800b728:	4544      	cmp	r4, r8
 800b72a:	d936      	bls.n	800b79a <__hexnan+0x112>
 800b72c:	f1a8 0204 	sub.w	r2, r8, #4
 800b730:	4623      	mov	r3, r4
 800b732:	f853 1b04 	ldr.w	r1, [r3], #4
 800b736:	f842 1f04 	str.w	r1, [r2, #4]!
 800b73a:	429f      	cmp	r7, r3
 800b73c:	d2f9      	bcs.n	800b732 <__hexnan+0xaa>
 800b73e:	1b3b      	subs	r3, r7, r4
 800b740:	f023 0303 	bic.w	r3, r3, #3
 800b744:	3304      	adds	r3, #4
 800b746:	3401      	adds	r4, #1
 800b748:	3e03      	subs	r6, #3
 800b74a:	42b4      	cmp	r4, r6
 800b74c:	bf88      	it	hi
 800b74e:	2304      	movhi	r3, #4
 800b750:	4443      	add	r3, r8
 800b752:	2200      	movs	r2, #0
 800b754:	f843 2b04 	str.w	r2, [r3], #4
 800b758:	429f      	cmp	r7, r3
 800b75a:	d2fb      	bcs.n	800b754 <__hexnan+0xcc>
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	b91b      	cbnz	r3, 800b768 <__hexnan+0xe0>
 800b760:	4547      	cmp	r7, r8
 800b762:	d128      	bne.n	800b7b6 <__hexnan+0x12e>
 800b764:	2301      	movs	r3, #1
 800b766:	603b      	str	r3, [r7, #0]
 800b768:	2005      	movs	r0, #5
 800b76a:	b007      	add	sp, #28
 800b76c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b770:	3501      	adds	r5, #1
 800b772:	2d08      	cmp	r5, #8
 800b774:	f10b 0b01 	add.w	fp, fp, #1
 800b778:	dd06      	ble.n	800b788 <__hexnan+0x100>
 800b77a:	4544      	cmp	r4, r8
 800b77c:	d9c1      	bls.n	800b702 <__hexnan+0x7a>
 800b77e:	2300      	movs	r3, #0
 800b780:	f844 3c04 	str.w	r3, [r4, #-4]
 800b784:	2501      	movs	r5, #1
 800b786:	3c04      	subs	r4, #4
 800b788:	6822      	ldr	r2, [r4, #0]
 800b78a:	f000 000f 	and.w	r0, r0, #15
 800b78e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b792:	6020      	str	r0, [r4, #0]
 800b794:	e7b5      	b.n	800b702 <__hexnan+0x7a>
 800b796:	2508      	movs	r5, #8
 800b798:	e7b3      	b.n	800b702 <__hexnan+0x7a>
 800b79a:	9b01      	ldr	r3, [sp, #4]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d0dd      	beq.n	800b75c <__hexnan+0xd4>
 800b7a0:	f1c3 0320 	rsb	r3, r3, #32
 800b7a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b7a8:	40da      	lsrs	r2, r3
 800b7aa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b7ae:	4013      	ands	r3, r2
 800b7b0:	f846 3c04 	str.w	r3, [r6, #-4]
 800b7b4:	e7d2      	b.n	800b75c <__hexnan+0xd4>
 800b7b6:	3f04      	subs	r7, #4
 800b7b8:	e7d0      	b.n	800b75c <__hexnan+0xd4>
 800b7ba:	2004      	movs	r0, #4
 800b7bc:	e7d5      	b.n	800b76a <__hexnan+0xe2>

0800b7be <__ascii_mbtowc>:
 800b7be:	b082      	sub	sp, #8
 800b7c0:	b901      	cbnz	r1, 800b7c4 <__ascii_mbtowc+0x6>
 800b7c2:	a901      	add	r1, sp, #4
 800b7c4:	b142      	cbz	r2, 800b7d8 <__ascii_mbtowc+0x1a>
 800b7c6:	b14b      	cbz	r3, 800b7dc <__ascii_mbtowc+0x1e>
 800b7c8:	7813      	ldrb	r3, [r2, #0]
 800b7ca:	600b      	str	r3, [r1, #0]
 800b7cc:	7812      	ldrb	r2, [r2, #0]
 800b7ce:	1e10      	subs	r0, r2, #0
 800b7d0:	bf18      	it	ne
 800b7d2:	2001      	movne	r0, #1
 800b7d4:	b002      	add	sp, #8
 800b7d6:	4770      	bx	lr
 800b7d8:	4610      	mov	r0, r2
 800b7da:	e7fb      	b.n	800b7d4 <__ascii_mbtowc+0x16>
 800b7dc:	f06f 0001 	mvn.w	r0, #1
 800b7e0:	e7f8      	b.n	800b7d4 <__ascii_mbtowc+0x16>

0800b7e2 <_realloc_r>:
 800b7e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7e6:	4680      	mov	r8, r0
 800b7e8:	4615      	mov	r5, r2
 800b7ea:	460c      	mov	r4, r1
 800b7ec:	b921      	cbnz	r1, 800b7f8 <_realloc_r+0x16>
 800b7ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b7f2:	4611      	mov	r1, r2
 800b7f4:	f7fd be60 	b.w	80094b8 <_malloc_r>
 800b7f8:	b92a      	cbnz	r2, 800b806 <_realloc_r+0x24>
 800b7fa:	f7fd fde9 	bl	80093d0 <_free_r>
 800b7fe:	2400      	movs	r4, #0
 800b800:	4620      	mov	r0, r4
 800b802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b806:	f000 f840 	bl	800b88a <_malloc_usable_size_r>
 800b80a:	4285      	cmp	r5, r0
 800b80c:	4606      	mov	r6, r0
 800b80e:	d802      	bhi.n	800b816 <_realloc_r+0x34>
 800b810:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b814:	d8f4      	bhi.n	800b800 <_realloc_r+0x1e>
 800b816:	4629      	mov	r1, r5
 800b818:	4640      	mov	r0, r8
 800b81a:	f7fd fe4d 	bl	80094b8 <_malloc_r>
 800b81e:	4607      	mov	r7, r0
 800b820:	2800      	cmp	r0, #0
 800b822:	d0ec      	beq.n	800b7fe <_realloc_r+0x1c>
 800b824:	42b5      	cmp	r5, r6
 800b826:	462a      	mov	r2, r5
 800b828:	4621      	mov	r1, r4
 800b82a:	bf28      	it	cs
 800b82c:	4632      	movcs	r2, r6
 800b82e:	f7ff fc45 	bl	800b0bc <memcpy>
 800b832:	4621      	mov	r1, r4
 800b834:	4640      	mov	r0, r8
 800b836:	f7fd fdcb 	bl	80093d0 <_free_r>
 800b83a:	463c      	mov	r4, r7
 800b83c:	e7e0      	b.n	800b800 <_realloc_r+0x1e>

0800b83e <__ascii_wctomb>:
 800b83e:	4603      	mov	r3, r0
 800b840:	4608      	mov	r0, r1
 800b842:	b141      	cbz	r1, 800b856 <__ascii_wctomb+0x18>
 800b844:	2aff      	cmp	r2, #255	@ 0xff
 800b846:	d904      	bls.n	800b852 <__ascii_wctomb+0x14>
 800b848:	228a      	movs	r2, #138	@ 0x8a
 800b84a:	601a      	str	r2, [r3, #0]
 800b84c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b850:	4770      	bx	lr
 800b852:	700a      	strb	r2, [r1, #0]
 800b854:	2001      	movs	r0, #1
 800b856:	4770      	bx	lr

0800b858 <fiprintf>:
 800b858:	b40e      	push	{r1, r2, r3}
 800b85a:	b503      	push	{r0, r1, lr}
 800b85c:	4601      	mov	r1, r0
 800b85e:	ab03      	add	r3, sp, #12
 800b860:	4805      	ldr	r0, [pc, #20]	@ (800b878 <fiprintf+0x20>)
 800b862:	f853 2b04 	ldr.w	r2, [r3], #4
 800b866:	6800      	ldr	r0, [r0, #0]
 800b868:	9301      	str	r3, [sp, #4]
 800b86a:	f000 f83f 	bl	800b8ec <_vfiprintf_r>
 800b86e:	b002      	add	sp, #8
 800b870:	f85d eb04 	ldr.w	lr, [sp], #4
 800b874:	b003      	add	sp, #12
 800b876:	4770      	bx	lr
 800b878:	20000018 	.word	0x20000018

0800b87c <abort>:
 800b87c:	b508      	push	{r3, lr}
 800b87e:	2006      	movs	r0, #6
 800b880:	f000 fa08 	bl	800bc94 <raise>
 800b884:	2001      	movs	r0, #1
 800b886:	f7f7 fa41 	bl	8002d0c <_exit>

0800b88a <_malloc_usable_size_r>:
 800b88a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b88e:	1f18      	subs	r0, r3, #4
 800b890:	2b00      	cmp	r3, #0
 800b892:	bfbc      	itt	lt
 800b894:	580b      	ldrlt	r3, [r1, r0]
 800b896:	18c0      	addlt	r0, r0, r3
 800b898:	4770      	bx	lr

0800b89a <__sfputc_r>:
 800b89a:	6893      	ldr	r3, [r2, #8]
 800b89c:	3b01      	subs	r3, #1
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	b410      	push	{r4}
 800b8a2:	6093      	str	r3, [r2, #8]
 800b8a4:	da08      	bge.n	800b8b8 <__sfputc_r+0x1e>
 800b8a6:	6994      	ldr	r4, [r2, #24]
 800b8a8:	42a3      	cmp	r3, r4
 800b8aa:	db01      	blt.n	800b8b0 <__sfputc_r+0x16>
 800b8ac:	290a      	cmp	r1, #10
 800b8ae:	d103      	bne.n	800b8b8 <__sfputc_r+0x1e>
 800b8b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8b4:	f000 b932 	b.w	800bb1c <__swbuf_r>
 800b8b8:	6813      	ldr	r3, [r2, #0]
 800b8ba:	1c58      	adds	r0, r3, #1
 800b8bc:	6010      	str	r0, [r2, #0]
 800b8be:	7019      	strb	r1, [r3, #0]
 800b8c0:	4608      	mov	r0, r1
 800b8c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8c6:	4770      	bx	lr

0800b8c8 <__sfputs_r>:
 800b8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8ca:	4606      	mov	r6, r0
 800b8cc:	460f      	mov	r7, r1
 800b8ce:	4614      	mov	r4, r2
 800b8d0:	18d5      	adds	r5, r2, r3
 800b8d2:	42ac      	cmp	r4, r5
 800b8d4:	d101      	bne.n	800b8da <__sfputs_r+0x12>
 800b8d6:	2000      	movs	r0, #0
 800b8d8:	e007      	b.n	800b8ea <__sfputs_r+0x22>
 800b8da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8de:	463a      	mov	r2, r7
 800b8e0:	4630      	mov	r0, r6
 800b8e2:	f7ff ffda 	bl	800b89a <__sfputc_r>
 800b8e6:	1c43      	adds	r3, r0, #1
 800b8e8:	d1f3      	bne.n	800b8d2 <__sfputs_r+0xa>
 800b8ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b8ec <_vfiprintf_r>:
 800b8ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8f0:	460d      	mov	r5, r1
 800b8f2:	b09d      	sub	sp, #116	@ 0x74
 800b8f4:	4614      	mov	r4, r2
 800b8f6:	4698      	mov	r8, r3
 800b8f8:	4606      	mov	r6, r0
 800b8fa:	b118      	cbz	r0, 800b904 <_vfiprintf_r+0x18>
 800b8fc:	6a03      	ldr	r3, [r0, #32]
 800b8fe:	b90b      	cbnz	r3, 800b904 <_vfiprintf_r+0x18>
 800b900:	f7fc fdfa 	bl	80084f8 <__sinit>
 800b904:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b906:	07d9      	lsls	r1, r3, #31
 800b908:	d405      	bmi.n	800b916 <_vfiprintf_r+0x2a>
 800b90a:	89ab      	ldrh	r3, [r5, #12]
 800b90c:	059a      	lsls	r2, r3, #22
 800b90e:	d402      	bmi.n	800b916 <_vfiprintf_r+0x2a>
 800b910:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b912:	f7fc ff08 	bl	8008726 <__retarget_lock_acquire_recursive>
 800b916:	89ab      	ldrh	r3, [r5, #12]
 800b918:	071b      	lsls	r3, r3, #28
 800b91a:	d501      	bpl.n	800b920 <_vfiprintf_r+0x34>
 800b91c:	692b      	ldr	r3, [r5, #16]
 800b91e:	b99b      	cbnz	r3, 800b948 <_vfiprintf_r+0x5c>
 800b920:	4629      	mov	r1, r5
 800b922:	4630      	mov	r0, r6
 800b924:	f000 f938 	bl	800bb98 <__swsetup_r>
 800b928:	b170      	cbz	r0, 800b948 <_vfiprintf_r+0x5c>
 800b92a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b92c:	07dc      	lsls	r4, r3, #31
 800b92e:	d504      	bpl.n	800b93a <_vfiprintf_r+0x4e>
 800b930:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b934:	b01d      	add	sp, #116	@ 0x74
 800b936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b93a:	89ab      	ldrh	r3, [r5, #12]
 800b93c:	0598      	lsls	r0, r3, #22
 800b93e:	d4f7      	bmi.n	800b930 <_vfiprintf_r+0x44>
 800b940:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b942:	f7fc fef1 	bl	8008728 <__retarget_lock_release_recursive>
 800b946:	e7f3      	b.n	800b930 <_vfiprintf_r+0x44>
 800b948:	2300      	movs	r3, #0
 800b94a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b94c:	2320      	movs	r3, #32
 800b94e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b952:	f8cd 800c 	str.w	r8, [sp, #12]
 800b956:	2330      	movs	r3, #48	@ 0x30
 800b958:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bb08 <_vfiprintf_r+0x21c>
 800b95c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b960:	f04f 0901 	mov.w	r9, #1
 800b964:	4623      	mov	r3, r4
 800b966:	469a      	mov	sl, r3
 800b968:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b96c:	b10a      	cbz	r2, 800b972 <_vfiprintf_r+0x86>
 800b96e:	2a25      	cmp	r2, #37	@ 0x25
 800b970:	d1f9      	bne.n	800b966 <_vfiprintf_r+0x7a>
 800b972:	ebba 0b04 	subs.w	fp, sl, r4
 800b976:	d00b      	beq.n	800b990 <_vfiprintf_r+0xa4>
 800b978:	465b      	mov	r3, fp
 800b97a:	4622      	mov	r2, r4
 800b97c:	4629      	mov	r1, r5
 800b97e:	4630      	mov	r0, r6
 800b980:	f7ff ffa2 	bl	800b8c8 <__sfputs_r>
 800b984:	3001      	adds	r0, #1
 800b986:	f000 80a7 	beq.w	800bad8 <_vfiprintf_r+0x1ec>
 800b98a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b98c:	445a      	add	r2, fp
 800b98e:	9209      	str	r2, [sp, #36]	@ 0x24
 800b990:	f89a 3000 	ldrb.w	r3, [sl]
 800b994:	2b00      	cmp	r3, #0
 800b996:	f000 809f 	beq.w	800bad8 <_vfiprintf_r+0x1ec>
 800b99a:	2300      	movs	r3, #0
 800b99c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b9a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9a4:	f10a 0a01 	add.w	sl, sl, #1
 800b9a8:	9304      	str	r3, [sp, #16]
 800b9aa:	9307      	str	r3, [sp, #28]
 800b9ac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b9b0:	931a      	str	r3, [sp, #104]	@ 0x68
 800b9b2:	4654      	mov	r4, sl
 800b9b4:	2205      	movs	r2, #5
 800b9b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9ba:	4853      	ldr	r0, [pc, #332]	@ (800bb08 <_vfiprintf_r+0x21c>)
 800b9bc:	f7f4 fc18 	bl	80001f0 <memchr>
 800b9c0:	9a04      	ldr	r2, [sp, #16]
 800b9c2:	b9d8      	cbnz	r0, 800b9fc <_vfiprintf_r+0x110>
 800b9c4:	06d1      	lsls	r1, r2, #27
 800b9c6:	bf44      	itt	mi
 800b9c8:	2320      	movmi	r3, #32
 800b9ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b9ce:	0713      	lsls	r3, r2, #28
 800b9d0:	bf44      	itt	mi
 800b9d2:	232b      	movmi	r3, #43	@ 0x2b
 800b9d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b9d8:	f89a 3000 	ldrb.w	r3, [sl]
 800b9dc:	2b2a      	cmp	r3, #42	@ 0x2a
 800b9de:	d015      	beq.n	800ba0c <_vfiprintf_r+0x120>
 800b9e0:	9a07      	ldr	r2, [sp, #28]
 800b9e2:	4654      	mov	r4, sl
 800b9e4:	2000      	movs	r0, #0
 800b9e6:	f04f 0c0a 	mov.w	ip, #10
 800b9ea:	4621      	mov	r1, r4
 800b9ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b9f0:	3b30      	subs	r3, #48	@ 0x30
 800b9f2:	2b09      	cmp	r3, #9
 800b9f4:	d94b      	bls.n	800ba8e <_vfiprintf_r+0x1a2>
 800b9f6:	b1b0      	cbz	r0, 800ba26 <_vfiprintf_r+0x13a>
 800b9f8:	9207      	str	r2, [sp, #28]
 800b9fa:	e014      	b.n	800ba26 <_vfiprintf_r+0x13a>
 800b9fc:	eba0 0308 	sub.w	r3, r0, r8
 800ba00:	fa09 f303 	lsl.w	r3, r9, r3
 800ba04:	4313      	orrs	r3, r2
 800ba06:	9304      	str	r3, [sp, #16]
 800ba08:	46a2      	mov	sl, r4
 800ba0a:	e7d2      	b.n	800b9b2 <_vfiprintf_r+0xc6>
 800ba0c:	9b03      	ldr	r3, [sp, #12]
 800ba0e:	1d19      	adds	r1, r3, #4
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	9103      	str	r1, [sp, #12]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	bfbb      	ittet	lt
 800ba18:	425b      	neglt	r3, r3
 800ba1a:	f042 0202 	orrlt.w	r2, r2, #2
 800ba1e:	9307      	strge	r3, [sp, #28]
 800ba20:	9307      	strlt	r3, [sp, #28]
 800ba22:	bfb8      	it	lt
 800ba24:	9204      	strlt	r2, [sp, #16]
 800ba26:	7823      	ldrb	r3, [r4, #0]
 800ba28:	2b2e      	cmp	r3, #46	@ 0x2e
 800ba2a:	d10a      	bne.n	800ba42 <_vfiprintf_r+0x156>
 800ba2c:	7863      	ldrb	r3, [r4, #1]
 800ba2e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ba30:	d132      	bne.n	800ba98 <_vfiprintf_r+0x1ac>
 800ba32:	9b03      	ldr	r3, [sp, #12]
 800ba34:	1d1a      	adds	r2, r3, #4
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	9203      	str	r2, [sp, #12]
 800ba3a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ba3e:	3402      	adds	r4, #2
 800ba40:	9305      	str	r3, [sp, #20]
 800ba42:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bb18 <_vfiprintf_r+0x22c>
 800ba46:	7821      	ldrb	r1, [r4, #0]
 800ba48:	2203      	movs	r2, #3
 800ba4a:	4650      	mov	r0, sl
 800ba4c:	f7f4 fbd0 	bl	80001f0 <memchr>
 800ba50:	b138      	cbz	r0, 800ba62 <_vfiprintf_r+0x176>
 800ba52:	9b04      	ldr	r3, [sp, #16]
 800ba54:	eba0 000a 	sub.w	r0, r0, sl
 800ba58:	2240      	movs	r2, #64	@ 0x40
 800ba5a:	4082      	lsls	r2, r0
 800ba5c:	4313      	orrs	r3, r2
 800ba5e:	3401      	adds	r4, #1
 800ba60:	9304      	str	r3, [sp, #16]
 800ba62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba66:	4829      	ldr	r0, [pc, #164]	@ (800bb0c <_vfiprintf_r+0x220>)
 800ba68:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ba6c:	2206      	movs	r2, #6
 800ba6e:	f7f4 fbbf 	bl	80001f0 <memchr>
 800ba72:	2800      	cmp	r0, #0
 800ba74:	d03f      	beq.n	800baf6 <_vfiprintf_r+0x20a>
 800ba76:	4b26      	ldr	r3, [pc, #152]	@ (800bb10 <_vfiprintf_r+0x224>)
 800ba78:	bb1b      	cbnz	r3, 800bac2 <_vfiprintf_r+0x1d6>
 800ba7a:	9b03      	ldr	r3, [sp, #12]
 800ba7c:	3307      	adds	r3, #7
 800ba7e:	f023 0307 	bic.w	r3, r3, #7
 800ba82:	3308      	adds	r3, #8
 800ba84:	9303      	str	r3, [sp, #12]
 800ba86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba88:	443b      	add	r3, r7
 800ba8a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba8c:	e76a      	b.n	800b964 <_vfiprintf_r+0x78>
 800ba8e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba92:	460c      	mov	r4, r1
 800ba94:	2001      	movs	r0, #1
 800ba96:	e7a8      	b.n	800b9ea <_vfiprintf_r+0xfe>
 800ba98:	2300      	movs	r3, #0
 800ba9a:	3401      	adds	r4, #1
 800ba9c:	9305      	str	r3, [sp, #20]
 800ba9e:	4619      	mov	r1, r3
 800baa0:	f04f 0c0a 	mov.w	ip, #10
 800baa4:	4620      	mov	r0, r4
 800baa6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800baaa:	3a30      	subs	r2, #48	@ 0x30
 800baac:	2a09      	cmp	r2, #9
 800baae:	d903      	bls.n	800bab8 <_vfiprintf_r+0x1cc>
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d0c6      	beq.n	800ba42 <_vfiprintf_r+0x156>
 800bab4:	9105      	str	r1, [sp, #20]
 800bab6:	e7c4      	b.n	800ba42 <_vfiprintf_r+0x156>
 800bab8:	fb0c 2101 	mla	r1, ip, r1, r2
 800babc:	4604      	mov	r4, r0
 800babe:	2301      	movs	r3, #1
 800bac0:	e7f0      	b.n	800baa4 <_vfiprintf_r+0x1b8>
 800bac2:	ab03      	add	r3, sp, #12
 800bac4:	9300      	str	r3, [sp, #0]
 800bac6:	462a      	mov	r2, r5
 800bac8:	4b12      	ldr	r3, [pc, #72]	@ (800bb14 <_vfiprintf_r+0x228>)
 800baca:	a904      	add	r1, sp, #16
 800bacc:	4630      	mov	r0, r6
 800bace:	f7fb febb 	bl	8007848 <_printf_float>
 800bad2:	4607      	mov	r7, r0
 800bad4:	1c78      	adds	r0, r7, #1
 800bad6:	d1d6      	bne.n	800ba86 <_vfiprintf_r+0x19a>
 800bad8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bada:	07d9      	lsls	r1, r3, #31
 800badc:	d405      	bmi.n	800baea <_vfiprintf_r+0x1fe>
 800bade:	89ab      	ldrh	r3, [r5, #12]
 800bae0:	059a      	lsls	r2, r3, #22
 800bae2:	d402      	bmi.n	800baea <_vfiprintf_r+0x1fe>
 800bae4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bae6:	f7fc fe1f 	bl	8008728 <__retarget_lock_release_recursive>
 800baea:	89ab      	ldrh	r3, [r5, #12]
 800baec:	065b      	lsls	r3, r3, #25
 800baee:	f53f af1f 	bmi.w	800b930 <_vfiprintf_r+0x44>
 800baf2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800baf4:	e71e      	b.n	800b934 <_vfiprintf_r+0x48>
 800baf6:	ab03      	add	r3, sp, #12
 800baf8:	9300      	str	r3, [sp, #0]
 800bafa:	462a      	mov	r2, r5
 800bafc:	4b05      	ldr	r3, [pc, #20]	@ (800bb14 <_vfiprintf_r+0x228>)
 800bafe:	a904      	add	r1, sp, #16
 800bb00:	4630      	mov	r0, r6
 800bb02:	f7fc f939 	bl	8007d78 <_printf_i>
 800bb06:	e7e4      	b.n	800bad2 <_vfiprintf_r+0x1e6>
 800bb08:	0800c1d1 	.word	0x0800c1d1
 800bb0c:	0800c1db 	.word	0x0800c1db
 800bb10:	08007849 	.word	0x08007849
 800bb14:	0800b8c9 	.word	0x0800b8c9
 800bb18:	0800c1d7 	.word	0x0800c1d7

0800bb1c <__swbuf_r>:
 800bb1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb1e:	460e      	mov	r6, r1
 800bb20:	4614      	mov	r4, r2
 800bb22:	4605      	mov	r5, r0
 800bb24:	b118      	cbz	r0, 800bb2e <__swbuf_r+0x12>
 800bb26:	6a03      	ldr	r3, [r0, #32]
 800bb28:	b90b      	cbnz	r3, 800bb2e <__swbuf_r+0x12>
 800bb2a:	f7fc fce5 	bl	80084f8 <__sinit>
 800bb2e:	69a3      	ldr	r3, [r4, #24]
 800bb30:	60a3      	str	r3, [r4, #8]
 800bb32:	89a3      	ldrh	r3, [r4, #12]
 800bb34:	071a      	lsls	r2, r3, #28
 800bb36:	d501      	bpl.n	800bb3c <__swbuf_r+0x20>
 800bb38:	6923      	ldr	r3, [r4, #16]
 800bb3a:	b943      	cbnz	r3, 800bb4e <__swbuf_r+0x32>
 800bb3c:	4621      	mov	r1, r4
 800bb3e:	4628      	mov	r0, r5
 800bb40:	f000 f82a 	bl	800bb98 <__swsetup_r>
 800bb44:	b118      	cbz	r0, 800bb4e <__swbuf_r+0x32>
 800bb46:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800bb4a:	4638      	mov	r0, r7
 800bb4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb4e:	6823      	ldr	r3, [r4, #0]
 800bb50:	6922      	ldr	r2, [r4, #16]
 800bb52:	1a98      	subs	r0, r3, r2
 800bb54:	6963      	ldr	r3, [r4, #20]
 800bb56:	b2f6      	uxtb	r6, r6
 800bb58:	4283      	cmp	r3, r0
 800bb5a:	4637      	mov	r7, r6
 800bb5c:	dc05      	bgt.n	800bb6a <__swbuf_r+0x4e>
 800bb5e:	4621      	mov	r1, r4
 800bb60:	4628      	mov	r0, r5
 800bb62:	f7ff fa47 	bl	800aff4 <_fflush_r>
 800bb66:	2800      	cmp	r0, #0
 800bb68:	d1ed      	bne.n	800bb46 <__swbuf_r+0x2a>
 800bb6a:	68a3      	ldr	r3, [r4, #8]
 800bb6c:	3b01      	subs	r3, #1
 800bb6e:	60a3      	str	r3, [r4, #8]
 800bb70:	6823      	ldr	r3, [r4, #0]
 800bb72:	1c5a      	adds	r2, r3, #1
 800bb74:	6022      	str	r2, [r4, #0]
 800bb76:	701e      	strb	r6, [r3, #0]
 800bb78:	6962      	ldr	r2, [r4, #20]
 800bb7a:	1c43      	adds	r3, r0, #1
 800bb7c:	429a      	cmp	r2, r3
 800bb7e:	d004      	beq.n	800bb8a <__swbuf_r+0x6e>
 800bb80:	89a3      	ldrh	r3, [r4, #12]
 800bb82:	07db      	lsls	r3, r3, #31
 800bb84:	d5e1      	bpl.n	800bb4a <__swbuf_r+0x2e>
 800bb86:	2e0a      	cmp	r6, #10
 800bb88:	d1df      	bne.n	800bb4a <__swbuf_r+0x2e>
 800bb8a:	4621      	mov	r1, r4
 800bb8c:	4628      	mov	r0, r5
 800bb8e:	f7ff fa31 	bl	800aff4 <_fflush_r>
 800bb92:	2800      	cmp	r0, #0
 800bb94:	d0d9      	beq.n	800bb4a <__swbuf_r+0x2e>
 800bb96:	e7d6      	b.n	800bb46 <__swbuf_r+0x2a>

0800bb98 <__swsetup_r>:
 800bb98:	b538      	push	{r3, r4, r5, lr}
 800bb9a:	4b29      	ldr	r3, [pc, #164]	@ (800bc40 <__swsetup_r+0xa8>)
 800bb9c:	4605      	mov	r5, r0
 800bb9e:	6818      	ldr	r0, [r3, #0]
 800bba0:	460c      	mov	r4, r1
 800bba2:	b118      	cbz	r0, 800bbac <__swsetup_r+0x14>
 800bba4:	6a03      	ldr	r3, [r0, #32]
 800bba6:	b90b      	cbnz	r3, 800bbac <__swsetup_r+0x14>
 800bba8:	f7fc fca6 	bl	80084f8 <__sinit>
 800bbac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bbb0:	0719      	lsls	r1, r3, #28
 800bbb2:	d422      	bmi.n	800bbfa <__swsetup_r+0x62>
 800bbb4:	06da      	lsls	r2, r3, #27
 800bbb6:	d407      	bmi.n	800bbc8 <__swsetup_r+0x30>
 800bbb8:	2209      	movs	r2, #9
 800bbba:	602a      	str	r2, [r5, #0]
 800bbbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bbc0:	81a3      	strh	r3, [r4, #12]
 800bbc2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bbc6:	e033      	b.n	800bc30 <__swsetup_r+0x98>
 800bbc8:	0758      	lsls	r0, r3, #29
 800bbca:	d512      	bpl.n	800bbf2 <__swsetup_r+0x5a>
 800bbcc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bbce:	b141      	cbz	r1, 800bbe2 <__swsetup_r+0x4a>
 800bbd0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bbd4:	4299      	cmp	r1, r3
 800bbd6:	d002      	beq.n	800bbde <__swsetup_r+0x46>
 800bbd8:	4628      	mov	r0, r5
 800bbda:	f7fd fbf9 	bl	80093d0 <_free_r>
 800bbde:	2300      	movs	r3, #0
 800bbe0:	6363      	str	r3, [r4, #52]	@ 0x34
 800bbe2:	89a3      	ldrh	r3, [r4, #12]
 800bbe4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bbe8:	81a3      	strh	r3, [r4, #12]
 800bbea:	2300      	movs	r3, #0
 800bbec:	6063      	str	r3, [r4, #4]
 800bbee:	6923      	ldr	r3, [r4, #16]
 800bbf0:	6023      	str	r3, [r4, #0]
 800bbf2:	89a3      	ldrh	r3, [r4, #12]
 800bbf4:	f043 0308 	orr.w	r3, r3, #8
 800bbf8:	81a3      	strh	r3, [r4, #12]
 800bbfa:	6923      	ldr	r3, [r4, #16]
 800bbfc:	b94b      	cbnz	r3, 800bc12 <__swsetup_r+0x7a>
 800bbfe:	89a3      	ldrh	r3, [r4, #12]
 800bc00:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bc04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bc08:	d003      	beq.n	800bc12 <__swsetup_r+0x7a>
 800bc0a:	4621      	mov	r1, r4
 800bc0c:	4628      	mov	r0, r5
 800bc0e:	f000 f883 	bl	800bd18 <__smakebuf_r>
 800bc12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc16:	f013 0201 	ands.w	r2, r3, #1
 800bc1a:	d00a      	beq.n	800bc32 <__swsetup_r+0x9a>
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	60a2      	str	r2, [r4, #8]
 800bc20:	6962      	ldr	r2, [r4, #20]
 800bc22:	4252      	negs	r2, r2
 800bc24:	61a2      	str	r2, [r4, #24]
 800bc26:	6922      	ldr	r2, [r4, #16]
 800bc28:	b942      	cbnz	r2, 800bc3c <__swsetup_r+0xa4>
 800bc2a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bc2e:	d1c5      	bne.n	800bbbc <__swsetup_r+0x24>
 800bc30:	bd38      	pop	{r3, r4, r5, pc}
 800bc32:	0799      	lsls	r1, r3, #30
 800bc34:	bf58      	it	pl
 800bc36:	6962      	ldrpl	r2, [r4, #20]
 800bc38:	60a2      	str	r2, [r4, #8]
 800bc3a:	e7f4      	b.n	800bc26 <__swsetup_r+0x8e>
 800bc3c:	2000      	movs	r0, #0
 800bc3e:	e7f7      	b.n	800bc30 <__swsetup_r+0x98>
 800bc40:	20000018 	.word	0x20000018

0800bc44 <_raise_r>:
 800bc44:	291f      	cmp	r1, #31
 800bc46:	b538      	push	{r3, r4, r5, lr}
 800bc48:	4605      	mov	r5, r0
 800bc4a:	460c      	mov	r4, r1
 800bc4c:	d904      	bls.n	800bc58 <_raise_r+0x14>
 800bc4e:	2316      	movs	r3, #22
 800bc50:	6003      	str	r3, [r0, #0]
 800bc52:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bc56:	bd38      	pop	{r3, r4, r5, pc}
 800bc58:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bc5a:	b112      	cbz	r2, 800bc62 <_raise_r+0x1e>
 800bc5c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bc60:	b94b      	cbnz	r3, 800bc76 <_raise_r+0x32>
 800bc62:	4628      	mov	r0, r5
 800bc64:	f000 f830 	bl	800bcc8 <_getpid_r>
 800bc68:	4622      	mov	r2, r4
 800bc6a:	4601      	mov	r1, r0
 800bc6c:	4628      	mov	r0, r5
 800bc6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc72:	f000 b817 	b.w	800bca4 <_kill_r>
 800bc76:	2b01      	cmp	r3, #1
 800bc78:	d00a      	beq.n	800bc90 <_raise_r+0x4c>
 800bc7a:	1c59      	adds	r1, r3, #1
 800bc7c:	d103      	bne.n	800bc86 <_raise_r+0x42>
 800bc7e:	2316      	movs	r3, #22
 800bc80:	6003      	str	r3, [r0, #0]
 800bc82:	2001      	movs	r0, #1
 800bc84:	e7e7      	b.n	800bc56 <_raise_r+0x12>
 800bc86:	2100      	movs	r1, #0
 800bc88:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bc8c:	4620      	mov	r0, r4
 800bc8e:	4798      	blx	r3
 800bc90:	2000      	movs	r0, #0
 800bc92:	e7e0      	b.n	800bc56 <_raise_r+0x12>

0800bc94 <raise>:
 800bc94:	4b02      	ldr	r3, [pc, #8]	@ (800bca0 <raise+0xc>)
 800bc96:	4601      	mov	r1, r0
 800bc98:	6818      	ldr	r0, [r3, #0]
 800bc9a:	f7ff bfd3 	b.w	800bc44 <_raise_r>
 800bc9e:	bf00      	nop
 800bca0:	20000018 	.word	0x20000018

0800bca4 <_kill_r>:
 800bca4:	b538      	push	{r3, r4, r5, lr}
 800bca6:	4d07      	ldr	r5, [pc, #28]	@ (800bcc4 <_kill_r+0x20>)
 800bca8:	2300      	movs	r3, #0
 800bcaa:	4604      	mov	r4, r0
 800bcac:	4608      	mov	r0, r1
 800bcae:	4611      	mov	r1, r2
 800bcb0:	602b      	str	r3, [r5, #0]
 800bcb2:	f7f7 f81b 	bl	8002cec <_kill>
 800bcb6:	1c43      	adds	r3, r0, #1
 800bcb8:	d102      	bne.n	800bcc0 <_kill_r+0x1c>
 800bcba:	682b      	ldr	r3, [r5, #0]
 800bcbc:	b103      	cbz	r3, 800bcc0 <_kill_r+0x1c>
 800bcbe:	6023      	str	r3, [r4, #0]
 800bcc0:	bd38      	pop	{r3, r4, r5, pc}
 800bcc2:	bf00      	nop
 800bcc4:	20000bf0 	.word	0x20000bf0

0800bcc8 <_getpid_r>:
 800bcc8:	f7f7 b808 	b.w	8002cdc <_getpid>

0800bccc <__swhatbuf_r>:
 800bccc:	b570      	push	{r4, r5, r6, lr}
 800bcce:	460c      	mov	r4, r1
 800bcd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcd4:	2900      	cmp	r1, #0
 800bcd6:	b096      	sub	sp, #88	@ 0x58
 800bcd8:	4615      	mov	r5, r2
 800bcda:	461e      	mov	r6, r3
 800bcdc:	da0d      	bge.n	800bcfa <__swhatbuf_r+0x2e>
 800bcde:	89a3      	ldrh	r3, [r4, #12]
 800bce0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bce4:	f04f 0100 	mov.w	r1, #0
 800bce8:	bf14      	ite	ne
 800bcea:	2340      	movne	r3, #64	@ 0x40
 800bcec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bcf0:	2000      	movs	r0, #0
 800bcf2:	6031      	str	r1, [r6, #0]
 800bcf4:	602b      	str	r3, [r5, #0]
 800bcf6:	b016      	add	sp, #88	@ 0x58
 800bcf8:	bd70      	pop	{r4, r5, r6, pc}
 800bcfa:	466a      	mov	r2, sp
 800bcfc:	f000 f848 	bl	800bd90 <_fstat_r>
 800bd00:	2800      	cmp	r0, #0
 800bd02:	dbec      	blt.n	800bcde <__swhatbuf_r+0x12>
 800bd04:	9901      	ldr	r1, [sp, #4]
 800bd06:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bd0a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bd0e:	4259      	negs	r1, r3
 800bd10:	4159      	adcs	r1, r3
 800bd12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bd16:	e7eb      	b.n	800bcf0 <__swhatbuf_r+0x24>

0800bd18 <__smakebuf_r>:
 800bd18:	898b      	ldrh	r3, [r1, #12]
 800bd1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bd1c:	079d      	lsls	r5, r3, #30
 800bd1e:	4606      	mov	r6, r0
 800bd20:	460c      	mov	r4, r1
 800bd22:	d507      	bpl.n	800bd34 <__smakebuf_r+0x1c>
 800bd24:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bd28:	6023      	str	r3, [r4, #0]
 800bd2a:	6123      	str	r3, [r4, #16]
 800bd2c:	2301      	movs	r3, #1
 800bd2e:	6163      	str	r3, [r4, #20]
 800bd30:	b003      	add	sp, #12
 800bd32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd34:	ab01      	add	r3, sp, #4
 800bd36:	466a      	mov	r2, sp
 800bd38:	f7ff ffc8 	bl	800bccc <__swhatbuf_r>
 800bd3c:	9f00      	ldr	r7, [sp, #0]
 800bd3e:	4605      	mov	r5, r0
 800bd40:	4639      	mov	r1, r7
 800bd42:	4630      	mov	r0, r6
 800bd44:	f7fd fbb8 	bl	80094b8 <_malloc_r>
 800bd48:	b948      	cbnz	r0, 800bd5e <__smakebuf_r+0x46>
 800bd4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd4e:	059a      	lsls	r2, r3, #22
 800bd50:	d4ee      	bmi.n	800bd30 <__smakebuf_r+0x18>
 800bd52:	f023 0303 	bic.w	r3, r3, #3
 800bd56:	f043 0302 	orr.w	r3, r3, #2
 800bd5a:	81a3      	strh	r3, [r4, #12]
 800bd5c:	e7e2      	b.n	800bd24 <__smakebuf_r+0xc>
 800bd5e:	89a3      	ldrh	r3, [r4, #12]
 800bd60:	6020      	str	r0, [r4, #0]
 800bd62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bd66:	81a3      	strh	r3, [r4, #12]
 800bd68:	9b01      	ldr	r3, [sp, #4]
 800bd6a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bd6e:	b15b      	cbz	r3, 800bd88 <__smakebuf_r+0x70>
 800bd70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd74:	4630      	mov	r0, r6
 800bd76:	f000 f81d 	bl	800bdb4 <_isatty_r>
 800bd7a:	b128      	cbz	r0, 800bd88 <__smakebuf_r+0x70>
 800bd7c:	89a3      	ldrh	r3, [r4, #12]
 800bd7e:	f023 0303 	bic.w	r3, r3, #3
 800bd82:	f043 0301 	orr.w	r3, r3, #1
 800bd86:	81a3      	strh	r3, [r4, #12]
 800bd88:	89a3      	ldrh	r3, [r4, #12]
 800bd8a:	431d      	orrs	r5, r3
 800bd8c:	81a5      	strh	r5, [r4, #12]
 800bd8e:	e7cf      	b.n	800bd30 <__smakebuf_r+0x18>

0800bd90 <_fstat_r>:
 800bd90:	b538      	push	{r3, r4, r5, lr}
 800bd92:	4d07      	ldr	r5, [pc, #28]	@ (800bdb0 <_fstat_r+0x20>)
 800bd94:	2300      	movs	r3, #0
 800bd96:	4604      	mov	r4, r0
 800bd98:	4608      	mov	r0, r1
 800bd9a:	4611      	mov	r1, r2
 800bd9c:	602b      	str	r3, [r5, #0]
 800bd9e:	f7f7 f805 	bl	8002dac <_fstat>
 800bda2:	1c43      	adds	r3, r0, #1
 800bda4:	d102      	bne.n	800bdac <_fstat_r+0x1c>
 800bda6:	682b      	ldr	r3, [r5, #0]
 800bda8:	b103      	cbz	r3, 800bdac <_fstat_r+0x1c>
 800bdaa:	6023      	str	r3, [r4, #0]
 800bdac:	bd38      	pop	{r3, r4, r5, pc}
 800bdae:	bf00      	nop
 800bdb0:	20000bf0 	.word	0x20000bf0

0800bdb4 <_isatty_r>:
 800bdb4:	b538      	push	{r3, r4, r5, lr}
 800bdb6:	4d06      	ldr	r5, [pc, #24]	@ (800bdd0 <_isatty_r+0x1c>)
 800bdb8:	2300      	movs	r3, #0
 800bdba:	4604      	mov	r4, r0
 800bdbc:	4608      	mov	r0, r1
 800bdbe:	602b      	str	r3, [r5, #0]
 800bdc0:	f7f7 f804 	bl	8002dcc <_isatty>
 800bdc4:	1c43      	adds	r3, r0, #1
 800bdc6:	d102      	bne.n	800bdce <_isatty_r+0x1a>
 800bdc8:	682b      	ldr	r3, [r5, #0]
 800bdca:	b103      	cbz	r3, 800bdce <_isatty_r+0x1a>
 800bdcc:	6023      	str	r3, [r4, #0]
 800bdce:	bd38      	pop	{r3, r4, r5, pc}
 800bdd0:	20000bf0 	.word	0x20000bf0

0800bdd4 <_init>:
 800bdd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdd6:	bf00      	nop
 800bdd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdda:	bc08      	pop	{r3}
 800bddc:	469e      	mov	lr, r3
 800bdde:	4770      	bx	lr

0800bde0 <_fini>:
 800bde0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bde2:	bf00      	nop
 800bde4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bde6:	bc08      	pop	{r3}
 800bde8:	469e      	mov	lr, r3
 800bdea:	4770      	bx	lr
