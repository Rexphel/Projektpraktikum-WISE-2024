
versuch_2_rgb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004504  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080046b0  080046b0  000056b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046c8  080046c8  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  080046c8  080046c8  000056c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046d0  080046d0  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046d0  080046d0  000056d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080046d4  080046d4  000056d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080046d8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000600c  2**0
                  CONTENTS
 10 .bss          000007d4  2000000c  2000000c  0000600c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200007e0  200007e0  0000600c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000131c2  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000236f  00000000  00000000  000191fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010a0  00000000  00000000  0001b570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d0e  00000000  00000000  0001c610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002499f  00000000  00000000  0001d31e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011797  00000000  00000000  00041cbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1a29  00000000  00000000  00053454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00134e7d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004848  00000000  00000000  00134ec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  00139708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08004698 	.word	0x08004698

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08004698 	.word	0x08004698

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 fda8 	bl	8001034 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f838 	bl	8000558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 f9d2 	bl	8000890 <MX_GPIO_Init>
  MX_ETH_Init();
 80004ec:	f000 f89e 	bl	800062c <MX_ETH_Init>
  MX_USART3_UART_Init();
 80004f0:	f000 f976 	bl	80007e0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80004f4:	f000 f99e 	bl	8000834 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM4_Init();
 80004f8:	f000 f8e6 	bl	80006c8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  htim4.Instance->CCR1 = 128;
 80004fc:	4b15      	ldr	r3, [pc, #84]	@ (8000554 <main+0x78>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	2280      	movs	r2, #128	@ 0x80
 8000502:	635a      	str	r2, [r3, #52]	@ 0x34
  htim4.Instance->CCR3 = 128;
 8000504:	4b13      	ldr	r3, [pc, #76]	@ (8000554 <main+0x78>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	2280      	movs	r2, #128	@ 0x80
 800050a:	63da      	str	r2, [r3, #60]	@ 0x3c
  htim4.Instance->CCR4 = 128;
 800050c:	4b11      	ldr	r3, [pc, #68]	@ (8000554 <main+0x78>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	2280      	movs	r2, #128	@ 0x80
 8000512:	641a      	str	r2, [r3, #64]	@ 0x40

  if ((HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_1) || HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_3) || HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_4)) != HAL_OK){
 8000514:	2100      	movs	r1, #0
 8000516:	480f      	ldr	r0, [pc, #60]	@ (8000554 <main+0x78>)
 8000518:	f002 fb60 	bl	8002bdc <HAL_TIM_PWM_Start_IT>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d10d      	bne.n	800053e <main+0x62>
 8000522:	2108      	movs	r1, #8
 8000524:	480b      	ldr	r0, [pc, #44]	@ (8000554 <main+0x78>)
 8000526:	f002 fb59 	bl	8002bdc <HAL_TIM_PWM_Start_IT>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d106      	bne.n	800053e <main+0x62>
 8000530:	210c      	movs	r1, #12
 8000532:	4808      	ldr	r0, [pc, #32]	@ (8000554 <main+0x78>)
 8000534:	f002 fb52 	bl	8002bdc <HAL_TIM_PWM_Start_IT>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <main+0x66>
 800053e:	2301      	movs	r3, #1
 8000540:	e000      	b.n	8000544 <main+0x68>
 8000542:	2300      	movs	r3, #0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d002      	beq.n	800054e <main+0x72>

	  Error_Handler();
 8000548:	f000 fa50 	bl	80009ec <Error_Handler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800054c:	bf00      	nop
 800054e:	bf00      	nop
 8000550:	e7fd      	b.n	800054e <main+0x72>
 8000552:	bf00      	nop
 8000554:	20000250 	.word	0x20000250

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b094      	sub	sp, #80	@ 0x50
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 0320 	add.w	r3, r7, #32
 8000562:	2230      	movs	r2, #48	@ 0x30
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f004 f869 	bl	800463e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800057c:	2300      	movs	r3, #0
 800057e:	60bb      	str	r3, [r7, #8]
 8000580:	4b28      	ldr	r3, [pc, #160]	@ (8000624 <SystemClock_Config+0xcc>)
 8000582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000584:	4a27      	ldr	r2, [pc, #156]	@ (8000624 <SystemClock_Config+0xcc>)
 8000586:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800058a:	6413      	str	r3, [r2, #64]	@ 0x40
 800058c:	4b25      	ldr	r3, [pc, #148]	@ (8000624 <SystemClock_Config+0xcc>)
 800058e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000590:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000594:	60bb      	str	r3, [r7, #8]
 8000596:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000598:	2300      	movs	r3, #0
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	4b22      	ldr	r3, [pc, #136]	@ (8000628 <SystemClock_Config+0xd0>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a21      	ldr	r2, [pc, #132]	@ (8000628 <SystemClock_Config+0xd0>)
 80005a2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005a6:	6013      	str	r3, [r2, #0]
 80005a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000628 <SystemClock_Config+0xd0>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005b0:	607b      	str	r3, [r7, #4]
 80005b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b4:	2301      	movs	r3, #1
 80005b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005b8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80005bc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005be:	2302      	movs	r3, #2
 80005c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005c2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005c8:	2304      	movs	r3, #4
 80005ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005cc:	23a8      	movs	r3, #168	@ 0xa8
 80005ce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d0:	2302      	movs	r3, #2
 80005d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005d4:	2307      	movs	r3, #7
 80005d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d8:	f107 0320 	add.w	r3, r7, #32
 80005dc:	4618      	mov	r0, r3
 80005de:	f001 fcf5 	bl	8001fcc <HAL_RCC_OscConfig>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005e8:	f000 fa00 	bl	80009ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ec:	230f      	movs	r3, #15
 80005ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f0:	2302      	movs	r3, #2
 80005f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80005f8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80005fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000602:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000604:	f107 030c 	add.w	r3, r7, #12
 8000608:	2105      	movs	r1, #5
 800060a:	4618      	mov	r0, r3
 800060c:	f001 ff56 	bl	80024bc <HAL_RCC_ClockConfig>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000616:	f000 f9e9 	bl	80009ec <Error_Handler>
  }
}
 800061a:	bf00      	nop
 800061c:	3750      	adds	r7, #80	@ 0x50
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40023800 	.word	0x40023800
 8000628:	40007000 	.word	0x40007000

0800062c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000630:	4b1f      	ldr	r3, [pc, #124]	@ (80006b0 <MX_ETH_Init+0x84>)
 8000632:	4a20      	ldr	r2, [pc, #128]	@ (80006b4 <MX_ETH_Init+0x88>)
 8000634:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000636:	4b20      	ldr	r3, [pc, #128]	@ (80006b8 <MX_ETH_Init+0x8c>)
 8000638:	2200      	movs	r2, #0
 800063a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800063c:	4b1e      	ldr	r3, [pc, #120]	@ (80006b8 <MX_ETH_Init+0x8c>)
 800063e:	2280      	movs	r2, #128	@ 0x80
 8000640:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000642:	4b1d      	ldr	r3, [pc, #116]	@ (80006b8 <MX_ETH_Init+0x8c>)
 8000644:	22e1      	movs	r2, #225	@ 0xe1
 8000646:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000648:	4b1b      	ldr	r3, [pc, #108]	@ (80006b8 <MX_ETH_Init+0x8c>)
 800064a:	2200      	movs	r2, #0
 800064c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800064e:	4b1a      	ldr	r3, [pc, #104]	@ (80006b8 <MX_ETH_Init+0x8c>)
 8000650:	2200      	movs	r2, #0
 8000652:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000654:	4b18      	ldr	r3, [pc, #96]	@ (80006b8 <MX_ETH_Init+0x8c>)
 8000656:	2200      	movs	r2, #0
 8000658:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800065a:	4b15      	ldr	r3, [pc, #84]	@ (80006b0 <MX_ETH_Init+0x84>)
 800065c:	4a16      	ldr	r2, [pc, #88]	@ (80006b8 <MX_ETH_Init+0x8c>)
 800065e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000660:	4b13      	ldr	r3, [pc, #76]	@ (80006b0 <MX_ETH_Init+0x84>)
 8000662:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000666:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000668:	4b11      	ldr	r3, [pc, #68]	@ (80006b0 <MX_ETH_Init+0x84>)
 800066a:	4a14      	ldr	r2, [pc, #80]	@ (80006bc <MX_ETH_Init+0x90>)
 800066c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800066e:	4b10      	ldr	r3, [pc, #64]	@ (80006b0 <MX_ETH_Init+0x84>)
 8000670:	4a13      	ldr	r2, [pc, #76]	@ (80006c0 <MX_ETH_Init+0x94>)
 8000672:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000674:	4b0e      	ldr	r3, [pc, #56]	@ (80006b0 <MX_ETH_Init+0x84>)
 8000676:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800067a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800067c:	480c      	ldr	r0, [pc, #48]	@ (80006b0 <MX_ETH_Init+0x84>)
 800067e:	f000 fe81 	bl	8001384 <HAL_ETH_Init>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000688:	f000 f9b0 	bl	80009ec <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800068c:	2238      	movs	r2, #56	@ 0x38
 800068e:	2100      	movs	r1, #0
 8000690:	480c      	ldr	r0, [pc, #48]	@ (80006c4 <MX_ETH_Init+0x98>)
 8000692:	f003 ffd4 	bl	800463e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000696:	4b0b      	ldr	r3, [pc, #44]	@ (80006c4 <MX_ETH_Init+0x98>)
 8000698:	2221      	movs	r2, #33	@ 0x21
 800069a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800069c:	4b09      	ldr	r3, [pc, #36]	@ (80006c4 <MX_ETH_Init+0x98>)
 800069e:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80006a2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80006a4:	4b07      	ldr	r3, [pc, #28]	@ (80006c4 <MX_ETH_Init+0x98>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	200001a0 	.word	0x200001a0
 80006b4:	40028000 	.word	0x40028000
 80006b8:	200007c4 	.word	0x200007c4
 80006bc:	20000100 	.word	0x20000100
 80006c0:	20000060 	.word	0x20000060
 80006c4:	20000028 	.word	0x20000028

080006c8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b08e      	sub	sp, #56	@ 0x38
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]
 80006d8:	609a      	str	r2, [r3, #8]
 80006da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006dc:	f107 0320 	add.w	r3, r7, #32
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
 80006f2:	611a      	str	r2, [r3, #16]
 80006f4:	615a      	str	r2, [r3, #20]
 80006f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80006f8:	4b37      	ldr	r3, [pc, #220]	@ (80007d8 <MX_TIM4_Init+0x110>)
 80006fa:	4a38      	ldr	r2, [pc, #224]	@ (80007dc <MX_TIM4_Init+0x114>)
 80006fc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 419;
 80006fe:	4b36      	ldr	r3, [pc, #216]	@ (80007d8 <MX_TIM4_Init+0x110>)
 8000700:	f240 12a3 	movw	r2, #419	@ 0x1a3
 8000704:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000706:	4b34      	ldr	r3, [pc, #208]	@ (80007d8 <MX_TIM4_Init+0x110>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 255;
 800070c:	4b32      	ldr	r3, [pc, #200]	@ (80007d8 <MX_TIM4_Init+0x110>)
 800070e:	22ff      	movs	r2, #255	@ 0xff
 8000710:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000712:	4b31      	ldr	r3, [pc, #196]	@ (80007d8 <MX_TIM4_Init+0x110>)
 8000714:	2200      	movs	r2, #0
 8000716:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000718:	4b2f      	ldr	r3, [pc, #188]	@ (80007d8 <MX_TIM4_Init+0x110>)
 800071a:	2200      	movs	r2, #0
 800071c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800071e:	482e      	ldr	r0, [pc, #184]	@ (80007d8 <MX_TIM4_Init+0x110>)
 8000720:	f002 f8ec 	bl	80028fc <HAL_TIM_Base_Init>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800072a:	f000 f95f 	bl	80009ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800072e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000732:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000734:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000738:	4619      	mov	r1, r3
 800073a:	4827      	ldr	r0, [pc, #156]	@ (80007d8 <MX_TIM4_Init+0x110>)
 800073c:	f002 fd16 	bl	800316c <HAL_TIM_ConfigClockSource>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000746:	f000 f951 	bl	80009ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800074a:	4823      	ldr	r0, [pc, #140]	@ (80007d8 <MX_TIM4_Init+0x110>)
 800074c:	f002 f925 	bl	800299a <HAL_TIM_PWM_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000756:	f000 f949 	bl	80009ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800075a:	2300      	movs	r3, #0
 800075c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800075e:	2300      	movs	r3, #0
 8000760:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000762:	f107 0320 	add.w	r3, r7, #32
 8000766:	4619      	mov	r1, r3
 8000768:	481b      	ldr	r0, [pc, #108]	@ (80007d8 <MX_TIM4_Init+0x110>)
 800076a:	f003 f915 	bl	8003998 <HAL_TIMEx_MasterConfigSynchronization>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000774:	f000 f93a 	bl	80009ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000778:	2360      	movs	r3, #96	@ 0x60
 800077a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800077c:	2300      	movs	r3, #0
 800077e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000780:	2300      	movs	r3, #0
 8000782:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000784:	2300      	movs	r3, #0
 8000786:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000788:	1d3b      	adds	r3, r7, #4
 800078a:	2200      	movs	r2, #0
 800078c:	4619      	mov	r1, r3
 800078e:	4812      	ldr	r0, [pc, #72]	@ (80007d8 <MX_TIM4_Init+0x110>)
 8000790:	f002 fc2a 	bl	8002fe8 <HAL_TIM_PWM_ConfigChannel>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800079a:	f000 f927 	bl	80009ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	2208      	movs	r2, #8
 80007a2:	4619      	mov	r1, r3
 80007a4:	480c      	ldr	r0, [pc, #48]	@ (80007d8 <MX_TIM4_Init+0x110>)
 80007a6:	f002 fc1f 	bl	8002fe8 <HAL_TIM_PWM_ConfigChannel>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 80007b0:	f000 f91c 	bl	80009ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80007b4:	1d3b      	adds	r3, r7, #4
 80007b6:	220c      	movs	r2, #12
 80007b8:	4619      	mov	r1, r3
 80007ba:	4807      	ldr	r0, [pc, #28]	@ (80007d8 <MX_TIM4_Init+0x110>)
 80007bc:	f002 fc14 	bl	8002fe8 <HAL_TIM_PWM_ConfigChannel>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 80007c6:	f000 f911 	bl	80009ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80007ca:	4803      	ldr	r0, [pc, #12]	@ (80007d8 <MX_TIM4_Init+0x110>)
 80007cc:	f000 fa2a 	bl	8000c24 <HAL_TIM_MspPostInit>

}
 80007d0:	bf00      	nop
 80007d2:	3738      	adds	r7, #56	@ 0x38
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	20000250 	.word	0x20000250
 80007dc:	40000800 	.word	0x40000800

080007e0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007e4:	4b11      	ldr	r3, [pc, #68]	@ (800082c <MX_USART3_UART_Init+0x4c>)
 80007e6:	4a12      	ldr	r2, [pc, #72]	@ (8000830 <MX_USART3_UART_Init+0x50>)
 80007e8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007ea:	4b10      	ldr	r3, [pc, #64]	@ (800082c <MX_USART3_UART_Init+0x4c>)
 80007ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007f0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007f2:	4b0e      	ldr	r3, [pc, #56]	@ (800082c <MX_USART3_UART_Init+0x4c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007f8:	4b0c      	ldr	r3, [pc, #48]	@ (800082c <MX_USART3_UART_Init+0x4c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007fe:	4b0b      	ldr	r3, [pc, #44]	@ (800082c <MX_USART3_UART_Init+0x4c>)
 8000800:	2200      	movs	r2, #0
 8000802:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000804:	4b09      	ldr	r3, [pc, #36]	@ (800082c <MX_USART3_UART_Init+0x4c>)
 8000806:	220c      	movs	r2, #12
 8000808:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080a:	4b08      	ldr	r3, [pc, #32]	@ (800082c <MX_USART3_UART_Init+0x4c>)
 800080c:	2200      	movs	r2, #0
 800080e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000810:	4b06      	ldr	r3, [pc, #24]	@ (800082c <MX_USART3_UART_Init+0x4c>)
 8000812:	2200      	movs	r2, #0
 8000814:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000816:	4805      	ldr	r0, [pc, #20]	@ (800082c <MX_USART3_UART_Init+0x4c>)
 8000818:	f003 f94e 	bl	8003ab8 <HAL_UART_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000822:	f000 f8e3 	bl	80009ec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000298 	.word	0x20000298
 8000830:	40004800 	.word	0x40004800

08000834 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000838:	4b14      	ldr	r3, [pc, #80]	@ (800088c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800083a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800083e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000840:	4b12      	ldr	r3, [pc, #72]	@ (800088c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000842:	2204      	movs	r2, #4
 8000844:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000846:	4b11      	ldr	r3, [pc, #68]	@ (800088c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000848:	2202      	movs	r2, #2
 800084a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800084c:	4b0f      	ldr	r3, [pc, #60]	@ (800088c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800084e:	2200      	movs	r2, #0
 8000850:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000852:	4b0e      	ldr	r3, [pc, #56]	@ (800088c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000854:	2202      	movs	r2, #2
 8000856:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000858:	4b0c      	ldr	r3, [pc, #48]	@ (800088c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800085a:	2201      	movs	r2, #1
 800085c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800085e:	4b0b      	ldr	r3, [pc, #44]	@ (800088c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000860:	2200      	movs	r2, #0
 8000862:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000864:	4b09      	ldr	r3, [pc, #36]	@ (800088c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000866:	2200      	movs	r2, #0
 8000868:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800086a:	4b08      	ldr	r3, [pc, #32]	@ (800088c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800086c:	2201      	movs	r2, #1
 800086e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000870:	4b06      	ldr	r3, [pc, #24]	@ (800088c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000872:	2200      	movs	r2, #0
 8000874:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000876:	4805      	ldr	r0, [pc, #20]	@ (800088c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000878:	f001 fa99 	bl	8001dae <HAL_PCD_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000882:	f000 f8b3 	bl	80009ec <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	200002e0 	.word	0x200002e0

08000890 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b08c      	sub	sp, #48	@ 0x30
 8000894:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000896:	f107 031c 	add.w	r3, r7, #28
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]
 80008a0:	609a      	str	r2, [r3, #8]
 80008a2:	60da      	str	r2, [r3, #12]
 80008a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	61bb      	str	r3, [r7, #24]
 80008aa:	4b4c      	ldr	r3, [pc, #304]	@ (80009dc <MX_GPIO_Init+0x14c>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	4a4b      	ldr	r2, [pc, #300]	@ (80009dc <MX_GPIO_Init+0x14c>)
 80008b0:	f043 0304 	orr.w	r3, r3, #4
 80008b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b6:	4b49      	ldr	r3, [pc, #292]	@ (80009dc <MX_GPIO_Init+0x14c>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	f003 0304 	and.w	r3, r3, #4
 80008be:	61bb      	str	r3, [r7, #24]
 80008c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	617b      	str	r3, [r7, #20]
 80008c6:	4b45      	ldr	r3, [pc, #276]	@ (80009dc <MX_GPIO_Init+0x14c>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	4a44      	ldr	r2, [pc, #272]	@ (80009dc <MX_GPIO_Init+0x14c>)
 80008cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d2:	4b42      	ldr	r3, [pc, #264]	@ (80009dc <MX_GPIO_Init+0x14c>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008da:	617b      	str	r3, [r7, #20]
 80008dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	613b      	str	r3, [r7, #16]
 80008e2:	4b3e      	ldr	r3, [pc, #248]	@ (80009dc <MX_GPIO_Init+0x14c>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	4a3d      	ldr	r2, [pc, #244]	@ (80009dc <MX_GPIO_Init+0x14c>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ee:	4b3b      	ldr	r3, [pc, #236]	@ (80009dc <MX_GPIO_Init+0x14c>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	4b37      	ldr	r3, [pc, #220]	@ (80009dc <MX_GPIO_Init+0x14c>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	4a36      	ldr	r2, [pc, #216]	@ (80009dc <MX_GPIO_Init+0x14c>)
 8000904:	f043 0302 	orr.w	r3, r3, #2
 8000908:	6313      	str	r3, [r2, #48]	@ 0x30
 800090a:	4b34      	ldr	r3, [pc, #208]	@ (80009dc <MX_GPIO_Init+0x14c>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	f003 0302 	and.w	r3, r3, #2
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	60bb      	str	r3, [r7, #8]
 800091a:	4b30      	ldr	r3, [pc, #192]	@ (80009dc <MX_GPIO_Init+0x14c>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	4a2f      	ldr	r2, [pc, #188]	@ (80009dc <MX_GPIO_Init+0x14c>)
 8000920:	f043 0308 	orr.w	r3, r3, #8
 8000924:	6313      	str	r3, [r2, #48]	@ 0x30
 8000926:	4b2d      	ldr	r3, [pc, #180]	@ (80009dc <MX_GPIO_Init+0x14c>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	f003 0308 	and.w	r3, r3, #8
 800092e:	60bb      	str	r3, [r7, #8]
 8000930:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	607b      	str	r3, [r7, #4]
 8000936:	4b29      	ldr	r3, [pc, #164]	@ (80009dc <MX_GPIO_Init+0x14c>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093a:	4a28      	ldr	r2, [pc, #160]	@ (80009dc <MX_GPIO_Init+0x14c>)
 800093c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000940:	6313      	str	r3, [r2, #48]	@ 0x30
 8000942:	4b26      	ldr	r3, [pc, #152]	@ (80009dc <MX_GPIO_Init+0x14c>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000954:	4822      	ldr	r0, [pc, #136]	@ (80009e0 <MX_GPIO_Init+0x150>)
 8000956:	f001 fa11 	bl	8001d7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800095a:	2200      	movs	r2, #0
 800095c:	2140      	movs	r1, #64	@ 0x40
 800095e:	4821      	ldr	r0, [pc, #132]	@ (80009e4 <MX_GPIO_Init+0x154>)
 8000960:	f001 fa0c 	bl	8001d7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000964:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800096a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800096e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000974:	f107 031c 	add.w	r3, r7, #28
 8000978:	4619      	mov	r1, r3
 800097a:	481b      	ldr	r0, [pc, #108]	@ (80009e8 <MX_GPIO_Init+0x158>)
 800097c:	f001 f852 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000980:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000986:	2301      	movs	r3, #1
 8000988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	2300      	movs	r3, #0
 8000990:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000992:	f107 031c 	add.w	r3, r7, #28
 8000996:	4619      	mov	r1, r3
 8000998:	4811      	ldr	r0, [pc, #68]	@ (80009e0 <MX_GPIO_Init+0x150>)
 800099a:	f001 f843 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800099e:	2340      	movs	r3, #64	@ 0x40
 80009a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a2:	2301      	movs	r3, #1
 80009a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009ae:	f107 031c 	add.w	r3, r7, #28
 80009b2:	4619      	mov	r1, r3
 80009b4:	480b      	ldr	r0, [pc, #44]	@ (80009e4 <MX_GPIO_Init+0x154>)
 80009b6:	f001 f835 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009ba:	2380      	movs	r3, #128	@ 0x80
 80009bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009be:	2300      	movs	r3, #0
 80009c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	4619      	mov	r1, r3
 80009cc:	4805      	ldr	r0, [pc, #20]	@ (80009e4 <MX_GPIO_Init+0x154>)
 80009ce:	f001 f829 	bl	8001a24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009d2:	bf00      	nop
 80009d4:	3730      	adds	r7, #48	@ 0x30
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40023800 	.word	0x40023800
 80009e0:	40020400 	.word	0x40020400
 80009e4:	40021800 	.word	0x40021800
 80009e8:	40020800 	.word	0x40020800

080009ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f0:	b672      	cpsid	i
}
 80009f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f4:	bf00      	nop
 80009f6:	e7fd      	b.n	80009f4 <Error_Handler+0x8>

080009f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	607b      	str	r3, [r7, #4]
 8000a02:	4b10      	ldr	r3, [pc, #64]	@ (8000a44 <HAL_MspInit+0x4c>)
 8000a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a06:	4a0f      	ldr	r2, [pc, #60]	@ (8000a44 <HAL_MspInit+0x4c>)
 8000a08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a44 <HAL_MspInit+0x4c>)
 8000a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	603b      	str	r3, [r7, #0]
 8000a1e:	4b09      	ldr	r3, [pc, #36]	@ (8000a44 <HAL_MspInit+0x4c>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a22:	4a08      	ldr	r2, [pc, #32]	@ (8000a44 <HAL_MspInit+0x4c>)
 8000a24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a28:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a2a:	4b06      	ldr	r3, [pc, #24]	@ (8000a44 <HAL_MspInit+0x4c>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a32:	603b      	str	r3, [r7, #0]
 8000a34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a36:	bf00      	nop
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	40023800 	.word	0x40023800

08000a48 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08e      	sub	sp, #56	@ 0x38
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a55      	ldr	r2, [pc, #340]	@ (8000bbc <HAL_ETH_MspInit+0x174>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	f040 80a4 	bne.w	8000bb4 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	623b      	str	r3, [r7, #32]
 8000a70:	4b53      	ldr	r3, [pc, #332]	@ (8000bc0 <HAL_ETH_MspInit+0x178>)
 8000a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a74:	4a52      	ldr	r2, [pc, #328]	@ (8000bc0 <HAL_ETH_MspInit+0x178>)
 8000a76:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a7a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7c:	4b50      	ldr	r3, [pc, #320]	@ (8000bc0 <HAL_ETH_MspInit+0x178>)
 8000a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a84:	623b      	str	r3, [r7, #32]
 8000a86:	6a3b      	ldr	r3, [r7, #32]
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61fb      	str	r3, [r7, #28]
 8000a8c:	4b4c      	ldr	r3, [pc, #304]	@ (8000bc0 <HAL_ETH_MspInit+0x178>)
 8000a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a90:	4a4b      	ldr	r2, [pc, #300]	@ (8000bc0 <HAL_ETH_MspInit+0x178>)
 8000a92:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000a96:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a98:	4b49      	ldr	r3, [pc, #292]	@ (8000bc0 <HAL_ETH_MspInit+0x178>)
 8000a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000aa0:	61fb      	str	r3, [r7, #28]
 8000aa2:	69fb      	ldr	r3, [r7, #28]
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61bb      	str	r3, [r7, #24]
 8000aa8:	4b45      	ldr	r3, [pc, #276]	@ (8000bc0 <HAL_ETH_MspInit+0x178>)
 8000aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aac:	4a44      	ldr	r2, [pc, #272]	@ (8000bc0 <HAL_ETH_MspInit+0x178>)
 8000aae:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000ab2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab4:	4b42      	ldr	r3, [pc, #264]	@ (8000bc0 <HAL_ETH_MspInit+0x178>)
 8000ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000abc:	61bb      	str	r3, [r7, #24]
 8000abe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	617b      	str	r3, [r7, #20]
 8000ac4:	4b3e      	ldr	r3, [pc, #248]	@ (8000bc0 <HAL_ETH_MspInit+0x178>)
 8000ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac8:	4a3d      	ldr	r2, [pc, #244]	@ (8000bc0 <HAL_ETH_MspInit+0x178>)
 8000aca:	f043 0304 	orr.w	r3, r3, #4
 8000ace:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ad0:	4b3b      	ldr	r3, [pc, #236]	@ (8000bc0 <HAL_ETH_MspInit+0x178>)
 8000ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad4:	f003 0304 	and.w	r3, r3, #4
 8000ad8:	617b      	str	r3, [r7, #20]
 8000ada:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000adc:	2300      	movs	r3, #0
 8000ade:	613b      	str	r3, [r7, #16]
 8000ae0:	4b37      	ldr	r3, [pc, #220]	@ (8000bc0 <HAL_ETH_MspInit+0x178>)
 8000ae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae4:	4a36      	ldr	r2, [pc, #216]	@ (8000bc0 <HAL_ETH_MspInit+0x178>)
 8000ae6:	f043 0301 	orr.w	r3, r3, #1
 8000aea:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aec:	4b34      	ldr	r3, [pc, #208]	@ (8000bc0 <HAL_ETH_MspInit+0x178>)
 8000aee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af0:	f003 0301 	and.w	r3, r3, #1
 8000af4:	613b      	str	r3, [r7, #16]
 8000af6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af8:	2300      	movs	r3, #0
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	4b30      	ldr	r3, [pc, #192]	@ (8000bc0 <HAL_ETH_MspInit+0x178>)
 8000afe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b00:	4a2f      	ldr	r2, [pc, #188]	@ (8000bc0 <HAL_ETH_MspInit+0x178>)
 8000b02:	f043 0302 	orr.w	r3, r3, #2
 8000b06:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b08:	4b2d      	ldr	r3, [pc, #180]	@ (8000bc0 <HAL_ETH_MspInit+0x178>)
 8000b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0c:	f003 0302 	and.w	r3, r3, #2
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b14:	2300      	movs	r3, #0
 8000b16:	60bb      	str	r3, [r7, #8]
 8000b18:	4b29      	ldr	r3, [pc, #164]	@ (8000bc0 <HAL_ETH_MspInit+0x178>)
 8000b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1c:	4a28      	ldr	r2, [pc, #160]	@ (8000bc0 <HAL_ETH_MspInit+0x178>)
 8000b1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b22:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b24:	4b26      	ldr	r3, [pc, #152]	@ (8000bc0 <HAL_ETH_MspInit+0x178>)
 8000b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b2c:	60bb      	str	r3, [r7, #8]
 8000b2e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000b30:	2332      	movs	r3, #50	@ 0x32
 8000b32:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b34:	2302      	movs	r3, #2
 8000b36:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b40:	230b      	movs	r3, #11
 8000b42:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b48:	4619      	mov	r1, r3
 8000b4a:	481e      	ldr	r0, [pc, #120]	@ (8000bc4 <HAL_ETH_MspInit+0x17c>)
 8000b4c:	f000 ff6a 	bl	8001a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000b50:	2386      	movs	r3, #134	@ 0x86
 8000b52:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b54:	2302      	movs	r3, #2
 8000b56:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5c:	2303      	movs	r3, #3
 8000b5e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b60:	230b      	movs	r3, #11
 8000b62:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4817      	ldr	r0, [pc, #92]	@ (8000bc8 <HAL_ETH_MspInit+0x180>)
 8000b6c:	f000 ff5a 	bl	8001a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000b70:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b74:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b76:	2302      	movs	r3, #2
 8000b78:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7e:	2303      	movs	r3, #3
 8000b80:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b82:	230b      	movs	r3, #11
 8000b84:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000b86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	480f      	ldr	r0, [pc, #60]	@ (8000bcc <HAL_ETH_MspInit+0x184>)
 8000b8e:	f000 ff49 	bl	8001a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000b92:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000b96:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba0:	2303      	movs	r3, #3
 8000ba2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ba4:	230b      	movs	r3, #11
 8000ba6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ba8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bac:	4619      	mov	r1, r3
 8000bae:	4808      	ldr	r0, [pc, #32]	@ (8000bd0 <HAL_ETH_MspInit+0x188>)
 8000bb0:	f000 ff38 	bl	8001a24 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000bb4:	bf00      	nop
 8000bb6:	3738      	adds	r7, #56	@ 0x38
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	40028000 	.word	0x40028000
 8000bc0:	40023800 	.word	0x40023800
 8000bc4:	40020800 	.word	0x40020800
 8000bc8:	40020000 	.word	0x40020000
 8000bcc:	40020400 	.word	0x40020400
 8000bd0:	40021800 	.word	0x40021800

08000bd4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a0e      	ldr	r2, [pc, #56]	@ (8000c1c <HAL_TIM_Base_MspInit+0x48>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d115      	bne.n	8000c12 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	60fb      	str	r3, [r7, #12]
 8000bea:	4b0d      	ldr	r3, [pc, #52]	@ (8000c20 <HAL_TIM_Base_MspInit+0x4c>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bee:	4a0c      	ldr	r2, [pc, #48]	@ (8000c20 <HAL_TIM_Base_MspInit+0x4c>)
 8000bf0:	f043 0304 	orr.w	r3, r3, #4
 8000bf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bf6:	4b0a      	ldr	r3, [pc, #40]	@ (8000c20 <HAL_TIM_Base_MspInit+0x4c>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bfa:	f003 0304 	and.w	r3, r3, #4
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2100      	movs	r1, #0
 8000c06:	201e      	movs	r0, #30
 8000c08:	f000 fb85 	bl	8001316 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000c0c:	201e      	movs	r0, #30
 8000c0e:	f000 fb9e 	bl	800134e <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8000c12:	bf00      	nop
 8000c14:	3710      	adds	r7, #16
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40000800 	.word	0x40000800
 8000c20:	40023800 	.word	0x40023800

08000c24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b088      	sub	sp, #32
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 030c 	add.w	r3, r7, #12
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a12      	ldr	r2, [pc, #72]	@ (8000c8c <HAL_TIM_MspPostInit+0x68>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d11e      	bne.n	8000c84 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	60bb      	str	r3, [r7, #8]
 8000c4a:	4b11      	ldr	r3, [pc, #68]	@ (8000c90 <HAL_TIM_MspPostInit+0x6c>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4e:	4a10      	ldr	r2, [pc, #64]	@ (8000c90 <HAL_TIM_MspPostInit+0x6c>)
 8000c50:	f043 0302 	orr.w	r3, r3, #2
 8000c54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c56:	4b0e      	ldr	r3, [pc, #56]	@ (8000c90 <HAL_TIM_MspPostInit+0x6c>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5a:	f003 0302 	and.w	r3, r3, #2
 8000c5e:	60bb      	str	r3, [r7, #8]
 8000c60:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = PWMcH1_Pin|PWMCH3_Pin|PWMCH4_Pin;
 8000c62:	f44f 7350 	mov.w	r3, #832	@ 0x340
 8000c66:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c70:	2300      	movs	r3, #0
 8000c72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000c74:	2302      	movs	r3, #2
 8000c76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c78:	f107 030c 	add.w	r3, r7, #12
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4805      	ldr	r0, [pc, #20]	@ (8000c94 <HAL_TIM_MspPostInit+0x70>)
 8000c80:	f000 fed0 	bl	8001a24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000c84:	bf00      	nop
 8000c86:	3720      	adds	r7, #32
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40000800 	.word	0x40000800
 8000c90:	40023800 	.word	0x40023800
 8000c94:	40020400 	.word	0x40020400

08000c98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08a      	sub	sp, #40	@ 0x28
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
 8000cae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a19      	ldr	r2, [pc, #100]	@ (8000d1c <HAL_UART_MspInit+0x84>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d12c      	bne.n	8000d14 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	613b      	str	r3, [r7, #16]
 8000cbe:	4b18      	ldr	r3, [pc, #96]	@ (8000d20 <HAL_UART_MspInit+0x88>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc2:	4a17      	ldr	r2, [pc, #92]	@ (8000d20 <HAL_UART_MspInit+0x88>)
 8000cc4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000cc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cca:	4b15      	ldr	r3, [pc, #84]	@ (8000d20 <HAL_UART_MspInit+0x88>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000cd2:	613b      	str	r3, [r7, #16]
 8000cd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	4b11      	ldr	r3, [pc, #68]	@ (8000d20 <HAL_UART_MspInit+0x88>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cde:	4a10      	ldr	r2, [pc, #64]	@ (8000d20 <HAL_UART_MspInit+0x88>)
 8000ce0:	f043 0308 	orr.w	r3, r3, #8
 8000ce4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ce6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d20 <HAL_UART_MspInit+0x88>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cea:	f003 0308 	and.w	r3, r3, #8
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000cf2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000cf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d00:	2303      	movs	r3, #3
 8000d02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d04:	2307      	movs	r3, #7
 8000d06:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d08:	f107 0314 	add.w	r3, r7, #20
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4805      	ldr	r0, [pc, #20]	@ (8000d24 <HAL_UART_MspInit+0x8c>)
 8000d10:	f000 fe88 	bl	8001a24 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000d14:	bf00      	nop
 8000d16:	3728      	adds	r7, #40	@ 0x28
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40004800 	.word	0x40004800
 8000d20:	40023800 	.word	0x40023800
 8000d24:	40020c00 	.word	0x40020c00

08000d28 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08a      	sub	sp, #40	@ 0x28
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000d48:	d13f      	bne.n	8000dca <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	613b      	str	r3, [r7, #16]
 8000d4e:	4b21      	ldr	r3, [pc, #132]	@ (8000dd4 <HAL_PCD_MspInit+0xac>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d52:	4a20      	ldr	r2, [pc, #128]	@ (8000dd4 <HAL_PCD_MspInit+0xac>)
 8000d54:	f043 0301 	orr.w	r3, r3, #1
 8000d58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d5a:	4b1e      	ldr	r3, [pc, #120]	@ (8000dd4 <HAL_PCD_MspInit+0xac>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	613b      	str	r3, [r7, #16]
 8000d64:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d66:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000d6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d74:	2303      	movs	r3, #3
 8000d76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d78:	230a      	movs	r3, #10
 8000d7a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	4619      	mov	r1, r3
 8000d82:	4815      	ldr	r0, [pc, #84]	@ (8000dd8 <HAL_PCD_MspInit+0xb0>)
 8000d84:	f000 fe4e 	bl	8001a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d88:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d96:	f107 0314 	add.w	r3, r7, #20
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	480e      	ldr	r0, [pc, #56]	@ (8000dd8 <HAL_PCD_MspInit+0xb0>)
 8000d9e:	f000 fe41 	bl	8001a24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000da2:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd4 <HAL_PCD_MspInit+0xac>)
 8000da4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000da6:	4a0b      	ldr	r2, [pc, #44]	@ (8000dd4 <HAL_PCD_MspInit+0xac>)
 8000da8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000dac:	6353      	str	r3, [r2, #52]	@ 0x34
 8000dae:	2300      	movs	r3, #0
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	4b08      	ldr	r3, [pc, #32]	@ (8000dd4 <HAL_PCD_MspInit+0xac>)
 8000db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000db6:	4a07      	ldr	r2, [pc, #28]	@ (8000dd4 <HAL_PCD_MspInit+0xac>)
 8000db8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dbe:	4b05      	ldr	r3, [pc, #20]	@ (8000dd4 <HAL_PCD_MspInit+0xac>)
 8000dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000dca:	bf00      	nop
 8000dcc:	3728      	adds	r7, #40	@ 0x28
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	40020000 	.word	0x40020000

08000ddc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000de0:	bf00      	nop
 8000de2:	e7fd      	b.n	8000de0 <NMI_Handler+0x4>

08000de4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de8:	bf00      	nop
 8000dea:	e7fd      	b.n	8000de8 <HardFault_Handler+0x4>

08000dec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000df0:	bf00      	nop
 8000df2:	e7fd      	b.n	8000df0 <MemManage_Handler+0x4>

08000df4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000df8:	bf00      	nop
 8000dfa:	e7fd      	b.n	8000df8 <BusFault_Handler+0x4>

08000dfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e00:	bf00      	nop
 8000e02:	e7fd      	b.n	8000e00 <UsageFault_Handler+0x4>

08000e04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr

08000e12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e12:	b480      	push	{r7}
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr

08000e2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e32:	f000 f951 	bl	80010d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
	...

08000e3c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000e40:	4836      	ldr	r0, [pc, #216]	@ (8000f1c <TIM4_IRQHandler+0xe0>)
 8000e42:	f001 ffe1 	bl	8002e08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  counter = counter % 255;
 8000e46:	4b36      	ldr	r3, [pc, #216]	@ (8000f20 <TIM4_IRQHandler+0xe4>)
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	4b36      	ldr	r3, [pc, #216]	@ (8000f24 <TIM4_IRQHandler+0xe8>)
 8000e4c:	fb83 1302 	smull	r1, r3, r3, r2
 8000e50:	4413      	add	r3, r2
 8000e52:	11d9      	asrs	r1, r3, #7
 8000e54:	17d3      	asrs	r3, r2, #31
 8000e56:	1ac9      	subs	r1, r1, r3
 8000e58:	460b      	mov	r3, r1
 8000e5a:	021b      	lsls	r3, r3, #8
 8000e5c:	1a5b      	subs	r3, r3, r1
 8000e5e:	1ad1      	subs	r1, r2, r3
 8000e60:	4b2f      	ldr	r3, [pc, #188]	@ (8000f20 <TIM4_IRQHandler+0xe4>)
 8000e62:	6019      	str	r1, [r3, #0]
  colors.red = colors.red % 255;
 8000e64:	4b30      	ldr	r3, [pc, #192]	@ (8000f28 <TIM4_IRQHandler+0xec>)
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	4b2e      	ldr	r3, [pc, #184]	@ (8000f24 <TIM4_IRQHandler+0xe8>)
 8000e6a:	fb83 1302 	smull	r1, r3, r3, r2
 8000e6e:	4413      	add	r3, r2
 8000e70:	11d9      	asrs	r1, r3, #7
 8000e72:	17d3      	asrs	r3, r2, #31
 8000e74:	1ac9      	subs	r1, r1, r3
 8000e76:	460b      	mov	r3, r1
 8000e78:	021b      	lsls	r3, r3, #8
 8000e7a:	1a5b      	subs	r3, r3, r1
 8000e7c:	1ad1      	subs	r1, r2, r3
 8000e7e:	4b2a      	ldr	r3, [pc, #168]	@ (8000f28 <TIM4_IRQHandler+0xec>)
 8000e80:	6019      	str	r1, [r3, #0]
  colors.green = colors.green % 255;
 8000e82:	4b29      	ldr	r3, [pc, #164]	@ (8000f28 <TIM4_IRQHandler+0xec>)
 8000e84:	685a      	ldr	r2, [r3, #4]
 8000e86:	4b27      	ldr	r3, [pc, #156]	@ (8000f24 <TIM4_IRQHandler+0xe8>)
 8000e88:	fb83 1302 	smull	r1, r3, r3, r2
 8000e8c:	4413      	add	r3, r2
 8000e8e:	11d9      	asrs	r1, r3, #7
 8000e90:	17d3      	asrs	r3, r2, #31
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	460b      	mov	r3, r1
 8000e96:	021b      	lsls	r3, r3, #8
 8000e98:	1a5b      	subs	r3, r3, r1
 8000e9a:	1ad1      	subs	r1, r2, r3
 8000e9c:	4b22      	ldr	r3, [pc, #136]	@ (8000f28 <TIM4_IRQHandler+0xec>)
 8000e9e:	6059      	str	r1, [r3, #4]
  colors.blue = colors.blue % 255;
 8000ea0:	4b21      	ldr	r3, [pc, #132]	@ (8000f28 <TIM4_IRQHandler+0xec>)
 8000ea2:	689a      	ldr	r2, [r3, #8]
 8000ea4:	4b1f      	ldr	r3, [pc, #124]	@ (8000f24 <TIM4_IRQHandler+0xe8>)
 8000ea6:	fb83 1302 	smull	r1, r3, r3, r2
 8000eaa:	4413      	add	r3, r2
 8000eac:	11d9      	asrs	r1, r3, #7
 8000eae:	17d3      	asrs	r3, r2, #31
 8000eb0:	1ac9      	subs	r1, r1, r3
 8000eb2:	460b      	mov	r3, r1
 8000eb4:	021b      	lsls	r3, r3, #8
 8000eb6:	1a5b      	subs	r3, r3, r1
 8000eb8:	1ad1      	subs	r1, r2, r3
 8000eba:	4b1b      	ldr	r3, [pc, #108]	@ (8000f28 <TIM4_IRQHandler+0xec>)
 8000ebc:	6099      	str	r1, [r3, #8]

  if (counter == 0){
 8000ebe:	4b18      	ldr	r3, [pc, #96]	@ (8000f20 <TIM4_IRQHandler+0xe4>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d10e      	bne.n	8000ee4 <TIM4_IRQHandler+0xa8>
	  colors.red++;
 8000ec6:	4b18      	ldr	r3, [pc, #96]	@ (8000f28 <TIM4_IRQHandler+0xec>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	4a16      	ldr	r2, [pc, #88]	@ (8000f28 <TIM4_IRQHandler+0xec>)
 8000ece:	6013      	str	r3, [r2, #0]
	  colors.green = colors.green + 2;
 8000ed0:	4b15      	ldr	r3, [pc, #84]	@ (8000f28 <TIM4_IRQHandler+0xec>)
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	3302      	adds	r3, #2
 8000ed6:	4a14      	ldr	r2, [pc, #80]	@ (8000f28 <TIM4_IRQHandler+0xec>)
 8000ed8:	6053      	str	r3, [r2, #4]
	  colors.blue = colors.blue + 4;
 8000eda:	4b13      	ldr	r3, [pc, #76]	@ (8000f28 <TIM4_IRQHandler+0xec>)
 8000edc:	689b      	ldr	r3, [r3, #8]
 8000ede:	3304      	adds	r3, #4
 8000ee0:	4a11      	ldr	r2, [pc, #68]	@ (8000f28 <TIM4_IRQHandler+0xec>)
 8000ee2:	6093      	str	r3, [r2, #8]
  }

  counter ++;
 8000ee4:	4b0e      	ldr	r3, [pc, #56]	@ (8000f20 <TIM4_IRQHandler+0xe4>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	4a0d      	ldr	r2, [pc, #52]	@ (8000f20 <TIM4_IRQHandler+0xe4>)
 8000eec:	6013      	str	r3, [r2, #0]

  __HAL_TIM_SET_COMPARE(&htim4, CHANNEL_1, colors.red);
 8000eee:	4b0e      	ldr	r3, [pc, #56]	@ (8000f28 <TIM4_IRQHandler+0xec>)
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	4b0a      	ldr	r3, [pc, #40]	@ (8000f1c <TIM4_IRQHandler+0xe0>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	635a      	str	r2, [r3, #52]	@ 0x34
  pwm_setvalue(&htim4, CHANNEL_2, colors.green);
 8000ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8000f28 <TIM4_IRQHandler+0xec>)
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	b29b      	uxth	r3, r3
 8000efe:	461a      	mov	r2, r3
 8000f00:	2108      	movs	r1, #8
 8000f02:	4806      	ldr	r0, [pc, #24]	@ (8000f1c <TIM4_IRQHandler+0xe0>)
 8000f04:	f000 f812 	bl	8000f2c <pwm_setvalue>
  pwm_setvalue_alt(&htim4, CHANNEL_3, colors.blue);
 8000f08:	4b07      	ldr	r3, [pc, #28]	@ (8000f28 <TIM4_IRQHandler+0xec>)
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	b29b      	uxth	r3, r3
 8000f0e:	461a      	mov	r2, r3
 8000f10:	210c      	movs	r1, #12
 8000f12:	4802      	ldr	r0, [pc, #8]	@ (8000f1c <TIM4_IRQHandler+0xe0>)
 8000f14:	f000 f828 	bl	8000f68 <pwm_setvalue_alt>


  /* USER CODE END TIM4_IRQn 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000250 	.word	0x20000250
 8000f20:	200007d8 	.word	0x200007d8
 8000f24:	80808081 	.word	0x80808081
 8000f28:	200007cc 	.word	0x200007cc

08000f2c <pwm_setvalue>:

/* USER CODE BEGIN 1 */

void pwm_setvalue(TIM_HandleTypeDef *htim, uint32_t TIM_CHANNEL , uint16_t value)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b08c      	sub	sp, #48	@ 0x30
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	4613      	mov	r3, r2
 8000f38:	80fb      	strh	r3, [r7, #6]
    TIM_OC_InitTypeDef sConfigOC;

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f3a:	2360      	movs	r3, #96	@ 0x60
 8000f3c:	617b      	str	r3, [r7, #20]
    sConfigOC.Pulse = value;
 8000f3e:	88fb      	ldrh	r3, [r7, #6]
 8000f40:	61bb      	str	r3, [r7, #24]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61fb      	str	r3, [r7, #28]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f46:	2300      	movs	r3, #0
 8000f48:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_TIM_PWM_ConfigChannel(htim, &sConfigOC, TIM_CHANNEL);
 8000f4a:	f107 0314 	add.w	r3, r7, #20
 8000f4e:	68ba      	ldr	r2, [r7, #8]
 8000f50:	4619      	mov	r1, r3
 8000f52:	68f8      	ldr	r0, [r7, #12]
 8000f54:	f002 f848 	bl	8002fe8 <HAL_TIM_PWM_ConfigChannel>
    HAL_TIM_PWM_Start(htim, TIM_CHANNEL);
 8000f58:	68b9      	ldr	r1, [r7, #8]
 8000f5a:	68f8      	ldr	r0, [r7, #12]
 8000f5c:	f001 fd76 	bl	8002a4c <HAL_TIM_PWM_Start>
}
 8000f60:	bf00      	nop
 8000f62:	3730      	adds	r7, #48	@ 0x30
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <pwm_setvalue_alt>:

void pwm_setvalue_alt(TIM_HandleTypeDef *htim, uint32_t TIM_CHANNEL , uint16_t value){
 8000f68:	b480      	push	{r7}
 8000f6a:	b085      	sub	sp, #20
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	4613      	mov	r3, r2
 8000f74:	80fb      	strh	r3, [r7, #6]
	switch (TIM_CHANNEL){
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	2b0c      	cmp	r3, #12
 8000f7a:	d013      	beq.n	8000fa4 <pwm_setvalue_alt+0x3c>
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	2b0c      	cmp	r3, #12
 8000f80:	d815      	bhi.n	8000fae <pwm_setvalue_alt+0x46>
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d003      	beq.n	8000f90 <pwm_setvalue_alt+0x28>
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	2b08      	cmp	r3, #8
 8000f8c:	d005      	beq.n	8000f9a <pwm_setvalue_alt+0x32>
			break;
		case CHANNEL_3:
			htim->Instance->CCR4 = value;
			break;
	}
}
 8000f8e:	e00e      	b.n	8000fae <pwm_setvalue_alt+0x46>
			htim->Instance->CCR1 = value;
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	88fa      	ldrh	r2, [r7, #6]
 8000f96:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 8000f98:	e009      	b.n	8000fae <pwm_setvalue_alt+0x46>
			htim->Instance->CCR3 = value;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	88fa      	ldrh	r2, [r7, #6]
 8000fa0:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 8000fa2:	e004      	b.n	8000fae <pwm_setvalue_alt+0x46>
			htim->Instance->CCR4 = value;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	88fa      	ldrh	r2, [r7, #6]
 8000faa:	641a      	str	r2, [r3, #64]	@ 0x40
			break;
 8000fac:	bf00      	nop
}
 8000fae:	bf00      	nop
 8000fb0:	3714      	adds	r7, #20
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
	...

08000fbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fc0:	4b06      	ldr	r3, [pc, #24]	@ (8000fdc <SystemInit+0x20>)
 8000fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fc6:	4a05      	ldr	r2, [pc, #20]	@ (8000fdc <SystemInit+0x20>)
 8000fc8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fcc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000fe0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001018 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fe4:	f7ff ffea 	bl	8000fbc <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fe8:	480c      	ldr	r0, [pc, #48]	@ (800101c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fea:	490d      	ldr	r1, [pc, #52]	@ (8001020 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fec:	4a0d      	ldr	r2, [pc, #52]	@ (8001024 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff0:	e002      	b.n	8000ff8 <LoopCopyDataInit>

08000ff2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ff2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ff6:	3304      	adds	r3, #4

08000ff8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ff8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ffa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ffc:	d3f9      	bcc.n	8000ff2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ffe:	4a0a      	ldr	r2, [pc, #40]	@ (8001028 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001000:	4c0a      	ldr	r4, [pc, #40]	@ (800102c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001002:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001004:	e001      	b.n	800100a <LoopFillZerobss>

08001006 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001006:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001008:	3204      	adds	r2, #4

0800100a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800100a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800100c:	d3fb      	bcc.n	8001006 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800100e:	f003 fb1f 	bl	8004650 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001012:	f7ff fa63 	bl	80004dc <main>
  bx  lr    
 8001016:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001018:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800101c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001020:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001024:	080046d8 	.word	0x080046d8
  ldr r2, =_sbss
 8001028:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800102c:	200007e0 	.word	0x200007e0

08001030 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001030:	e7fe      	b.n	8001030 <ADC_IRQHandler>
	...

08001034 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001038:	4b0e      	ldr	r3, [pc, #56]	@ (8001074 <HAL_Init+0x40>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a0d      	ldr	r2, [pc, #52]	@ (8001074 <HAL_Init+0x40>)
 800103e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001042:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001044:	4b0b      	ldr	r3, [pc, #44]	@ (8001074 <HAL_Init+0x40>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a0a      	ldr	r2, [pc, #40]	@ (8001074 <HAL_Init+0x40>)
 800104a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800104e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001050:	4b08      	ldr	r3, [pc, #32]	@ (8001074 <HAL_Init+0x40>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a07      	ldr	r2, [pc, #28]	@ (8001074 <HAL_Init+0x40>)
 8001056:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800105a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800105c:	2003      	movs	r0, #3
 800105e:	f000 f94f 	bl	8001300 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001062:	2000      	movs	r0, #0
 8001064:	f000 f808 	bl	8001078 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001068:	f7ff fcc6 	bl	80009f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40023c00 	.word	0x40023c00

08001078 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001080:	4b12      	ldr	r3, [pc, #72]	@ (80010cc <HAL_InitTick+0x54>)
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	4b12      	ldr	r3, [pc, #72]	@ (80010d0 <HAL_InitTick+0x58>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	4619      	mov	r1, r3
 800108a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800108e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001092:	fbb2 f3f3 	udiv	r3, r2, r3
 8001096:	4618      	mov	r0, r3
 8001098:	f000 f967 	bl	800136a <HAL_SYSTICK_Config>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e00e      	b.n	80010c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2b0f      	cmp	r3, #15
 80010aa:	d80a      	bhi.n	80010c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010ac:	2200      	movs	r2, #0
 80010ae:	6879      	ldr	r1, [r7, #4]
 80010b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010b4:	f000 f92f 	bl	8001316 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010b8:	4a06      	ldr	r2, [pc, #24]	@ (80010d4 <HAL_InitTick+0x5c>)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010be:	2300      	movs	r3, #0
 80010c0:	e000      	b.n	80010c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20000000 	.word	0x20000000
 80010d0:	20000008 	.word	0x20000008
 80010d4:	20000004 	.word	0x20000004

080010d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010dc:	4b06      	ldr	r3, [pc, #24]	@ (80010f8 <HAL_IncTick+0x20>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	461a      	mov	r2, r3
 80010e2:	4b06      	ldr	r3, [pc, #24]	@ (80010fc <HAL_IncTick+0x24>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4413      	add	r3, r2
 80010e8:	4a04      	ldr	r2, [pc, #16]	@ (80010fc <HAL_IncTick+0x24>)
 80010ea:	6013      	str	r3, [r2, #0]
}
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	20000008 	.word	0x20000008
 80010fc:	200007dc 	.word	0x200007dc

08001100 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  return uwTick;
 8001104:	4b03      	ldr	r3, [pc, #12]	@ (8001114 <HAL_GetTick+0x14>)
 8001106:	681b      	ldr	r3, [r3, #0]
}
 8001108:	4618      	mov	r0, r3
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	200007dc 	.word	0x200007dc

08001118 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001120:	f7ff ffee 	bl	8001100 <HAL_GetTick>
 8001124:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001130:	d005      	beq.n	800113e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001132:	4b0a      	ldr	r3, [pc, #40]	@ (800115c <HAL_Delay+0x44>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	461a      	mov	r2, r3
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	4413      	add	r3, r2
 800113c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800113e:	bf00      	nop
 8001140:	f7ff ffde 	bl	8001100 <HAL_GetTick>
 8001144:	4602      	mov	r2, r0
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	68fa      	ldr	r2, [r7, #12]
 800114c:	429a      	cmp	r2, r3
 800114e:	d8f7      	bhi.n	8001140 <HAL_Delay+0x28>
  {
  }
}
 8001150:	bf00      	nop
 8001152:	bf00      	nop
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20000008 	.word	0x20000008

08001160 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001170:	4b0c      	ldr	r3, [pc, #48]	@ (80011a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001176:	68ba      	ldr	r2, [r7, #8]
 8001178:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800117c:	4013      	ands	r3, r2
 800117e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001188:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800118c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001190:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001192:	4a04      	ldr	r2, [pc, #16]	@ (80011a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	60d3      	str	r3, [r2, #12]
}
 8001198:	bf00      	nop
 800119a:	3714      	adds	r7, #20
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011ac:	4b04      	ldr	r3, [pc, #16]	@ (80011c0 <__NVIC_GetPriorityGrouping+0x18>)
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	0a1b      	lsrs	r3, r3, #8
 80011b2:	f003 0307 	and.w	r3, r3, #7
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	db0b      	blt.n	80011ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	f003 021f 	and.w	r2, r3, #31
 80011dc:	4907      	ldr	r1, [pc, #28]	@ (80011fc <__NVIC_EnableIRQ+0x38>)
 80011de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e2:	095b      	lsrs	r3, r3, #5
 80011e4:	2001      	movs	r0, #1
 80011e6:	fa00 f202 	lsl.w	r2, r0, r2
 80011ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	e000e100 	.word	0xe000e100

08001200 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	6039      	str	r1, [r7, #0]
 800120a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800120c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001210:	2b00      	cmp	r3, #0
 8001212:	db0a      	blt.n	800122a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	b2da      	uxtb	r2, r3
 8001218:	490c      	ldr	r1, [pc, #48]	@ (800124c <__NVIC_SetPriority+0x4c>)
 800121a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121e:	0112      	lsls	r2, r2, #4
 8001220:	b2d2      	uxtb	r2, r2
 8001222:	440b      	add	r3, r1
 8001224:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001228:	e00a      	b.n	8001240 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	b2da      	uxtb	r2, r3
 800122e:	4908      	ldr	r1, [pc, #32]	@ (8001250 <__NVIC_SetPriority+0x50>)
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	f003 030f 	and.w	r3, r3, #15
 8001236:	3b04      	subs	r3, #4
 8001238:	0112      	lsls	r2, r2, #4
 800123a:	b2d2      	uxtb	r2, r2
 800123c:	440b      	add	r3, r1
 800123e:	761a      	strb	r2, [r3, #24]
}
 8001240:	bf00      	nop
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	e000e100 	.word	0xe000e100
 8001250:	e000ed00 	.word	0xe000ed00

08001254 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001254:	b480      	push	{r7}
 8001256:	b089      	sub	sp, #36	@ 0x24
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	f003 0307 	and.w	r3, r3, #7
 8001266:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	f1c3 0307 	rsb	r3, r3, #7
 800126e:	2b04      	cmp	r3, #4
 8001270:	bf28      	it	cs
 8001272:	2304      	movcs	r3, #4
 8001274:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	3304      	adds	r3, #4
 800127a:	2b06      	cmp	r3, #6
 800127c:	d902      	bls.n	8001284 <NVIC_EncodePriority+0x30>
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	3b03      	subs	r3, #3
 8001282:	e000      	b.n	8001286 <NVIC_EncodePriority+0x32>
 8001284:	2300      	movs	r3, #0
 8001286:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001288:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	43da      	mvns	r2, r3
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	401a      	ands	r2, r3
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800129c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	fa01 f303 	lsl.w	r3, r1, r3
 80012a6:	43d9      	mvns	r1, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ac:	4313      	orrs	r3, r2
         );
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3724      	adds	r7, #36	@ 0x24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
	...

080012bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	3b01      	subs	r3, #1
 80012c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012cc:	d301      	bcc.n	80012d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ce:	2301      	movs	r3, #1
 80012d0:	e00f      	b.n	80012f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012d2:	4a0a      	ldr	r2, [pc, #40]	@ (80012fc <SysTick_Config+0x40>)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012da:	210f      	movs	r1, #15
 80012dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012e0:	f7ff ff8e 	bl	8001200 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012e4:	4b05      	ldr	r3, [pc, #20]	@ (80012fc <SysTick_Config+0x40>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ea:	4b04      	ldr	r3, [pc, #16]	@ (80012fc <SysTick_Config+0x40>)
 80012ec:	2207      	movs	r2, #7
 80012ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	e000e010 	.word	0xe000e010

08001300 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f7ff ff29 	bl	8001160 <__NVIC_SetPriorityGrouping>
}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001316:	b580      	push	{r7, lr}
 8001318:	b086      	sub	sp, #24
 800131a:	af00      	add	r7, sp, #0
 800131c:	4603      	mov	r3, r0
 800131e:	60b9      	str	r1, [r7, #8]
 8001320:	607a      	str	r2, [r7, #4]
 8001322:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001328:	f7ff ff3e 	bl	80011a8 <__NVIC_GetPriorityGrouping>
 800132c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	68b9      	ldr	r1, [r7, #8]
 8001332:	6978      	ldr	r0, [r7, #20]
 8001334:	f7ff ff8e 	bl	8001254 <NVIC_EncodePriority>
 8001338:	4602      	mov	r2, r0
 800133a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800133e:	4611      	mov	r1, r2
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff ff5d 	bl	8001200 <__NVIC_SetPriority>
}
 8001346:	bf00      	nop
 8001348:	3718      	adds	r7, #24
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	4603      	mov	r3, r0
 8001356:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff ff31 	bl	80011c4 <__NVIC_EnableIRQ>
}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b082      	sub	sp, #8
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff ffa2 	bl	80012bc <SysTick_Config>
 8001378:	4603      	mov	r3, r0
}
 800137a:	4618      	mov	r0, r3
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
	...

08001384 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d101      	bne.n	8001396 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e08a      	b.n	80014ac <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800139c:	2b00      	cmp	r3, #0
 800139e:	d106      	bne.n	80013ae <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2223      	movs	r2, #35	@ 0x23
 80013a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f7ff fb4d 	bl	8000a48 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	60bb      	str	r3, [r7, #8]
 80013b2:	4b40      	ldr	r3, [pc, #256]	@ (80014b4 <HAL_ETH_Init+0x130>)
 80013b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013b6:	4a3f      	ldr	r2, [pc, #252]	@ (80014b4 <HAL_ETH_Init+0x130>)
 80013b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80013be:	4b3d      	ldr	r3, [pc, #244]	@ (80014b4 <HAL_ETH_Init+0x130>)
 80013c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013c6:	60bb      	str	r3, [r7, #8]
 80013c8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80013ca:	4b3b      	ldr	r3, [pc, #236]	@ (80014b8 <HAL_ETH_Init+0x134>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	4a3a      	ldr	r2, [pc, #232]	@ (80014b8 <HAL_ETH_Init+0x134>)
 80013d0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80013d4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80013d6:	4b38      	ldr	r3, [pc, #224]	@ (80014b8 <HAL_ETH_Init+0x134>)
 80013d8:	685a      	ldr	r2, [r3, #4]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	4936      	ldr	r1, [pc, #216]	@ (80014b8 <HAL_ETH_Init+0x134>)
 80013e0:	4313      	orrs	r3, r2
 80013e2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80013e4:	4b34      	ldr	r3, [pc, #208]	@ (80014b8 <HAL_ETH_Init+0x134>)
 80013e6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	6812      	ldr	r2, [r2, #0]
 80013f6:	f043 0301 	orr.w	r3, r3, #1
 80013fa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80013fe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001400:	f7ff fe7e 	bl	8001100 <HAL_GetTick>
 8001404:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001406:	e011      	b.n	800142c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001408:	f7ff fe7a 	bl	8001100 <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001416:	d909      	bls.n	800142c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2204      	movs	r2, #4
 800141c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	22e0      	movs	r2, #224	@ 0xe0
 8001424:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e03f      	b.n	80014ac <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	2b00      	cmp	r3, #0
 800143c:	d1e4      	bne.n	8001408 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f000 f97a 	bl	8001738 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f000 fa25 	bl	8001894 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f000 fa7b 	bl	8001946 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	461a      	mov	r2, r3
 8001456:	2100      	movs	r1, #0
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f000 f9e3 	bl	8001824 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 800146c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	6812      	ldr	r2, [r2, #0]
 800147a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800147e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001482:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8001496:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2200      	movs	r2, #0
 800149e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2210      	movs	r2, #16
 80014a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80014aa:	2300      	movs	r3, #0
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40023800 	.word	0x40023800
 80014b8:	40013800 	.word	0x40013800

080014bc <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	4b53      	ldr	r3, [pc, #332]	@ (8001620 <ETH_SetMACConfig+0x164>)
 80014d2:	4013      	ands	r3, r2
 80014d4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	7b9b      	ldrb	r3, [r3, #14]
 80014da:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80014dc:	683a      	ldr	r2, [r7, #0]
 80014de:	7c12      	ldrb	r2, [r2, #16]
 80014e0:	2a00      	cmp	r2, #0
 80014e2:	d102      	bne.n	80014ea <ETH_SetMACConfig+0x2e>
 80014e4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80014e8:	e000      	b.n	80014ec <ETH_SetMACConfig+0x30>
 80014ea:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80014ec:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80014ee:	683a      	ldr	r2, [r7, #0]
 80014f0:	7c52      	ldrb	r2, [r2, #17]
 80014f2:	2a00      	cmp	r2, #0
 80014f4:	d102      	bne.n	80014fc <ETH_SetMACConfig+0x40>
 80014f6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80014fa:	e000      	b.n	80014fe <ETH_SetMACConfig+0x42>
 80014fc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80014fe:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001504:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	7fdb      	ldrb	r3, [r3, #31]
 800150a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800150c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001512:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001514:	683a      	ldr	r2, [r7, #0]
 8001516:	7f92      	ldrb	r2, [r2, #30]
 8001518:	2a00      	cmp	r2, #0
 800151a:	d102      	bne.n	8001522 <ETH_SetMACConfig+0x66>
 800151c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001520:	e000      	b.n	8001524 <ETH_SetMACConfig+0x68>
 8001522:	2200      	movs	r2, #0
                        macconf->Speed |
 8001524:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	7f1b      	ldrb	r3, [r3, #28]
 800152a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800152c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001532:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	791b      	ldrb	r3, [r3, #4]
 8001538:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800153a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800153c:	683a      	ldr	r2, [r7, #0]
 800153e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001542:	2a00      	cmp	r2, #0
 8001544:	d102      	bne.n	800154c <ETH_SetMACConfig+0x90>
 8001546:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800154a:	e000      	b.n	800154e <ETH_SetMACConfig+0x92>
 800154c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800154e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	7bdb      	ldrb	r3, [r3, #15]
 8001554:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001556:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800155c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001564:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001566:	4313      	orrs	r3, r2
 8001568:	68fa      	ldr	r2, [r7, #12]
 800156a:	4313      	orrs	r3, r2
 800156c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	68fa      	ldr	r2, [r7, #12]
 8001574:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800157e:	2001      	movs	r0, #1
 8001580:	f7ff fdca 	bl	8001118 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	68fa      	ldr	r2, [r7, #12]
 800158a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001594:	68fa      	ldr	r2, [r7, #12]
 8001596:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800159a:	4013      	ands	r3, r2
 800159c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015a2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80015aa:	2a00      	cmp	r2, #0
 80015ac:	d101      	bne.n	80015b2 <ETH_SetMACConfig+0xf6>
 80015ae:	2280      	movs	r2, #128	@ 0x80
 80015b0:	e000      	b.n	80015b4 <ETH_SetMACConfig+0xf8>
 80015b2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80015b4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80015ba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80015bc:	683a      	ldr	r2, [r7, #0]
 80015be:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80015c2:	2a01      	cmp	r2, #1
 80015c4:	d101      	bne.n	80015ca <ETH_SetMACConfig+0x10e>
 80015c6:	2208      	movs	r2, #8
 80015c8:	e000      	b.n	80015cc <ETH_SetMACConfig+0x110>
 80015ca:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80015cc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80015ce:	683a      	ldr	r2, [r7, #0]
 80015d0:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80015d4:	2a01      	cmp	r2, #1
 80015d6:	d101      	bne.n	80015dc <ETH_SetMACConfig+0x120>
 80015d8:	2204      	movs	r2, #4
 80015da:	e000      	b.n	80015de <ETH_SetMACConfig+0x122>
 80015dc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80015de:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80015e0:	683a      	ldr	r2, [r7, #0]
 80015e2:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80015e6:	2a01      	cmp	r2, #1
 80015e8:	d101      	bne.n	80015ee <ETH_SetMACConfig+0x132>
 80015ea:	2202      	movs	r2, #2
 80015ec:	e000      	b.n	80015f0 <ETH_SetMACConfig+0x134>
 80015ee:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80015f0:	4313      	orrs	r3, r2
 80015f2:	68fa      	ldr	r2, [r7, #12]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	68fa      	ldr	r2, [r7, #12]
 80015fe:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	699b      	ldr	r3, [r3, #24]
 8001606:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001608:	2001      	movs	r0, #1
 800160a:	f7ff fd85 	bl	8001118 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	68fa      	ldr	r2, [r7, #12]
 8001614:	619a      	str	r2, [r3, #24]
}
 8001616:	bf00      	nop
 8001618:	3710      	adds	r7, #16
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	fd20810f 	.word	0xfd20810f

08001624 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800163a:	68fa      	ldr	r2, [r7, #12]
 800163c:	4b3d      	ldr	r3, [pc, #244]	@ (8001734 <ETH_SetDMAConfig+0x110>)
 800163e:	4013      	ands	r3, r2
 8001640:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	7b1b      	ldrb	r3, [r3, #12]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d102      	bne.n	8001650 <ETH_SetDMAConfig+0x2c>
 800164a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800164e:	e000      	b.n	8001652 <ETH_SetDMAConfig+0x2e>
 8001650:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	7b5b      	ldrb	r3, [r3, #13]
 8001656:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001658:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800165a:	683a      	ldr	r2, [r7, #0]
 800165c:	7f52      	ldrb	r2, [r2, #29]
 800165e:	2a00      	cmp	r2, #0
 8001660:	d102      	bne.n	8001668 <ETH_SetDMAConfig+0x44>
 8001662:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001666:	e000      	b.n	800166a <ETH_SetDMAConfig+0x46>
 8001668:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800166a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	7b9b      	ldrb	r3, [r3, #14]
 8001670:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001672:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001678:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	7f1b      	ldrb	r3, [r3, #28]
 800167e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001680:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	7f9b      	ldrb	r3, [r3, #30]
 8001686:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001688:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800168e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001696:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001698:	4313      	orrs	r3, r2
 800169a:	68fa      	ldr	r2, [r7, #12]
 800169c:	4313      	orrs	r3, r2
 800169e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016a8:	461a      	mov	r2, r3
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016b6:	699b      	ldr	r3, [r3, #24]
 80016b8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80016ba:	2001      	movs	r0, #1
 80016bc:	f7ff fd2c 	bl	8001118 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016c8:	461a      	mov	r2, r3
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	791b      	ldrb	r3, [r3, #4]
 80016d2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80016d8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80016de:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80016e4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80016ec:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80016ee:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016f4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80016f6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80016fc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	6812      	ldr	r2, [r2, #0]
 8001702:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001706:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800170a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001718:	2001      	movs	r0, #1
 800171a:	f7ff fcfd 	bl	8001118 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001726:	461a      	mov	r2, r3
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	6013      	str	r3, [r2, #0]
}
 800172c:	bf00      	nop
 800172e:	3710      	adds	r7, #16
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	f8de3f23 	.word	0xf8de3f23

08001738 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b0a6      	sub	sp, #152	@ 0x98
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001740:	2301      	movs	r3, #1
 8001742:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8001746:	2301      	movs	r3, #1
 8001748:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800174c:	2300      	movs	r3, #0
 800174e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001750:	2300      	movs	r3, #0
 8001752:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001756:	2301      	movs	r3, #1
 8001758:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800175c:	2300      	movs	r3, #0
 800175e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001762:	2301      	movs	r3, #1
 8001764:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8001768:	2301      	movs	r3, #1
 800176a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800176e:	2300      	movs	r3, #0
 8001770:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001774:	2300      	movs	r3, #0
 8001776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800177a:	2300      	movs	r3, #0
 800177c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800177e:	2300      	movs	r3, #0
 8001780:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001784:	2300      	movs	r3, #0
 8001786:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001788:	2300      	movs	r3, #0
 800178a:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800178e:	2300      	movs	r3, #0
 8001790:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001794:	2300      	movs	r3, #0
 8001796:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800179a:	2300      	movs	r3, #0
 800179c:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80017a0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80017a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80017a6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80017aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80017ac:	2300      	movs	r3, #0
 80017ae:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80017b2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80017b6:	4619      	mov	r1, r3
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f7ff fe7f 	bl	80014bc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80017be:	2301      	movs	r3, #1
 80017c0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80017c2:	2301      	movs	r3, #1
 80017c4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80017c6:	2301      	movs	r3, #1
 80017c8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80017cc:	2301      	movs	r3, #1
 80017ce:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80017d0:	2300      	movs	r3, #0
 80017d2:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80017d4:	2300      	movs	r3, #0
 80017d6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80017da:	2300      	movs	r3, #0
 80017dc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80017e0:	2300      	movs	r3, #0
 80017e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80017e4:	2301      	movs	r3, #1
 80017e6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80017ea:	2301      	movs	r3, #1
 80017ec:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80017ee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80017f2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80017f4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80017f8:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80017fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017fe:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001800:	2301      	movs	r3, #1
 8001802:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001806:	2300      	movs	r3, #0
 8001808:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800180a:	2300      	movs	r3, #0
 800180c:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800180e:	f107 0308 	add.w	r3, r7, #8
 8001812:	4619      	mov	r1, r3
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f7ff ff05 	bl	8001624 <ETH_SetDMAConfig>
}
 800181a:	bf00      	nop
 800181c:	3798      	adds	r7, #152	@ 0x98
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
	...

08001824 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001824:	b480      	push	{r7}
 8001826:	b087      	sub	sp, #28
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	3305      	adds	r3, #5
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	021b      	lsls	r3, r3, #8
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	3204      	adds	r2, #4
 800183c:	7812      	ldrb	r2, [r2, #0]
 800183e:	4313      	orrs	r3, r2
 8001840:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001842:	68ba      	ldr	r2, [r7, #8]
 8001844:	4b11      	ldr	r3, [pc, #68]	@ (800188c <ETH_MACAddressConfig+0x68>)
 8001846:	4413      	add	r3, r2
 8001848:	461a      	mov	r2, r3
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	3303      	adds	r3, #3
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	061a      	lsls	r2, r3, #24
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	3302      	adds	r3, #2
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	041b      	lsls	r3, r3, #16
 800185e:	431a      	orrs	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3301      	adds	r3, #1
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	021b      	lsls	r3, r3, #8
 8001868:	4313      	orrs	r3, r2
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	7812      	ldrb	r2, [r2, #0]
 800186e:	4313      	orrs	r3, r2
 8001870:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001872:	68ba      	ldr	r2, [r7, #8]
 8001874:	4b06      	ldr	r3, [pc, #24]	@ (8001890 <ETH_MACAddressConfig+0x6c>)
 8001876:	4413      	add	r3, r2
 8001878:	461a      	mov	r2, r3
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	6013      	str	r3, [r2, #0]
}
 800187e:	bf00      	nop
 8001880:	371c      	adds	r7, #28
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	40028040 	.word	0x40028040
 8001890:	40028044 	.word	0x40028044

08001894 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800189c:	2300      	movs	r3, #0
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	e03e      	b.n	8001920 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	68d9      	ldr	r1, [r3, #12]
 80018a6:	68fa      	ldr	r2, [r7, #12]
 80018a8:	4613      	mov	r3, r2
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	4413      	add	r3, r2
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	440b      	add	r3, r1
 80018b2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	2200      	movs	r2, #0
 80018be:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	2200      	movs	r2, #0
 80018c4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	2200      	movs	r2, #0
 80018ca:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80018cc:	68b9      	ldr	r1, [r7, #8]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	68fa      	ldr	r2, [r7, #12]
 80018d2:	3206      	adds	r2, #6
 80018d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d80c      	bhi.n	8001904 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	68d9      	ldr	r1, [r3, #12]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	1c5a      	adds	r2, r3, #1
 80018f2:	4613      	mov	r3, r2
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	4413      	add	r3, r2
 80018f8:	00db      	lsls	r3, r3, #3
 80018fa:	440b      	add	r3, r1
 80018fc:	461a      	mov	r2, r3
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	60da      	str	r2, [r3, #12]
 8001902:	e004      	b.n	800190e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	461a      	mov	r2, r3
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	3301      	adds	r3, #1
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2b03      	cmp	r3, #3
 8001924:	d9bd      	bls.n	80018a2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	68da      	ldr	r2, [r3, #12]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001938:	611a      	str	r2, [r3, #16]
}
 800193a:	bf00      	nop
 800193c:	3714      	adds	r7, #20
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr

08001946 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001946:	b480      	push	{r7}
 8001948:	b085      	sub	sp, #20
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800194e:	2300      	movs	r3, #0
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	e048      	b.n	80019e6 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6919      	ldr	r1, [r3, #16]
 8001958:	68fa      	ldr	r2, [r7, #12]
 800195a:	4613      	mov	r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	4413      	add	r3, r2
 8001960:	00db      	lsls	r3, r3, #3
 8001962:	440b      	add	r3, r1
 8001964:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	2200      	movs	r2, #0
 8001970:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	2200      	movs	r2, #0
 8001976:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	2200      	movs	r2, #0
 800197c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	2200      	movs	r2, #0
 8001982:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	2200      	movs	r2, #0
 8001988:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001990:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	695b      	ldr	r3, [r3, #20]
 8001996:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80019aa:	68b9      	ldr	r1, [r7, #8]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	68fa      	ldr	r2, [r7, #12]
 80019b0:	3212      	adds	r2, #18
 80019b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d80c      	bhi.n	80019d6 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6919      	ldr	r1, [r3, #16]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	1c5a      	adds	r2, r3, #1
 80019c4:	4613      	mov	r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	440b      	add	r3, r1
 80019ce:	461a      	mov	r2, r3
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	60da      	str	r2, [r3, #12]
 80019d4:	e004      	b.n	80019e0 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	691b      	ldr	r3, [r3, #16]
 80019da:	461a      	mov	r2, r3
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	3301      	adds	r3, #1
 80019e4:	60fb      	str	r3, [r7, #12]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2b03      	cmp	r3, #3
 80019ea:	d9b3      	bls.n	8001954 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	691a      	ldr	r2, [r3, #16]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a16:	60da      	str	r2, [r3, #12]
}
 8001a18:	bf00      	nop
 8001a1a:	3714      	adds	r7, #20
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b089      	sub	sp, #36	@ 0x24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a32:	2300      	movs	r3, #0
 8001a34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a36:	2300      	movs	r3, #0
 8001a38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61fb      	str	r3, [r7, #28]
 8001a3e:	e177      	b.n	8001d30 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a40:	2201      	movs	r2, #1
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	697a      	ldr	r2, [r7, #20]
 8001a50:	4013      	ands	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	f040 8166 	bne.w	8001d2a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f003 0303 	and.w	r3, r3, #3
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d005      	beq.n	8001a76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d130      	bne.n	8001ad8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	2203      	movs	r2, #3
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	43db      	mvns	r3, r3
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	68da      	ldr	r2, [r3, #12]
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001aac:	2201      	movs	r2, #1
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	091b      	lsrs	r3, r3, #4
 8001ac2:	f003 0201 	and.w	r2, r3, #1
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f003 0303 	and.w	r3, r3, #3
 8001ae0:	2b03      	cmp	r3, #3
 8001ae2:	d017      	beq.n	8001b14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	2203      	movs	r2, #3
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	43db      	mvns	r3, r3
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	4013      	ands	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	689a      	ldr	r2, [r3, #8]
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f003 0303 	and.w	r3, r3, #3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d123      	bne.n	8001b68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	08da      	lsrs	r2, r3, #3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3208      	adds	r2, #8
 8001b28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	f003 0307 	and.w	r3, r3, #7
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	220f      	movs	r2, #15
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	4013      	ands	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	691a      	ldr	r2, [r3, #16]
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	08da      	lsrs	r2, r3, #3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	3208      	adds	r2, #8
 8001b62:	69b9      	ldr	r1, [r7, #24]
 8001b64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	2203      	movs	r2, #3
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f003 0203 	and.w	r2, r3, #3
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	f000 80c0 	beq.w	8001d2a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	4b66      	ldr	r3, [pc, #408]	@ (8001d48 <HAL_GPIO_Init+0x324>)
 8001bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bb2:	4a65      	ldr	r2, [pc, #404]	@ (8001d48 <HAL_GPIO_Init+0x324>)
 8001bb4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bba:	4b63      	ldr	r3, [pc, #396]	@ (8001d48 <HAL_GPIO_Init+0x324>)
 8001bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bc6:	4a61      	ldr	r2, [pc, #388]	@ (8001d4c <HAL_GPIO_Init+0x328>)
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	089b      	lsrs	r3, r3, #2
 8001bcc:	3302      	adds	r3, #2
 8001bce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	f003 0303 	and.w	r3, r3, #3
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	220f      	movs	r2, #15
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	43db      	mvns	r3, r3
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	4013      	ands	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a58      	ldr	r2, [pc, #352]	@ (8001d50 <HAL_GPIO_Init+0x32c>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d037      	beq.n	8001c62 <HAL_GPIO_Init+0x23e>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a57      	ldr	r2, [pc, #348]	@ (8001d54 <HAL_GPIO_Init+0x330>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d031      	beq.n	8001c5e <HAL_GPIO_Init+0x23a>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a56      	ldr	r2, [pc, #344]	@ (8001d58 <HAL_GPIO_Init+0x334>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d02b      	beq.n	8001c5a <HAL_GPIO_Init+0x236>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a55      	ldr	r2, [pc, #340]	@ (8001d5c <HAL_GPIO_Init+0x338>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d025      	beq.n	8001c56 <HAL_GPIO_Init+0x232>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a54      	ldr	r2, [pc, #336]	@ (8001d60 <HAL_GPIO_Init+0x33c>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d01f      	beq.n	8001c52 <HAL_GPIO_Init+0x22e>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a53      	ldr	r2, [pc, #332]	@ (8001d64 <HAL_GPIO_Init+0x340>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d019      	beq.n	8001c4e <HAL_GPIO_Init+0x22a>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a52      	ldr	r2, [pc, #328]	@ (8001d68 <HAL_GPIO_Init+0x344>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d013      	beq.n	8001c4a <HAL_GPIO_Init+0x226>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a51      	ldr	r2, [pc, #324]	@ (8001d6c <HAL_GPIO_Init+0x348>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d00d      	beq.n	8001c46 <HAL_GPIO_Init+0x222>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a50      	ldr	r2, [pc, #320]	@ (8001d70 <HAL_GPIO_Init+0x34c>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d007      	beq.n	8001c42 <HAL_GPIO_Init+0x21e>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a4f      	ldr	r2, [pc, #316]	@ (8001d74 <HAL_GPIO_Init+0x350>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d101      	bne.n	8001c3e <HAL_GPIO_Init+0x21a>
 8001c3a:	2309      	movs	r3, #9
 8001c3c:	e012      	b.n	8001c64 <HAL_GPIO_Init+0x240>
 8001c3e:	230a      	movs	r3, #10
 8001c40:	e010      	b.n	8001c64 <HAL_GPIO_Init+0x240>
 8001c42:	2308      	movs	r3, #8
 8001c44:	e00e      	b.n	8001c64 <HAL_GPIO_Init+0x240>
 8001c46:	2307      	movs	r3, #7
 8001c48:	e00c      	b.n	8001c64 <HAL_GPIO_Init+0x240>
 8001c4a:	2306      	movs	r3, #6
 8001c4c:	e00a      	b.n	8001c64 <HAL_GPIO_Init+0x240>
 8001c4e:	2305      	movs	r3, #5
 8001c50:	e008      	b.n	8001c64 <HAL_GPIO_Init+0x240>
 8001c52:	2304      	movs	r3, #4
 8001c54:	e006      	b.n	8001c64 <HAL_GPIO_Init+0x240>
 8001c56:	2303      	movs	r3, #3
 8001c58:	e004      	b.n	8001c64 <HAL_GPIO_Init+0x240>
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	e002      	b.n	8001c64 <HAL_GPIO_Init+0x240>
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e000      	b.n	8001c64 <HAL_GPIO_Init+0x240>
 8001c62:	2300      	movs	r3, #0
 8001c64:	69fa      	ldr	r2, [r7, #28]
 8001c66:	f002 0203 	and.w	r2, r2, #3
 8001c6a:	0092      	lsls	r2, r2, #2
 8001c6c:	4093      	lsls	r3, r2
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c74:	4935      	ldr	r1, [pc, #212]	@ (8001d4c <HAL_GPIO_Init+0x328>)
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	089b      	lsrs	r3, r3, #2
 8001c7a:	3302      	adds	r3, #2
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c82:	4b3d      	ldr	r3, [pc, #244]	@ (8001d78 <HAL_GPIO_Init+0x354>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d003      	beq.n	8001ca6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ca6:	4a34      	ldr	r2, [pc, #208]	@ (8001d78 <HAL_GPIO_Init+0x354>)
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cac:	4b32      	ldr	r3, [pc, #200]	@ (8001d78 <HAL_GPIO_Init+0x354>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d003      	beq.n	8001cd0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cd0:	4a29      	ldr	r2, [pc, #164]	@ (8001d78 <HAL_GPIO_Init+0x354>)
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cd6:	4b28      	ldr	r3, [pc, #160]	@ (8001d78 <HAL_GPIO_Init+0x354>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d003      	beq.n	8001cfa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cfa:	4a1f      	ldr	r2, [pc, #124]	@ (8001d78 <HAL_GPIO_Init+0x354>)
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d00:	4b1d      	ldr	r3, [pc, #116]	@ (8001d78 <HAL_GPIO_Init+0x354>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d003      	beq.n	8001d24 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d24:	4a14      	ldr	r2, [pc, #80]	@ (8001d78 <HAL_GPIO_Init+0x354>)
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	61fb      	str	r3, [r7, #28]
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	2b0f      	cmp	r3, #15
 8001d34:	f67f ae84 	bls.w	8001a40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d38:	bf00      	nop
 8001d3a:	bf00      	nop
 8001d3c:	3724      	adds	r7, #36	@ 0x24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	40013800 	.word	0x40013800
 8001d50:	40020000 	.word	0x40020000
 8001d54:	40020400 	.word	0x40020400
 8001d58:	40020800 	.word	0x40020800
 8001d5c:	40020c00 	.word	0x40020c00
 8001d60:	40021000 	.word	0x40021000
 8001d64:	40021400 	.word	0x40021400
 8001d68:	40021800 	.word	0x40021800
 8001d6c:	40021c00 	.word	0x40021c00
 8001d70:	40022000 	.word	0x40022000
 8001d74:	40022400 	.word	0x40022400
 8001d78:	40013c00 	.word	0x40013c00

08001d7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	460b      	mov	r3, r1
 8001d86:	807b      	strh	r3, [r7, #2]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d8c:	787b      	ldrb	r3, [r7, #1]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d003      	beq.n	8001d9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d92:	887a      	ldrh	r2, [r7, #2]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d98:	e003      	b.n	8001da2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d9a:	887b      	ldrh	r3, [r7, #2]
 8001d9c:	041a      	lsls	r2, r3, #16
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	619a      	str	r2, [r3, #24]
}
 8001da2:	bf00      	nop
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b086      	sub	sp, #24
 8001db2:	af02      	add	r7, sp, #8
 8001db4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d101      	bne.n	8001dc0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e101      	b.n	8001fc4 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d106      	bne.n	8001de0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f7fe ffa4 	bl	8000d28 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2203      	movs	r2, #3
 8001de4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001dee:	d102      	bne.n	8001df6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f002 f984 	bl	8004108 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6818      	ldr	r0, [r3, #0]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	7c1a      	ldrb	r2, [r3, #16]
 8001e08:	f88d 2000 	strb.w	r2, [sp]
 8001e0c:	3304      	adds	r3, #4
 8001e0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e10:	f002 f916 	bl	8004040 <USB_CoreInit>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d005      	beq.n	8001e26 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2202      	movs	r2, #2
 8001e1e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e0ce      	b.n	8001fc4 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f002 f97c 	bl	800412a <USB_SetCurrentMode>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d005      	beq.n	8001e44 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2202      	movs	r2, #2
 8001e3c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e0bf      	b.n	8001fc4 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e44:	2300      	movs	r3, #0
 8001e46:	73fb      	strb	r3, [r7, #15]
 8001e48:	e04a      	b.n	8001ee0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e4a:	7bfa      	ldrb	r2, [r7, #15]
 8001e4c:	6879      	ldr	r1, [r7, #4]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	4413      	add	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	440b      	add	r3, r1
 8001e58:	3315      	adds	r3, #21
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e5e:	7bfa      	ldrb	r2, [r7, #15]
 8001e60:	6879      	ldr	r1, [r7, #4]
 8001e62:	4613      	mov	r3, r2
 8001e64:	00db      	lsls	r3, r3, #3
 8001e66:	4413      	add	r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	440b      	add	r3, r1
 8001e6c:	3314      	adds	r3, #20
 8001e6e:	7bfa      	ldrb	r2, [r7, #15]
 8001e70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e72:	7bfa      	ldrb	r2, [r7, #15]
 8001e74:	7bfb      	ldrb	r3, [r7, #15]
 8001e76:	b298      	uxth	r0, r3
 8001e78:	6879      	ldr	r1, [r7, #4]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	4413      	add	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	440b      	add	r3, r1
 8001e84:	332e      	adds	r3, #46	@ 0x2e
 8001e86:	4602      	mov	r2, r0
 8001e88:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e8a:	7bfa      	ldrb	r2, [r7, #15]
 8001e8c:	6879      	ldr	r1, [r7, #4]
 8001e8e:	4613      	mov	r3, r2
 8001e90:	00db      	lsls	r3, r3, #3
 8001e92:	4413      	add	r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	440b      	add	r3, r1
 8001e98:	3318      	adds	r3, #24
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e9e:	7bfa      	ldrb	r2, [r7, #15]
 8001ea0:	6879      	ldr	r1, [r7, #4]
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	00db      	lsls	r3, r3, #3
 8001ea6:	4413      	add	r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	440b      	add	r3, r1
 8001eac:	331c      	adds	r3, #28
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001eb2:	7bfa      	ldrb	r2, [r7, #15]
 8001eb4:	6879      	ldr	r1, [r7, #4]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	00db      	lsls	r3, r3, #3
 8001eba:	4413      	add	r3, r2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	440b      	add	r3, r1
 8001ec0:	3320      	adds	r3, #32
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ec6:	7bfa      	ldrb	r2, [r7, #15]
 8001ec8:	6879      	ldr	r1, [r7, #4]
 8001eca:	4613      	mov	r3, r2
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	4413      	add	r3, r2
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	440b      	add	r3, r1
 8001ed4:	3324      	adds	r3, #36	@ 0x24
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001eda:	7bfb      	ldrb	r3, [r7, #15]
 8001edc:	3301      	adds	r3, #1
 8001ede:	73fb      	strb	r3, [r7, #15]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	791b      	ldrb	r3, [r3, #4]
 8001ee4:	7bfa      	ldrb	r2, [r7, #15]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d3af      	bcc.n	8001e4a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001eea:	2300      	movs	r3, #0
 8001eec:	73fb      	strb	r3, [r7, #15]
 8001eee:	e044      	b.n	8001f7a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ef0:	7bfa      	ldrb	r2, [r7, #15]
 8001ef2:	6879      	ldr	r1, [r7, #4]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	4413      	add	r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	440b      	add	r3, r1
 8001efe:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001f02:	2200      	movs	r2, #0
 8001f04:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f06:	7bfa      	ldrb	r2, [r7, #15]
 8001f08:	6879      	ldr	r1, [r7, #4]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	00db      	lsls	r3, r3, #3
 8001f0e:	4413      	add	r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	440b      	add	r3, r1
 8001f14:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001f18:	7bfa      	ldrb	r2, [r7, #15]
 8001f1a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f1c:	7bfa      	ldrb	r2, [r7, #15]
 8001f1e:	6879      	ldr	r1, [r7, #4]
 8001f20:	4613      	mov	r3, r2
 8001f22:	00db      	lsls	r3, r3, #3
 8001f24:	4413      	add	r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	440b      	add	r3, r1
 8001f2a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001f2e:	2200      	movs	r2, #0
 8001f30:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f32:	7bfa      	ldrb	r2, [r7, #15]
 8001f34:	6879      	ldr	r1, [r7, #4]
 8001f36:	4613      	mov	r3, r2
 8001f38:	00db      	lsls	r3, r3, #3
 8001f3a:	4413      	add	r3, r2
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	440b      	add	r3, r1
 8001f40:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f48:	7bfa      	ldrb	r2, [r7, #15]
 8001f4a:	6879      	ldr	r1, [r7, #4]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	4413      	add	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	440b      	add	r3, r1
 8001f56:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f5e:	7bfa      	ldrb	r2, [r7, #15]
 8001f60:	6879      	ldr	r1, [r7, #4]
 8001f62:	4613      	mov	r3, r2
 8001f64:	00db      	lsls	r3, r3, #3
 8001f66:	4413      	add	r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	440b      	add	r3, r1
 8001f6c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f74:	7bfb      	ldrb	r3, [r7, #15]
 8001f76:	3301      	adds	r3, #1
 8001f78:	73fb      	strb	r3, [r7, #15]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	791b      	ldrb	r3, [r3, #4]
 8001f7e:	7bfa      	ldrb	r2, [r7, #15]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d3b5      	bcc.n	8001ef0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6818      	ldr	r0, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	7c1a      	ldrb	r2, [r3, #16]
 8001f8c:	f88d 2000 	strb.w	r2, [sp]
 8001f90:	3304      	adds	r3, #4
 8001f92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f94:	f002 f916 	bl	80041c4 <USB_DevInit>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d005      	beq.n	8001faa <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2202      	movs	r2, #2
 8001fa2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e00c      	b.n	8001fc4 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f002 fade 	bl	800457e <USB_DevDisconnect>

  return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3710      	adds	r7, #16
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e267      	b.n	80024ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d075      	beq.n	80020d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001fea:	4b88      	ldr	r3, [pc, #544]	@ (800220c <HAL_RCC_OscConfig+0x240>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f003 030c 	and.w	r3, r3, #12
 8001ff2:	2b04      	cmp	r3, #4
 8001ff4:	d00c      	beq.n	8002010 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ff6:	4b85      	ldr	r3, [pc, #532]	@ (800220c <HAL_RCC_OscConfig+0x240>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001ffe:	2b08      	cmp	r3, #8
 8002000:	d112      	bne.n	8002028 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002002:	4b82      	ldr	r3, [pc, #520]	@ (800220c <HAL_RCC_OscConfig+0x240>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800200a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800200e:	d10b      	bne.n	8002028 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002010:	4b7e      	ldr	r3, [pc, #504]	@ (800220c <HAL_RCC_OscConfig+0x240>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d05b      	beq.n	80020d4 <HAL_RCC_OscConfig+0x108>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d157      	bne.n	80020d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e242      	b.n	80024ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002030:	d106      	bne.n	8002040 <HAL_RCC_OscConfig+0x74>
 8002032:	4b76      	ldr	r3, [pc, #472]	@ (800220c <HAL_RCC_OscConfig+0x240>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a75      	ldr	r2, [pc, #468]	@ (800220c <HAL_RCC_OscConfig+0x240>)
 8002038:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800203c:	6013      	str	r3, [r2, #0]
 800203e:	e01d      	b.n	800207c <HAL_RCC_OscConfig+0xb0>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002048:	d10c      	bne.n	8002064 <HAL_RCC_OscConfig+0x98>
 800204a:	4b70      	ldr	r3, [pc, #448]	@ (800220c <HAL_RCC_OscConfig+0x240>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a6f      	ldr	r2, [pc, #444]	@ (800220c <HAL_RCC_OscConfig+0x240>)
 8002050:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002054:	6013      	str	r3, [r2, #0]
 8002056:	4b6d      	ldr	r3, [pc, #436]	@ (800220c <HAL_RCC_OscConfig+0x240>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a6c      	ldr	r2, [pc, #432]	@ (800220c <HAL_RCC_OscConfig+0x240>)
 800205c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002060:	6013      	str	r3, [r2, #0]
 8002062:	e00b      	b.n	800207c <HAL_RCC_OscConfig+0xb0>
 8002064:	4b69      	ldr	r3, [pc, #420]	@ (800220c <HAL_RCC_OscConfig+0x240>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a68      	ldr	r2, [pc, #416]	@ (800220c <HAL_RCC_OscConfig+0x240>)
 800206a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800206e:	6013      	str	r3, [r2, #0]
 8002070:	4b66      	ldr	r3, [pc, #408]	@ (800220c <HAL_RCC_OscConfig+0x240>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a65      	ldr	r2, [pc, #404]	@ (800220c <HAL_RCC_OscConfig+0x240>)
 8002076:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800207a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d013      	beq.n	80020ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002084:	f7ff f83c 	bl	8001100 <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800208a:	e008      	b.n	800209e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800208c:	f7ff f838 	bl	8001100 <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b64      	cmp	r3, #100	@ 0x64
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e207      	b.n	80024ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800209e:	4b5b      	ldr	r3, [pc, #364]	@ (800220c <HAL_RCC_OscConfig+0x240>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d0f0      	beq.n	800208c <HAL_RCC_OscConfig+0xc0>
 80020aa:	e014      	b.n	80020d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ac:	f7ff f828 	bl	8001100 <HAL_GetTick>
 80020b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020b2:	e008      	b.n	80020c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020b4:	f7ff f824 	bl	8001100 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b64      	cmp	r3, #100	@ 0x64
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e1f3      	b.n	80024ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020c6:	4b51      	ldr	r3, [pc, #324]	@ (800220c <HAL_RCC_OscConfig+0x240>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1f0      	bne.n	80020b4 <HAL_RCC_OscConfig+0xe8>
 80020d2:	e000      	b.n	80020d6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d063      	beq.n	80021aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80020e2:	4b4a      	ldr	r3, [pc, #296]	@ (800220c <HAL_RCC_OscConfig+0x240>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f003 030c 	and.w	r3, r3, #12
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d00b      	beq.n	8002106 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020ee:	4b47      	ldr	r3, [pc, #284]	@ (800220c <HAL_RCC_OscConfig+0x240>)
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80020f6:	2b08      	cmp	r3, #8
 80020f8:	d11c      	bne.n	8002134 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020fa:	4b44      	ldr	r3, [pc, #272]	@ (800220c <HAL_RCC_OscConfig+0x240>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d116      	bne.n	8002134 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002106:	4b41      	ldr	r3, [pc, #260]	@ (800220c <HAL_RCC_OscConfig+0x240>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d005      	beq.n	800211e <HAL_RCC_OscConfig+0x152>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d001      	beq.n	800211e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e1c7      	b.n	80024ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800211e:	4b3b      	ldr	r3, [pc, #236]	@ (800220c <HAL_RCC_OscConfig+0x240>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	4937      	ldr	r1, [pc, #220]	@ (800220c <HAL_RCC_OscConfig+0x240>)
 800212e:	4313      	orrs	r3, r2
 8002130:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002132:	e03a      	b.n	80021aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d020      	beq.n	800217e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800213c:	4b34      	ldr	r3, [pc, #208]	@ (8002210 <HAL_RCC_OscConfig+0x244>)
 800213e:	2201      	movs	r2, #1
 8002140:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002142:	f7fe ffdd 	bl	8001100 <HAL_GetTick>
 8002146:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002148:	e008      	b.n	800215c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800214a:	f7fe ffd9 	bl	8001100 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e1a8      	b.n	80024ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800215c:	4b2b      	ldr	r3, [pc, #172]	@ (800220c <HAL_RCC_OscConfig+0x240>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d0f0      	beq.n	800214a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002168:	4b28      	ldr	r3, [pc, #160]	@ (800220c <HAL_RCC_OscConfig+0x240>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	691b      	ldr	r3, [r3, #16]
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	4925      	ldr	r1, [pc, #148]	@ (800220c <HAL_RCC_OscConfig+0x240>)
 8002178:	4313      	orrs	r3, r2
 800217a:	600b      	str	r3, [r1, #0]
 800217c:	e015      	b.n	80021aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800217e:	4b24      	ldr	r3, [pc, #144]	@ (8002210 <HAL_RCC_OscConfig+0x244>)
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002184:	f7fe ffbc 	bl	8001100 <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800218c:	f7fe ffb8 	bl	8001100 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e187      	b.n	80024ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800219e:	4b1b      	ldr	r3, [pc, #108]	@ (800220c <HAL_RCC_OscConfig+0x240>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1f0      	bne.n	800218c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0308 	and.w	r3, r3, #8
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d036      	beq.n	8002224 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d016      	beq.n	80021ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021be:	4b15      	ldr	r3, [pc, #84]	@ (8002214 <HAL_RCC_OscConfig+0x248>)
 80021c0:	2201      	movs	r2, #1
 80021c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021c4:	f7fe ff9c 	bl	8001100 <HAL_GetTick>
 80021c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ca:	e008      	b.n	80021de <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021cc:	f7fe ff98 	bl	8001100 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e167      	b.n	80024ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021de:	4b0b      	ldr	r3, [pc, #44]	@ (800220c <HAL_RCC_OscConfig+0x240>)
 80021e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d0f0      	beq.n	80021cc <HAL_RCC_OscConfig+0x200>
 80021ea:	e01b      	b.n	8002224 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021ec:	4b09      	ldr	r3, [pc, #36]	@ (8002214 <HAL_RCC_OscConfig+0x248>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021f2:	f7fe ff85 	bl	8001100 <HAL_GetTick>
 80021f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021f8:	e00e      	b.n	8002218 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021fa:	f7fe ff81 	bl	8001100 <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	2b02      	cmp	r3, #2
 8002206:	d907      	bls.n	8002218 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e150      	b.n	80024ae <HAL_RCC_OscConfig+0x4e2>
 800220c:	40023800 	.word	0x40023800
 8002210:	42470000 	.word	0x42470000
 8002214:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002218:	4b88      	ldr	r3, [pc, #544]	@ (800243c <HAL_RCC_OscConfig+0x470>)
 800221a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1ea      	bne.n	80021fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0304 	and.w	r3, r3, #4
 800222c:	2b00      	cmp	r3, #0
 800222e:	f000 8097 	beq.w	8002360 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002232:	2300      	movs	r3, #0
 8002234:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002236:	4b81      	ldr	r3, [pc, #516]	@ (800243c <HAL_RCC_OscConfig+0x470>)
 8002238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d10f      	bne.n	8002262 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002242:	2300      	movs	r3, #0
 8002244:	60bb      	str	r3, [r7, #8]
 8002246:	4b7d      	ldr	r3, [pc, #500]	@ (800243c <HAL_RCC_OscConfig+0x470>)
 8002248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224a:	4a7c      	ldr	r2, [pc, #496]	@ (800243c <HAL_RCC_OscConfig+0x470>)
 800224c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002250:	6413      	str	r3, [r2, #64]	@ 0x40
 8002252:	4b7a      	ldr	r3, [pc, #488]	@ (800243c <HAL_RCC_OscConfig+0x470>)
 8002254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002256:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800225a:	60bb      	str	r3, [r7, #8]
 800225c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800225e:	2301      	movs	r3, #1
 8002260:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002262:	4b77      	ldr	r3, [pc, #476]	@ (8002440 <HAL_RCC_OscConfig+0x474>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800226a:	2b00      	cmp	r3, #0
 800226c:	d118      	bne.n	80022a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800226e:	4b74      	ldr	r3, [pc, #464]	@ (8002440 <HAL_RCC_OscConfig+0x474>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a73      	ldr	r2, [pc, #460]	@ (8002440 <HAL_RCC_OscConfig+0x474>)
 8002274:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002278:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800227a:	f7fe ff41 	bl	8001100 <HAL_GetTick>
 800227e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002280:	e008      	b.n	8002294 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002282:	f7fe ff3d 	bl	8001100 <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	2b02      	cmp	r3, #2
 800228e:	d901      	bls.n	8002294 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e10c      	b.n	80024ae <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002294:	4b6a      	ldr	r3, [pc, #424]	@ (8002440 <HAL_RCC_OscConfig+0x474>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800229c:	2b00      	cmp	r3, #0
 800229e:	d0f0      	beq.n	8002282 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d106      	bne.n	80022b6 <HAL_RCC_OscConfig+0x2ea>
 80022a8:	4b64      	ldr	r3, [pc, #400]	@ (800243c <HAL_RCC_OscConfig+0x470>)
 80022aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022ac:	4a63      	ldr	r2, [pc, #396]	@ (800243c <HAL_RCC_OscConfig+0x470>)
 80022ae:	f043 0301 	orr.w	r3, r3, #1
 80022b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80022b4:	e01c      	b.n	80022f0 <HAL_RCC_OscConfig+0x324>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	2b05      	cmp	r3, #5
 80022bc:	d10c      	bne.n	80022d8 <HAL_RCC_OscConfig+0x30c>
 80022be:	4b5f      	ldr	r3, [pc, #380]	@ (800243c <HAL_RCC_OscConfig+0x470>)
 80022c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022c2:	4a5e      	ldr	r2, [pc, #376]	@ (800243c <HAL_RCC_OscConfig+0x470>)
 80022c4:	f043 0304 	orr.w	r3, r3, #4
 80022c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80022ca:	4b5c      	ldr	r3, [pc, #368]	@ (800243c <HAL_RCC_OscConfig+0x470>)
 80022cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022ce:	4a5b      	ldr	r2, [pc, #364]	@ (800243c <HAL_RCC_OscConfig+0x470>)
 80022d0:	f043 0301 	orr.w	r3, r3, #1
 80022d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80022d6:	e00b      	b.n	80022f0 <HAL_RCC_OscConfig+0x324>
 80022d8:	4b58      	ldr	r3, [pc, #352]	@ (800243c <HAL_RCC_OscConfig+0x470>)
 80022da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022dc:	4a57      	ldr	r2, [pc, #348]	@ (800243c <HAL_RCC_OscConfig+0x470>)
 80022de:	f023 0301 	bic.w	r3, r3, #1
 80022e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80022e4:	4b55      	ldr	r3, [pc, #340]	@ (800243c <HAL_RCC_OscConfig+0x470>)
 80022e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022e8:	4a54      	ldr	r2, [pc, #336]	@ (800243c <HAL_RCC_OscConfig+0x470>)
 80022ea:	f023 0304 	bic.w	r3, r3, #4
 80022ee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d015      	beq.n	8002324 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022f8:	f7fe ff02 	bl	8001100 <HAL_GetTick>
 80022fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022fe:	e00a      	b.n	8002316 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002300:	f7fe fefe 	bl	8001100 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800230e:	4293      	cmp	r3, r2
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e0cb      	b.n	80024ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002316:	4b49      	ldr	r3, [pc, #292]	@ (800243c <HAL_RCC_OscConfig+0x470>)
 8002318:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d0ee      	beq.n	8002300 <HAL_RCC_OscConfig+0x334>
 8002322:	e014      	b.n	800234e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002324:	f7fe feec 	bl	8001100 <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800232a:	e00a      	b.n	8002342 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800232c:	f7fe fee8 	bl	8001100 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	f241 3288 	movw	r2, #5000	@ 0x1388
 800233a:	4293      	cmp	r3, r2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e0b5      	b.n	80024ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002342:	4b3e      	ldr	r3, [pc, #248]	@ (800243c <HAL_RCC_OscConfig+0x470>)
 8002344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1ee      	bne.n	800232c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800234e:	7dfb      	ldrb	r3, [r7, #23]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d105      	bne.n	8002360 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002354:	4b39      	ldr	r3, [pc, #228]	@ (800243c <HAL_RCC_OscConfig+0x470>)
 8002356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002358:	4a38      	ldr	r2, [pc, #224]	@ (800243c <HAL_RCC_OscConfig+0x470>)
 800235a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800235e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	2b00      	cmp	r3, #0
 8002366:	f000 80a1 	beq.w	80024ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800236a:	4b34      	ldr	r3, [pc, #208]	@ (800243c <HAL_RCC_OscConfig+0x470>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f003 030c 	and.w	r3, r3, #12
 8002372:	2b08      	cmp	r3, #8
 8002374:	d05c      	beq.n	8002430 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	2b02      	cmp	r3, #2
 800237c:	d141      	bne.n	8002402 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800237e:	4b31      	ldr	r3, [pc, #196]	@ (8002444 <HAL_RCC_OscConfig+0x478>)
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002384:	f7fe febc 	bl	8001100 <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800238c:	f7fe feb8 	bl	8001100 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e087      	b.n	80024ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800239e:	4b27      	ldr	r3, [pc, #156]	@ (800243c <HAL_RCC_OscConfig+0x470>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1f0      	bne.n	800238c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	69da      	ldr	r2, [r3, #28]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a1b      	ldr	r3, [r3, #32]
 80023b2:	431a      	orrs	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b8:	019b      	lsls	r3, r3, #6
 80023ba:	431a      	orrs	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023c0:	085b      	lsrs	r3, r3, #1
 80023c2:	3b01      	subs	r3, #1
 80023c4:	041b      	lsls	r3, r3, #16
 80023c6:	431a      	orrs	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023cc:	061b      	lsls	r3, r3, #24
 80023ce:	491b      	ldr	r1, [pc, #108]	@ (800243c <HAL_RCC_OscConfig+0x470>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002444 <HAL_RCC_OscConfig+0x478>)
 80023d6:	2201      	movs	r2, #1
 80023d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023da:	f7fe fe91 	bl	8001100 <HAL_GetTick>
 80023de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023e0:	e008      	b.n	80023f4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023e2:	f7fe fe8d 	bl	8001100 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d901      	bls.n	80023f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e05c      	b.n	80024ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023f4:	4b11      	ldr	r3, [pc, #68]	@ (800243c <HAL_RCC_OscConfig+0x470>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d0f0      	beq.n	80023e2 <HAL_RCC_OscConfig+0x416>
 8002400:	e054      	b.n	80024ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002402:	4b10      	ldr	r3, [pc, #64]	@ (8002444 <HAL_RCC_OscConfig+0x478>)
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002408:	f7fe fe7a 	bl	8001100 <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002410:	f7fe fe76 	bl	8001100 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b02      	cmp	r3, #2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e045      	b.n	80024ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002422:	4b06      	ldr	r3, [pc, #24]	@ (800243c <HAL_RCC_OscConfig+0x470>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1f0      	bne.n	8002410 <HAL_RCC_OscConfig+0x444>
 800242e:	e03d      	b.n	80024ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	2b01      	cmp	r3, #1
 8002436:	d107      	bne.n	8002448 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e038      	b.n	80024ae <HAL_RCC_OscConfig+0x4e2>
 800243c:	40023800 	.word	0x40023800
 8002440:	40007000 	.word	0x40007000
 8002444:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002448:	4b1b      	ldr	r3, [pc, #108]	@ (80024b8 <HAL_RCC_OscConfig+0x4ec>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	699b      	ldr	r3, [r3, #24]
 8002452:	2b01      	cmp	r3, #1
 8002454:	d028      	beq.n	80024a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002460:	429a      	cmp	r2, r3
 8002462:	d121      	bne.n	80024a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800246e:	429a      	cmp	r2, r3
 8002470:	d11a      	bne.n	80024a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002472:	68fa      	ldr	r2, [r7, #12]
 8002474:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002478:	4013      	ands	r3, r2
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800247e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002480:	4293      	cmp	r3, r2
 8002482:	d111      	bne.n	80024a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800248e:	085b      	lsrs	r3, r3, #1
 8002490:	3b01      	subs	r3, #1
 8002492:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002494:	429a      	cmp	r2, r3
 8002496:	d107      	bne.n	80024a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d001      	beq.n	80024ac <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e000      	b.n	80024ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3718      	adds	r7, #24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	40023800 	.word	0x40023800

080024bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d101      	bne.n	80024d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e0cc      	b.n	800266a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024d0:	4b68      	ldr	r3, [pc, #416]	@ (8002674 <HAL_RCC_ClockConfig+0x1b8>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 030f 	and.w	r3, r3, #15
 80024d8:	683a      	ldr	r2, [r7, #0]
 80024da:	429a      	cmp	r2, r3
 80024dc:	d90c      	bls.n	80024f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024de:	4b65      	ldr	r3, [pc, #404]	@ (8002674 <HAL_RCC_ClockConfig+0x1b8>)
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	b2d2      	uxtb	r2, r2
 80024e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024e6:	4b63      	ldr	r3, [pc, #396]	@ (8002674 <HAL_RCC_ClockConfig+0x1b8>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 030f 	and.w	r3, r3, #15
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d001      	beq.n	80024f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e0b8      	b.n	800266a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0302 	and.w	r3, r3, #2
 8002500:	2b00      	cmp	r3, #0
 8002502:	d020      	beq.n	8002546 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0304 	and.w	r3, r3, #4
 800250c:	2b00      	cmp	r3, #0
 800250e:	d005      	beq.n	800251c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002510:	4b59      	ldr	r3, [pc, #356]	@ (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	4a58      	ldr	r2, [pc, #352]	@ (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 8002516:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800251a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0308 	and.w	r3, r3, #8
 8002524:	2b00      	cmp	r3, #0
 8002526:	d005      	beq.n	8002534 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002528:	4b53      	ldr	r3, [pc, #332]	@ (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	4a52      	ldr	r2, [pc, #328]	@ (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 800252e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002532:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002534:	4b50      	ldr	r3, [pc, #320]	@ (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	494d      	ldr	r1, [pc, #308]	@ (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 8002542:	4313      	orrs	r3, r2
 8002544:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b00      	cmp	r3, #0
 8002550:	d044      	beq.n	80025dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d107      	bne.n	800256a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800255a:	4b47      	ldr	r3, [pc, #284]	@ (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d119      	bne.n	800259a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e07f      	b.n	800266a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	2b02      	cmp	r3, #2
 8002570:	d003      	beq.n	800257a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002576:	2b03      	cmp	r3, #3
 8002578:	d107      	bne.n	800258a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800257a:	4b3f      	ldr	r3, [pc, #252]	@ (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d109      	bne.n	800259a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e06f      	b.n	800266a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800258a:	4b3b      	ldr	r3, [pc, #236]	@ (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e067      	b.n	800266a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800259a:	4b37      	ldr	r3, [pc, #220]	@ (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f023 0203 	bic.w	r2, r3, #3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	4934      	ldr	r1, [pc, #208]	@ (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025ac:	f7fe fda8 	bl	8001100 <HAL_GetTick>
 80025b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025b2:	e00a      	b.n	80025ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025b4:	f7fe fda4 	bl	8001100 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e04f      	b.n	800266a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ca:	4b2b      	ldr	r3, [pc, #172]	@ (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f003 020c 	and.w	r2, r3, #12
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	429a      	cmp	r2, r3
 80025da:	d1eb      	bne.n	80025b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025dc:	4b25      	ldr	r3, [pc, #148]	@ (8002674 <HAL_RCC_ClockConfig+0x1b8>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 030f 	and.w	r3, r3, #15
 80025e4:	683a      	ldr	r2, [r7, #0]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d20c      	bcs.n	8002604 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ea:	4b22      	ldr	r3, [pc, #136]	@ (8002674 <HAL_RCC_ClockConfig+0x1b8>)
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	b2d2      	uxtb	r2, r2
 80025f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025f2:	4b20      	ldr	r3, [pc, #128]	@ (8002674 <HAL_RCC_ClockConfig+0x1b8>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 030f 	and.w	r3, r3, #15
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d001      	beq.n	8002604 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e032      	b.n	800266a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0304 	and.w	r3, r3, #4
 800260c:	2b00      	cmp	r3, #0
 800260e:	d008      	beq.n	8002622 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002610:	4b19      	ldr	r3, [pc, #100]	@ (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	4916      	ldr	r1, [pc, #88]	@ (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 800261e:	4313      	orrs	r3, r2
 8002620:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0308 	and.w	r3, r3, #8
 800262a:	2b00      	cmp	r3, #0
 800262c:	d009      	beq.n	8002642 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800262e:	4b12      	ldr	r3, [pc, #72]	@ (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	490e      	ldr	r1, [pc, #56]	@ (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 800263e:	4313      	orrs	r3, r2
 8002640:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002642:	f000 f821 	bl	8002688 <HAL_RCC_GetSysClockFreq>
 8002646:	4602      	mov	r2, r0
 8002648:	4b0b      	ldr	r3, [pc, #44]	@ (8002678 <HAL_RCC_ClockConfig+0x1bc>)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	091b      	lsrs	r3, r3, #4
 800264e:	f003 030f 	and.w	r3, r3, #15
 8002652:	490a      	ldr	r1, [pc, #40]	@ (800267c <HAL_RCC_ClockConfig+0x1c0>)
 8002654:	5ccb      	ldrb	r3, [r1, r3]
 8002656:	fa22 f303 	lsr.w	r3, r2, r3
 800265a:	4a09      	ldr	r2, [pc, #36]	@ (8002680 <HAL_RCC_ClockConfig+0x1c4>)
 800265c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800265e:	4b09      	ldr	r3, [pc, #36]	@ (8002684 <HAL_RCC_ClockConfig+0x1c8>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4618      	mov	r0, r3
 8002664:	f7fe fd08 	bl	8001078 <HAL_InitTick>

  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	40023c00 	.word	0x40023c00
 8002678:	40023800 	.word	0x40023800
 800267c:	080046b0 	.word	0x080046b0
 8002680:	20000000 	.word	0x20000000
 8002684:	20000004 	.word	0x20000004

08002688 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002688:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800268c:	b094      	sub	sp, #80	@ 0x50
 800268e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002690:	2300      	movs	r3, #0
 8002692:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002694:	2300      	movs	r3, #0
 8002696:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002698:	2300      	movs	r3, #0
 800269a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800269c:	2300      	movs	r3, #0
 800269e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026a0:	4b79      	ldr	r3, [pc, #484]	@ (8002888 <HAL_RCC_GetSysClockFreq+0x200>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f003 030c 	and.w	r3, r3, #12
 80026a8:	2b08      	cmp	r3, #8
 80026aa:	d00d      	beq.n	80026c8 <HAL_RCC_GetSysClockFreq+0x40>
 80026ac:	2b08      	cmp	r3, #8
 80026ae:	f200 80e1 	bhi.w	8002874 <HAL_RCC_GetSysClockFreq+0x1ec>
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d002      	beq.n	80026bc <HAL_RCC_GetSysClockFreq+0x34>
 80026b6:	2b04      	cmp	r3, #4
 80026b8:	d003      	beq.n	80026c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80026ba:	e0db      	b.n	8002874 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026bc:	4b73      	ldr	r3, [pc, #460]	@ (800288c <HAL_RCC_GetSysClockFreq+0x204>)
 80026be:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80026c0:	e0db      	b.n	800287a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026c2:	4b73      	ldr	r3, [pc, #460]	@ (8002890 <HAL_RCC_GetSysClockFreq+0x208>)
 80026c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80026c6:	e0d8      	b.n	800287a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026c8:	4b6f      	ldr	r3, [pc, #444]	@ (8002888 <HAL_RCC_GetSysClockFreq+0x200>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80026d0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026d2:	4b6d      	ldr	r3, [pc, #436]	@ (8002888 <HAL_RCC_GetSysClockFreq+0x200>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d063      	beq.n	80027a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026de:	4b6a      	ldr	r3, [pc, #424]	@ (8002888 <HAL_RCC_GetSysClockFreq+0x200>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	099b      	lsrs	r3, r3, #6
 80026e4:	2200      	movs	r2, #0
 80026e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80026e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80026ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80026f2:	2300      	movs	r3, #0
 80026f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80026f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80026fa:	4622      	mov	r2, r4
 80026fc:	462b      	mov	r3, r5
 80026fe:	f04f 0000 	mov.w	r0, #0
 8002702:	f04f 0100 	mov.w	r1, #0
 8002706:	0159      	lsls	r1, r3, #5
 8002708:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800270c:	0150      	lsls	r0, r2, #5
 800270e:	4602      	mov	r2, r0
 8002710:	460b      	mov	r3, r1
 8002712:	4621      	mov	r1, r4
 8002714:	1a51      	subs	r1, r2, r1
 8002716:	6139      	str	r1, [r7, #16]
 8002718:	4629      	mov	r1, r5
 800271a:	eb63 0301 	sbc.w	r3, r3, r1
 800271e:	617b      	str	r3, [r7, #20]
 8002720:	f04f 0200 	mov.w	r2, #0
 8002724:	f04f 0300 	mov.w	r3, #0
 8002728:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800272c:	4659      	mov	r1, fp
 800272e:	018b      	lsls	r3, r1, #6
 8002730:	4651      	mov	r1, sl
 8002732:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002736:	4651      	mov	r1, sl
 8002738:	018a      	lsls	r2, r1, #6
 800273a:	4651      	mov	r1, sl
 800273c:	ebb2 0801 	subs.w	r8, r2, r1
 8002740:	4659      	mov	r1, fp
 8002742:	eb63 0901 	sbc.w	r9, r3, r1
 8002746:	f04f 0200 	mov.w	r2, #0
 800274a:	f04f 0300 	mov.w	r3, #0
 800274e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002752:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002756:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800275a:	4690      	mov	r8, r2
 800275c:	4699      	mov	r9, r3
 800275e:	4623      	mov	r3, r4
 8002760:	eb18 0303 	adds.w	r3, r8, r3
 8002764:	60bb      	str	r3, [r7, #8]
 8002766:	462b      	mov	r3, r5
 8002768:	eb49 0303 	adc.w	r3, r9, r3
 800276c:	60fb      	str	r3, [r7, #12]
 800276e:	f04f 0200 	mov.w	r2, #0
 8002772:	f04f 0300 	mov.w	r3, #0
 8002776:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800277a:	4629      	mov	r1, r5
 800277c:	024b      	lsls	r3, r1, #9
 800277e:	4621      	mov	r1, r4
 8002780:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002784:	4621      	mov	r1, r4
 8002786:	024a      	lsls	r2, r1, #9
 8002788:	4610      	mov	r0, r2
 800278a:	4619      	mov	r1, r3
 800278c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800278e:	2200      	movs	r2, #0
 8002790:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002792:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002794:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002798:	f7fd fd28 	bl	80001ec <__aeabi_uldivmod>
 800279c:	4602      	mov	r2, r0
 800279e:	460b      	mov	r3, r1
 80027a0:	4613      	mov	r3, r2
 80027a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80027a4:	e058      	b.n	8002858 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027a6:	4b38      	ldr	r3, [pc, #224]	@ (8002888 <HAL_RCC_GetSysClockFreq+0x200>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	099b      	lsrs	r3, r3, #6
 80027ac:	2200      	movs	r2, #0
 80027ae:	4618      	mov	r0, r3
 80027b0:	4611      	mov	r1, r2
 80027b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80027b6:	623b      	str	r3, [r7, #32]
 80027b8:	2300      	movs	r3, #0
 80027ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80027bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80027c0:	4642      	mov	r2, r8
 80027c2:	464b      	mov	r3, r9
 80027c4:	f04f 0000 	mov.w	r0, #0
 80027c8:	f04f 0100 	mov.w	r1, #0
 80027cc:	0159      	lsls	r1, r3, #5
 80027ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027d2:	0150      	lsls	r0, r2, #5
 80027d4:	4602      	mov	r2, r0
 80027d6:	460b      	mov	r3, r1
 80027d8:	4641      	mov	r1, r8
 80027da:	ebb2 0a01 	subs.w	sl, r2, r1
 80027de:	4649      	mov	r1, r9
 80027e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80027e4:	f04f 0200 	mov.w	r2, #0
 80027e8:	f04f 0300 	mov.w	r3, #0
 80027ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80027f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80027f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80027f8:	ebb2 040a 	subs.w	r4, r2, sl
 80027fc:	eb63 050b 	sbc.w	r5, r3, fp
 8002800:	f04f 0200 	mov.w	r2, #0
 8002804:	f04f 0300 	mov.w	r3, #0
 8002808:	00eb      	lsls	r3, r5, #3
 800280a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800280e:	00e2      	lsls	r2, r4, #3
 8002810:	4614      	mov	r4, r2
 8002812:	461d      	mov	r5, r3
 8002814:	4643      	mov	r3, r8
 8002816:	18e3      	adds	r3, r4, r3
 8002818:	603b      	str	r3, [r7, #0]
 800281a:	464b      	mov	r3, r9
 800281c:	eb45 0303 	adc.w	r3, r5, r3
 8002820:	607b      	str	r3, [r7, #4]
 8002822:	f04f 0200 	mov.w	r2, #0
 8002826:	f04f 0300 	mov.w	r3, #0
 800282a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800282e:	4629      	mov	r1, r5
 8002830:	028b      	lsls	r3, r1, #10
 8002832:	4621      	mov	r1, r4
 8002834:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002838:	4621      	mov	r1, r4
 800283a:	028a      	lsls	r2, r1, #10
 800283c:	4610      	mov	r0, r2
 800283e:	4619      	mov	r1, r3
 8002840:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002842:	2200      	movs	r2, #0
 8002844:	61bb      	str	r3, [r7, #24]
 8002846:	61fa      	str	r2, [r7, #28]
 8002848:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800284c:	f7fd fcce 	bl	80001ec <__aeabi_uldivmod>
 8002850:	4602      	mov	r2, r0
 8002852:	460b      	mov	r3, r1
 8002854:	4613      	mov	r3, r2
 8002856:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002858:	4b0b      	ldr	r3, [pc, #44]	@ (8002888 <HAL_RCC_GetSysClockFreq+0x200>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	0c1b      	lsrs	r3, r3, #16
 800285e:	f003 0303 	and.w	r3, r3, #3
 8002862:	3301      	adds	r3, #1
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002868:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800286a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800286c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002870:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002872:	e002      	b.n	800287a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002874:	4b05      	ldr	r3, [pc, #20]	@ (800288c <HAL_RCC_GetSysClockFreq+0x204>)
 8002876:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002878:	bf00      	nop
    }
  }
  return sysclockfreq;
 800287a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800287c:	4618      	mov	r0, r3
 800287e:	3750      	adds	r7, #80	@ 0x50
 8002880:	46bd      	mov	sp, r7
 8002882:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002886:	bf00      	nop
 8002888:	40023800 	.word	0x40023800
 800288c:	00f42400 	.word	0x00f42400
 8002890:	007a1200 	.word	0x007a1200

08002894 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002898:	4b03      	ldr	r3, [pc, #12]	@ (80028a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800289a:	681b      	ldr	r3, [r3, #0]
}
 800289c:	4618      	mov	r0, r3
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	20000000 	.word	0x20000000

080028ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028b0:	f7ff fff0 	bl	8002894 <HAL_RCC_GetHCLKFreq>
 80028b4:	4602      	mov	r2, r0
 80028b6:	4b05      	ldr	r3, [pc, #20]	@ (80028cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	0a9b      	lsrs	r3, r3, #10
 80028bc:	f003 0307 	and.w	r3, r3, #7
 80028c0:	4903      	ldr	r1, [pc, #12]	@ (80028d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028c2:	5ccb      	ldrb	r3, [r1, r3]
 80028c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	40023800 	.word	0x40023800
 80028d0:	080046c0 	.word	0x080046c0

080028d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028d8:	f7ff ffdc 	bl	8002894 <HAL_RCC_GetHCLKFreq>
 80028dc:	4602      	mov	r2, r0
 80028de:	4b05      	ldr	r3, [pc, #20]	@ (80028f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	0b5b      	lsrs	r3, r3, #13
 80028e4:	f003 0307 	and.w	r3, r3, #7
 80028e8:	4903      	ldr	r1, [pc, #12]	@ (80028f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028ea:	5ccb      	ldrb	r3, [r1, r3]
 80028ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40023800 	.word	0x40023800
 80028f8:	080046c0 	.word	0x080046c0

080028fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e041      	b.n	8002992 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b00      	cmp	r3, #0
 8002918:	d106      	bne.n	8002928 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f7fe f956 	bl	8000bd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2202      	movs	r2, #2
 800292c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	3304      	adds	r3, #4
 8002938:	4619      	mov	r1, r3
 800293a:	4610      	mov	r0, r2
 800293c:	f000 fd10 	bl	8003360 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	b082      	sub	sp, #8
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d101      	bne.n	80029ac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e041      	b.n	8002a30 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d106      	bne.n	80029c6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f000 f839 	bl	8002a38 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2202      	movs	r2, #2
 80029ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	3304      	adds	r3, #4
 80029d6:	4619      	mov	r1, r3
 80029d8:	4610      	mov	r0, r2
 80029da:	f000 fcc1 	bl	8003360 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2201      	movs	r2, #1
 80029e2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2201      	movs	r2, #1
 80029ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2201      	movs	r2, #1
 80029f2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2201      	movs	r2, #1
 8002a12:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3708      	adds	r7, #8
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d109      	bne.n	8002a70 <HAL_TIM_PWM_Start+0x24>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	bf14      	ite	ne
 8002a68:	2301      	movne	r3, #1
 8002a6a:	2300      	moveq	r3, #0
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	e022      	b.n	8002ab6 <HAL_TIM_PWM_Start+0x6a>
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	2b04      	cmp	r3, #4
 8002a74:	d109      	bne.n	8002a8a <HAL_TIM_PWM_Start+0x3e>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	bf14      	ite	ne
 8002a82:	2301      	movne	r3, #1
 8002a84:	2300      	moveq	r3, #0
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	e015      	b.n	8002ab6 <HAL_TIM_PWM_Start+0x6a>
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	2b08      	cmp	r3, #8
 8002a8e:	d109      	bne.n	8002aa4 <HAL_TIM_PWM_Start+0x58>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	bf14      	ite	ne
 8002a9c:	2301      	movne	r3, #1
 8002a9e:	2300      	moveq	r3, #0
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	e008      	b.n	8002ab6 <HAL_TIM_PWM_Start+0x6a>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	bf14      	ite	ne
 8002ab0:	2301      	movne	r3, #1
 8002ab2:	2300      	moveq	r3, #0
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e07c      	b.n	8002bb8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d104      	bne.n	8002ace <HAL_TIM_PWM_Start+0x82>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2202      	movs	r2, #2
 8002ac8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002acc:	e013      	b.n	8002af6 <HAL_TIM_PWM_Start+0xaa>
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	2b04      	cmp	r3, #4
 8002ad2:	d104      	bne.n	8002ade <HAL_TIM_PWM_Start+0x92>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002adc:	e00b      	b.n	8002af6 <HAL_TIM_PWM_Start+0xaa>
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	2b08      	cmp	r3, #8
 8002ae2:	d104      	bne.n	8002aee <HAL_TIM_PWM_Start+0xa2>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2202      	movs	r2, #2
 8002ae8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002aec:	e003      	b.n	8002af6 <HAL_TIM_PWM_Start+0xaa>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2202      	movs	r2, #2
 8002af2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2201      	movs	r2, #1
 8002afc:	6839      	ldr	r1, [r7, #0]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f000 ff24 	bl	800394c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a2d      	ldr	r2, [pc, #180]	@ (8002bc0 <HAL_TIM_PWM_Start+0x174>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d004      	beq.n	8002b18 <HAL_TIM_PWM_Start+0xcc>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a2c      	ldr	r2, [pc, #176]	@ (8002bc4 <HAL_TIM_PWM_Start+0x178>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d101      	bne.n	8002b1c <HAL_TIM_PWM_Start+0xd0>
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e000      	b.n	8002b1e <HAL_TIM_PWM_Start+0xd2>
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d007      	beq.n	8002b32 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b30:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a22      	ldr	r2, [pc, #136]	@ (8002bc0 <HAL_TIM_PWM_Start+0x174>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d022      	beq.n	8002b82 <HAL_TIM_PWM_Start+0x136>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b44:	d01d      	beq.n	8002b82 <HAL_TIM_PWM_Start+0x136>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a1f      	ldr	r2, [pc, #124]	@ (8002bc8 <HAL_TIM_PWM_Start+0x17c>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d018      	beq.n	8002b82 <HAL_TIM_PWM_Start+0x136>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a1d      	ldr	r2, [pc, #116]	@ (8002bcc <HAL_TIM_PWM_Start+0x180>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d013      	beq.n	8002b82 <HAL_TIM_PWM_Start+0x136>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a1c      	ldr	r2, [pc, #112]	@ (8002bd0 <HAL_TIM_PWM_Start+0x184>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d00e      	beq.n	8002b82 <HAL_TIM_PWM_Start+0x136>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a16      	ldr	r2, [pc, #88]	@ (8002bc4 <HAL_TIM_PWM_Start+0x178>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d009      	beq.n	8002b82 <HAL_TIM_PWM_Start+0x136>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a18      	ldr	r2, [pc, #96]	@ (8002bd4 <HAL_TIM_PWM_Start+0x188>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d004      	beq.n	8002b82 <HAL_TIM_PWM_Start+0x136>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a16      	ldr	r2, [pc, #88]	@ (8002bd8 <HAL_TIM_PWM_Start+0x18c>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d111      	bne.n	8002ba6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f003 0307 	and.w	r3, r3, #7
 8002b8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2b06      	cmp	r3, #6
 8002b92:	d010      	beq.n	8002bb6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f042 0201 	orr.w	r2, r2, #1
 8002ba2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ba4:	e007      	b.n	8002bb6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f042 0201 	orr.w	r2, r2, #1
 8002bb4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3710      	adds	r7, #16
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40010000 	.word	0x40010000
 8002bc4:	40010400 	.word	0x40010400
 8002bc8:	40000400 	.word	0x40000400
 8002bcc:	40000800 	.word	0x40000800
 8002bd0:	40000c00 	.word	0x40000c00
 8002bd4:	40014000 	.word	0x40014000
 8002bd8:	40001800 	.word	0x40001800

08002bdc <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002be6:	2300      	movs	r3, #0
 8002be8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d109      	bne.n	8002c04 <HAL_TIM_PWM_Start_IT+0x28>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	bf14      	ite	ne
 8002bfc:	2301      	movne	r3, #1
 8002bfe:	2300      	moveq	r3, #0
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	e022      	b.n	8002c4a <HAL_TIM_PWM_Start_IT+0x6e>
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	2b04      	cmp	r3, #4
 8002c08:	d109      	bne.n	8002c1e <HAL_TIM_PWM_Start_IT+0x42>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	bf14      	ite	ne
 8002c16:	2301      	movne	r3, #1
 8002c18:	2300      	moveq	r3, #0
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	e015      	b.n	8002c4a <HAL_TIM_PWM_Start_IT+0x6e>
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	2b08      	cmp	r3, #8
 8002c22:	d109      	bne.n	8002c38 <HAL_TIM_PWM_Start_IT+0x5c>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	bf14      	ite	ne
 8002c30:	2301      	movne	r3, #1
 8002c32:	2300      	moveq	r3, #0
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	e008      	b.n	8002c4a <HAL_TIM_PWM_Start_IT+0x6e>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	bf14      	ite	ne
 8002c44:	2301      	movne	r3, #1
 8002c46:	2300      	moveq	r3, #0
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e0c7      	b.n	8002de2 <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d104      	bne.n	8002c62 <HAL_TIM_PWM_Start_IT+0x86>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2202      	movs	r2, #2
 8002c5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c60:	e013      	b.n	8002c8a <HAL_TIM_PWM_Start_IT+0xae>
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	2b04      	cmp	r3, #4
 8002c66:	d104      	bne.n	8002c72 <HAL_TIM_PWM_Start_IT+0x96>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c70:	e00b      	b.n	8002c8a <HAL_TIM_PWM_Start_IT+0xae>
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	2b08      	cmp	r3, #8
 8002c76:	d104      	bne.n	8002c82 <HAL_TIM_PWM_Start_IT+0xa6>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c80:	e003      	b.n	8002c8a <HAL_TIM_PWM_Start_IT+0xae>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2202      	movs	r2, #2
 8002c86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	2b0c      	cmp	r3, #12
 8002c8e:	d841      	bhi.n	8002d14 <HAL_TIM_PWM_Start_IT+0x138>
 8002c90:	a201      	add	r2, pc, #4	@ (adr r2, 8002c98 <HAL_TIM_PWM_Start_IT+0xbc>)
 8002c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c96:	bf00      	nop
 8002c98:	08002ccd 	.word	0x08002ccd
 8002c9c:	08002d15 	.word	0x08002d15
 8002ca0:	08002d15 	.word	0x08002d15
 8002ca4:	08002d15 	.word	0x08002d15
 8002ca8:	08002cdf 	.word	0x08002cdf
 8002cac:	08002d15 	.word	0x08002d15
 8002cb0:	08002d15 	.word	0x08002d15
 8002cb4:	08002d15 	.word	0x08002d15
 8002cb8:	08002cf1 	.word	0x08002cf1
 8002cbc:	08002d15 	.word	0x08002d15
 8002cc0:	08002d15 	.word	0x08002d15
 8002cc4:	08002d15 	.word	0x08002d15
 8002cc8:	08002d03 	.word	0x08002d03
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68da      	ldr	r2, [r3, #12]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f042 0202 	orr.w	r2, r2, #2
 8002cda:	60da      	str	r2, [r3, #12]
      break;
 8002cdc:	e01d      	b.n	8002d1a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68da      	ldr	r2, [r3, #12]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f042 0204 	orr.w	r2, r2, #4
 8002cec:	60da      	str	r2, [r3, #12]
      break;
 8002cee:	e014      	b.n	8002d1a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68da      	ldr	r2, [r3, #12]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f042 0208 	orr.w	r2, r2, #8
 8002cfe:	60da      	str	r2, [r3, #12]
      break;
 8002d00:	e00b      	b.n	8002d1a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68da      	ldr	r2, [r3, #12]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f042 0210 	orr.w	r2, r2, #16
 8002d10:	60da      	str	r2, [r3, #12]
      break;
 8002d12:	e002      	b.n	8002d1a <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	73fb      	strb	r3, [r7, #15]
      break;
 8002d18:	bf00      	nop
  }

  if (status == HAL_OK)
 8002d1a:	7bfb      	ldrb	r3, [r7, #15]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d15f      	bne.n	8002de0 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2201      	movs	r2, #1
 8002d26:	6839      	ldr	r1, [r7, #0]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f000 fe0f 	bl	800394c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a2e      	ldr	r2, [pc, #184]	@ (8002dec <HAL_TIM_PWM_Start_IT+0x210>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d004      	beq.n	8002d42 <HAL_TIM_PWM_Start_IT+0x166>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a2c      	ldr	r2, [pc, #176]	@ (8002df0 <HAL_TIM_PWM_Start_IT+0x214>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d101      	bne.n	8002d46 <HAL_TIM_PWM_Start_IT+0x16a>
 8002d42:	2301      	movs	r3, #1
 8002d44:	e000      	b.n	8002d48 <HAL_TIM_PWM_Start_IT+0x16c>
 8002d46:	2300      	movs	r3, #0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d007      	beq.n	8002d5c <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002d5a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a22      	ldr	r2, [pc, #136]	@ (8002dec <HAL_TIM_PWM_Start_IT+0x210>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d022      	beq.n	8002dac <HAL_TIM_PWM_Start_IT+0x1d0>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d6e:	d01d      	beq.n	8002dac <HAL_TIM_PWM_Start_IT+0x1d0>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a1f      	ldr	r2, [pc, #124]	@ (8002df4 <HAL_TIM_PWM_Start_IT+0x218>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d018      	beq.n	8002dac <HAL_TIM_PWM_Start_IT+0x1d0>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a1e      	ldr	r2, [pc, #120]	@ (8002df8 <HAL_TIM_PWM_Start_IT+0x21c>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d013      	beq.n	8002dac <HAL_TIM_PWM_Start_IT+0x1d0>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a1c      	ldr	r2, [pc, #112]	@ (8002dfc <HAL_TIM_PWM_Start_IT+0x220>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d00e      	beq.n	8002dac <HAL_TIM_PWM_Start_IT+0x1d0>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a17      	ldr	r2, [pc, #92]	@ (8002df0 <HAL_TIM_PWM_Start_IT+0x214>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d009      	beq.n	8002dac <HAL_TIM_PWM_Start_IT+0x1d0>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a18      	ldr	r2, [pc, #96]	@ (8002e00 <HAL_TIM_PWM_Start_IT+0x224>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d004      	beq.n	8002dac <HAL_TIM_PWM_Start_IT+0x1d0>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a17      	ldr	r2, [pc, #92]	@ (8002e04 <HAL_TIM_PWM_Start_IT+0x228>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d111      	bne.n	8002dd0 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f003 0307 	and.w	r3, r3, #7
 8002db6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	2b06      	cmp	r3, #6
 8002dbc:	d010      	beq.n	8002de0 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f042 0201 	orr.w	r2, r2, #1
 8002dcc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dce:	e007      	b.n	8002de0 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f042 0201 	orr.w	r2, r2, #1
 8002dde:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	40010000 	.word	0x40010000
 8002df0:	40010400 	.word	0x40010400
 8002df4:	40000400 	.word	0x40000400
 8002df8:	40000800 	.word	0x40000800
 8002dfc:	40000c00 	.word	0x40000c00
 8002e00:	40014000 	.word	0x40014000
 8002e04:	40001800 	.word	0x40001800

08002e08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d020      	beq.n	8002e6c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d01b      	beq.n	8002e6c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f06f 0202 	mvn.w	r2, #2
 8002e3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2201      	movs	r2, #1
 8002e42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	f003 0303 	and.w	r3, r3, #3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d003      	beq.n	8002e5a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 fa65 	bl	8003322 <HAL_TIM_IC_CaptureCallback>
 8002e58:	e005      	b.n	8002e66 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 fa57 	bl	800330e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f000 fa68 	bl	8003336 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	f003 0304 	and.w	r3, r3, #4
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d020      	beq.n	8002eb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f003 0304 	and.w	r3, r3, #4
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d01b      	beq.n	8002eb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f06f 0204 	mvn.w	r2, #4
 8002e88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2202      	movs	r2, #2
 8002e8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d003      	beq.n	8002ea6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 fa3f 	bl	8003322 <HAL_TIM_IC_CaptureCallback>
 8002ea4:	e005      	b.n	8002eb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 fa31 	bl	800330e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f000 fa42 	bl	8003336 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	f003 0308 	and.w	r3, r3, #8
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d020      	beq.n	8002f04 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f003 0308 	and.w	r3, r3, #8
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d01b      	beq.n	8002f04 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f06f 0208 	mvn.w	r2, #8
 8002ed4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2204      	movs	r2, #4
 8002eda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	69db      	ldr	r3, [r3, #28]
 8002ee2:	f003 0303 	and.w	r3, r3, #3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d003      	beq.n	8002ef2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 fa19 	bl	8003322 <HAL_TIM_IC_CaptureCallback>
 8002ef0:	e005      	b.n	8002efe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f000 fa0b 	bl	800330e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f000 fa1c 	bl	8003336 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	f003 0310 	and.w	r3, r3, #16
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d020      	beq.n	8002f50 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f003 0310 	and.w	r3, r3, #16
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d01b      	beq.n	8002f50 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f06f 0210 	mvn.w	r2, #16
 8002f20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2208      	movs	r2, #8
 8002f26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	69db      	ldr	r3, [r3, #28]
 8002f2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d003      	beq.n	8002f3e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 f9f3 	bl	8003322 <HAL_TIM_IC_CaptureCallback>
 8002f3c:	e005      	b.n	8002f4a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 f9e5 	bl	800330e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f000 f9f6 	bl	8003336 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00c      	beq.n	8002f74 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f003 0301 	and.w	r3, r3, #1
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d007      	beq.n	8002f74 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f06f 0201 	mvn.w	r2, #1
 8002f6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f000 f9c3 	bl	80032fa <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00c      	beq.n	8002f98 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d007      	beq.n	8002f98 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002f90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 fd86 	bl	8003aa4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00c      	beq.n	8002fbc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d007      	beq.n	8002fbc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002fb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 f9c7 	bl	800334a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	f003 0320 	and.w	r3, r3, #32
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d00c      	beq.n	8002fe0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f003 0320 	and.w	r3, r3, #32
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d007      	beq.n	8002fe0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f06f 0220 	mvn.w	r2, #32
 8002fd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 fd58 	bl	8003a90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002fe0:	bf00      	nop
 8002fe2:	3710      	adds	r7, #16
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d101      	bne.n	8003006 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003002:	2302      	movs	r3, #2
 8003004:	e0ae      	b.n	8003164 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2b0c      	cmp	r3, #12
 8003012:	f200 809f 	bhi.w	8003154 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003016:	a201      	add	r2, pc, #4	@ (adr r2, 800301c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800301c:	08003051 	.word	0x08003051
 8003020:	08003155 	.word	0x08003155
 8003024:	08003155 	.word	0x08003155
 8003028:	08003155 	.word	0x08003155
 800302c:	08003091 	.word	0x08003091
 8003030:	08003155 	.word	0x08003155
 8003034:	08003155 	.word	0x08003155
 8003038:	08003155 	.word	0x08003155
 800303c:	080030d3 	.word	0x080030d3
 8003040:	08003155 	.word	0x08003155
 8003044:	08003155 	.word	0x08003155
 8003048:	08003155 	.word	0x08003155
 800304c:	08003113 	.word	0x08003113
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68b9      	ldr	r1, [r7, #8]
 8003056:	4618      	mov	r0, r3
 8003058:	f000 fa2e 	bl	80034b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	699a      	ldr	r2, [r3, #24]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f042 0208 	orr.w	r2, r2, #8
 800306a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	699a      	ldr	r2, [r3, #24]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f022 0204 	bic.w	r2, r2, #4
 800307a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	6999      	ldr	r1, [r3, #24]
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	691a      	ldr	r2, [r3, #16]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	430a      	orrs	r2, r1
 800308c:	619a      	str	r2, [r3, #24]
      break;
 800308e:	e064      	b.n	800315a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68b9      	ldr	r1, [r7, #8]
 8003096:	4618      	mov	r0, r3
 8003098:	f000 fa7e 	bl	8003598 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	699a      	ldr	r2, [r3, #24]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80030aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	699a      	ldr	r2, [r3, #24]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	6999      	ldr	r1, [r3, #24]
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	021a      	lsls	r2, r3, #8
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	430a      	orrs	r2, r1
 80030ce:	619a      	str	r2, [r3, #24]
      break;
 80030d0:	e043      	b.n	800315a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68b9      	ldr	r1, [r7, #8]
 80030d8:	4618      	mov	r0, r3
 80030da:	f000 fad3 	bl	8003684 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	69da      	ldr	r2, [r3, #28]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f042 0208 	orr.w	r2, r2, #8
 80030ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	69da      	ldr	r2, [r3, #28]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f022 0204 	bic.w	r2, r2, #4
 80030fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	69d9      	ldr	r1, [r3, #28]
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	691a      	ldr	r2, [r3, #16]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	430a      	orrs	r2, r1
 800310e:	61da      	str	r2, [r3, #28]
      break;
 8003110:	e023      	b.n	800315a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68b9      	ldr	r1, [r7, #8]
 8003118:	4618      	mov	r0, r3
 800311a:	f000 fb27 	bl	800376c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	69da      	ldr	r2, [r3, #28]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800312c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	69da      	ldr	r2, [r3, #28]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800313c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	69d9      	ldr	r1, [r3, #28]
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	691b      	ldr	r3, [r3, #16]
 8003148:	021a      	lsls	r2, r3, #8
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	430a      	orrs	r2, r1
 8003150:	61da      	str	r2, [r3, #28]
      break;
 8003152:	e002      	b.n	800315a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	75fb      	strb	r3, [r7, #23]
      break;
 8003158:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003162:	7dfb      	ldrb	r3, [r7, #23]
}
 8003164:	4618      	mov	r0, r3
 8003166:	3718      	adds	r7, #24
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003176:	2300      	movs	r3, #0
 8003178:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003180:	2b01      	cmp	r3, #1
 8003182:	d101      	bne.n	8003188 <HAL_TIM_ConfigClockSource+0x1c>
 8003184:	2302      	movs	r3, #2
 8003186:	e0b4      	b.n	80032f2 <HAL_TIM_ConfigClockSource+0x186>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2202      	movs	r2, #2
 8003194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80031a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80031ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68ba      	ldr	r2, [r7, #8]
 80031b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031c0:	d03e      	beq.n	8003240 <HAL_TIM_ConfigClockSource+0xd4>
 80031c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031c6:	f200 8087 	bhi.w	80032d8 <HAL_TIM_ConfigClockSource+0x16c>
 80031ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031ce:	f000 8086 	beq.w	80032de <HAL_TIM_ConfigClockSource+0x172>
 80031d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031d6:	d87f      	bhi.n	80032d8 <HAL_TIM_ConfigClockSource+0x16c>
 80031d8:	2b70      	cmp	r3, #112	@ 0x70
 80031da:	d01a      	beq.n	8003212 <HAL_TIM_ConfigClockSource+0xa6>
 80031dc:	2b70      	cmp	r3, #112	@ 0x70
 80031de:	d87b      	bhi.n	80032d8 <HAL_TIM_ConfigClockSource+0x16c>
 80031e0:	2b60      	cmp	r3, #96	@ 0x60
 80031e2:	d050      	beq.n	8003286 <HAL_TIM_ConfigClockSource+0x11a>
 80031e4:	2b60      	cmp	r3, #96	@ 0x60
 80031e6:	d877      	bhi.n	80032d8 <HAL_TIM_ConfigClockSource+0x16c>
 80031e8:	2b50      	cmp	r3, #80	@ 0x50
 80031ea:	d03c      	beq.n	8003266 <HAL_TIM_ConfigClockSource+0xfa>
 80031ec:	2b50      	cmp	r3, #80	@ 0x50
 80031ee:	d873      	bhi.n	80032d8 <HAL_TIM_ConfigClockSource+0x16c>
 80031f0:	2b40      	cmp	r3, #64	@ 0x40
 80031f2:	d058      	beq.n	80032a6 <HAL_TIM_ConfigClockSource+0x13a>
 80031f4:	2b40      	cmp	r3, #64	@ 0x40
 80031f6:	d86f      	bhi.n	80032d8 <HAL_TIM_ConfigClockSource+0x16c>
 80031f8:	2b30      	cmp	r3, #48	@ 0x30
 80031fa:	d064      	beq.n	80032c6 <HAL_TIM_ConfigClockSource+0x15a>
 80031fc:	2b30      	cmp	r3, #48	@ 0x30
 80031fe:	d86b      	bhi.n	80032d8 <HAL_TIM_ConfigClockSource+0x16c>
 8003200:	2b20      	cmp	r3, #32
 8003202:	d060      	beq.n	80032c6 <HAL_TIM_ConfigClockSource+0x15a>
 8003204:	2b20      	cmp	r3, #32
 8003206:	d867      	bhi.n	80032d8 <HAL_TIM_ConfigClockSource+0x16c>
 8003208:	2b00      	cmp	r3, #0
 800320a:	d05c      	beq.n	80032c6 <HAL_TIM_ConfigClockSource+0x15a>
 800320c:	2b10      	cmp	r3, #16
 800320e:	d05a      	beq.n	80032c6 <HAL_TIM_ConfigClockSource+0x15a>
 8003210:	e062      	b.n	80032d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003222:	f000 fb73 	bl	800390c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003234:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68ba      	ldr	r2, [r7, #8]
 800323c:	609a      	str	r2, [r3, #8]
      break;
 800323e:	e04f      	b.n	80032e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003250:	f000 fb5c 	bl	800390c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	689a      	ldr	r2, [r3, #8]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003262:	609a      	str	r2, [r3, #8]
      break;
 8003264:	e03c      	b.n	80032e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003272:	461a      	mov	r2, r3
 8003274:	f000 fad0 	bl	8003818 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2150      	movs	r1, #80	@ 0x50
 800327e:	4618      	mov	r0, r3
 8003280:	f000 fb29 	bl	80038d6 <TIM_ITRx_SetConfig>
      break;
 8003284:	e02c      	b.n	80032e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003292:	461a      	mov	r2, r3
 8003294:	f000 faef 	bl	8003876 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2160      	movs	r1, #96	@ 0x60
 800329e:	4618      	mov	r0, r3
 80032a0:	f000 fb19 	bl	80038d6 <TIM_ITRx_SetConfig>
      break;
 80032a4:	e01c      	b.n	80032e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032b2:	461a      	mov	r2, r3
 80032b4:	f000 fab0 	bl	8003818 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2140      	movs	r1, #64	@ 0x40
 80032be:	4618      	mov	r0, r3
 80032c0:	f000 fb09 	bl	80038d6 <TIM_ITRx_SetConfig>
      break;
 80032c4:	e00c      	b.n	80032e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4619      	mov	r1, r3
 80032d0:	4610      	mov	r0, r2
 80032d2:	f000 fb00 	bl	80038d6 <TIM_ITRx_SetConfig>
      break;
 80032d6:	e003      	b.n	80032e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	73fb      	strb	r3, [r7, #15]
      break;
 80032dc:	e000      	b.n	80032e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80032de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80032f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3710      	adds	r7, #16
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032fa:	b480      	push	{r7}
 80032fc:	b083      	sub	sp, #12
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003302:	bf00      	nop
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr

0800330e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800330e:	b480      	push	{r7}
 8003310:	b083      	sub	sp, #12
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003316:	bf00      	nop
 8003318:	370c      	adds	r7, #12
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr

08003322 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003322:	b480      	push	{r7}
 8003324:	b083      	sub	sp, #12
 8003326:	af00      	add	r7, sp, #0
 8003328:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800332a:	bf00      	nop
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr

08003336 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003336:	b480      	push	{r7}
 8003338:	b083      	sub	sp, #12
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800333e:	bf00      	nop
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr

0800334a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800334a:	b480      	push	{r7}
 800334c:	b083      	sub	sp, #12
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003352:	bf00      	nop
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
	...

08003360 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003360:	b480      	push	{r7}
 8003362:	b085      	sub	sp, #20
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a46      	ldr	r2, [pc, #280]	@ (800348c <TIM_Base_SetConfig+0x12c>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d013      	beq.n	80033a0 <TIM_Base_SetConfig+0x40>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800337e:	d00f      	beq.n	80033a0 <TIM_Base_SetConfig+0x40>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a43      	ldr	r2, [pc, #268]	@ (8003490 <TIM_Base_SetConfig+0x130>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d00b      	beq.n	80033a0 <TIM_Base_SetConfig+0x40>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a42      	ldr	r2, [pc, #264]	@ (8003494 <TIM_Base_SetConfig+0x134>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d007      	beq.n	80033a0 <TIM_Base_SetConfig+0x40>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a41      	ldr	r2, [pc, #260]	@ (8003498 <TIM_Base_SetConfig+0x138>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d003      	beq.n	80033a0 <TIM_Base_SetConfig+0x40>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	4a40      	ldr	r2, [pc, #256]	@ (800349c <TIM_Base_SetConfig+0x13c>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d108      	bne.n	80033b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a35      	ldr	r2, [pc, #212]	@ (800348c <TIM_Base_SetConfig+0x12c>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d02b      	beq.n	8003412 <TIM_Base_SetConfig+0xb2>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033c0:	d027      	beq.n	8003412 <TIM_Base_SetConfig+0xb2>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a32      	ldr	r2, [pc, #200]	@ (8003490 <TIM_Base_SetConfig+0x130>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d023      	beq.n	8003412 <TIM_Base_SetConfig+0xb2>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a31      	ldr	r2, [pc, #196]	@ (8003494 <TIM_Base_SetConfig+0x134>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d01f      	beq.n	8003412 <TIM_Base_SetConfig+0xb2>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a30      	ldr	r2, [pc, #192]	@ (8003498 <TIM_Base_SetConfig+0x138>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d01b      	beq.n	8003412 <TIM_Base_SetConfig+0xb2>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a2f      	ldr	r2, [pc, #188]	@ (800349c <TIM_Base_SetConfig+0x13c>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d017      	beq.n	8003412 <TIM_Base_SetConfig+0xb2>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a2e      	ldr	r2, [pc, #184]	@ (80034a0 <TIM_Base_SetConfig+0x140>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d013      	beq.n	8003412 <TIM_Base_SetConfig+0xb2>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a2d      	ldr	r2, [pc, #180]	@ (80034a4 <TIM_Base_SetConfig+0x144>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d00f      	beq.n	8003412 <TIM_Base_SetConfig+0xb2>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a2c      	ldr	r2, [pc, #176]	@ (80034a8 <TIM_Base_SetConfig+0x148>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d00b      	beq.n	8003412 <TIM_Base_SetConfig+0xb2>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a2b      	ldr	r2, [pc, #172]	@ (80034ac <TIM_Base_SetConfig+0x14c>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d007      	beq.n	8003412 <TIM_Base_SetConfig+0xb2>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a2a      	ldr	r2, [pc, #168]	@ (80034b0 <TIM_Base_SetConfig+0x150>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d003      	beq.n	8003412 <TIM_Base_SetConfig+0xb2>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a29      	ldr	r2, [pc, #164]	@ (80034b4 <TIM_Base_SetConfig+0x154>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d108      	bne.n	8003424 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003418:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	68fa      	ldr	r2, [r7, #12]
 8003420:	4313      	orrs	r3, r2
 8003422:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	4313      	orrs	r3, r2
 8003430:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	68fa      	ldr	r2, [r7, #12]
 8003436:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	689a      	ldr	r2, [r3, #8]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a10      	ldr	r2, [pc, #64]	@ (800348c <TIM_Base_SetConfig+0x12c>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d003      	beq.n	8003458 <TIM_Base_SetConfig+0xf8>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a12      	ldr	r2, [pc, #72]	@ (800349c <TIM_Base_SetConfig+0x13c>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d103      	bne.n	8003460 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	691a      	ldr	r2, [r3, #16]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	2b01      	cmp	r3, #1
 8003470:	d105      	bne.n	800347e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	f023 0201 	bic.w	r2, r3, #1
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	611a      	str	r2, [r3, #16]
  }
}
 800347e:	bf00      	nop
 8003480:	3714      	adds	r7, #20
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	40010000 	.word	0x40010000
 8003490:	40000400 	.word	0x40000400
 8003494:	40000800 	.word	0x40000800
 8003498:	40000c00 	.word	0x40000c00
 800349c:	40010400 	.word	0x40010400
 80034a0:	40014000 	.word	0x40014000
 80034a4:	40014400 	.word	0x40014400
 80034a8:	40014800 	.word	0x40014800
 80034ac:	40001800 	.word	0x40001800
 80034b0:	40001c00 	.word	0x40001c00
 80034b4:	40002000 	.word	0x40002000

080034b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b087      	sub	sp, #28
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a1b      	ldr	r3, [r3, #32]
 80034c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a1b      	ldr	r3, [r3, #32]
 80034cc:	f023 0201 	bic.w	r2, r3, #1
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f023 0303 	bic.w	r3, r3, #3
 80034ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68fa      	ldr	r2, [r7, #12]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	f023 0302 	bic.w	r3, r3, #2
 8003500:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	697a      	ldr	r2, [r7, #20]
 8003508:	4313      	orrs	r3, r2
 800350a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a20      	ldr	r2, [pc, #128]	@ (8003590 <TIM_OC1_SetConfig+0xd8>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d003      	beq.n	800351c <TIM_OC1_SetConfig+0x64>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a1f      	ldr	r2, [pc, #124]	@ (8003594 <TIM_OC1_SetConfig+0xdc>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d10c      	bne.n	8003536 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	f023 0308 	bic.w	r3, r3, #8
 8003522:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	697a      	ldr	r2, [r7, #20]
 800352a:	4313      	orrs	r3, r2
 800352c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	f023 0304 	bic.w	r3, r3, #4
 8003534:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a15      	ldr	r2, [pc, #84]	@ (8003590 <TIM_OC1_SetConfig+0xd8>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d003      	beq.n	8003546 <TIM_OC1_SetConfig+0x8e>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a14      	ldr	r2, [pc, #80]	@ (8003594 <TIM_OC1_SetConfig+0xdc>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d111      	bne.n	800356a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800354c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003554:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	695b      	ldr	r3, [r3, #20]
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	4313      	orrs	r3, r2
 800355e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	693a      	ldr	r2, [r7, #16]
 8003566:	4313      	orrs	r3, r2
 8003568:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	693a      	ldr	r2, [r7, #16]
 800356e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	685a      	ldr	r2, [r3, #4]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	697a      	ldr	r2, [r7, #20]
 8003582:	621a      	str	r2, [r3, #32]
}
 8003584:	bf00      	nop
 8003586:	371c      	adds	r7, #28
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr
 8003590:	40010000 	.word	0x40010000
 8003594:	40010400 	.word	0x40010400

08003598 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003598:	b480      	push	{r7}
 800359a:	b087      	sub	sp, #28
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a1b      	ldr	r3, [r3, #32]
 80035a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a1b      	ldr	r3, [r3, #32]
 80035ac:	f023 0210 	bic.w	r2, r3, #16
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80035c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	021b      	lsls	r3, r3, #8
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	4313      	orrs	r3, r2
 80035da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	f023 0320 	bic.w	r3, r3, #32
 80035e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	011b      	lsls	r3, r3, #4
 80035ea:	697a      	ldr	r2, [r7, #20]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a22      	ldr	r2, [pc, #136]	@ (800367c <TIM_OC2_SetConfig+0xe4>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d003      	beq.n	8003600 <TIM_OC2_SetConfig+0x68>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a21      	ldr	r2, [pc, #132]	@ (8003680 <TIM_OC2_SetConfig+0xe8>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d10d      	bne.n	800361c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003606:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	011b      	lsls	r3, r3, #4
 800360e:	697a      	ldr	r2, [r7, #20]
 8003610:	4313      	orrs	r3, r2
 8003612:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800361a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a17      	ldr	r2, [pc, #92]	@ (800367c <TIM_OC2_SetConfig+0xe4>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d003      	beq.n	800362c <TIM_OC2_SetConfig+0x94>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a16      	ldr	r2, [pc, #88]	@ (8003680 <TIM_OC2_SetConfig+0xe8>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d113      	bne.n	8003654 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003632:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800363a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	695b      	ldr	r3, [r3, #20]
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	693a      	ldr	r2, [r7, #16]
 8003644:	4313      	orrs	r3, r2
 8003646:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	699b      	ldr	r3, [r3, #24]
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	693a      	ldr	r2, [r7, #16]
 8003650:	4313      	orrs	r3, r2
 8003652:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	693a      	ldr	r2, [r7, #16]
 8003658:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	68fa      	ldr	r2, [r7, #12]
 800365e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685a      	ldr	r2, [r3, #4]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	697a      	ldr	r2, [r7, #20]
 800366c:	621a      	str	r2, [r3, #32]
}
 800366e:	bf00      	nop
 8003670:	371c      	adds	r7, #28
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	40010000 	.word	0x40010000
 8003680:	40010400 	.word	0x40010400

08003684 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003684:	b480      	push	{r7}
 8003686:	b087      	sub	sp, #28
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a1b      	ldr	r3, [r3, #32]
 8003698:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	69db      	ldr	r3, [r3, #28]
 80036aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f023 0303 	bic.w	r3, r3, #3
 80036ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80036cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	021b      	lsls	r3, r3, #8
 80036d4:	697a      	ldr	r2, [r7, #20]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a21      	ldr	r2, [pc, #132]	@ (8003764 <TIM_OC3_SetConfig+0xe0>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d003      	beq.n	80036ea <TIM_OC3_SetConfig+0x66>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a20      	ldr	r2, [pc, #128]	@ (8003768 <TIM_OC3_SetConfig+0xe4>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d10d      	bne.n	8003706 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80036f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	021b      	lsls	r3, r3, #8
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003704:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a16      	ldr	r2, [pc, #88]	@ (8003764 <TIM_OC3_SetConfig+0xe0>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d003      	beq.n	8003716 <TIM_OC3_SetConfig+0x92>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a15      	ldr	r2, [pc, #84]	@ (8003768 <TIM_OC3_SetConfig+0xe4>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d113      	bne.n	800373e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800371c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003724:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	011b      	lsls	r3, r3, #4
 800372c:	693a      	ldr	r2, [r7, #16]
 800372e:	4313      	orrs	r3, r2
 8003730:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	011b      	lsls	r3, r3, #4
 8003738:	693a      	ldr	r2, [r7, #16]
 800373a:	4313      	orrs	r3, r2
 800373c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	685a      	ldr	r2, [r3, #4]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	621a      	str	r2, [r3, #32]
}
 8003758:	bf00      	nop
 800375a:	371c      	adds	r7, #28
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr
 8003764:	40010000 	.word	0x40010000
 8003768:	40010400 	.word	0x40010400

0800376c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800376c:	b480      	push	{r7}
 800376e:	b087      	sub	sp, #28
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a1b      	ldr	r3, [r3, #32]
 800377a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a1b      	ldr	r3, [r3, #32]
 8003780:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	69db      	ldr	r3, [r3, #28]
 8003792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800379a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	021b      	lsls	r3, r3, #8
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80037b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	031b      	lsls	r3, r3, #12
 80037be:	693a      	ldr	r2, [r7, #16]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4a12      	ldr	r2, [pc, #72]	@ (8003810 <TIM_OC4_SetConfig+0xa4>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d003      	beq.n	80037d4 <TIM_OC4_SetConfig+0x68>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4a11      	ldr	r2, [pc, #68]	@ (8003814 <TIM_OC4_SetConfig+0xa8>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d109      	bne.n	80037e8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80037da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	695b      	ldr	r3, [r3, #20]
 80037e0:	019b      	lsls	r3, r3, #6
 80037e2:	697a      	ldr	r2, [r7, #20]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	697a      	ldr	r2, [r7, #20]
 80037ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	685a      	ldr	r2, [r3, #4]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	693a      	ldr	r2, [r7, #16]
 8003800:	621a      	str	r2, [r3, #32]
}
 8003802:	bf00      	nop
 8003804:	371c      	adds	r7, #28
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	40010000 	.word	0x40010000
 8003814:	40010400 	.word	0x40010400

08003818 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003818:	b480      	push	{r7}
 800381a:	b087      	sub	sp, #28
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6a1b      	ldr	r3, [r3, #32]
 8003828:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6a1b      	ldr	r3, [r3, #32]
 800382e:	f023 0201 	bic.w	r2, r3, #1
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003842:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	011b      	lsls	r3, r3, #4
 8003848:	693a      	ldr	r2, [r7, #16]
 800384a:	4313      	orrs	r3, r2
 800384c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	f023 030a 	bic.w	r3, r3, #10
 8003854:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	4313      	orrs	r3, r2
 800385c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	693a      	ldr	r2, [r7, #16]
 8003862:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	697a      	ldr	r2, [r7, #20]
 8003868:	621a      	str	r2, [r3, #32]
}
 800386a:	bf00      	nop
 800386c:	371c      	adds	r7, #28
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr

08003876 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003876:	b480      	push	{r7}
 8003878:	b087      	sub	sp, #28
 800387a:	af00      	add	r7, sp, #0
 800387c:	60f8      	str	r0, [r7, #12]
 800387e:	60b9      	str	r1, [r7, #8]
 8003880:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6a1b      	ldr	r3, [r3, #32]
 8003886:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6a1b      	ldr	r3, [r3, #32]
 800388c:	f023 0210 	bic.w	r2, r3, #16
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80038a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	031b      	lsls	r3, r3, #12
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80038b2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	011b      	lsls	r3, r3, #4
 80038b8:	697a      	ldr	r2, [r7, #20]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	697a      	ldr	r2, [r7, #20]
 80038c8:	621a      	str	r2, [r3, #32]
}
 80038ca:	bf00      	nop
 80038cc:	371c      	adds	r7, #28
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr

080038d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80038d6:	b480      	push	{r7}
 80038d8:	b085      	sub	sp, #20
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
 80038de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038ee:	683a      	ldr	r2, [r7, #0]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	f043 0307 	orr.w	r3, r3, #7
 80038f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	609a      	str	r2, [r3, #8]
}
 8003900:	bf00      	nop
 8003902:	3714      	adds	r7, #20
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr

0800390c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800390c:	b480      	push	{r7}
 800390e:	b087      	sub	sp, #28
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	607a      	str	r2, [r7, #4]
 8003918:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003926:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	021a      	lsls	r2, r3, #8
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	431a      	orrs	r2, r3
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	4313      	orrs	r3, r2
 8003934:	697a      	ldr	r2, [r7, #20]
 8003936:	4313      	orrs	r3, r2
 8003938:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	697a      	ldr	r2, [r7, #20]
 800393e:	609a      	str	r2, [r3, #8]
}
 8003940:	bf00      	nop
 8003942:	371c      	adds	r7, #28
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800394c:	b480      	push	{r7}
 800394e:	b087      	sub	sp, #28
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	f003 031f 	and.w	r3, r3, #31
 800395e:	2201      	movs	r2, #1
 8003960:	fa02 f303 	lsl.w	r3, r2, r3
 8003964:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6a1a      	ldr	r2, [r3, #32]
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	43db      	mvns	r3, r3
 800396e:	401a      	ands	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6a1a      	ldr	r2, [r3, #32]
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	f003 031f 	and.w	r3, r3, #31
 800397e:	6879      	ldr	r1, [r7, #4]
 8003980:	fa01 f303 	lsl.w	r3, r1, r3
 8003984:	431a      	orrs	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	621a      	str	r2, [r3, #32]
}
 800398a:	bf00      	nop
 800398c:	371c      	adds	r7, #28
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
	...

08003998 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d101      	bne.n	80039b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039ac:	2302      	movs	r3, #2
 80039ae:	e05a      	b.n	8003a66 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2202      	movs	r2, #2
 80039bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	4313      	orrs	r3, r2
 80039e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68fa      	ldr	r2, [r7, #12]
 80039e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a21      	ldr	r2, [pc, #132]	@ (8003a74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d022      	beq.n	8003a3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039fc:	d01d      	beq.n	8003a3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a1d      	ldr	r2, [pc, #116]	@ (8003a78 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d018      	beq.n	8003a3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a1b      	ldr	r2, [pc, #108]	@ (8003a7c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d013      	beq.n	8003a3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a1a      	ldr	r2, [pc, #104]	@ (8003a80 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d00e      	beq.n	8003a3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a18      	ldr	r2, [pc, #96]	@ (8003a84 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d009      	beq.n	8003a3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a17      	ldr	r2, [pc, #92]	@ (8003a88 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d004      	beq.n	8003a3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a15      	ldr	r2, [pc, #84]	@ (8003a8c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d10c      	bne.n	8003a54 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	68ba      	ldr	r2, [r7, #8]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68ba      	ldr	r2, [r7, #8]
 8003a52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3714      	adds	r7, #20
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	40010000 	.word	0x40010000
 8003a78:	40000400 	.word	0x40000400
 8003a7c:	40000800 	.word	0x40000800
 8003a80:	40000c00 	.word	0x40000c00
 8003a84:	40010400 	.word	0x40010400
 8003a88:	40014000 	.word	0x40014000
 8003a8c:	40001800 	.word	0x40001800

08003a90 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a98:	bf00      	nop
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003aac:	bf00      	nop
 8003aae:	370c      	adds	r7, #12
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d101      	bne.n	8003aca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e042      	b.n	8003b50 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d106      	bne.n	8003ae4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f7fd f8da 	bl	8000c98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2224      	movs	r2, #36	@ 0x24
 8003ae8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68da      	ldr	r2, [r3, #12]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003afa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f000 f82b 	bl	8003b58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	691a      	ldr	r2, [r3, #16]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003b10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	695a      	ldr	r2, [r3, #20]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003b20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	68da      	ldr	r2, [r3, #12]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003b30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2220      	movs	r2, #32
 8003b3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2220      	movs	r2, #32
 8003b44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3708      	adds	r7, #8
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b5c:	b0c0      	sub	sp, #256	@ 0x100
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b74:	68d9      	ldr	r1, [r3, #12]
 8003b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	ea40 0301 	orr.w	r3, r0, r1
 8003b80:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b86:	689a      	ldr	r2, [r3, #8]
 8003b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	431a      	orrs	r2, r3
 8003b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b94:	695b      	ldr	r3, [r3, #20]
 8003b96:	431a      	orrs	r2, r3
 8003b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b9c:	69db      	ldr	r3, [r3, #28]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003bb0:	f021 010c 	bic.w	r1, r1, #12
 8003bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003bbe:	430b      	orrs	r3, r1
 8003bc0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bd2:	6999      	ldr	r1, [r3, #24]
 8003bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	ea40 0301 	orr.w	r3, r0, r1
 8003bde:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	4b8f      	ldr	r3, [pc, #572]	@ (8003e24 <UART_SetConfig+0x2cc>)
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d005      	beq.n	8003bf8 <UART_SetConfig+0xa0>
 8003bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	4b8d      	ldr	r3, [pc, #564]	@ (8003e28 <UART_SetConfig+0x2d0>)
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d104      	bne.n	8003c02 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003bf8:	f7fe fe6c 	bl	80028d4 <HAL_RCC_GetPCLK2Freq>
 8003bfc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003c00:	e003      	b.n	8003c0a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c02:	f7fe fe53 	bl	80028ac <HAL_RCC_GetPCLK1Freq>
 8003c06:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c0e:	69db      	ldr	r3, [r3, #28]
 8003c10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c14:	f040 810c 	bne.w	8003e30 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003c22:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003c26:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003c2a:	4622      	mov	r2, r4
 8003c2c:	462b      	mov	r3, r5
 8003c2e:	1891      	adds	r1, r2, r2
 8003c30:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003c32:	415b      	adcs	r3, r3
 8003c34:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c36:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003c3a:	4621      	mov	r1, r4
 8003c3c:	eb12 0801 	adds.w	r8, r2, r1
 8003c40:	4629      	mov	r1, r5
 8003c42:	eb43 0901 	adc.w	r9, r3, r1
 8003c46:	f04f 0200 	mov.w	r2, #0
 8003c4a:	f04f 0300 	mov.w	r3, #0
 8003c4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c5a:	4690      	mov	r8, r2
 8003c5c:	4699      	mov	r9, r3
 8003c5e:	4623      	mov	r3, r4
 8003c60:	eb18 0303 	adds.w	r3, r8, r3
 8003c64:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003c68:	462b      	mov	r3, r5
 8003c6a:	eb49 0303 	adc.w	r3, r9, r3
 8003c6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003c72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003c7e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003c82:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003c86:	460b      	mov	r3, r1
 8003c88:	18db      	adds	r3, r3, r3
 8003c8a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	eb42 0303 	adc.w	r3, r2, r3
 8003c92:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c94:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003c98:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003c9c:	f7fc faa6 	bl	80001ec <__aeabi_uldivmod>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	4b61      	ldr	r3, [pc, #388]	@ (8003e2c <UART_SetConfig+0x2d4>)
 8003ca6:	fba3 2302 	umull	r2, r3, r3, r2
 8003caa:	095b      	lsrs	r3, r3, #5
 8003cac:	011c      	lsls	r4, r3, #4
 8003cae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003cb8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003cbc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003cc0:	4642      	mov	r2, r8
 8003cc2:	464b      	mov	r3, r9
 8003cc4:	1891      	adds	r1, r2, r2
 8003cc6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003cc8:	415b      	adcs	r3, r3
 8003cca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ccc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003cd0:	4641      	mov	r1, r8
 8003cd2:	eb12 0a01 	adds.w	sl, r2, r1
 8003cd6:	4649      	mov	r1, r9
 8003cd8:	eb43 0b01 	adc.w	fp, r3, r1
 8003cdc:	f04f 0200 	mov.w	r2, #0
 8003ce0:	f04f 0300 	mov.w	r3, #0
 8003ce4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ce8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003cec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cf0:	4692      	mov	sl, r2
 8003cf2:	469b      	mov	fp, r3
 8003cf4:	4643      	mov	r3, r8
 8003cf6:	eb1a 0303 	adds.w	r3, sl, r3
 8003cfa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003cfe:	464b      	mov	r3, r9
 8003d00:	eb4b 0303 	adc.w	r3, fp, r3
 8003d04:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003d14:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003d18:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	18db      	adds	r3, r3, r3
 8003d20:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d22:	4613      	mov	r3, r2
 8003d24:	eb42 0303 	adc.w	r3, r2, r3
 8003d28:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d2a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003d2e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003d32:	f7fc fa5b 	bl	80001ec <__aeabi_uldivmod>
 8003d36:	4602      	mov	r2, r0
 8003d38:	460b      	mov	r3, r1
 8003d3a:	4611      	mov	r1, r2
 8003d3c:	4b3b      	ldr	r3, [pc, #236]	@ (8003e2c <UART_SetConfig+0x2d4>)
 8003d3e:	fba3 2301 	umull	r2, r3, r3, r1
 8003d42:	095b      	lsrs	r3, r3, #5
 8003d44:	2264      	movs	r2, #100	@ 0x64
 8003d46:	fb02 f303 	mul.w	r3, r2, r3
 8003d4a:	1acb      	subs	r3, r1, r3
 8003d4c:	00db      	lsls	r3, r3, #3
 8003d4e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003d52:	4b36      	ldr	r3, [pc, #216]	@ (8003e2c <UART_SetConfig+0x2d4>)
 8003d54:	fba3 2302 	umull	r2, r3, r3, r2
 8003d58:	095b      	lsrs	r3, r3, #5
 8003d5a:	005b      	lsls	r3, r3, #1
 8003d5c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003d60:	441c      	add	r4, r3
 8003d62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d66:	2200      	movs	r2, #0
 8003d68:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d6c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003d70:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003d74:	4642      	mov	r2, r8
 8003d76:	464b      	mov	r3, r9
 8003d78:	1891      	adds	r1, r2, r2
 8003d7a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003d7c:	415b      	adcs	r3, r3
 8003d7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d80:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003d84:	4641      	mov	r1, r8
 8003d86:	1851      	adds	r1, r2, r1
 8003d88:	6339      	str	r1, [r7, #48]	@ 0x30
 8003d8a:	4649      	mov	r1, r9
 8003d8c:	414b      	adcs	r3, r1
 8003d8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d90:	f04f 0200 	mov.w	r2, #0
 8003d94:	f04f 0300 	mov.w	r3, #0
 8003d98:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003d9c:	4659      	mov	r1, fp
 8003d9e:	00cb      	lsls	r3, r1, #3
 8003da0:	4651      	mov	r1, sl
 8003da2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003da6:	4651      	mov	r1, sl
 8003da8:	00ca      	lsls	r2, r1, #3
 8003daa:	4610      	mov	r0, r2
 8003dac:	4619      	mov	r1, r3
 8003dae:	4603      	mov	r3, r0
 8003db0:	4642      	mov	r2, r8
 8003db2:	189b      	adds	r3, r3, r2
 8003db4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003db8:	464b      	mov	r3, r9
 8003dba:	460a      	mov	r2, r1
 8003dbc:	eb42 0303 	adc.w	r3, r2, r3
 8003dc0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003dd0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003dd4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003dd8:	460b      	mov	r3, r1
 8003dda:	18db      	adds	r3, r3, r3
 8003ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003dde:	4613      	mov	r3, r2
 8003de0:	eb42 0303 	adc.w	r3, r2, r3
 8003de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003de6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003dea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003dee:	f7fc f9fd 	bl	80001ec <__aeabi_uldivmod>
 8003df2:	4602      	mov	r2, r0
 8003df4:	460b      	mov	r3, r1
 8003df6:	4b0d      	ldr	r3, [pc, #52]	@ (8003e2c <UART_SetConfig+0x2d4>)
 8003df8:	fba3 1302 	umull	r1, r3, r3, r2
 8003dfc:	095b      	lsrs	r3, r3, #5
 8003dfe:	2164      	movs	r1, #100	@ 0x64
 8003e00:	fb01 f303 	mul.w	r3, r1, r3
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	00db      	lsls	r3, r3, #3
 8003e08:	3332      	adds	r3, #50	@ 0x32
 8003e0a:	4a08      	ldr	r2, [pc, #32]	@ (8003e2c <UART_SetConfig+0x2d4>)
 8003e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e10:	095b      	lsrs	r3, r3, #5
 8003e12:	f003 0207 	and.w	r2, r3, #7
 8003e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4422      	add	r2, r4
 8003e1e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003e20:	e106      	b.n	8004030 <UART_SetConfig+0x4d8>
 8003e22:	bf00      	nop
 8003e24:	40011000 	.word	0x40011000
 8003e28:	40011400 	.word	0x40011400
 8003e2c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e34:	2200      	movs	r2, #0
 8003e36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003e3a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003e3e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003e42:	4642      	mov	r2, r8
 8003e44:	464b      	mov	r3, r9
 8003e46:	1891      	adds	r1, r2, r2
 8003e48:	6239      	str	r1, [r7, #32]
 8003e4a:	415b      	adcs	r3, r3
 8003e4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e52:	4641      	mov	r1, r8
 8003e54:	1854      	adds	r4, r2, r1
 8003e56:	4649      	mov	r1, r9
 8003e58:	eb43 0501 	adc.w	r5, r3, r1
 8003e5c:	f04f 0200 	mov.w	r2, #0
 8003e60:	f04f 0300 	mov.w	r3, #0
 8003e64:	00eb      	lsls	r3, r5, #3
 8003e66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e6a:	00e2      	lsls	r2, r4, #3
 8003e6c:	4614      	mov	r4, r2
 8003e6e:	461d      	mov	r5, r3
 8003e70:	4643      	mov	r3, r8
 8003e72:	18e3      	adds	r3, r4, r3
 8003e74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003e78:	464b      	mov	r3, r9
 8003e7a:	eb45 0303 	adc.w	r3, r5, r3
 8003e7e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003e8e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003e92:	f04f 0200 	mov.w	r2, #0
 8003e96:	f04f 0300 	mov.w	r3, #0
 8003e9a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003e9e:	4629      	mov	r1, r5
 8003ea0:	008b      	lsls	r3, r1, #2
 8003ea2:	4621      	mov	r1, r4
 8003ea4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ea8:	4621      	mov	r1, r4
 8003eaa:	008a      	lsls	r2, r1, #2
 8003eac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003eb0:	f7fc f99c 	bl	80001ec <__aeabi_uldivmod>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	460b      	mov	r3, r1
 8003eb8:	4b60      	ldr	r3, [pc, #384]	@ (800403c <UART_SetConfig+0x4e4>)
 8003eba:	fba3 2302 	umull	r2, r3, r3, r2
 8003ebe:	095b      	lsrs	r3, r3, #5
 8003ec0:	011c      	lsls	r4, r3, #4
 8003ec2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003ecc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003ed0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003ed4:	4642      	mov	r2, r8
 8003ed6:	464b      	mov	r3, r9
 8003ed8:	1891      	adds	r1, r2, r2
 8003eda:	61b9      	str	r1, [r7, #24]
 8003edc:	415b      	adcs	r3, r3
 8003ede:	61fb      	str	r3, [r7, #28]
 8003ee0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ee4:	4641      	mov	r1, r8
 8003ee6:	1851      	adds	r1, r2, r1
 8003ee8:	6139      	str	r1, [r7, #16]
 8003eea:	4649      	mov	r1, r9
 8003eec:	414b      	adcs	r3, r1
 8003eee:	617b      	str	r3, [r7, #20]
 8003ef0:	f04f 0200 	mov.w	r2, #0
 8003ef4:	f04f 0300 	mov.w	r3, #0
 8003ef8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003efc:	4659      	mov	r1, fp
 8003efe:	00cb      	lsls	r3, r1, #3
 8003f00:	4651      	mov	r1, sl
 8003f02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f06:	4651      	mov	r1, sl
 8003f08:	00ca      	lsls	r2, r1, #3
 8003f0a:	4610      	mov	r0, r2
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	4603      	mov	r3, r0
 8003f10:	4642      	mov	r2, r8
 8003f12:	189b      	adds	r3, r3, r2
 8003f14:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003f18:	464b      	mov	r3, r9
 8003f1a:	460a      	mov	r2, r1
 8003f1c:	eb42 0303 	adc.w	r3, r2, r3
 8003f20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003f2e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003f30:	f04f 0200 	mov.w	r2, #0
 8003f34:	f04f 0300 	mov.w	r3, #0
 8003f38:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003f3c:	4649      	mov	r1, r9
 8003f3e:	008b      	lsls	r3, r1, #2
 8003f40:	4641      	mov	r1, r8
 8003f42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f46:	4641      	mov	r1, r8
 8003f48:	008a      	lsls	r2, r1, #2
 8003f4a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003f4e:	f7fc f94d 	bl	80001ec <__aeabi_uldivmod>
 8003f52:	4602      	mov	r2, r0
 8003f54:	460b      	mov	r3, r1
 8003f56:	4611      	mov	r1, r2
 8003f58:	4b38      	ldr	r3, [pc, #224]	@ (800403c <UART_SetConfig+0x4e4>)
 8003f5a:	fba3 2301 	umull	r2, r3, r3, r1
 8003f5e:	095b      	lsrs	r3, r3, #5
 8003f60:	2264      	movs	r2, #100	@ 0x64
 8003f62:	fb02 f303 	mul.w	r3, r2, r3
 8003f66:	1acb      	subs	r3, r1, r3
 8003f68:	011b      	lsls	r3, r3, #4
 8003f6a:	3332      	adds	r3, #50	@ 0x32
 8003f6c:	4a33      	ldr	r2, [pc, #204]	@ (800403c <UART_SetConfig+0x4e4>)
 8003f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f72:	095b      	lsrs	r3, r3, #5
 8003f74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f78:	441c      	add	r4, r3
 8003f7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f7e:	2200      	movs	r2, #0
 8003f80:	673b      	str	r3, [r7, #112]	@ 0x70
 8003f82:	677a      	str	r2, [r7, #116]	@ 0x74
 8003f84:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003f88:	4642      	mov	r2, r8
 8003f8a:	464b      	mov	r3, r9
 8003f8c:	1891      	adds	r1, r2, r2
 8003f8e:	60b9      	str	r1, [r7, #8]
 8003f90:	415b      	adcs	r3, r3
 8003f92:	60fb      	str	r3, [r7, #12]
 8003f94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f98:	4641      	mov	r1, r8
 8003f9a:	1851      	adds	r1, r2, r1
 8003f9c:	6039      	str	r1, [r7, #0]
 8003f9e:	4649      	mov	r1, r9
 8003fa0:	414b      	adcs	r3, r1
 8003fa2:	607b      	str	r3, [r7, #4]
 8003fa4:	f04f 0200 	mov.w	r2, #0
 8003fa8:	f04f 0300 	mov.w	r3, #0
 8003fac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003fb0:	4659      	mov	r1, fp
 8003fb2:	00cb      	lsls	r3, r1, #3
 8003fb4:	4651      	mov	r1, sl
 8003fb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fba:	4651      	mov	r1, sl
 8003fbc:	00ca      	lsls	r2, r1, #3
 8003fbe:	4610      	mov	r0, r2
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	4642      	mov	r2, r8
 8003fc6:	189b      	adds	r3, r3, r2
 8003fc8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003fca:	464b      	mov	r3, r9
 8003fcc:	460a      	mov	r2, r1
 8003fce:	eb42 0303 	adc.w	r3, r2, r3
 8003fd2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	663b      	str	r3, [r7, #96]	@ 0x60
 8003fde:	667a      	str	r2, [r7, #100]	@ 0x64
 8003fe0:	f04f 0200 	mov.w	r2, #0
 8003fe4:	f04f 0300 	mov.w	r3, #0
 8003fe8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003fec:	4649      	mov	r1, r9
 8003fee:	008b      	lsls	r3, r1, #2
 8003ff0:	4641      	mov	r1, r8
 8003ff2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ff6:	4641      	mov	r1, r8
 8003ff8:	008a      	lsls	r2, r1, #2
 8003ffa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003ffe:	f7fc f8f5 	bl	80001ec <__aeabi_uldivmod>
 8004002:	4602      	mov	r2, r0
 8004004:	460b      	mov	r3, r1
 8004006:	4b0d      	ldr	r3, [pc, #52]	@ (800403c <UART_SetConfig+0x4e4>)
 8004008:	fba3 1302 	umull	r1, r3, r3, r2
 800400c:	095b      	lsrs	r3, r3, #5
 800400e:	2164      	movs	r1, #100	@ 0x64
 8004010:	fb01 f303 	mul.w	r3, r1, r3
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	011b      	lsls	r3, r3, #4
 8004018:	3332      	adds	r3, #50	@ 0x32
 800401a:	4a08      	ldr	r2, [pc, #32]	@ (800403c <UART_SetConfig+0x4e4>)
 800401c:	fba2 2303 	umull	r2, r3, r2, r3
 8004020:	095b      	lsrs	r3, r3, #5
 8004022:	f003 020f 	and.w	r2, r3, #15
 8004026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4422      	add	r2, r4
 800402e:	609a      	str	r2, [r3, #8]
}
 8004030:	bf00      	nop
 8004032:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004036:	46bd      	mov	sp, r7
 8004038:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800403c:	51eb851f 	.word	0x51eb851f

08004040 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004040:	b084      	sub	sp, #16
 8004042:	b580      	push	{r7, lr}
 8004044:	b084      	sub	sp, #16
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
 800404a:	f107 001c 	add.w	r0, r7, #28
 800404e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004052:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004056:	2b01      	cmp	r3, #1
 8004058:	d123      	bne.n	80040a2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800405e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800406e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004082:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004086:	2b01      	cmp	r3, #1
 8004088:	d105      	bne.n	8004096 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 faa0 	bl	80045dc <USB_CoreReset>
 800409c:	4603      	mov	r3, r0
 800409e:	73fb      	strb	r3, [r7, #15]
 80040a0:	e01b      	b.n	80040da <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 fa94 	bl	80045dc <USB_CoreReset>
 80040b4:	4603      	mov	r3, r0
 80040b6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80040b8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d106      	bne.n	80040ce <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040c4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	639a      	str	r2, [r3, #56]	@ 0x38
 80040cc:	e005      	b.n	80040da <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040d2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80040da:	7fbb      	ldrb	r3, [r7, #30]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d10b      	bne.n	80040f8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f043 0206 	orr.w	r2, r3, #6
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f043 0220 	orr.w	r2, r3, #32
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80040f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3710      	adds	r7, #16
 80040fe:	46bd      	mov	sp, r7
 8004100:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004104:	b004      	add	sp, #16
 8004106:	4770      	bx	lr

08004108 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	f023 0201 	bic.w	r2, r3, #1
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800411c:	2300      	movs	r3, #0
}
 800411e:	4618      	mov	r0, r3
 8004120:	370c      	adds	r7, #12
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr

0800412a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800412a:	b580      	push	{r7, lr}
 800412c:	b084      	sub	sp, #16
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
 8004132:	460b      	mov	r3, r1
 8004134:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004136:	2300      	movs	r3, #0
 8004138:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004146:	78fb      	ldrb	r3, [r7, #3]
 8004148:	2b01      	cmp	r3, #1
 800414a:	d115      	bne.n	8004178 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004158:	200a      	movs	r0, #10
 800415a:	f7fc ffdd 	bl	8001118 <HAL_Delay>
      ms += 10U;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	330a      	adds	r3, #10
 8004162:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f000 fa2b 	bl	80045c0 <USB_GetMode>
 800416a:	4603      	mov	r3, r0
 800416c:	2b01      	cmp	r3, #1
 800416e:	d01e      	beq.n	80041ae <USB_SetCurrentMode+0x84>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2bc7      	cmp	r3, #199	@ 0xc7
 8004174:	d9f0      	bls.n	8004158 <USB_SetCurrentMode+0x2e>
 8004176:	e01a      	b.n	80041ae <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004178:	78fb      	ldrb	r3, [r7, #3]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d115      	bne.n	80041aa <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800418a:	200a      	movs	r0, #10
 800418c:	f7fc ffc4 	bl	8001118 <HAL_Delay>
      ms += 10U;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	330a      	adds	r3, #10
 8004194:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 fa12 	bl	80045c0 <USB_GetMode>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d005      	beq.n	80041ae <USB_SetCurrentMode+0x84>
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2bc7      	cmp	r3, #199	@ 0xc7
 80041a6:	d9f0      	bls.n	800418a <USB_SetCurrentMode+0x60>
 80041a8:	e001      	b.n	80041ae <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e005      	b.n	80041ba <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2bc8      	cmp	r3, #200	@ 0xc8
 80041b2:	d101      	bne.n	80041b8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e000      	b.n	80041ba <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
	...

080041c4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80041c4:	b084      	sub	sp, #16
 80041c6:	b580      	push	{r7, lr}
 80041c8:	b086      	sub	sp, #24
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
 80041ce:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80041d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80041d6:	2300      	movs	r3, #0
 80041d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80041de:	2300      	movs	r3, #0
 80041e0:	613b      	str	r3, [r7, #16]
 80041e2:	e009      	b.n	80041f8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	3340      	adds	r3, #64	@ 0x40
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	4413      	add	r3, r2
 80041ee:	2200      	movs	r2, #0
 80041f0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	3301      	adds	r3, #1
 80041f6:	613b      	str	r3, [r7, #16]
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	2b0e      	cmp	r3, #14
 80041fc:	d9f2      	bls.n	80041e4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80041fe:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004202:	2b00      	cmp	r3, #0
 8004204:	d11c      	bne.n	8004240 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	68fa      	ldr	r2, [r7, #12]
 8004210:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004214:	f043 0302 	orr.w	r3, r3, #2
 8004218:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800421e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800422a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004236:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	639a      	str	r2, [r3, #56]	@ 0x38
 800423e:	e00b      	b.n	8004258 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004244:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004250:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800425e:	461a      	mov	r2, r3
 8004260:	2300      	movs	r3, #0
 8004262:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004264:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004268:	2b01      	cmp	r3, #1
 800426a:	d10d      	bne.n	8004288 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800426c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004270:	2b00      	cmp	r3, #0
 8004272:	d104      	bne.n	800427e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004274:	2100      	movs	r1, #0
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 f968 	bl	800454c <USB_SetDevSpeed>
 800427c:	e008      	b.n	8004290 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800427e:	2101      	movs	r1, #1
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f000 f963 	bl	800454c <USB_SetDevSpeed>
 8004286:	e003      	b.n	8004290 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004288:	2103      	movs	r1, #3
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 f95e 	bl	800454c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004290:	2110      	movs	r1, #16
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 f8fa 	bl	800448c <USB_FlushTxFifo>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d001      	beq.n	80042a2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 f924 	bl	80044f0 <USB_FlushRxFifo>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d001      	beq.n	80042b2 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042b8:	461a      	mov	r2, r3
 80042ba:	2300      	movs	r3, #0
 80042bc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042c4:	461a      	mov	r2, r3
 80042c6:	2300      	movs	r3, #0
 80042c8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042d0:	461a      	mov	r2, r3
 80042d2:	2300      	movs	r3, #0
 80042d4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042d6:	2300      	movs	r3, #0
 80042d8:	613b      	str	r3, [r7, #16]
 80042da:	e043      	b.n	8004364 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	015a      	lsls	r2, r3, #5
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	4413      	add	r3, r2
 80042e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80042ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80042f2:	d118      	bne.n	8004326 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d10a      	bne.n	8004310 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	015a      	lsls	r2, r3, #5
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	4413      	add	r3, r2
 8004302:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004306:	461a      	mov	r2, r3
 8004308:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800430c:	6013      	str	r3, [r2, #0]
 800430e:	e013      	b.n	8004338 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	015a      	lsls	r2, r3, #5
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	4413      	add	r3, r2
 8004318:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800431c:	461a      	mov	r2, r3
 800431e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004322:	6013      	str	r3, [r2, #0]
 8004324:	e008      	b.n	8004338 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	015a      	lsls	r2, r3, #5
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	4413      	add	r3, r2
 800432e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004332:	461a      	mov	r2, r3
 8004334:	2300      	movs	r3, #0
 8004336:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	015a      	lsls	r2, r3, #5
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	4413      	add	r3, r2
 8004340:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004344:	461a      	mov	r2, r3
 8004346:	2300      	movs	r3, #0
 8004348:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	015a      	lsls	r2, r3, #5
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	4413      	add	r3, r2
 8004352:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004356:	461a      	mov	r2, r3
 8004358:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800435c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	3301      	adds	r3, #1
 8004362:	613b      	str	r3, [r7, #16]
 8004364:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004368:	461a      	mov	r2, r3
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	4293      	cmp	r3, r2
 800436e:	d3b5      	bcc.n	80042dc <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004370:	2300      	movs	r3, #0
 8004372:	613b      	str	r3, [r7, #16]
 8004374:	e043      	b.n	80043fe <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	015a      	lsls	r2, r3, #5
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	4413      	add	r3, r2
 800437e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004388:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800438c:	d118      	bne.n	80043c0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d10a      	bne.n	80043aa <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	015a      	lsls	r2, r3, #5
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	4413      	add	r3, r2
 800439c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043a0:	461a      	mov	r2, r3
 80043a2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80043a6:	6013      	str	r3, [r2, #0]
 80043a8:	e013      	b.n	80043d2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	015a      	lsls	r2, r3, #5
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	4413      	add	r3, r2
 80043b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043b6:	461a      	mov	r2, r3
 80043b8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80043bc:	6013      	str	r3, [r2, #0]
 80043be:	e008      	b.n	80043d2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	015a      	lsls	r2, r3, #5
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	4413      	add	r3, r2
 80043c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043cc:	461a      	mov	r2, r3
 80043ce:	2300      	movs	r3, #0
 80043d0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	015a      	lsls	r2, r3, #5
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	4413      	add	r3, r2
 80043da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043de:	461a      	mov	r2, r3
 80043e0:	2300      	movs	r3, #0
 80043e2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	015a      	lsls	r2, r3, #5
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	4413      	add	r3, r2
 80043ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043f0:	461a      	mov	r2, r3
 80043f2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80043f6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	3301      	adds	r3, #1
 80043fc:	613b      	str	r3, [r7, #16]
 80043fe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004402:	461a      	mov	r2, r3
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	4293      	cmp	r3, r2
 8004408:	d3b5      	bcc.n	8004376 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	68fa      	ldr	r2, [r7, #12]
 8004414:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004418:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800441c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800442a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800442c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004430:	2b00      	cmp	r3, #0
 8004432:	d105      	bne.n	8004440 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	699b      	ldr	r3, [r3, #24]
 8004438:	f043 0210 	orr.w	r2, r3, #16
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	699a      	ldr	r2, [r3, #24]
 8004444:	4b10      	ldr	r3, [pc, #64]	@ (8004488 <USB_DevInit+0x2c4>)
 8004446:	4313      	orrs	r3, r2
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800444c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004450:	2b00      	cmp	r3, #0
 8004452:	d005      	beq.n	8004460 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	699b      	ldr	r3, [r3, #24]
 8004458:	f043 0208 	orr.w	r2, r3, #8
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004460:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004464:	2b01      	cmp	r3, #1
 8004466:	d107      	bne.n	8004478 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	699b      	ldr	r3, [r3, #24]
 800446c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004470:	f043 0304 	orr.w	r3, r3, #4
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004478:	7dfb      	ldrb	r3, [r7, #23]
}
 800447a:	4618      	mov	r0, r3
 800447c:	3718      	adds	r7, #24
 800447e:	46bd      	mov	sp, r7
 8004480:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004484:	b004      	add	sp, #16
 8004486:	4770      	bx	lr
 8004488:	803c3800 	.word	0x803c3800

0800448c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800448c:	b480      	push	{r7}
 800448e:	b085      	sub	sp, #20
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004496:	2300      	movs	r3, #0
 8004498:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	3301      	adds	r3, #1
 800449e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80044a6:	d901      	bls.n	80044ac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80044a8:	2303      	movs	r3, #3
 80044aa:	e01b      	b.n	80044e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	daf2      	bge.n	800449a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80044b4:	2300      	movs	r3, #0
 80044b6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	019b      	lsls	r3, r3, #6
 80044bc:	f043 0220 	orr.w	r2, r3, #32
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	3301      	adds	r3, #1
 80044c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80044d0:	d901      	bls.n	80044d6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e006      	b.n	80044e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	f003 0320 	and.w	r3, r3, #32
 80044de:	2b20      	cmp	r3, #32
 80044e0:	d0f0      	beq.n	80044c4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80044e2:	2300      	movs	r3, #0
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3714      	adds	r7, #20
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr

080044f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b085      	sub	sp, #20
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80044f8:	2300      	movs	r3, #0
 80044fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	3301      	adds	r3, #1
 8004500:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004508:	d901      	bls.n	800450e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e018      	b.n	8004540 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	2b00      	cmp	r3, #0
 8004514:	daf2      	bge.n	80044fc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004516:	2300      	movs	r3, #0
 8004518:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2210      	movs	r2, #16
 800451e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	3301      	adds	r3, #1
 8004524:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800452c:	d901      	bls.n	8004532 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e006      	b.n	8004540 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	f003 0310 	and.w	r3, r3, #16
 800453a:	2b10      	cmp	r3, #16
 800453c:	d0f0      	beq.n	8004520 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800453e:	2300      	movs	r3, #0
}
 8004540:	4618      	mov	r0, r3
 8004542:	3714      	adds	r7, #20
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800454c:	b480      	push	{r7}
 800454e:	b085      	sub	sp, #20
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	460b      	mov	r3, r1
 8004556:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	78fb      	ldrb	r3, [r7, #3]
 8004566:	68f9      	ldr	r1, [r7, #12]
 8004568:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800456c:	4313      	orrs	r3, r2
 800456e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004570:	2300      	movs	r3, #0
}
 8004572:	4618      	mov	r0, r3
 8004574:	3714      	adds	r7, #20
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr

0800457e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800457e:	b480      	push	{r7}
 8004580:	b085      	sub	sp, #20
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	68fa      	ldr	r2, [r7, #12]
 8004594:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004598:	f023 0303 	bic.w	r3, r3, #3
 800459c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80045ac:	f043 0302 	orr.w	r3, r3, #2
 80045b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3714      	adds	r7, #20
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	695b      	ldr	r3, [r3, #20]
 80045cc:	f003 0301 	and.w	r3, r3, #1
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80045e4:	2300      	movs	r3, #0
 80045e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	3301      	adds	r3, #1
 80045ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80045f4:	d901      	bls.n	80045fa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e01b      	b.n	8004632 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	daf2      	bge.n	80045e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004602:	2300      	movs	r3, #0
 8004604:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	f043 0201 	orr.w	r2, r3, #1
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	3301      	adds	r3, #1
 8004616:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800461e:	d901      	bls.n	8004624 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e006      	b.n	8004632 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	691b      	ldr	r3, [r3, #16]
 8004628:	f003 0301 	and.w	r3, r3, #1
 800462c:	2b01      	cmp	r3, #1
 800462e:	d0f0      	beq.n	8004612 <USB_CoreReset+0x36>

  return HAL_OK;
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3714      	adds	r7, #20
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr

0800463e <memset>:
 800463e:	4402      	add	r2, r0
 8004640:	4603      	mov	r3, r0
 8004642:	4293      	cmp	r3, r2
 8004644:	d100      	bne.n	8004648 <memset+0xa>
 8004646:	4770      	bx	lr
 8004648:	f803 1b01 	strb.w	r1, [r3], #1
 800464c:	e7f9      	b.n	8004642 <memset+0x4>
	...

08004650 <__libc_init_array>:
 8004650:	b570      	push	{r4, r5, r6, lr}
 8004652:	4d0d      	ldr	r5, [pc, #52]	@ (8004688 <__libc_init_array+0x38>)
 8004654:	4c0d      	ldr	r4, [pc, #52]	@ (800468c <__libc_init_array+0x3c>)
 8004656:	1b64      	subs	r4, r4, r5
 8004658:	10a4      	asrs	r4, r4, #2
 800465a:	2600      	movs	r6, #0
 800465c:	42a6      	cmp	r6, r4
 800465e:	d109      	bne.n	8004674 <__libc_init_array+0x24>
 8004660:	4d0b      	ldr	r5, [pc, #44]	@ (8004690 <__libc_init_array+0x40>)
 8004662:	4c0c      	ldr	r4, [pc, #48]	@ (8004694 <__libc_init_array+0x44>)
 8004664:	f000 f818 	bl	8004698 <_init>
 8004668:	1b64      	subs	r4, r4, r5
 800466a:	10a4      	asrs	r4, r4, #2
 800466c:	2600      	movs	r6, #0
 800466e:	42a6      	cmp	r6, r4
 8004670:	d105      	bne.n	800467e <__libc_init_array+0x2e>
 8004672:	bd70      	pop	{r4, r5, r6, pc}
 8004674:	f855 3b04 	ldr.w	r3, [r5], #4
 8004678:	4798      	blx	r3
 800467a:	3601      	adds	r6, #1
 800467c:	e7ee      	b.n	800465c <__libc_init_array+0xc>
 800467e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004682:	4798      	blx	r3
 8004684:	3601      	adds	r6, #1
 8004686:	e7f2      	b.n	800466e <__libc_init_array+0x1e>
 8004688:	080046d0 	.word	0x080046d0
 800468c:	080046d0 	.word	0x080046d0
 8004690:	080046d0 	.word	0x080046d0
 8004694:	080046d4 	.word	0x080046d4

08004698 <_init>:
 8004698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800469a:	bf00      	nop
 800469c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800469e:	bc08      	pop	{r3}
 80046a0:	469e      	mov	lr, r3
 80046a2:	4770      	bx	lr

080046a4 <_fini>:
 80046a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046a6:	bf00      	nop
 80046a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046aa:	bc08      	pop	{r3}
 80046ac:	469e      	mov	lr, r3
 80046ae:	4770      	bx	lr
