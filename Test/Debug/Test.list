
Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c88  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08004e38  08004e38  00005e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e98  08004e98  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004e98  08004e98  00005e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ea0  08004ea0  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ea0  08004ea0  00005ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004ea4  08004ea4  00005ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004ea8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000605c  2**0
                  CONTENTS
 10 .bss          00000938  2000005c  2000005c  0000605c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000994  20000994  0000605c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013218  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000239a  00000000  00000000  000192a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010b0  00000000  00000000  0001b640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d15  00000000  00000000  0001c6f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024cbb  00000000  00000000  0001d405  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011b48  00000000  00000000  000420c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1e49  00000000  00000000  00053c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00135a51  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004d68  00000000  00000000  00135a94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  0013a7fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000005c 	.word	0x2000005c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004e20 	.word	0x08004e20

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000060 	.word	0x20000060
 80001ec:	08004e20 	.word	0x08004e20

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000594:	f000 fd28 	bl	8000fe8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000598:	f000 f84c 	bl	8000634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059c:	f000 f9d2 	bl	8000944 <MX_GPIO_Init>
  MX_ETH_Init();
 80005a0:	f000 f8b2 	bl	8000708 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005a4:	f000 f976 	bl	8000894 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005a8:	f000 f99e 	bl	80008e8 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 80005ac:	f000 f8fa 	bl	80007a4 <MX_TIM3_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(500);
 80005b0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005b4:	f000 fd8a 	bl	80010cc <HAL_Delay>
	  Btn_State = HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin);
 80005b8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005bc:	4816      	ldr	r0, [pc, #88]	@ (8000618 <main+0x88>)
 80005be:	f001 fbb7 	bl	8001d30 <HAL_GPIO_ReadPin>
 80005c2:	4603      	mov	r3, r0
 80005c4:	461a      	mov	r2, r3
 80005c6:	4b15      	ldr	r3, [pc, #84]	@ (800061c <main+0x8c>)
 80005c8:	701a      	strb	r2, [r3, #0]
	  sprintf(Btn_Msg, "Btn State is: %3u\r\n", Btn_State);
 80005ca:	4b14      	ldr	r3, [pc, #80]	@ (800061c <main+0x8c>)
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	461a      	mov	r2, r3
 80005d0:	4913      	ldr	r1, [pc, #76]	@ (8000620 <main+0x90>)
 80005d2:	4814      	ldr	r0, [pc, #80]	@ (8000624 <main+0x94>)
 80005d4:	f003 ff84 	bl	80044e0 <siprintf>
	  //sprintf(Btn_Msg, "Test\n");
	  HAL_UART_Transmit(&huart3, Btn_Msg, strlen(Btn_Msg), HAL_MAX_DELAY);
 80005d8:	4812      	ldr	r0, [pc, #72]	@ (8000624 <main+0x94>)
 80005da:	f7ff fe09 	bl	80001f0 <strlen>
 80005de:	4603      	mov	r3, r0
 80005e0:	b29a      	uxth	r2, r3
 80005e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005e6:	490f      	ldr	r1, [pc, #60]	@ (8000624 <main+0x94>)
 80005e8:	480f      	ldr	r0, [pc, #60]	@ (8000628 <main+0x98>)
 80005ea:	f003 f8bd 	bl	8003768 <HAL_UART_Transmit>
	  if ( Btn_State == GPIO_PIN_SET){
 80005ee:	4b0b      	ldr	r3, [pc, #44]	@ (800061c <main+0x8c>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	2b01      	cmp	r3, #1
 80005f4:	d00e      	beq.n	8000614 <main+0x84>
		  continue;
	  }
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80005f6:	2101      	movs	r1, #1
 80005f8:	480c      	ldr	r0, [pc, #48]	@ (800062c <main+0x9c>)
 80005fa:	f001 fbca 	bl	8001d92 <HAL_GPIO_TogglePin>
	  test=!test;
 80005fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000630 <main+0xa0>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	2b00      	cmp	r3, #0
 8000604:	bf0c      	ite	eq
 8000606:	2301      	moveq	r3, #1
 8000608:	2300      	movne	r3, #0
 800060a:	b2db      	uxtb	r3, r3
 800060c:	461a      	mov	r2, r3
 800060e:	4b08      	ldr	r3, [pc, #32]	@ (8000630 <main+0xa0>)
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	e7cd      	b.n	80005b0 <main+0x20>
		  continue;
 8000614:	bf00      	nop
  {
 8000616:	e7cb      	b.n	80005b0 <main+0x20>
 8000618:	40020800 	.word	0x40020800
 800061c:	20000818 	.word	0x20000818
 8000620:	08004e38 	.word	0x08004e38
 8000624:	2000081c 	.word	0x2000081c
 8000628:	200002e8 	.word	0x200002e8
 800062c:	40020400 	.word	0x40020400
 8000630:	20000814 	.word	0x20000814

08000634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b094      	sub	sp, #80	@ 0x50
 8000638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063a:	f107 0320 	add.w	r3, r7, #32
 800063e:	2230      	movs	r2, #48	@ 0x30
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f003 ff6c 	bl	8004520 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000648:	f107 030c 	add.w	r3, r7, #12
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000658:	2300      	movs	r3, #0
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	4b28      	ldr	r3, [pc, #160]	@ (8000700 <SystemClock_Config+0xcc>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000660:	4a27      	ldr	r2, [pc, #156]	@ (8000700 <SystemClock_Config+0xcc>)
 8000662:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000666:	6413      	str	r3, [r2, #64]	@ 0x40
 8000668:	4b25      	ldr	r3, [pc, #148]	@ (8000700 <SystemClock_Config+0xcc>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800066c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000674:	2300      	movs	r3, #0
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	4b22      	ldr	r3, [pc, #136]	@ (8000704 <SystemClock_Config+0xd0>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a21      	ldr	r2, [pc, #132]	@ (8000704 <SystemClock_Config+0xd0>)
 800067e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000682:	6013      	str	r3, [r2, #0]
 8000684:	4b1f      	ldr	r3, [pc, #124]	@ (8000704 <SystemClock_Config+0xd0>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000690:	2301      	movs	r3, #1
 8000692:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000694:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000698:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069a:	2302      	movs	r3, #2
 800069c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800069e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006a4:	2304      	movs	r3, #4
 80006a6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006a8:	23a8      	movs	r3, #168	@ 0xa8
 80006aa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ac:	2302      	movs	r3, #2
 80006ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006b0:	2307      	movs	r3, #7
 80006b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b4:	f107 0320 	add.w	r3, r7, #32
 80006b8:	4618      	mov	r0, r3
 80006ba:	f001 fc93 	bl	8001fe4 <HAL_RCC_OscConfig>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006c4:	f000 f9ec 	bl	8000aa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c8:	230f      	movs	r3, #15
 80006ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006cc:	2302      	movs	r3, #2
 80006ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006d4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006e0:	f107 030c 	add.w	r3, r7, #12
 80006e4:	2105      	movs	r1, #5
 80006e6:	4618      	mov	r0, r3
 80006e8:	f001 fef4 	bl	80024d4 <HAL_RCC_ClockConfig>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006f2:	f000 f9d5 	bl	8000aa0 <Error_Handler>
  }
}
 80006f6:	bf00      	nop
 80006f8:	3750      	adds	r7, #80	@ 0x50
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40023800 	.word	0x40023800
 8000704:	40007000 	.word	0x40007000

08000708 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800070c:	4b1f      	ldr	r3, [pc, #124]	@ (800078c <MX_ETH_Init+0x84>)
 800070e:	4a20      	ldr	r2, [pc, #128]	@ (8000790 <MX_ETH_Init+0x88>)
 8000710:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000712:	4b20      	ldr	r3, [pc, #128]	@ (8000794 <MX_ETH_Init+0x8c>)
 8000714:	2200      	movs	r2, #0
 8000716:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000718:	4b1e      	ldr	r3, [pc, #120]	@ (8000794 <MX_ETH_Init+0x8c>)
 800071a:	2280      	movs	r2, #128	@ 0x80
 800071c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800071e:	4b1d      	ldr	r3, [pc, #116]	@ (8000794 <MX_ETH_Init+0x8c>)
 8000720:	22e1      	movs	r2, #225	@ 0xe1
 8000722:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000724:	4b1b      	ldr	r3, [pc, #108]	@ (8000794 <MX_ETH_Init+0x8c>)
 8000726:	2200      	movs	r2, #0
 8000728:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800072a:	4b1a      	ldr	r3, [pc, #104]	@ (8000794 <MX_ETH_Init+0x8c>)
 800072c:	2200      	movs	r2, #0
 800072e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000730:	4b18      	ldr	r3, [pc, #96]	@ (8000794 <MX_ETH_Init+0x8c>)
 8000732:	2200      	movs	r2, #0
 8000734:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000736:	4b15      	ldr	r3, [pc, #84]	@ (800078c <MX_ETH_Init+0x84>)
 8000738:	4a16      	ldr	r2, [pc, #88]	@ (8000794 <MX_ETH_Init+0x8c>)
 800073a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800073c:	4b13      	ldr	r3, [pc, #76]	@ (800078c <MX_ETH_Init+0x84>)
 800073e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000742:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000744:	4b11      	ldr	r3, [pc, #68]	@ (800078c <MX_ETH_Init+0x84>)
 8000746:	4a14      	ldr	r2, [pc, #80]	@ (8000798 <MX_ETH_Init+0x90>)
 8000748:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800074a:	4b10      	ldr	r3, [pc, #64]	@ (800078c <MX_ETH_Init+0x84>)
 800074c:	4a13      	ldr	r2, [pc, #76]	@ (800079c <MX_ETH_Init+0x94>)
 800074e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000750:	4b0e      	ldr	r3, [pc, #56]	@ (800078c <MX_ETH_Init+0x84>)
 8000752:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000756:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000758:	480c      	ldr	r0, [pc, #48]	@ (800078c <MX_ETH_Init+0x84>)
 800075a:	f000 fded 	bl	8001338 <HAL_ETH_Init>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000764:	f000 f99c 	bl	8000aa0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000768:	2238      	movs	r2, #56	@ 0x38
 800076a:	2100      	movs	r1, #0
 800076c:	480c      	ldr	r0, [pc, #48]	@ (80007a0 <MX_ETH_Init+0x98>)
 800076e:	f003 fed7 	bl	8004520 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000772:	4b0b      	ldr	r3, [pc, #44]	@ (80007a0 <MX_ETH_Init+0x98>)
 8000774:	2221      	movs	r2, #33	@ 0x21
 8000776:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000778:	4b09      	ldr	r3, [pc, #36]	@ (80007a0 <MX_ETH_Init+0x98>)
 800077a:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800077e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000780:	4b07      	ldr	r3, [pc, #28]	@ (80007a0 <MX_ETH_Init+0x98>)
 8000782:	2200      	movs	r2, #0
 8000784:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	200001f0 	.word	0x200001f0
 8000790:	40028000 	.word	0x40028000
 8000794:	2000083c 	.word	0x2000083c
 8000798:	20000150 	.word	0x20000150
 800079c:	200000b0 	.word	0x200000b0
 80007a0:	20000078 	.word	0x20000078

080007a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08e      	sub	sp, #56	@ 0x38
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007b8:	f107 0320 	add.w	r3, r7, #32
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007c2:	1d3b      	adds	r3, r7, #4
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
 80007ce:	611a      	str	r2, [r3, #16]
 80007d0:	615a      	str	r2, [r3, #20]
 80007d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007d4:	4b2d      	ldr	r3, [pc, #180]	@ (800088c <MX_TIM3_Init+0xe8>)
 80007d6:	4a2e      	ldr	r2, [pc, #184]	@ (8000890 <MX_TIM3_Init+0xec>)
 80007d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6833;
 80007da:	4b2c      	ldr	r3, [pc, #176]	@ (800088c <MX_TIM3_Init+0xe8>)
 80007dc:	f641 22b1 	movw	r2, #6833	@ 0x1ab1
 80007e0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e2:	4b2a      	ldr	r3, [pc, #168]	@ (800088c <MX_TIM3_Init+0xe8>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000;
 80007e8:	4b28      	ldr	r3, [pc, #160]	@ (800088c <MX_TIM3_Init+0xe8>)
 80007ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80007ee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007f0:	4b26      	ldr	r3, [pc, #152]	@ (800088c <MX_TIM3_Init+0xe8>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007f6:	4b25      	ldr	r3, [pc, #148]	@ (800088c <MX_TIM3_Init+0xe8>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007fc:	4823      	ldr	r0, [pc, #140]	@ (800088c <MX_TIM3_Init+0xe8>)
 80007fe:	f002 f889 	bl	8002914 <HAL_TIM_Base_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000808:	f000 f94a 	bl	8000aa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800080c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000810:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000812:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000816:	4619      	mov	r1, r3
 8000818:	481c      	ldr	r0, [pc, #112]	@ (800088c <MX_TIM3_Init+0xe8>)
 800081a:	f002 fad5 	bl	8002dc8 <HAL_TIM_ConfigClockSource>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000824:	f000 f93c 	bl	8000aa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000828:	4818      	ldr	r0, [pc, #96]	@ (800088c <MX_TIM3_Init+0xe8>)
 800082a:	f002 f8c2 	bl	80029b2 <HAL_TIM_PWM_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000834:	f000 f934 	bl	8000aa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000838:	2300      	movs	r3, #0
 800083a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800083c:	2300      	movs	r3, #0
 800083e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000840:	f107 0320 	add.w	r3, r7, #32
 8000844:	4619      	mov	r1, r3
 8000846:	4811      	ldr	r0, [pc, #68]	@ (800088c <MX_TIM3_Init+0xe8>)
 8000848:	f002 feae 	bl	80035a8 <HAL_TIMEx_MasterConfigSynchronization>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000852:	f000 f925 	bl	8000aa0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000856:	2360      	movs	r3, #96	@ 0x60
 8000858:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800085e:	2300      	movs	r3, #0
 8000860:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000866:	1d3b      	adds	r3, r7, #4
 8000868:	2208      	movs	r2, #8
 800086a:	4619      	mov	r1, r3
 800086c:	4807      	ldr	r0, [pc, #28]	@ (800088c <MX_TIM3_Init+0xe8>)
 800086e:	f002 f9e9 	bl	8002c44 <HAL_TIM_PWM_ConfigChannel>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000878:	f000 f912 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800087c:	4803      	ldr	r0, [pc, #12]	@ (800088c <MX_TIM3_Init+0xe8>)
 800087e:	f000 fa2b 	bl	8000cd8 <HAL_TIM_MspPostInit>

}
 8000882:	bf00      	nop
 8000884:	3738      	adds	r7, #56	@ 0x38
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	200002a0 	.word	0x200002a0
 8000890:	40000400 	.word	0x40000400

08000894 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000898:	4b11      	ldr	r3, [pc, #68]	@ (80008e0 <MX_USART3_UART_Init+0x4c>)
 800089a:	4a12      	ldr	r2, [pc, #72]	@ (80008e4 <MX_USART3_UART_Init+0x50>)
 800089c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800089e:	4b10      	ldr	r3, [pc, #64]	@ (80008e0 <MX_USART3_UART_Init+0x4c>)
 80008a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008a6:	4b0e      	ldr	r3, [pc, #56]	@ (80008e0 <MX_USART3_UART_Init+0x4c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008ac:	4b0c      	ldr	r3, [pc, #48]	@ (80008e0 <MX_USART3_UART_Init+0x4c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008b2:	4b0b      	ldr	r3, [pc, #44]	@ (80008e0 <MX_USART3_UART_Init+0x4c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008b8:	4b09      	ldr	r3, [pc, #36]	@ (80008e0 <MX_USART3_UART_Init+0x4c>)
 80008ba:	220c      	movs	r2, #12
 80008bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008be:	4b08      	ldr	r3, [pc, #32]	@ (80008e0 <MX_USART3_UART_Init+0x4c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c4:	4b06      	ldr	r3, [pc, #24]	@ (80008e0 <MX_USART3_UART_Init+0x4c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008ca:	4805      	ldr	r0, [pc, #20]	@ (80008e0 <MX_USART3_UART_Init+0x4c>)
 80008cc:	f002 fefc 	bl	80036c8 <HAL_UART_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80008d6:	f000 f8e3 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	200002e8 	.word	0x200002e8
 80008e4:	40004800 	.word	0x40004800

080008e8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008ec:	4b14      	ldr	r3, [pc, #80]	@ (8000940 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ee:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80008f2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80008f4:	4b12      	ldr	r3, [pc, #72]	@ (8000940 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008f6:	2204      	movs	r2, #4
 80008f8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008fa:	4b11      	ldr	r3, [pc, #68]	@ (8000940 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008fc:	2202      	movs	r2, #2
 80008fe:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000900:	4b0f      	ldr	r3, [pc, #60]	@ (8000940 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000902:	2200      	movs	r2, #0
 8000904:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000906:	4b0e      	ldr	r3, [pc, #56]	@ (8000940 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000908:	2202      	movs	r2, #2
 800090a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800090c:	4b0c      	ldr	r3, [pc, #48]	@ (8000940 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800090e:	2201      	movs	r2, #1
 8000910:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000912:	4b0b      	ldr	r3, [pc, #44]	@ (8000940 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000914:	2200      	movs	r2, #0
 8000916:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000918:	4b09      	ldr	r3, [pc, #36]	@ (8000940 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800091a:	2200      	movs	r2, #0
 800091c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800091e:	4b08      	ldr	r3, [pc, #32]	@ (8000940 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000920:	2201      	movs	r2, #1
 8000922:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000924:	4b06      	ldr	r3, [pc, #24]	@ (8000940 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000926:	2200      	movs	r2, #0
 8000928:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800092a:	4805      	ldr	r0, [pc, #20]	@ (8000940 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800092c:	f001 fa4b 	bl	8001dc6 <HAL_PCD_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000936:	f000 f8b3 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000330 	.word	0x20000330

08000944 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b08c      	sub	sp, #48	@ 0x30
 8000948:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094a:	f107 031c 	add.w	r3, r7, #28
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
 8000956:	60da      	str	r2, [r3, #12]
 8000958:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	61bb      	str	r3, [r7, #24]
 800095e:	4b4c      	ldr	r3, [pc, #304]	@ (8000a90 <MX_GPIO_Init+0x14c>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000962:	4a4b      	ldr	r2, [pc, #300]	@ (8000a90 <MX_GPIO_Init+0x14c>)
 8000964:	f043 0304 	orr.w	r3, r3, #4
 8000968:	6313      	str	r3, [r2, #48]	@ 0x30
 800096a:	4b49      	ldr	r3, [pc, #292]	@ (8000a90 <MX_GPIO_Init+0x14c>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096e:	f003 0304 	and.w	r3, r3, #4
 8000972:	61bb      	str	r3, [r7, #24]
 8000974:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	617b      	str	r3, [r7, #20]
 800097a:	4b45      	ldr	r3, [pc, #276]	@ (8000a90 <MX_GPIO_Init+0x14c>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	4a44      	ldr	r2, [pc, #272]	@ (8000a90 <MX_GPIO_Init+0x14c>)
 8000980:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000984:	6313      	str	r3, [r2, #48]	@ 0x30
 8000986:	4b42      	ldr	r3, [pc, #264]	@ (8000a90 <MX_GPIO_Init+0x14c>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800098e:	617b      	str	r3, [r7, #20]
 8000990:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	613b      	str	r3, [r7, #16]
 8000996:	4b3e      	ldr	r3, [pc, #248]	@ (8000a90 <MX_GPIO_Init+0x14c>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099a:	4a3d      	ldr	r2, [pc, #244]	@ (8000a90 <MX_GPIO_Init+0x14c>)
 800099c:	f043 0301 	orr.w	r3, r3, #1
 80009a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009a2:	4b3b      	ldr	r3, [pc, #236]	@ (8000a90 <MX_GPIO_Init+0x14c>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a6:	f003 0301 	and.w	r3, r3, #1
 80009aa:	613b      	str	r3, [r7, #16]
 80009ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	60fb      	str	r3, [r7, #12]
 80009b2:	4b37      	ldr	r3, [pc, #220]	@ (8000a90 <MX_GPIO_Init+0x14c>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	4a36      	ldr	r2, [pc, #216]	@ (8000a90 <MX_GPIO_Init+0x14c>)
 80009b8:	f043 0302 	orr.w	r3, r3, #2
 80009bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009be:	4b34      	ldr	r3, [pc, #208]	@ (8000a90 <MX_GPIO_Init+0x14c>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c2:	f003 0302 	and.w	r3, r3, #2
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	60bb      	str	r3, [r7, #8]
 80009ce:	4b30      	ldr	r3, [pc, #192]	@ (8000a90 <MX_GPIO_Init+0x14c>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d2:	4a2f      	ldr	r2, [pc, #188]	@ (8000a90 <MX_GPIO_Init+0x14c>)
 80009d4:	f043 0308 	orr.w	r3, r3, #8
 80009d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009da:	4b2d      	ldr	r3, [pc, #180]	@ (8000a90 <MX_GPIO_Init+0x14c>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009de:	f003 0308 	and.w	r3, r3, #8
 80009e2:	60bb      	str	r3, [r7, #8]
 80009e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	607b      	str	r3, [r7, #4]
 80009ea:	4b29      	ldr	r3, [pc, #164]	@ (8000a90 <MX_GPIO_Init+0x14c>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ee:	4a28      	ldr	r2, [pc, #160]	@ (8000a90 <MX_GPIO_Init+0x14c>)
 80009f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009f6:	4b26      	ldr	r3, [pc, #152]	@ (8000a90 <MX_GPIO_Init+0x14c>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000a02:	2200      	movs	r2, #0
 8000a04:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000a08:	4822      	ldr	r0, [pc, #136]	@ (8000a94 <MX_GPIO_Init+0x150>)
 8000a0a:	f001 f9a9 	bl	8001d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2140      	movs	r1, #64	@ 0x40
 8000a12:	4821      	ldr	r0, [pc, #132]	@ (8000a98 <MX_GPIO_Init+0x154>)
 8000a14:	f001 f9a4 	bl	8001d60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000a18:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a1e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000a28:	f107 031c 	add.w	r3, r7, #28
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	481b      	ldr	r0, [pc, #108]	@ (8000a9c <MX_GPIO_Init+0x158>)
 8000a30:	f000 ffd2 	bl	80019d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000a34:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a42:	2300      	movs	r3, #0
 8000a44:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4811      	ldr	r0, [pc, #68]	@ (8000a94 <MX_GPIO_Init+0x150>)
 8000a4e:	f000 ffc3 	bl	80019d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a52:	2340      	movs	r3, #64	@ 0x40
 8000a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a56:	2301      	movs	r3, #1
 8000a58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a62:	f107 031c 	add.w	r3, r7, #28
 8000a66:	4619      	mov	r1, r3
 8000a68:	480b      	ldr	r0, [pc, #44]	@ (8000a98 <MX_GPIO_Init+0x154>)
 8000a6a:	f000 ffb5 	bl	80019d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a6e:	2380      	movs	r3, #128	@ 0x80
 8000a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a72:	2300      	movs	r3, #0
 8000a74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a7a:	f107 031c 	add.w	r3, r7, #28
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4805      	ldr	r0, [pc, #20]	@ (8000a98 <MX_GPIO_Init+0x154>)
 8000a82:	f000 ffa9 	bl	80019d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a86:	bf00      	nop
 8000a88:	3730      	adds	r7, #48	@ 0x30
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40023800 	.word	0x40023800
 8000a94:	40020400 	.word	0x40020400
 8000a98:	40021800 	.word	0x40021800
 8000a9c:	40020800 	.word	0x40020800

08000aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa4:	b672      	cpsid	i
}
 8000aa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa8:	bf00      	nop
 8000aaa:	e7fd      	b.n	8000aa8 <Error_Handler+0x8>

08000aac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	607b      	str	r3, [r7, #4]
 8000ab6:	4b10      	ldr	r3, [pc, #64]	@ (8000af8 <HAL_MspInit+0x4c>)
 8000ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aba:	4a0f      	ldr	r2, [pc, #60]	@ (8000af8 <HAL_MspInit+0x4c>)
 8000abc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ac0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8000af8 <HAL_MspInit+0x4c>)
 8000ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ac6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000aca:	607b      	str	r3, [r7, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	603b      	str	r3, [r7, #0]
 8000ad2:	4b09      	ldr	r3, [pc, #36]	@ (8000af8 <HAL_MspInit+0x4c>)
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad6:	4a08      	ldr	r2, [pc, #32]	@ (8000af8 <HAL_MspInit+0x4c>)
 8000ad8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000adc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ade:	4b06      	ldr	r3, [pc, #24]	@ (8000af8 <HAL_MspInit+0x4c>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ae6:	603b      	str	r3, [r7, #0]
 8000ae8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aea:	bf00      	nop
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	40023800 	.word	0x40023800

08000afc <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08e      	sub	sp, #56	@ 0x38
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a55      	ldr	r2, [pc, #340]	@ (8000c70 <HAL_ETH_MspInit+0x174>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	f040 80a4 	bne.w	8000c68 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000b20:	2300      	movs	r3, #0
 8000b22:	623b      	str	r3, [r7, #32]
 8000b24:	4b53      	ldr	r3, [pc, #332]	@ (8000c74 <HAL_ETH_MspInit+0x178>)
 8000b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b28:	4a52      	ldr	r2, [pc, #328]	@ (8000c74 <HAL_ETH_MspInit+0x178>)
 8000b2a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b30:	4b50      	ldr	r3, [pc, #320]	@ (8000c74 <HAL_ETH_MspInit+0x178>)
 8000b32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000b38:	623b      	str	r3, [r7, #32]
 8000b3a:	6a3b      	ldr	r3, [r7, #32]
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	61fb      	str	r3, [r7, #28]
 8000b40:	4b4c      	ldr	r3, [pc, #304]	@ (8000c74 <HAL_ETH_MspInit+0x178>)
 8000b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b44:	4a4b      	ldr	r2, [pc, #300]	@ (8000c74 <HAL_ETH_MspInit+0x178>)
 8000b46:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000b4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b4c:	4b49      	ldr	r3, [pc, #292]	@ (8000c74 <HAL_ETH_MspInit+0x178>)
 8000b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b50:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000b54:	61fb      	str	r3, [r7, #28]
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	2300      	movs	r3, #0
 8000b5a:	61bb      	str	r3, [r7, #24]
 8000b5c:	4b45      	ldr	r3, [pc, #276]	@ (8000c74 <HAL_ETH_MspInit+0x178>)
 8000b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b60:	4a44      	ldr	r2, [pc, #272]	@ (8000c74 <HAL_ETH_MspInit+0x178>)
 8000b62:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000b66:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b68:	4b42      	ldr	r3, [pc, #264]	@ (8000c74 <HAL_ETH_MspInit+0x178>)
 8000b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000b70:	61bb      	str	r3, [r7, #24]
 8000b72:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b74:	2300      	movs	r3, #0
 8000b76:	617b      	str	r3, [r7, #20]
 8000b78:	4b3e      	ldr	r3, [pc, #248]	@ (8000c74 <HAL_ETH_MspInit+0x178>)
 8000b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7c:	4a3d      	ldr	r2, [pc, #244]	@ (8000c74 <HAL_ETH_MspInit+0x178>)
 8000b7e:	f043 0304 	orr.w	r3, r3, #4
 8000b82:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b84:	4b3b      	ldr	r3, [pc, #236]	@ (8000c74 <HAL_ETH_MspInit+0x178>)
 8000b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b88:	f003 0304 	and.w	r3, r3, #4
 8000b8c:	617b      	str	r3, [r7, #20]
 8000b8e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b90:	2300      	movs	r3, #0
 8000b92:	613b      	str	r3, [r7, #16]
 8000b94:	4b37      	ldr	r3, [pc, #220]	@ (8000c74 <HAL_ETH_MspInit+0x178>)
 8000b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b98:	4a36      	ldr	r2, [pc, #216]	@ (8000c74 <HAL_ETH_MspInit+0x178>)
 8000b9a:	f043 0301 	orr.w	r3, r3, #1
 8000b9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba0:	4b34      	ldr	r3, [pc, #208]	@ (8000c74 <HAL_ETH_MspInit+0x178>)
 8000ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba4:	f003 0301 	and.w	r3, r3, #1
 8000ba8:	613b      	str	r3, [r7, #16]
 8000baa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bac:	2300      	movs	r3, #0
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	4b30      	ldr	r3, [pc, #192]	@ (8000c74 <HAL_ETH_MspInit+0x178>)
 8000bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb4:	4a2f      	ldr	r2, [pc, #188]	@ (8000c74 <HAL_ETH_MspInit+0x178>)
 8000bb6:	f043 0302 	orr.w	r3, r3, #2
 8000bba:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bbc:	4b2d      	ldr	r3, [pc, #180]	@ (8000c74 <HAL_ETH_MspInit+0x178>)
 8000bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc0:	f003 0302 	and.w	r3, r3, #2
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bc8:	2300      	movs	r3, #0
 8000bca:	60bb      	str	r3, [r7, #8]
 8000bcc:	4b29      	ldr	r3, [pc, #164]	@ (8000c74 <HAL_ETH_MspInit+0x178>)
 8000bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd0:	4a28      	ldr	r2, [pc, #160]	@ (8000c74 <HAL_ETH_MspInit+0x178>)
 8000bd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bd6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd8:	4b26      	ldr	r3, [pc, #152]	@ (8000c74 <HAL_ETH_MspInit+0x178>)
 8000bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000be0:	60bb      	str	r3, [r7, #8]
 8000be2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000be4:	2332      	movs	r3, #50	@ 0x32
 8000be6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be8:	2302      	movs	r3, #2
 8000bea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bf4:	230b      	movs	r3, #11
 8000bf6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	481e      	ldr	r0, [pc, #120]	@ (8000c78 <HAL_ETH_MspInit+0x17c>)
 8000c00:	f000 feea 	bl	80019d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c04:	2386      	movs	r3, #134	@ 0x86
 8000c06:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c10:	2303      	movs	r3, #3
 8000c12:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c14:	230b      	movs	r3, #11
 8000c16:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4817      	ldr	r0, [pc, #92]	@ (8000c7c <HAL_ETH_MspInit+0x180>)
 8000c20:	f000 feda 	bl	80019d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000c24:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c28:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c32:	2303      	movs	r3, #3
 8000c34:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c36:	230b      	movs	r3, #11
 8000c38:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000c3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c3e:	4619      	mov	r1, r3
 8000c40:	480f      	ldr	r0, [pc, #60]	@ (8000c80 <HAL_ETH_MspInit+0x184>)
 8000c42:	f000 fec9 	bl	80019d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000c46:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000c4a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c54:	2303      	movs	r3, #3
 8000c56:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c58:	230b      	movs	r3, #11
 8000c5a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c60:	4619      	mov	r1, r3
 8000c62:	4808      	ldr	r0, [pc, #32]	@ (8000c84 <HAL_ETH_MspInit+0x188>)
 8000c64:	f000 feb8 	bl	80019d8 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000c68:	bf00      	nop
 8000c6a:	3738      	adds	r7, #56	@ 0x38
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40028000 	.word	0x40028000
 8000c74:	40023800 	.word	0x40023800
 8000c78:	40020800 	.word	0x40020800
 8000c7c:	40020000 	.word	0x40020000
 8000c80:	40020400 	.word	0x40020400
 8000c84:	40021800 	.word	0x40021800

08000c88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a0e      	ldr	r2, [pc, #56]	@ (8000cd0 <HAL_TIM_Base_MspInit+0x48>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d115      	bne.n	8000cc6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8000cd4 <HAL_TIM_Base_MspInit+0x4c>)
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca2:	4a0c      	ldr	r2, [pc, #48]	@ (8000cd4 <HAL_TIM_Base_MspInit+0x4c>)
 8000ca4:	f043 0302 	orr.w	r3, r3, #2
 8000ca8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000caa:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd4 <HAL_TIM_Base_MspInit+0x4c>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cae:	f003 0302 	and.w	r3, r3, #2
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2100      	movs	r1, #0
 8000cba:	201d      	movs	r0, #29
 8000cbc:	f000 fb05 	bl	80012ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000cc0:	201d      	movs	r0, #29
 8000cc2:	f000 fb1e 	bl	8001302 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000cc6:	bf00      	nop
 8000cc8:	3710      	adds	r7, #16
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40000400 	.word	0x40000400
 8000cd4:	40023800 	.word	0x40023800

08000cd8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b088      	sub	sp, #32
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce0:	f107 030c 	add.w	r3, r7, #12
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
 8000cee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a12      	ldr	r2, [pc, #72]	@ (8000d40 <HAL_TIM_MspPostInit+0x68>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d11e      	bne.n	8000d38 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60bb      	str	r3, [r7, #8]
 8000cfe:	4b11      	ldr	r3, [pc, #68]	@ (8000d44 <HAL_TIM_MspPostInit+0x6c>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d02:	4a10      	ldr	r2, [pc, #64]	@ (8000d44 <HAL_TIM_MspPostInit+0x6c>)
 8000d04:	f043 0304 	orr.w	r3, r3, #4
 8000d08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d44 <HAL_TIM_MspPostInit+0x6c>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0e:	f003 0304 	and.w	r3, r3, #4
 8000d12:	60bb      	str	r3, [r7, #8]
 8000d14:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d16:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d1a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d24:	2300      	movs	r3, #0
 8000d26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d2c:	f107 030c 	add.w	r3, r7, #12
 8000d30:	4619      	mov	r1, r3
 8000d32:	4805      	ldr	r0, [pc, #20]	@ (8000d48 <HAL_TIM_MspPostInit+0x70>)
 8000d34:	f000 fe50 	bl	80019d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000d38:	bf00      	nop
 8000d3a:	3720      	adds	r7, #32
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40000400 	.word	0x40000400
 8000d44:	40023800 	.word	0x40023800
 8000d48:	40020800 	.word	0x40020800

08000d4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08a      	sub	sp, #40	@ 0x28
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]
 8000d62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a19      	ldr	r2, [pc, #100]	@ (8000dd0 <HAL_UART_MspInit+0x84>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d12c      	bne.n	8000dc8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	613b      	str	r3, [r7, #16]
 8000d72:	4b18      	ldr	r3, [pc, #96]	@ (8000dd4 <HAL_UART_MspInit+0x88>)
 8000d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d76:	4a17      	ldr	r2, [pc, #92]	@ (8000dd4 <HAL_UART_MspInit+0x88>)
 8000d78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d7e:	4b15      	ldr	r3, [pc, #84]	@ (8000dd4 <HAL_UART_MspInit+0x88>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d86:	613b      	str	r3, [r7, #16]
 8000d88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60fb      	str	r3, [r7, #12]
 8000d8e:	4b11      	ldr	r3, [pc, #68]	@ (8000dd4 <HAL_UART_MspInit+0x88>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d92:	4a10      	ldr	r2, [pc, #64]	@ (8000dd4 <HAL_UART_MspInit+0x88>)
 8000d94:	f043 0308 	orr.w	r3, r3, #8
 8000d98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd4 <HAL_UART_MspInit+0x88>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9e:	f003 0308 	and.w	r3, r3, #8
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000da6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000daa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dac:	2302      	movs	r3, #2
 8000dae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db4:	2303      	movs	r3, #3
 8000db6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000db8:	2307      	movs	r3, #7
 8000dba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4805      	ldr	r0, [pc, #20]	@ (8000dd8 <HAL_UART_MspInit+0x8c>)
 8000dc4:	f000 fe08 	bl	80019d8 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000dc8:	bf00      	nop
 8000dca:	3728      	adds	r7, #40	@ 0x28
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	40004800 	.word	0x40004800
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	40020c00 	.word	0x40020c00

08000ddc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b08a      	sub	sp, #40	@ 0x28
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de4:	f107 0314 	add.w	r3, r7, #20
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000dfc:	d13f      	bne.n	8000e7e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	613b      	str	r3, [r7, #16]
 8000e02:	4b21      	ldr	r3, [pc, #132]	@ (8000e88 <HAL_PCD_MspInit+0xac>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e06:	4a20      	ldr	r2, [pc, #128]	@ (8000e88 <HAL_PCD_MspInit+0xac>)
 8000e08:	f043 0301 	orr.w	r3, r3, #1
 8000e0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e0e:	4b1e      	ldr	r3, [pc, #120]	@ (8000e88 <HAL_PCD_MspInit+0xac>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	613b      	str	r3, [r7, #16]
 8000e18:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e1a:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000e1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e20:	2302      	movs	r3, #2
 8000e22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e28:	2303      	movs	r3, #3
 8000e2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e2c:	230a      	movs	r3, #10
 8000e2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	4619      	mov	r1, r3
 8000e36:	4815      	ldr	r0, [pc, #84]	@ (8000e8c <HAL_PCD_MspInit+0xb0>)
 8000e38:	f000 fdce 	bl	80019d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e3c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e4a:	f107 0314 	add.w	r3, r7, #20
 8000e4e:	4619      	mov	r1, r3
 8000e50:	480e      	ldr	r0, [pc, #56]	@ (8000e8c <HAL_PCD_MspInit+0xb0>)
 8000e52:	f000 fdc1 	bl	80019d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e56:	4b0c      	ldr	r3, [pc, #48]	@ (8000e88 <HAL_PCD_MspInit+0xac>)
 8000e58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e5a:	4a0b      	ldr	r2, [pc, #44]	@ (8000e88 <HAL_PCD_MspInit+0xac>)
 8000e5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e60:	6353      	str	r3, [r2, #52]	@ 0x34
 8000e62:	2300      	movs	r3, #0
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	4b08      	ldr	r3, [pc, #32]	@ (8000e88 <HAL_PCD_MspInit+0xac>)
 8000e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e6a:	4a07      	ldr	r2, [pc, #28]	@ (8000e88 <HAL_PCD_MspInit+0xac>)
 8000e6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e70:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e72:	4b05      	ldr	r3, [pc, #20]	@ (8000e88 <HAL_PCD_MspInit+0xac>)
 8000e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000e7e:	bf00      	nop
 8000e80:	3728      	adds	r7, #40	@ 0x28
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	40020000 	.word	0x40020000

08000e90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e94:	bf00      	nop
 8000e96:	e7fd      	b.n	8000e94 <NMI_Handler+0x4>

08000e98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e9c:	bf00      	nop
 8000e9e:	e7fd      	b.n	8000e9c <HardFault_Handler+0x4>

08000ea0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea4:	bf00      	nop
 8000ea6:	e7fd      	b.n	8000ea4 <MemManage_Handler+0x4>

08000ea8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eac:	bf00      	nop
 8000eae:	e7fd      	b.n	8000eac <BusFault_Handler+0x4>

08000eb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb4:	bf00      	nop
 8000eb6:	e7fd      	b.n	8000eb4 <UsageFault_Handler+0x4>

08000eb8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr

08000ec6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ee6:	f000 f8d1 	bl	800108c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
	...

08000ef0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ef4:	4802      	ldr	r0, [pc, #8]	@ (8000f00 <TIM3_IRQHandler+0x10>)
 8000ef6:	f001 fdb5 	bl	8002a64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  test != test;
  /* USER CODE END TIM3_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	200002a0 	.word	0x200002a0

08000f04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f0c:	4a14      	ldr	r2, [pc, #80]	@ (8000f60 <_sbrk+0x5c>)
 8000f0e:	4b15      	ldr	r3, [pc, #84]	@ (8000f64 <_sbrk+0x60>)
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f18:	4b13      	ldr	r3, [pc, #76]	@ (8000f68 <_sbrk+0x64>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d102      	bne.n	8000f26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f20:	4b11      	ldr	r3, [pc, #68]	@ (8000f68 <_sbrk+0x64>)
 8000f22:	4a12      	ldr	r2, [pc, #72]	@ (8000f6c <_sbrk+0x68>)
 8000f24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f26:	4b10      	ldr	r3, [pc, #64]	@ (8000f68 <_sbrk+0x64>)
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d207      	bcs.n	8000f44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f34:	f003 fafc 	bl	8004530 <__errno>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	220c      	movs	r2, #12
 8000f3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f3e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f42:	e009      	b.n	8000f58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f44:	4b08      	ldr	r3, [pc, #32]	@ (8000f68 <_sbrk+0x64>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f4a:	4b07      	ldr	r3, [pc, #28]	@ (8000f68 <_sbrk+0x64>)
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4413      	add	r3, r2
 8000f52:	4a05      	ldr	r2, [pc, #20]	@ (8000f68 <_sbrk+0x64>)
 8000f54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f56:	68fb      	ldr	r3, [r7, #12]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3718      	adds	r7, #24
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20030000 	.word	0x20030000
 8000f64:	00000400 	.word	0x00000400
 8000f68:	20000844 	.word	0x20000844
 8000f6c:	20000998 	.word	0x20000998

08000f70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f74:	4b06      	ldr	r3, [pc, #24]	@ (8000f90 <SystemInit+0x20>)
 8000f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f7a:	4a05      	ldr	r2, [pc, #20]	@ (8000f90 <SystemInit+0x20>)
 8000f7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f84:	bf00      	nop
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000f94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fcc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f98:	f7ff ffea 	bl	8000f70 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f9c:	480c      	ldr	r0, [pc, #48]	@ (8000fd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f9e:	490d      	ldr	r1, [pc, #52]	@ (8000fd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fa0:	4a0d      	ldr	r2, [pc, #52]	@ (8000fd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fa4:	e002      	b.n	8000fac <LoopCopyDataInit>

08000fa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000faa:	3304      	adds	r3, #4

08000fac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fb0:	d3f9      	bcc.n	8000fa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fb2:	4a0a      	ldr	r2, [pc, #40]	@ (8000fdc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fb4:	4c0a      	ldr	r4, [pc, #40]	@ (8000fe0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb8:	e001      	b.n	8000fbe <LoopFillZerobss>

08000fba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fbc:	3204      	adds	r2, #4

08000fbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fc0:	d3fb      	bcc.n	8000fba <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000fc2:	f003 fabb 	bl	800453c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fc6:	f7ff fae3 	bl	8000590 <main>
  bx  lr    
 8000fca:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000fcc:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000fd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fd4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000fd8:	08004ea8 	.word	0x08004ea8
  ldr r2, =_sbss
 8000fdc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000fe0:	20000994 	.word	0x20000994

08000fe4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fe4:	e7fe      	b.n	8000fe4 <ADC_IRQHandler>
	...

08000fe8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fec:	4b0e      	ldr	r3, [pc, #56]	@ (8001028 <HAL_Init+0x40>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a0d      	ldr	r2, [pc, #52]	@ (8001028 <HAL_Init+0x40>)
 8000ff2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ff6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ff8:	4b0b      	ldr	r3, [pc, #44]	@ (8001028 <HAL_Init+0x40>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a0a      	ldr	r2, [pc, #40]	@ (8001028 <HAL_Init+0x40>)
 8000ffe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001002:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001004:	4b08      	ldr	r3, [pc, #32]	@ (8001028 <HAL_Init+0x40>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a07      	ldr	r2, [pc, #28]	@ (8001028 <HAL_Init+0x40>)
 800100a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800100e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001010:	2003      	movs	r0, #3
 8001012:	f000 f94f 	bl	80012b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001016:	2000      	movs	r0, #0
 8001018:	f000 f808 	bl	800102c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800101c:	f7ff fd46 	bl	8000aac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001020:	2300      	movs	r3, #0
}
 8001022:	4618      	mov	r0, r3
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40023c00 	.word	0x40023c00

0800102c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001034:	4b12      	ldr	r3, [pc, #72]	@ (8001080 <HAL_InitTick+0x54>)
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	4b12      	ldr	r3, [pc, #72]	@ (8001084 <HAL_InitTick+0x58>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	4619      	mov	r1, r3
 800103e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001042:	fbb3 f3f1 	udiv	r3, r3, r1
 8001046:	fbb2 f3f3 	udiv	r3, r2, r3
 800104a:	4618      	mov	r0, r3
 800104c:	f000 f967 	bl	800131e <HAL_SYSTICK_Config>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e00e      	b.n	8001078 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2b0f      	cmp	r3, #15
 800105e:	d80a      	bhi.n	8001076 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001060:	2200      	movs	r2, #0
 8001062:	6879      	ldr	r1, [r7, #4]
 8001064:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001068:	f000 f92f 	bl	80012ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800106c:	4a06      	ldr	r2, [pc, #24]	@ (8001088 <HAL_InitTick+0x5c>)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001072:	2300      	movs	r3, #0
 8001074:	e000      	b.n	8001078 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
}
 8001078:	4618      	mov	r0, r3
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000000 	.word	0x20000000
 8001084:	20000008 	.word	0x20000008
 8001088:	20000004 	.word	0x20000004

0800108c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001090:	4b06      	ldr	r3, [pc, #24]	@ (80010ac <HAL_IncTick+0x20>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	461a      	mov	r2, r3
 8001096:	4b06      	ldr	r3, [pc, #24]	@ (80010b0 <HAL_IncTick+0x24>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4413      	add	r3, r2
 800109c:	4a04      	ldr	r2, [pc, #16]	@ (80010b0 <HAL_IncTick+0x24>)
 800109e:	6013      	str	r3, [r2, #0]
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	20000008 	.word	0x20000008
 80010b0:	20000848 	.word	0x20000848

080010b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  return uwTick;
 80010b8:	4b03      	ldr	r3, [pc, #12]	@ (80010c8 <HAL_GetTick+0x14>)
 80010ba:	681b      	ldr	r3, [r3, #0]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	20000848 	.word	0x20000848

080010cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010d4:	f7ff ffee 	bl	80010b4 <HAL_GetTick>
 80010d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80010e4:	d005      	beq.n	80010f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001110 <HAL_Delay+0x44>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	461a      	mov	r2, r3
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	4413      	add	r3, r2
 80010f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010f2:	bf00      	nop
 80010f4:	f7ff ffde 	bl	80010b4 <HAL_GetTick>
 80010f8:	4602      	mov	r2, r0
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	68fa      	ldr	r2, [r7, #12]
 8001100:	429a      	cmp	r2, r3
 8001102:	d8f7      	bhi.n	80010f4 <HAL_Delay+0x28>
  {
  }
}
 8001104:	bf00      	nop
 8001106:	bf00      	nop
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000008 	.word	0x20000008

08001114 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f003 0307 	and.w	r3, r3, #7
 8001122:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001124:	4b0c      	ldr	r3, [pc, #48]	@ (8001158 <__NVIC_SetPriorityGrouping+0x44>)
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800112a:	68ba      	ldr	r2, [r7, #8]
 800112c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001130:	4013      	ands	r3, r2
 8001132:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800113c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001140:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001144:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001146:	4a04      	ldr	r2, [pc, #16]	@ (8001158 <__NVIC_SetPriorityGrouping+0x44>)
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	60d3      	str	r3, [r2, #12]
}
 800114c:	bf00      	nop
 800114e:	3714      	adds	r7, #20
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001160:	4b04      	ldr	r3, [pc, #16]	@ (8001174 <__NVIC_GetPriorityGrouping+0x18>)
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	0a1b      	lsrs	r3, r3, #8
 8001166:	f003 0307 	and.w	r3, r3, #7
}
 800116a:	4618      	mov	r0, r3
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	e000ed00 	.word	0xe000ed00

08001178 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001186:	2b00      	cmp	r3, #0
 8001188:	db0b      	blt.n	80011a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	f003 021f 	and.w	r2, r3, #31
 8001190:	4907      	ldr	r1, [pc, #28]	@ (80011b0 <__NVIC_EnableIRQ+0x38>)
 8001192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001196:	095b      	lsrs	r3, r3, #5
 8001198:	2001      	movs	r0, #1
 800119a:	fa00 f202 	lsl.w	r2, r0, r2
 800119e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011a2:	bf00      	nop
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	e000e100 	.word	0xe000e100

080011b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	6039      	str	r1, [r7, #0]
 80011be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	db0a      	blt.n	80011de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	b2da      	uxtb	r2, r3
 80011cc:	490c      	ldr	r1, [pc, #48]	@ (8001200 <__NVIC_SetPriority+0x4c>)
 80011ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d2:	0112      	lsls	r2, r2, #4
 80011d4:	b2d2      	uxtb	r2, r2
 80011d6:	440b      	add	r3, r1
 80011d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011dc:	e00a      	b.n	80011f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	b2da      	uxtb	r2, r3
 80011e2:	4908      	ldr	r1, [pc, #32]	@ (8001204 <__NVIC_SetPriority+0x50>)
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	f003 030f 	and.w	r3, r3, #15
 80011ea:	3b04      	subs	r3, #4
 80011ec:	0112      	lsls	r2, r2, #4
 80011ee:	b2d2      	uxtb	r2, r2
 80011f0:	440b      	add	r3, r1
 80011f2:	761a      	strb	r2, [r3, #24]
}
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr
 8001200:	e000e100 	.word	0xe000e100
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001208:	b480      	push	{r7}
 800120a:	b089      	sub	sp, #36	@ 0x24
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f003 0307 	and.w	r3, r3, #7
 800121a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	f1c3 0307 	rsb	r3, r3, #7
 8001222:	2b04      	cmp	r3, #4
 8001224:	bf28      	it	cs
 8001226:	2304      	movcs	r3, #4
 8001228:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	3304      	adds	r3, #4
 800122e:	2b06      	cmp	r3, #6
 8001230:	d902      	bls.n	8001238 <NVIC_EncodePriority+0x30>
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	3b03      	subs	r3, #3
 8001236:	e000      	b.n	800123a <NVIC_EncodePriority+0x32>
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800123c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43da      	mvns	r2, r3
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	401a      	ands	r2, r3
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001250:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	fa01 f303 	lsl.w	r3, r1, r3
 800125a:	43d9      	mvns	r1, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001260:	4313      	orrs	r3, r2
         );
}
 8001262:	4618      	mov	r0, r3
 8001264:	3724      	adds	r7, #36	@ 0x24
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
	...

08001270 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3b01      	subs	r3, #1
 800127c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001280:	d301      	bcc.n	8001286 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001282:	2301      	movs	r3, #1
 8001284:	e00f      	b.n	80012a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001286:	4a0a      	ldr	r2, [pc, #40]	@ (80012b0 <SysTick_Config+0x40>)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3b01      	subs	r3, #1
 800128c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800128e:	210f      	movs	r1, #15
 8001290:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001294:	f7ff ff8e 	bl	80011b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001298:	4b05      	ldr	r3, [pc, #20]	@ (80012b0 <SysTick_Config+0x40>)
 800129a:	2200      	movs	r2, #0
 800129c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800129e:	4b04      	ldr	r3, [pc, #16]	@ (80012b0 <SysTick_Config+0x40>)
 80012a0:	2207      	movs	r2, #7
 80012a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	e000e010 	.word	0xe000e010

080012b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f7ff ff29 	bl	8001114 <__NVIC_SetPriorityGrouping>
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b086      	sub	sp, #24
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	4603      	mov	r3, r0
 80012d2:	60b9      	str	r1, [r7, #8]
 80012d4:	607a      	str	r2, [r7, #4]
 80012d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012d8:	2300      	movs	r3, #0
 80012da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012dc:	f7ff ff3e 	bl	800115c <__NVIC_GetPriorityGrouping>
 80012e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012e2:	687a      	ldr	r2, [r7, #4]
 80012e4:	68b9      	ldr	r1, [r7, #8]
 80012e6:	6978      	ldr	r0, [r7, #20]
 80012e8:	f7ff ff8e 	bl	8001208 <NVIC_EncodePriority>
 80012ec:	4602      	mov	r2, r0
 80012ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012f2:	4611      	mov	r1, r2
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff ff5d 	bl	80011b4 <__NVIC_SetPriority>
}
 80012fa:	bf00      	nop
 80012fc:	3718      	adds	r7, #24
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b082      	sub	sp, #8
 8001306:	af00      	add	r7, sp, #0
 8001308:	4603      	mov	r3, r0
 800130a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800130c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff ff31 	bl	8001178 <__NVIC_EnableIRQ>
}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b082      	sub	sp, #8
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f7ff ffa2 	bl	8001270 <SysTick_Config>
 800132c:	4603      	mov	r3, r0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
	...

08001338 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d101      	bne.n	800134a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e08a      	b.n	8001460 <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001350:	2b00      	cmp	r3, #0
 8001352:	d106      	bne.n	8001362 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2223      	movs	r2, #35	@ 0x23
 8001358:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f7ff fbcd 	bl	8000afc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	60bb      	str	r3, [r7, #8]
 8001366:	4b40      	ldr	r3, [pc, #256]	@ (8001468 <HAL_ETH_Init+0x130>)
 8001368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800136a:	4a3f      	ldr	r2, [pc, #252]	@ (8001468 <HAL_ETH_Init+0x130>)
 800136c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001370:	6453      	str	r3, [r2, #68]	@ 0x44
 8001372:	4b3d      	ldr	r3, [pc, #244]	@ (8001468 <HAL_ETH_Init+0x130>)
 8001374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001376:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800137a:	60bb      	str	r3, [r7, #8]
 800137c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800137e:	4b3b      	ldr	r3, [pc, #236]	@ (800146c <HAL_ETH_Init+0x134>)
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	4a3a      	ldr	r2, [pc, #232]	@ (800146c <HAL_ETH_Init+0x134>)
 8001384:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001388:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800138a:	4b38      	ldr	r3, [pc, #224]	@ (800146c <HAL_ETH_Init+0x134>)
 800138c:	685a      	ldr	r2, [r3, #4]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	4936      	ldr	r1, [pc, #216]	@ (800146c <HAL_ETH_Init+0x134>)
 8001394:	4313      	orrs	r3, r2
 8001396:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001398:	4b34      	ldr	r3, [pc, #208]	@ (800146c <HAL_ETH_Init+0x134>)
 800139a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	6812      	ldr	r2, [r2, #0]
 80013aa:	f043 0301 	orr.w	r3, r3, #1
 80013ae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80013b2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013b4:	f7ff fe7e 	bl	80010b4 <HAL_GetTick>
 80013b8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80013ba:	e011      	b.n	80013e0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80013bc:	f7ff fe7a 	bl	80010b4 <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80013ca:	d909      	bls.n	80013e0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2204      	movs	r2, #4
 80013d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	22e0      	movs	r2, #224	@ 0xe0
 80013d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e03f      	b.n	8001460 <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d1e4      	bne.n	80013bc <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f000 f97a 	bl	80016ec <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f000 fa25 	bl	8001848 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f000 fa7b 	bl	80018fa <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	461a      	mov	r2, r3
 800140a:	2100      	movs	r1, #0
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f000 f9e3 	bl	80017d8 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001420:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	6812      	ldr	r2, [r2, #0]
 800142e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001432:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001436:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800144a:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2210      	movs	r2, #16
 800145a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800145e:	2300      	movs	r3, #0
}
 8001460:	4618      	mov	r0, r3
 8001462:	3710      	adds	r7, #16
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	40023800 	.word	0x40023800
 800146c:	40013800 	.word	0x40013800

08001470 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001482:	68fa      	ldr	r2, [r7, #12]
 8001484:	4b53      	ldr	r3, [pc, #332]	@ (80015d4 <ETH_SetMACConfig+0x164>)
 8001486:	4013      	ands	r3, r2
 8001488:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	7b9b      	ldrb	r3, [r3, #14]
 800148e:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001490:	683a      	ldr	r2, [r7, #0]
 8001492:	7c12      	ldrb	r2, [r2, #16]
 8001494:	2a00      	cmp	r2, #0
 8001496:	d102      	bne.n	800149e <ETH_SetMACConfig+0x2e>
 8001498:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800149c:	e000      	b.n	80014a0 <ETH_SetMACConfig+0x30>
 800149e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80014a0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80014a2:	683a      	ldr	r2, [r7, #0]
 80014a4:	7c52      	ldrb	r2, [r2, #17]
 80014a6:	2a00      	cmp	r2, #0
 80014a8:	d102      	bne.n	80014b0 <ETH_SetMACConfig+0x40>
 80014aa:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80014ae:	e000      	b.n	80014b2 <ETH_SetMACConfig+0x42>
 80014b0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80014b2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80014b8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	7fdb      	ldrb	r3, [r3, #31]
 80014be:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80014c0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80014c6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80014c8:	683a      	ldr	r2, [r7, #0]
 80014ca:	7f92      	ldrb	r2, [r2, #30]
 80014cc:	2a00      	cmp	r2, #0
 80014ce:	d102      	bne.n	80014d6 <ETH_SetMACConfig+0x66>
 80014d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014d4:	e000      	b.n	80014d8 <ETH_SetMACConfig+0x68>
 80014d6:	2200      	movs	r2, #0
                        macconf->Speed |
 80014d8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	7f1b      	ldrb	r3, [r3, #28]
 80014de:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80014e0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80014e6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	791b      	ldrb	r3, [r3, #4]
 80014ec:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80014ee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80014f0:	683a      	ldr	r2, [r7, #0]
 80014f2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80014f6:	2a00      	cmp	r2, #0
 80014f8:	d102      	bne.n	8001500 <ETH_SetMACConfig+0x90>
 80014fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014fe:	e000      	b.n	8001502 <ETH_SetMACConfig+0x92>
 8001500:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001502:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	7bdb      	ldrb	r3, [r3, #15]
 8001508:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800150a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001510:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001518:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800151a:	4313      	orrs	r3, r2
 800151c:	68fa      	ldr	r2, [r7, #12]
 800151e:	4313      	orrs	r3, r2
 8001520:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	68fa      	ldr	r2, [r7, #12]
 8001528:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001532:	2001      	movs	r0, #1
 8001534:	f7ff fdca 	bl	80010cc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	68fa      	ldr	r2, [r7, #12]
 800153e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	699b      	ldr	r3, [r3, #24]
 8001546:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001548:	68fa      	ldr	r2, [r7, #12]
 800154a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800154e:	4013      	ands	r3, r2
 8001550:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001556:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001558:	683a      	ldr	r2, [r7, #0]
 800155a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800155e:	2a00      	cmp	r2, #0
 8001560:	d101      	bne.n	8001566 <ETH_SetMACConfig+0xf6>
 8001562:	2280      	movs	r2, #128	@ 0x80
 8001564:	e000      	b.n	8001568 <ETH_SetMACConfig+0xf8>
 8001566:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001568:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800156e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001570:	683a      	ldr	r2, [r7, #0]
 8001572:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001576:	2a01      	cmp	r2, #1
 8001578:	d101      	bne.n	800157e <ETH_SetMACConfig+0x10e>
 800157a:	2208      	movs	r2, #8
 800157c:	e000      	b.n	8001580 <ETH_SetMACConfig+0x110>
 800157e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001580:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001582:	683a      	ldr	r2, [r7, #0]
 8001584:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001588:	2a01      	cmp	r2, #1
 800158a:	d101      	bne.n	8001590 <ETH_SetMACConfig+0x120>
 800158c:	2204      	movs	r2, #4
 800158e:	e000      	b.n	8001592 <ETH_SetMACConfig+0x122>
 8001590:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001592:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001594:	683a      	ldr	r2, [r7, #0]
 8001596:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800159a:	2a01      	cmp	r2, #1
 800159c:	d101      	bne.n	80015a2 <ETH_SetMACConfig+0x132>
 800159e:	2202      	movs	r2, #2
 80015a0:	e000      	b.n	80015a4 <ETH_SetMACConfig+0x134>
 80015a2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80015a4:	4313      	orrs	r3, r2
 80015a6:	68fa      	ldr	r2, [r7, #12]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	68fa      	ldr	r2, [r7, #12]
 80015b2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	699b      	ldr	r3, [r3, #24]
 80015ba:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015bc:	2001      	movs	r0, #1
 80015be:	f7ff fd85 	bl	80010cc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	68fa      	ldr	r2, [r7, #12]
 80015c8:	619a      	str	r2, [r3, #24]
}
 80015ca:	bf00      	nop
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	fd20810f 	.word	0xfd20810f

080015d8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80015ee:	68fa      	ldr	r2, [r7, #12]
 80015f0:	4b3d      	ldr	r3, [pc, #244]	@ (80016e8 <ETH_SetDMAConfig+0x110>)
 80015f2:	4013      	ands	r3, r2
 80015f4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	7b1b      	ldrb	r3, [r3, #12]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d102      	bne.n	8001604 <ETH_SetDMAConfig+0x2c>
 80015fe:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001602:	e000      	b.n	8001606 <ETH_SetDMAConfig+0x2e>
 8001604:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	7b5b      	ldrb	r3, [r3, #13]
 800160a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800160c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800160e:	683a      	ldr	r2, [r7, #0]
 8001610:	7f52      	ldrb	r2, [r2, #29]
 8001612:	2a00      	cmp	r2, #0
 8001614:	d102      	bne.n	800161c <ETH_SetDMAConfig+0x44>
 8001616:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800161a:	e000      	b.n	800161e <ETH_SetDMAConfig+0x46>
 800161c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800161e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	7b9b      	ldrb	r3, [r3, #14]
 8001624:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001626:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800162c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	7f1b      	ldrb	r3, [r3, #28]
 8001632:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001634:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	7f9b      	ldrb	r3, [r3, #30]
 800163a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800163c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001642:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800164a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800164c:	4313      	orrs	r3, r2
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	4313      	orrs	r3, r2
 8001652:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800165c:	461a      	mov	r2, r3
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800166e:	2001      	movs	r0, #1
 8001670:	f7ff fd2c 	bl	80010cc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800167c:	461a      	mov	r2, r3
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	791b      	ldrb	r3, [r3, #4]
 8001686:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800168c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001692:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001698:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80016a0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80016a2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016a8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80016aa:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80016b0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	6812      	ldr	r2, [r2, #0]
 80016b6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80016ba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80016be:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80016cc:	2001      	movs	r0, #1
 80016ce:	f7ff fcfd 	bl	80010cc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016da:	461a      	mov	r2, r3
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	6013      	str	r3, [r2, #0]
}
 80016e0:	bf00      	nop
 80016e2:	3710      	adds	r7, #16
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	f8de3f23 	.word	0xf8de3f23

080016ec <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b0a6      	sub	sp, #152	@ 0x98
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80016f4:	2301      	movs	r3, #1
 80016f6:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80016fa:	2301      	movs	r3, #1
 80016fc:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001700:	2300      	movs	r3, #0
 8001702:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001704:	2300      	movs	r3, #0
 8001706:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800170a:	2301      	movs	r3, #1
 800170c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001710:	2300      	movs	r3, #0
 8001712:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001716:	2301      	movs	r3, #1
 8001718:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 800171c:	2301      	movs	r3, #1
 800171e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001722:	2300      	movs	r3, #0
 8001724:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001728:	2300      	movs	r3, #0
 800172a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800172e:	2300      	movs	r3, #0
 8001730:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001732:	2300      	movs	r3, #0
 8001734:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001738:	2300      	movs	r3, #0
 800173a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800173c:	2300      	movs	r3, #0
 800173e:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001742:	2300      	movs	r3, #0
 8001744:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001748:	2300      	movs	r3, #0
 800174a:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800174e:	2300      	movs	r3, #0
 8001750:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001754:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001758:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800175a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800175e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001760:	2300      	movs	r3, #0
 8001762:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001766:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800176a:	4619      	mov	r1, r3
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f7ff fe7f 	bl	8001470 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001772:	2301      	movs	r3, #1
 8001774:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001776:	2301      	movs	r3, #1
 8001778:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800177a:	2301      	movs	r3, #1
 800177c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001780:	2301      	movs	r3, #1
 8001782:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001784:	2300      	movs	r3, #0
 8001786:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001788:	2300      	movs	r3, #0
 800178a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800178e:	2300      	movs	r3, #0
 8001790:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001794:	2300      	movs	r3, #0
 8001796:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001798:	2301      	movs	r3, #1
 800179a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800179e:	2301      	movs	r3, #1
 80017a0:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80017a2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80017a6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80017a8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80017ac:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80017ae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017b2:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80017b4:	2301      	movs	r3, #1
 80017b6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80017ba:	2300      	movs	r3, #0
 80017bc:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80017be:	2300      	movs	r3, #0
 80017c0:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80017c2:	f107 0308 	add.w	r3, r7, #8
 80017c6:	4619      	mov	r1, r3
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f7ff ff05 	bl	80015d8 <ETH_SetDMAConfig>
}
 80017ce:	bf00      	nop
 80017d0:	3798      	adds	r7, #152	@ 0x98
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
	...

080017d8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80017d8:	b480      	push	{r7}
 80017da:	b087      	sub	sp, #28
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3305      	adds	r3, #5
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	021b      	lsls	r3, r3, #8
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	3204      	adds	r2, #4
 80017f0:	7812      	ldrb	r2, [r2, #0]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80017f6:	68ba      	ldr	r2, [r7, #8]
 80017f8:	4b11      	ldr	r3, [pc, #68]	@ (8001840 <ETH_MACAddressConfig+0x68>)
 80017fa:	4413      	add	r3, r2
 80017fc:	461a      	mov	r2, r3
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	3303      	adds	r3, #3
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	061a      	lsls	r2, r3, #24
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	3302      	adds	r3, #2
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	041b      	lsls	r3, r3, #16
 8001812:	431a      	orrs	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	3301      	adds	r3, #1
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	021b      	lsls	r3, r3, #8
 800181c:	4313      	orrs	r3, r2
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	7812      	ldrb	r2, [r2, #0]
 8001822:	4313      	orrs	r3, r2
 8001824:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001826:	68ba      	ldr	r2, [r7, #8]
 8001828:	4b06      	ldr	r3, [pc, #24]	@ (8001844 <ETH_MACAddressConfig+0x6c>)
 800182a:	4413      	add	r3, r2
 800182c:	461a      	mov	r2, r3
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	6013      	str	r3, [r2, #0]
}
 8001832:	bf00      	nop
 8001834:	371c      	adds	r7, #28
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	40028040 	.word	0x40028040
 8001844:	40028044 	.word	0x40028044

08001848 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001850:	2300      	movs	r3, #0
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	e03e      	b.n	80018d4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	68d9      	ldr	r1, [r3, #12]
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	4613      	mov	r3, r2
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	4413      	add	r3, r2
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	440b      	add	r3, r1
 8001866:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	2200      	movs	r2, #0
 800186c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	2200      	movs	r2, #0
 8001872:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	2200      	movs	r2, #0
 8001878:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	2200      	movs	r2, #0
 800187e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001880:	68b9      	ldr	r1, [r7, #8]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	68fa      	ldr	r2, [r7, #12]
 8001886:	3206      	adds	r2, #6
 8001888:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2b02      	cmp	r3, #2
 800189c:	d80c      	bhi.n	80018b8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	68d9      	ldr	r1, [r3, #12]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	1c5a      	adds	r2, r3, #1
 80018a6:	4613      	mov	r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	4413      	add	r3, r2
 80018ac:	00db      	lsls	r3, r3, #3
 80018ae:	440b      	add	r3, r1
 80018b0:	461a      	mov	r2, r3
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	60da      	str	r2, [r3, #12]
 80018b6:	e004      	b.n	80018c2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	461a      	mov	r2, r3
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	3301      	adds	r3, #1
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2b03      	cmp	r3, #3
 80018d8:	d9bd      	bls.n	8001856 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	68da      	ldr	r2, [r3, #12]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018ec:	611a      	str	r2, [r3, #16]
}
 80018ee:	bf00      	nop
 80018f0:	3714      	adds	r7, #20
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr

080018fa <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80018fa:	b480      	push	{r7}
 80018fc:	b085      	sub	sp, #20
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001902:	2300      	movs	r3, #0
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	e048      	b.n	800199a <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6919      	ldr	r1, [r3, #16]
 800190c:	68fa      	ldr	r2, [r7, #12]
 800190e:	4613      	mov	r3, r2
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	4413      	add	r3, r2
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	440b      	add	r3, r1
 8001918:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	2200      	movs	r2, #0
 8001924:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	2200      	movs	r2, #0
 800192a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	2200      	movs	r2, #0
 8001930:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	2200      	movs	r2, #0
 8001936:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	2200      	movs	r2, #0
 800193c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001944:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	695b      	ldr	r3, [r3, #20]
 800194a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800195e:	68b9      	ldr	r1, [r7, #8]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	68fa      	ldr	r2, [r7, #12]
 8001964:	3212      	adds	r2, #18
 8001966:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2b02      	cmp	r3, #2
 800196e:	d80c      	bhi.n	800198a <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6919      	ldr	r1, [r3, #16]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	1c5a      	adds	r2, r3, #1
 8001978:	4613      	mov	r3, r2
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	4413      	add	r3, r2
 800197e:	00db      	lsls	r3, r3, #3
 8001980:	440b      	add	r3, r1
 8001982:	461a      	mov	r2, r3
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	60da      	str	r2, [r3, #12]
 8001988:	e004      	b.n	8001994 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	691b      	ldr	r3, [r3, #16]
 800198e:	461a      	mov	r2, r3
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	3301      	adds	r3, #1
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2b03      	cmp	r3, #3
 800199e:	d9b3      	bls.n	8001908 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	691a      	ldr	r2, [r3, #16]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019ca:	60da      	str	r2, [r3, #12]
}
 80019cc:	bf00      	nop
 80019ce:	3714      	adds	r7, #20
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019d8:	b480      	push	{r7}
 80019da:	b089      	sub	sp, #36	@ 0x24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019e2:	2300      	movs	r3, #0
 80019e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019e6:	2300      	movs	r3, #0
 80019e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019ea:	2300      	movs	r3, #0
 80019ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ee:	2300      	movs	r3, #0
 80019f0:	61fb      	str	r3, [r7, #28]
 80019f2:	e177      	b.n	8001ce4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019f4:	2201      	movs	r2, #1
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	697a      	ldr	r2, [r7, #20]
 8001a04:	4013      	ands	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	f040 8166 	bne.w	8001cde <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f003 0303 	and.w	r3, r3, #3
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d005      	beq.n	8001a2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d130      	bne.n	8001a8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	2203      	movs	r2, #3
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	68da      	ldr	r2, [r3, #12]
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a60:	2201      	movs	r2, #1
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	091b      	lsrs	r3, r3, #4
 8001a76:	f003 0201 	and.w	r2, r3, #1
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f003 0303 	and.w	r3, r3, #3
 8001a94:	2b03      	cmp	r3, #3
 8001a96:	d017      	beq.n	8001ac8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	2203      	movs	r2, #3
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	4013      	ands	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	689a      	ldr	r2, [r3, #8]
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f003 0303 	and.w	r3, r3, #3
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d123      	bne.n	8001b1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	08da      	lsrs	r2, r3, #3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	3208      	adds	r2, #8
 8001adc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ae0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	f003 0307 	and.w	r3, r3, #7
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	220f      	movs	r2, #15
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	43db      	mvns	r3, r3
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4013      	ands	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	691a      	ldr	r2, [r3, #16]
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	f003 0307 	and.w	r3, r3, #7
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	08da      	lsrs	r2, r3, #3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	3208      	adds	r2, #8
 8001b16:	69b9      	ldr	r1, [r7, #24]
 8001b18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	2203      	movs	r2, #3
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	4013      	ands	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f003 0203 	and.w	r2, r3, #3
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	f000 80c0 	beq.w	8001cde <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60fb      	str	r3, [r7, #12]
 8001b62:	4b66      	ldr	r3, [pc, #408]	@ (8001cfc <HAL_GPIO_Init+0x324>)
 8001b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b66:	4a65      	ldr	r2, [pc, #404]	@ (8001cfc <HAL_GPIO_Init+0x324>)
 8001b68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b6e:	4b63      	ldr	r3, [pc, #396]	@ (8001cfc <HAL_GPIO_Init+0x324>)
 8001b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b7a:	4a61      	ldr	r2, [pc, #388]	@ (8001d00 <HAL_GPIO_Init+0x328>)
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	089b      	lsrs	r3, r3, #2
 8001b80:	3302      	adds	r3, #2
 8001b82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	f003 0303 	and.w	r3, r3, #3
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	220f      	movs	r2, #15
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	43db      	mvns	r3, r3
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a58      	ldr	r2, [pc, #352]	@ (8001d04 <HAL_GPIO_Init+0x32c>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d037      	beq.n	8001c16 <HAL_GPIO_Init+0x23e>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a57      	ldr	r2, [pc, #348]	@ (8001d08 <HAL_GPIO_Init+0x330>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d031      	beq.n	8001c12 <HAL_GPIO_Init+0x23a>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a56      	ldr	r2, [pc, #344]	@ (8001d0c <HAL_GPIO_Init+0x334>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d02b      	beq.n	8001c0e <HAL_GPIO_Init+0x236>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a55      	ldr	r2, [pc, #340]	@ (8001d10 <HAL_GPIO_Init+0x338>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d025      	beq.n	8001c0a <HAL_GPIO_Init+0x232>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a54      	ldr	r2, [pc, #336]	@ (8001d14 <HAL_GPIO_Init+0x33c>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d01f      	beq.n	8001c06 <HAL_GPIO_Init+0x22e>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a53      	ldr	r2, [pc, #332]	@ (8001d18 <HAL_GPIO_Init+0x340>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d019      	beq.n	8001c02 <HAL_GPIO_Init+0x22a>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a52      	ldr	r2, [pc, #328]	@ (8001d1c <HAL_GPIO_Init+0x344>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d013      	beq.n	8001bfe <HAL_GPIO_Init+0x226>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a51      	ldr	r2, [pc, #324]	@ (8001d20 <HAL_GPIO_Init+0x348>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d00d      	beq.n	8001bfa <HAL_GPIO_Init+0x222>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a50      	ldr	r2, [pc, #320]	@ (8001d24 <HAL_GPIO_Init+0x34c>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d007      	beq.n	8001bf6 <HAL_GPIO_Init+0x21e>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a4f      	ldr	r2, [pc, #316]	@ (8001d28 <HAL_GPIO_Init+0x350>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d101      	bne.n	8001bf2 <HAL_GPIO_Init+0x21a>
 8001bee:	2309      	movs	r3, #9
 8001bf0:	e012      	b.n	8001c18 <HAL_GPIO_Init+0x240>
 8001bf2:	230a      	movs	r3, #10
 8001bf4:	e010      	b.n	8001c18 <HAL_GPIO_Init+0x240>
 8001bf6:	2308      	movs	r3, #8
 8001bf8:	e00e      	b.n	8001c18 <HAL_GPIO_Init+0x240>
 8001bfa:	2307      	movs	r3, #7
 8001bfc:	e00c      	b.n	8001c18 <HAL_GPIO_Init+0x240>
 8001bfe:	2306      	movs	r3, #6
 8001c00:	e00a      	b.n	8001c18 <HAL_GPIO_Init+0x240>
 8001c02:	2305      	movs	r3, #5
 8001c04:	e008      	b.n	8001c18 <HAL_GPIO_Init+0x240>
 8001c06:	2304      	movs	r3, #4
 8001c08:	e006      	b.n	8001c18 <HAL_GPIO_Init+0x240>
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e004      	b.n	8001c18 <HAL_GPIO_Init+0x240>
 8001c0e:	2302      	movs	r3, #2
 8001c10:	e002      	b.n	8001c18 <HAL_GPIO_Init+0x240>
 8001c12:	2301      	movs	r3, #1
 8001c14:	e000      	b.n	8001c18 <HAL_GPIO_Init+0x240>
 8001c16:	2300      	movs	r3, #0
 8001c18:	69fa      	ldr	r2, [r7, #28]
 8001c1a:	f002 0203 	and.w	r2, r2, #3
 8001c1e:	0092      	lsls	r2, r2, #2
 8001c20:	4093      	lsls	r3, r2
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c28:	4935      	ldr	r1, [pc, #212]	@ (8001d00 <HAL_GPIO_Init+0x328>)
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	089b      	lsrs	r3, r3, #2
 8001c2e:	3302      	adds	r3, #2
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c36:	4b3d      	ldr	r3, [pc, #244]	@ (8001d2c <HAL_GPIO_Init+0x354>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4013      	ands	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d003      	beq.n	8001c5a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c5a:	4a34      	ldr	r2, [pc, #208]	@ (8001d2c <HAL_GPIO_Init+0x354>)
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c60:	4b32      	ldr	r3, [pc, #200]	@ (8001d2c <HAL_GPIO_Init+0x354>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d003      	beq.n	8001c84 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c84:	4a29      	ldr	r2, [pc, #164]	@ (8001d2c <HAL_GPIO_Init+0x354>)
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c8a:	4b28      	ldr	r3, [pc, #160]	@ (8001d2c <HAL_GPIO_Init+0x354>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	43db      	mvns	r3, r3
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	4013      	ands	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d003      	beq.n	8001cae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cae:	4a1f      	ldr	r2, [pc, #124]	@ (8001d2c <HAL_GPIO_Init+0x354>)
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cb4:	4b1d      	ldr	r3, [pc, #116]	@ (8001d2c <HAL_GPIO_Init+0x354>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d003      	beq.n	8001cd8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cd8:	4a14      	ldr	r2, [pc, #80]	@ (8001d2c <HAL_GPIO_Init+0x354>)
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	61fb      	str	r3, [r7, #28]
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	2b0f      	cmp	r3, #15
 8001ce8:	f67f ae84 	bls.w	80019f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cec:	bf00      	nop
 8001cee:	bf00      	nop
 8001cf0:	3724      	adds	r7, #36	@ 0x24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	40023800 	.word	0x40023800
 8001d00:	40013800 	.word	0x40013800
 8001d04:	40020000 	.word	0x40020000
 8001d08:	40020400 	.word	0x40020400
 8001d0c:	40020800 	.word	0x40020800
 8001d10:	40020c00 	.word	0x40020c00
 8001d14:	40021000 	.word	0x40021000
 8001d18:	40021400 	.word	0x40021400
 8001d1c:	40021800 	.word	0x40021800
 8001d20:	40021c00 	.word	0x40021c00
 8001d24:	40022000 	.word	0x40022000
 8001d28:	40022400 	.word	0x40022400
 8001d2c:	40013c00 	.word	0x40013c00

08001d30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	460b      	mov	r3, r1
 8001d3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	691a      	ldr	r2, [r3, #16]
 8001d40:	887b      	ldrh	r3, [r7, #2]
 8001d42:	4013      	ands	r3, r2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d002      	beq.n	8001d4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	73fb      	strb	r3, [r7, #15]
 8001d4c:	e001      	b.n	8001d52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3714      	adds	r7, #20
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	460b      	mov	r3, r1
 8001d6a:	807b      	strh	r3, [r7, #2]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d70:	787b      	ldrb	r3, [r7, #1]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d003      	beq.n	8001d7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d76:	887a      	ldrh	r2, [r7, #2]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d7c:	e003      	b.n	8001d86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d7e:	887b      	ldrh	r3, [r7, #2]
 8001d80:	041a      	lsls	r2, r3, #16
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	619a      	str	r2, [r3, #24]
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d92:	b480      	push	{r7}
 8001d94:	b085      	sub	sp, #20
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	695b      	ldr	r3, [r3, #20]
 8001da2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001da4:	887a      	ldrh	r2, [r7, #2]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	4013      	ands	r3, r2
 8001daa:	041a      	lsls	r2, r3, #16
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	43d9      	mvns	r1, r3
 8001db0:	887b      	ldrh	r3, [r7, #2]
 8001db2:	400b      	ands	r3, r1
 8001db4:	431a      	orrs	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	619a      	str	r2, [r3, #24]
}
 8001dba:	bf00      	nop
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr

08001dc6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b086      	sub	sp, #24
 8001dca:	af02      	add	r7, sp, #8
 8001dcc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d101      	bne.n	8001dd8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e101      	b.n	8001fdc <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d106      	bne.n	8001df8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f7fe fff2 	bl	8000ddc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2203      	movs	r2, #3
 8001dfc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e06:	d102      	bne.n	8001e0e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f002 f8c8 	bl	8003fa8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6818      	ldr	r0, [r3, #0]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	7c1a      	ldrb	r2, [r3, #16]
 8001e20:	f88d 2000 	strb.w	r2, [sp]
 8001e24:	3304      	adds	r3, #4
 8001e26:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e28:	f002 f85a 	bl	8003ee0 <USB_CoreInit>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d005      	beq.n	8001e3e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2202      	movs	r2, #2
 8001e36:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e0ce      	b.n	8001fdc <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2100      	movs	r1, #0
 8001e44:	4618      	mov	r0, r3
 8001e46:	f002 f8c0 	bl	8003fca <USB_SetCurrentMode>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d005      	beq.n	8001e5c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2202      	movs	r2, #2
 8001e54:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e0bf      	b.n	8001fdc <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	73fb      	strb	r3, [r7, #15]
 8001e60:	e04a      	b.n	8001ef8 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e62:	7bfa      	ldrb	r2, [r7, #15]
 8001e64:	6879      	ldr	r1, [r7, #4]
 8001e66:	4613      	mov	r3, r2
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	4413      	add	r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	440b      	add	r3, r1
 8001e70:	3315      	adds	r3, #21
 8001e72:	2201      	movs	r2, #1
 8001e74:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e76:	7bfa      	ldrb	r2, [r7, #15]
 8001e78:	6879      	ldr	r1, [r7, #4]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	4413      	add	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	440b      	add	r3, r1
 8001e84:	3314      	adds	r3, #20
 8001e86:	7bfa      	ldrb	r2, [r7, #15]
 8001e88:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e8a:	7bfa      	ldrb	r2, [r7, #15]
 8001e8c:	7bfb      	ldrb	r3, [r7, #15]
 8001e8e:	b298      	uxth	r0, r3
 8001e90:	6879      	ldr	r1, [r7, #4]
 8001e92:	4613      	mov	r3, r2
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	4413      	add	r3, r2
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	440b      	add	r3, r1
 8001e9c:	332e      	adds	r3, #46	@ 0x2e
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ea2:	7bfa      	ldrb	r2, [r7, #15]
 8001ea4:	6879      	ldr	r1, [r7, #4]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	4413      	add	r3, r2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	440b      	add	r3, r1
 8001eb0:	3318      	adds	r3, #24
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001eb6:	7bfa      	ldrb	r2, [r7, #15]
 8001eb8:	6879      	ldr	r1, [r7, #4]
 8001eba:	4613      	mov	r3, r2
 8001ebc:	00db      	lsls	r3, r3, #3
 8001ebe:	4413      	add	r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	440b      	add	r3, r1
 8001ec4:	331c      	adds	r3, #28
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001eca:	7bfa      	ldrb	r2, [r7, #15]
 8001ecc:	6879      	ldr	r1, [r7, #4]
 8001ece:	4613      	mov	r3, r2
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	4413      	add	r3, r2
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	440b      	add	r3, r1
 8001ed8:	3320      	adds	r3, #32
 8001eda:	2200      	movs	r2, #0
 8001edc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ede:	7bfa      	ldrb	r2, [r7, #15]
 8001ee0:	6879      	ldr	r1, [r7, #4]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	4413      	add	r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	440b      	add	r3, r1
 8001eec:	3324      	adds	r3, #36	@ 0x24
 8001eee:	2200      	movs	r2, #0
 8001ef0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ef2:	7bfb      	ldrb	r3, [r7, #15]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	73fb      	strb	r3, [r7, #15]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	791b      	ldrb	r3, [r3, #4]
 8001efc:	7bfa      	ldrb	r2, [r7, #15]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d3af      	bcc.n	8001e62 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f02:	2300      	movs	r3, #0
 8001f04:	73fb      	strb	r3, [r7, #15]
 8001f06:	e044      	b.n	8001f92 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f08:	7bfa      	ldrb	r2, [r7, #15]
 8001f0a:	6879      	ldr	r1, [r7, #4]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	4413      	add	r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	440b      	add	r3, r1
 8001f16:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f1e:	7bfa      	ldrb	r2, [r7, #15]
 8001f20:	6879      	ldr	r1, [r7, #4]
 8001f22:	4613      	mov	r3, r2
 8001f24:	00db      	lsls	r3, r3, #3
 8001f26:	4413      	add	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	440b      	add	r3, r1
 8001f2c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001f30:	7bfa      	ldrb	r2, [r7, #15]
 8001f32:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f34:	7bfa      	ldrb	r2, [r7, #15]
 8001f36:	6879      	ldr	r1, [r7, #4]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	4413      	add	r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	440b      	add	r3, r1
 8001f42:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001f46:	2200      	movs	r2, #0
 8001f48:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f4a:	7bfa      	ldrb	r2, [r7, #15]
 8001f4c:	6879      	ldr	r1, [r7, #4]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	4413      	add	r3, r2
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	440b      	add	r3, r1
 8001f58:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f60:	7bfa      	ldrb	r2, [r7, #15]
 8001f62:	6879      	ldr	r1, [r7, #4]
 8001f64:	4613      	mov	r3, r2
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	4413      	add	r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	440b      	add	r3, r1
 8001f6e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001f72:	2200      	movs	r2, #0
 8001f74:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f76:	7bfa      	ldrb	r2, [r7, #15]
 8001f78:	6879      	ldr	r1, [r7, #4]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	4413      	add	r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	440b      	add	r3, r1
 8001f84:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f8c:	7bfb      	ldrb	r3, [r7, #15]
 8001f8e:	3301      	adds	r3, #1
 8001f90:	73fb      	strb	r3, [r7, #15]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	791b      	ldrb	r3, [r3, #4]
 8001f96:	7bfa      	ldrb	r2, [r7, #15]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d3b5      	bcc.n	8001f08 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6818      	ldr	r0, [r3, #0]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	7c1a      	ldrb	r2, [r3, #16]
 8001fa4:	f88d 2000 	strb.w	r2, [sp]
 8001fa8:	3304      	adds	r3, #4
 8001faa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fac:	f002 f85a 	bl	8004064 <USB_DevInit>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d005      	beq.n	8001fc2 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2202      	movs	r2, #2
 8001fba:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e00c      	b.n	8001fdc <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f002 fa22 	bl	800441e <USB_DevDisconnect>

  return HAL_OK;
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3710      	adds	r7, #16
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e267      	b.n	80024c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d075      	beq.n	80020ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002002:	4b88      	ldr	r3, [pc, #544]	@ (8002224 <HAL_RCC_OscConfig+0x240>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f003 030c 	and.w	r3, r3, #12
 800200a:	2b04      	cmp	r3, #4
 800200c:	d00c      	beq.n	8002028 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800200e:	4b85      	ldr	r3, [pc, #532]	@ (8002224 <HAL_RCC_OscConfig+0x240>)
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002016:	2b08      	cmp	r3, #8
 8002018:	d112      	bne.n	8002040 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800201a:	4b82      	ldr	r3, [pc, #520]	@ (8002224 <HAL_RCC_OscConfig+0x240>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002022:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002026:	d10b      	bne.n	8002040 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002028:	4b7e      	ldr	r3, [pc, #504]	@ (8002224 <HAL_RCC_OscConfig+0x240>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d05b      	beq.n	80020ec <HAL_RCC_OscConfig+0x108>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d157      	bne.n	80020ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e242      	b.n	80024c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002048:	d106      	bne.n	8002058 <HAL_RCC_OscConfig+0x74>
 800204a:	4b76      	ldr	r3, [pc, #472]	@ (8002224 <HAL_RCC_OscConfig+0x240>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a75      	ldr	r2, [pc, #468]	@ (8002224 <HAL_RCC_OscConfig+0x240>)
 8002050:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002054:	6013      	str	r3, [r2, #0]
 8002056:	e01d      	b.n	8002094 <HAL_RCC_OscConfig+0xb0>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002060:	d10c      	bne.n	800207c <HAL_RCC_OscConfig+0x98>
 8002062:	4b70      	ldr	r3, [pc, #448]	@ (8002224 <HAL_RCC_OscConfig+0x240>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a6f      	ldr	r2, [pc, #444]	@ (8002224 <HAL_RCC_OscConfig+0x240>)
 8002068:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800206c:	6013      	str	r3, [r2, #0]
 800206e:	4b6d      	ldr	r3, [pc, #436]	@ (8002224 <HAL_RCC_OscConfig+0x240>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a6c      	ldr	r2, [pc, #432]	@ (8002224 <HAL_RCC_OscConfig+0x240>)
 8002074:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002078:	6013      	str	r3, [r2, #0]
 800207a:	e00b      	b.n	8002094 <HAL_RCC_OscConfig+0xb0>
 800207c:	4b69      	ldr	r3, [pc, #420]	@ (8002224 <HAL_RCC_OscConfig+0x240>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a68      	ldr	r2, [pc, #416]	@ (8002224 <HAL_RCC_OscConfig+0x240>)
 8002082:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002086:	6013      	str	r3, [r2, #0]
 8002088:	4b66      	ldr	r3, [pc, #408]	@ (8002224 <HAL_RCC_OscConfig+0x240>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a65      	ldr	r2, [pc, #404]	@ (8002224 <HAL_RCC_OscConfig+0x240>)
 800208e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002092:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d013      	beq.n	80020c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800209c:	f7ff f80a 	bl	80010b4 <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020a4:	f7ff f806 	bl	80010b4 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b64      	cmp	r3, #100	@ 0x64
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e207      	b.n	80024c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020b6:	4b5b      	ldr	r3, [pc, #364]	@ (8002224 <HAL_RCC_OscConfig+0x240>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d0f0      	beq.n	80020a4 <HAL_RCC_OscConfig+0xc0>
 80020c2:	e014      	b.n	80020ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c4:	f7fe fff6 	bl	80010b4 <HAL_GetTick>
 80020c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ca:	e008      	b.n	80020de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020cc:	f7fe fff2 	bl	80010b4 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b64      	cmp	r3, #100	@ 0x64
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e1f3      	b.n	80024c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020de:	4b51      	ldr	r3, [pc, #324]	@ (8002224 <HAL_RCC_OscConfig+0x240>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d1f0      	bne.n	80020cc <HAL_RCC_OscConfig+0xe8>
 80020ea:	e000      	b.n	80020ee <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d063      	beq.n	80021c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80020fa:	4b4a      	ldr	r3, [pc, #296]	@ (8002224 <HAL_RCC_OscConfig+0x240>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f003 030c 	and.w	r3, r3, #12
 8002102:	2b00      	cmp	r3, #0
 8002104:	d00b      	beq.n	800211e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002106:	4b47      	ldr	r3, [pc, #284]	@ (8002224 <HAL_RCC_OscConfig+0x240>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800210e:	2b08      	cmp	r3, #8
 8002110:	d11c      	bne.n	800214c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002112:	4b44      	ldr	r3, [pc, #272]	@ (8002224 <HAL_RCC_OscConfig+0x240>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d116      	bne.n	800214c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800211e:	4b41      	ldr	r3, [pc, #260]	@ (8002224 <HAL_RCC_OscConfig+0x240>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d005      	beq.n	8002136 <HAL_RCC_OscConfig+0x152>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	2b01      	cmp	r3, #1
 8002130:	d001      	beq.n	8002136 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e1c7      	b.n	80024c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002136:	4b3b      	ldr	r3, [pc, #236]	@ (8002224 <HAL_RCC_OscConfig+0x240>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	4937      	ldr	r1, [pc, #220]	@ (8002224 <HAL_RCC_OscConfig+0x240>)
 8002146:	4313      	orrs	r3, r2
 8002148:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800214a:	e03a      	b.n	80021c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d020      	beq.n	8002196 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002154:	4b34      	ldr	r3, [pc, #208]	@ (8002228 <HAL_RCC_OscConfig+0x244>)
 8002156:	2201      	movs	r2, #1
 8002158:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800215a:	f7fe ffab 	bl	80010b4 <HAL_GetTick>
 800215e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002160:	e008      	b.n	8002174 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002162:	f7fe ffa7 	bl	80010b4 <HAL_GetTick>
 8002166:	4602      	mov	r2, r0
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	2b02      	cmp	r3, #2
 800216e:	d901      	bls.n	8002174 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e1a8      	b.n	80024c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002174:	4b2b      	ldr	r3, [pc, #172]	@ (8002224 <HAL_RCC_OscConfig+0x240>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0302 	and.w	r3, r3, #2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d0f0      	beq.n	8002162 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002180:	4b28      	ldr	r3, [pc, #160]	@ (8002224 <HAL_RCC_OscConfig+0x240>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	691b      	ldr	r3, [r3, #16]
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	4925      	ldr	r1, [pc, #148]	@ (8002224 <HAL_RCC_OscConfig+0x240>)
 8002190:	4313      	orrs	r3, r2
 8002192:	600b      	str	r3, [r1, #0]
 8002194:	e015      	b.n	80021c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002196:	4b24      	ldr	r3, [pc, #144]	@ (8002228 <HAL_RCC_OscConfig+0x244>)
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800219c:	f7fe ff8a 	bl	80010b4 <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021a4:	f7fe ff86 	bl	80010b4 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e187      	b.n	80024c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021b6:	4b1b      	ldr	r3, [pc, #108]	@ (8002224 <HAL_RCC_OscConfig+0x240>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1f0      	bne.n	80021a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0308 	and.w	r3, r3, #8
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d036      	beq.n	800223c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d016      	beq.n	8002204 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021d6:	4b15      	ldr	r3, [pc, #84]	@ (800222c <HAL_RCC_OscConfig+0x248>)
 80021d8:	2201      	movs	r2, #1
 80021da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021dc:	f7fe ff6a 	bl	80010b4 <HAL_GetTick>
 80021e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021e4:	f7fe ff66 	bl	80010b4 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e167      	b.n	80024c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002224 <HAL_RCC_OscConfig+0x240>)
 80021f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d0f0      	beq.n	80021e4 <HAL_RCC_OscConfig+0x200>
 8002202:	e01b      	b.n	800223c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002204:	4b09      	ldr	r3, [pc, #36]	@ (800222c <HAL_RCC_OscConfig+0x248>)
 8002206:	2200      	movs	r2, #0
 8002208:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800220a:	f7fe ff53 	bl	80010b4 <HAL_GetTick>
 800220e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002210:	e00e      	b.n	8002230 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002212:	f7fe ff4f 	bl	80010b4 <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	2b02      	cmp	r3, #2
 800221e:	d907      	bls.n	8002230 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e150      	b.n	80024c6 <HAL_RCC_OscConfig+0x4e2>
 8002224:	40023800 	.word	0x40023800
 8002228:	42470000 	.word	0x42470000
 800222c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002230:	4b88      	ldr	r3, [pc, #544]	@ (8002454 <HAL_RCC_OscConfig+0x470>)
 8002232:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d1ea      	bne.n	8002212 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0304 	and.w	r3, r3, #4
 8002244:	2b00      	cmp	r3, #0
 8002246:	f000 8097 	beq.w	8002378 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800224a:	2300      	movs	r3, #0
 800224c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800224e:	4b81      	ldr	r3, [pc, #516]	@ (8002454 <HAL_RCC_OscConfig+0x470>)
 8002250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002252:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d10f      	bne.n	800227a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	60bb      	str	r3, [r7, #8]
 800225e:	4b7d      	ldr	r3, [pc, #500]	@ (8002454 <HAL_RCC_OscConfig+0x470>)
 8002260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002262:	4a7c      	ldr	r2, [pc, #496]	@ (8002454 <HAL_RCC_OscConfig+0x470>)
 8002264:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002268:	6413      	str	r3, [r2, #64]	@ 0x40
 800226a:	4b7a      	ldr	r3, [pc, #488]	@ (8002454 <HAL_RCC_OscConfig+0x470>)
 800226c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002272:	60bb      	str	r3, [r7, #8]
 8002274:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002276:	2301      	movs	r3, #1
 8002278:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800227a:	4b77      	ldr	r3, [pc, #476]	@ (8002458 <HAL_RCC_OscConfig+0x474>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002282:	2b00      	cmp	r3, #0
 8002284:	d118      	bne.n	80022b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002286:	4b74      	ldr	r3, [pc, #464]	@ (8002458 <HAL_RCC_OscConfig+0x474>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a73      	ldr	r2, [pc, #460]	@ (8002458 <HAL_RCC_OscConfig+0x474>)
 800228c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002290:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002292:	f7fe ff0f 	bl	80010b4 <HAL_GetTick>
 8002296:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002298:	e008      	b.n	80022ac <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800229a:	f7fe ff0b 	bl	80010b4 <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d901      	bls.n	80022ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e10c      	b.n	80024c6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ac:	4b6a      	ldr	r3, [pc, #424]	@ (8002458 <HAL_RCC_OscConfig+0x474>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d0f0      	beq.n	800229a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d106      	bne.n	80022ce <HAL_RCC_OscConfig+0x2ea>
 80022c0:	4b64      	ldr	r3, [pc, #400]	@ (8002454 <HAL_RCC_OscConfig+0x470>)
 80022c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022c4:	4a63      	ldr	r2, [pc, #396]	@ (8002454 <HAL_RCC_OscConfig+0x470>)
 80022c6:	f043 0301 	orr.w	r3, r3, #1
 80022ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80022cc:	e01c      	b.n	8002308 <HAL_RCC_OscConfig+0x324>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	2b05      	cmp	r3, #5
 80022d4:	d10c      	bne.n	80022f0 <HAL_RCC_OscConfig+0x30c>
 80022d6:	4b5f      	ldr	r3, [pc, #380]	@ (8002454 <HAL_RCC_OscConfig+0x470>)
 80022d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022da:	4a5e      	ldr	r2, [pc, #376]	@ (8002454 <HAL_RCC_OscConfig+0x470>)
 80022dc:	f043 0304 	orr.w	r3, r3, #4
 80022e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80022e2:	4b5c      	ldr	r3, [pc, #368]	@ (8002454 <HAL_RCC_OscConfig+0x470>)
 80022e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022e6:	4a5b      	ldr	r2, [pc, #364]	@ (8002454 <HAL_RCC_OscConfig+0x470>)
 80022e8:	f043 0301 	orr.w	r3, r3, #1
 80022ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80022ee:	e00b      	b.n	8002308 <HAL_RCC_OscConfig+0x324>
 80022f0:	4b58      	ldr	r3, [pc, #352]	@ (8002454 <HAL_RCC_OscConfig+0x470>)
 80022f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022f4:	4a57      	ldr	r2, [pc, #348]	@ (8002454 <HAL_RCC_OscConfig+0x470>)
 80022f6:	f023 0301 	bic.w	r3, r3, #1
 80022fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80022fc:	4b55      	ldr	r3, [pc, #340]	@ (8002454 <HAL_RCC_OscConfig+0x470>)
 80022fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002300:	4a54      	ldr	r2, [pc, #336]	@ (8002454 <HAL_RCC_OscConfig+0x470>)
 8002302:	f023 0304 	bic.w	r3, r3, #4
 8002306:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d015      	beq.n	800233c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002310:	f7fe fed0 	bl	80010b4 <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002316:	e00a      	b.n	800232e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002318:	f7fe fecc 	bl	80010b4 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002326:	4293      	cmp	r3, r2
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e0cb      	b.n	80024c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800232e:	4b49      	ldr	r3, [pc, #292]	@ (8002454 <HAL_RCC_OscConfig+0x470>)
 8002330:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d0ee      	beq.n	8002318 <HAL_RCC_OscConfig+0x334>
 800233a:	e014      	b.n	8002366 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800233c:	f7fe feba 	bl	80010b4 <HAL_GetTick>
 8002340:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002342:	e00a      	b.n	800235a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002344:	f7fe feb6 	bl	80010b4 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002352:	4293      	cmp	r3, r2
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e0b5      	b.n	80024c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800235a:	4b3e      	ldr	r3, [pc, #248]	@ (8002454 <HAL_RCC_OscConfig+0x470>)
 800235c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1ee      	bne.n	8002344 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002366:	7dfb      	ldrb	r3, [r7, #23]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d105      	bne.n	8002378 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800236c:	4b39      	ldr	r3, [pc, #228]	@ (8002454 <HAL_RCC_OscConfig+0x470>)
 800236e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002370:	4a38      	ldr	r2, [pc, #224]	@ (8002454 <HAL_RCC_OscConfig+0x470>)
 8002372:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002376:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	2b00      	cmp	r3, #0
 800237e:	f000 80a1 	beq.w	80024c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002382:	4b34      	ldr	r3, [pc, #208]	@ (8002454 <HAL_RCC_OscConfig+0x470>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f003 030c 	and.w	r3, r3, #12
 800238a:	2b08      	cmp	r3, #8
 800238c:	d05c      	beq.n	8002448 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	2b02      	cmp	r3, #2
 8002394:	d141      	bne.n	800241a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002396:	4b31      	ldr	r3, [pc, #196]	@ (800245c <HAL_RCC_OscConfig+0x478>)
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239c:	f7fe fe8a 	bl	80010b4 <HAL_GetTick>
 80023a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023a2:	e008      	b.n	80023b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023a4:	f7fe fe86 	bl	80010b4 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e087      	b.n	80024c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023b6:	4b27      	ldr	r3, [pc, #156]	@ (8002454 <HAL_RCC_OscConfig+0x470>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1f0      	bne.n	80023a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	69da      	ldr	r2, [r3, #28]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a1b      	ldr	r3, [r3, #32]
 80023ca:	431a      	orrs	r2, r3
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d0:	019b      	lsls	r3, r3, #6
 80023d2:	431a      	orrs	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023d8:	085b      	lsrs	r3, r3, #1
 80023da:	3b01      	subs	r3, #1
 80023dc:	041b      	lsls	r3, r3, #16
 80023de:	431a      	orrs	r2, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023e4:	061b      	lsls	r3, r3, #24
 80023e6:	491b      	ldr	r1, [pc, #108]	@ (8002454 <HAL_RCC_OscConfig+0x470>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023ec:	4b1b      	ldr	r3, [pc, #108]	@ (800245c <HAL_RCC_OscConfig+0x478>)
 80023ee:	2201      	movs	r2, #1
 80023f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f2:	f7fe fe5f 	bl	80010b4 <HAL_GetTick>
 80023f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023f8:	e008      	b.n	800240c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023fa:	f7fe fe5b 	bl	80010b4 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b02      	cmp	r3, #2
 8002406:	d901      	bls.n	800240c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e05c      	b.n	80024c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800240c:	4b11      	ldr	r3, [pc, #68]	@ (8002454 <HAL_RCC_OscConfig+0x470>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d0f0      	beq.n	80023fa <HAL_RCC_OscConfig+0x416>
 8002418:	e054      	b.n	80024c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800241a:	4b10      	ldr	r3, [pc, #64]	@ (800245c <HAL_RCC_OscConfig+0x478>)
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002420:	f7fe fe48 	bl	80010b4 <HAL_GetTick>
 8002424:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002428:	f7fe fe44 	bl	80010b4 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b02      	cmp	r3, #2
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e045      	b.n	80024c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800243a:	4b06      	ldr	r3, [pc, #24]	@ (8002454 <HAL_RCC_OscConfig+0x470>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1f0      	bne.n	8002428 <HAL_RCC_OscConfig+0x444>
 8002446:	e03d      	b.n	80024c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	2b01      	cmp	r3, #1
 800244e:	d107      	bne.n	8002460 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e038      	b.n	80024c6 <HAL_RCC_OscConfig+0x4e2>
 8002454:	40023800 	.word	0x40023800
 8002458:	40007000 	.word	0x40007000
 800245c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002460:	4b1b      	ldr	r3, [pc, #108]	@ (80024d0 <HAL_RCC_OscConfig+0x4ec>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d028      	beq.n	80024c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002478:	429a      	cmp	r2, r3
 800247a:	d121      	bne.n	80024c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002486:	429a      	cmp	r2, r3
 8002488:	d11a      	bne.n	80024c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002490:	4013      	ands	r3, r2
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002496:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002498:	4293      	cmp	r3, r2
 800249a:	d111      	bne.n	80024c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024a6:	085b      	lsrs	r3, r3, #1
 80024a8:	3b01      	subs	r3, #1
 80024aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d107      	bne.n	80024c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024bc:	429a      	cmp	r2, r3
 80024be:	d001      	beq.n	80024c4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e000      	b.n	80024c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3718      	adds	r7, #24
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	40023800 	.word	0x40023800

080024d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d101      	bne.n	80024e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e0cc      	b.n	8002682 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024e8:	4b68      	ldr	r3, [pc, #416]	@ (800268c <HAL_RCC_ClockConfig+0x1b8>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 030f 	and.w	r3, r3, #15
 80024f0:	683a      	ldr	r2, [r7, #0]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d90c      	bls.n	8002510 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024f6:	4b65      	ldr	r3, [pc, #404]	@ (800268c <HAL_RCC_ClockConfig+0x1b8>)
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	b2d2      	uxtb	r2, r2
 80024fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024fe:	4b63      	ldr	r3, [pc, #396]	@ (800268c <HAL_RCC_ClockConfig+0x1b8>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 030f 	and.w	r3, r3, #15
 8002506:	683a      	ldr	r2, [r7, #0]
 8002508:	429a      	cmp	r2, r3
 800250a:	d001      	beq.n	8002510 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e0b8      	b.n	8002682 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d020      	beq.n	800255e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0304 	and.w	r3, r3, #4
 8002524:	2b00      	cmp	r3, #0
 8002526:	d005      	beq.n	8002534 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002528:	4b59      	ldr	r3, [pc, #356]	@ (8002690 <HAL_RCC_ClockConfig+0x1bc>)
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	4a58      	ldr	r2, [pc, #352]	@ (8002690 <HAL_RCC_ClockConfig+0x1bc>)
 800252e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002532:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0308 	and.w	r3, r3, #8
 800253c:	2b00      	cmp	r3, #0
 800253e:	d005      	beq.n	800254c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002540:	4b53      	ldr	r3, [pc, #332]	@ (8002690 <HAL_RCC_ClockConfig+0x1bc>)
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	4a52      	ldr	r2, [pc, #328]	@ (8002690 <HAL_RCC_ClockConfig+0x1bc>)
 8002546:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800254a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800254c:	4b50      	ldr	r3, [pc, #320]	@ (8002690 <HAL_RCC_ClockConfig+0x1bc>)
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	494d      	ldr	r1, [pc, #308]	@ (8002690 <HAL_RCC_ClockConfig+0x1bc>)
 800255a:	4313      	orrs	r3, r2
 800255c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	2b00      	cmp	r3, #0
 8002568:	d044      	beq.n	80025f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d107      	bne.n	8002582 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002572:	4b47      	ldr	r3, [pc, #284]	@ (8002690 <HAL_RCC_ClockConfig+0x1bc>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d119      	bne.n	80025b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e07f      	b.n	8002682 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	2b02      	cmp	r3, #2
 8002588:	d003      	beq.n	8002592 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800258e:	2b03      	cmp	r3, #3
 8002590:	d107      	bne.n	80025a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002592:	4b3f      	ldr	r3, [pc, #252]	@ (8002690 <HAL_RCC_ClockConfig+0x1bc>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d109      	bne.n	80025b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e06f      	b.n	8002682 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025a2:	4b3b      	ldr	r3, [pc, #236]	@ (8002690 <HAL_RCC_ClockConfig+0x1bc>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e067      	b.n	8002682 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025b2:	4b37      	ldr	r3, [pc, #220]	@ (8002690 <HAL_RCC_ClockConfig+0x1bc>)
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	f023 0203 	bic.w	r2, r3, #3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	4934      	ldr	r1, [pc, #208]	@ (8002690 <HAL_RCC_ClockConfig+0x1bc>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025c4:	f7fe fd76 	bl	80010b4 <HAL_GetTick>
 80025c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ca:	e00a      	b.n	80025e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025cc:	f7fe fd72 	bl	80010b4 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025da:	4293      	cmp	r3, r2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e04f      	b.n	8002682 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025e2:	4b2b      	ldr	r3, [pc, #172]	@ (8002690 <HAL_RCC_ClockConfig+0x1bc>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f003 020c 	and.w	r2, r3, #12
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d1eb      	bne.n	80025cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025f4:	4b25      	ldr	r3, [pc, #148]	@ (800268c <HAL_RCC_ClockConfig+0x1b8>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 030f 	and.w	r3, r3, #15
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d20c      	bcs.n	800261c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002602:	4b22      	ldr	r3, [pc, #136]	@ (800268c <HAL_RCC_ClockConfig+0x1b8>)
 8002604:	683a      	ldr	r2, [r7, #0]
 8002606:	b2d2      	uxtb	r2, r2
 8002608:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800260a:	4b20      	ldr	r3, [pc, #128]	@ (800268c <HAL_RCC_ClockConfig+0x1b8>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 030f 	and.w	r3, r3, #15
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	429a      	cmp	r2, r3
 8002616:	d001      	beq.n	800261c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e032      	b.n	8002682 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0304 	and.w	r3, r3, #4
 8002624:	2b00      	cmp	r3, #0
 8002626:	d008      	beq.n	800263a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002628:	4b19      	ldr	r3, [pc, #100]	@ (8002690 <HAL_RCC_ClockConfig+0x1bc>)
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	4916      	ldr	r1, [pc, #88]	@ (8002690 <HAL_RCC_ClockConfig+0x1bc>)
 8002636:	4313      	orrs	r3, r2
 8002638:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0308 	and.w	r3, r3, #8
 8002642:	2b00      	cmp	r3, #0
 8002644:	d009      	beq.n	800265a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002646:	4b12      	ldr	r3, [pc, #72]	@ (8002690 <HAL_RCC_ClockConfig+0x1bc>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	490e      	ldr	r1, [pc, #56]	@ (8002690 <HAL_RCC_ClockConfig+0x1bc>)
 8002656:	4313      	orrs	r3, r2
 8002658:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800265a:	f000 f821 	bl	80026a0 <HAL_RCC_GetSysClockFreq>
 800265e:	4602      	mov	r2, r0
 8002660:	4b0b      	ldr	r3, [pc, #44]	@ (8002690 <HAL_RCC_ClockConfig+0x1bc>)
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	091b      	lsrs	r3, r3, #4
 8002666:	f003 030f 	and.w	r3, r3, #15
 800266a:	490a      	ldr	r1, [pc, #40]	@ (8002694 <HAL_RCC_ClockConfig+0x1c0>)
 800266c:	5ccb      	ldrb	r3, [r1, r3]
 800266e:	fa22 f303 	lsr.w	r3, r2, r3
 8002672:	4a09      	ldr	r2, [pc, #36]	@ (8002698 <HAL_RCC_ClockConfig+0x1c4>)
 8002674:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002676:	4b09      	ldr	r3, [pc, #36]	@ (800269c <HAL_RCC_ClockConfig+0x1c8>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4618      	mov	r0, r3
 800267c:	f7fe fcd6 	bl	800102c <HAL_InitTick>

  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	40023c00 	.word	0x40023c00
 8002690:	40023800 	.word	0x40023800
 8002694:	08004e4c 	.word	0x08004e4c
 8002698:	20000000 	.word	0x20000000
 800269c:	20000004 	.word	0x20000004

080026a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026a4:	b094      	sub	sp, #80	@ 0x50
 80026a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80026a8:	2300      	movs	r3, #0
 80026aa:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80026ac:	2300      	movs	r3, #0
 80026ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80026b0:	2300      	movs	r3, #0
 80026b2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80026b4:	2300      	movs	r3, #0
 80026b6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026b8:	4b79      	ldr	r3, [pc, #484]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f003 030c 	and.w	r3, r3, #12
 80026c0:	2b08      	cmp	r3, #8
 80026c2:	d00d      	beq.n	80026e0 <HAL_RCC_GetSysClockFreq+0x40>
 80026c4:	2b08      	cmp	r3, #8
 80026c6:	f200 80e1 	bhi.w	800288c <HAL_RCC_GetSysClockFreq+0x1ec>
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d002      	beq.n	80026d4 <HAL_RCC_GetSysClockFreq+0x34>
 80026ce:	2b04      	cmp	r3, #4
 80026d0:	d003      	beq.n	80026da <HAL_RCC_GetSysClockFreq+0x3a>
 80026d2:	e0db      	b.n	800288c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026d4:	4b73      	ldr	r3, [pc, #460]	@ (80028a4 <HAL_RCC_GetSysClockFreq+0x204>)
 80026d6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80026d8:	e0db      	b.n	8002892 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026da:	4b73      	ldr	r3, [pc, #460]	@ (80028a8 <HAL_RCC_GetSysClockFreq+0x208>)
 80026dc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80026de:	e0d8      	b.n	8002892 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026e0:	4b6f      	ldr	r3, [pc, #444]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80026e8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026ea:	4b6d      	ldr	r3, [pc, #436]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d063      	beq.n	80027be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026f6:	4b6a      	ldr	r3, [pc, #424]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	099b      	lsrs	r3, r3, #6
 80026fc:	2200      	movs	r2, #0
 80026fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002700:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002704:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002708:	633b      	str	r3, [r7, #48]	@ 0x30
 800270a:	2300      	movs	r3, #0
 800270c:	637b      	str	r3, [r7, #52]	@ 0x34
 800270e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002712:	4622      	mov	r2, r4
 8002714:	462b      	mov	r3, r5
 8002716:	f04f 0000 	mov.w	r0, #0
 800271a:	f04f 0100 	mov.w	r1, #0
 800271e:	0159      	lsls	r1, r3, #5
 8002720:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002724:	0150      	lsls	r0, r2, #5
 8002726:	4602      	mov	r2, r0
 8002728:	460b      	mov	r3, r1
 800272a:	4621      	mov	r1, r4
 800272c:	1a51      	subs	r1, r2, r1
 800272e:	6139      	str	r1, [r7, #16]
 8002730:	4629      	mov	r1, r5
 8002732:	eb63 0301 	sbc.w	r3, r3, r1
 8002736:	617b      	str	r3, [r7, #20]
 8002738:	f04f 0200 	mov.w	r2, #0
 800273c:	f04f 0300 	mov.w	r3, #0
 8002740:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002744:	4659      	mov	r1, fp
 8002746:	018b      	lsls	r3, r1, #6
 8002748:	4651      	mov	r1, sl
 800274a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800274e:	4651      	mov	r1, sl
 8002750:	018a      	lsls	r2, r1, #6
 8002752:	4651      	mov	r1, sl
 8002754:	ebb2 0801 	subs.w	r8, r2, r1
 8002758:	4659      	mov	r1, fp
 800275a:	eb63 0901 	sbc.w	r9, r3, r1
 800275e:	f04f 0200 	mov.w	r2, #0
 8002762:	f04f 0300 	mov.w	r3, #0
 8002766:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800276a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800276e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002772:	4690      	mov	r8, r2
 8002774:	4699      	mov	r9, r3
 8002776:	4623      	mov	r3, r4
 8002778:	eb18 0303 	adds.w	r3, r8, r3
 800277c:	60bb      	str	r3, [r7, #8]
 800277e:	462b      	mov	r3, r5
 8002780:	eb49 0303 	adc.w	r3, r9, r3
 8002784:	60fb      	str	r3, [r7, #12]
 8002786:	f04f 0200 	mov.w	r2, #0
 800278a:	f04f 0300 	mov.w	r3, #0
 800278e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002792:	4629      	mov	r1, r5
 8002794:	024b      	lsls	r3, r1, #9
 8002796:	4621      	mov	r1, r4
 8002798:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800279c:	4621      	mov	r1, r4
 800279e:	024a      	lsls	r2, r1, #9
 80027a0:	4610      	mov	r0, r2
 80027a2:	4619      	mov	r1, r3
 80027a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027a6:	2200      	movs	r2, #0
 80027a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80027aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80027ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80027b0:	f7fd fd76 	bl	80002a0 <__aeabi_uldivmod>
 80027b4:	4602      	mov	r2, r0
 80027b6:	460b      	mov	r3, r1
 80027b8:	4613      	mov	r3, r2
 80027ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80027bc:	e058      	b.n	8002870 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027be:	4b38      	ldr	r3, [pc, #224]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	099b      	lsrs	r3, r3, #6
 80027c4:	2200      	movs	r2, #0
 80027c6:	4618      	mov	r0, r3
 80027c8:	4611      	mov	r1, r2
 80027ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80027ce:	623b      	str	r3, [r7, #32]
 80027d0:	2300      	movs	r3, #0
 80027d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80027d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80027d8:	4642      	mov	r2, r8
 80027da:	464b      	mov	r3, r9
 80027dc:	f04f 0000 	mov.w	r0, #0
 80027e0:	f04f 0100 	mov.w	r1, #0
 80027e4:	0159      	lsls	r1, r3, #5
 80027e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027ea:	0150      	lsls	r0, r2, #5
 80027ec:	4602      	mov	r2, r0
 80027ee:	460b      	mov	r3, r1
 80027f0:	4641      	mov	r1, r8
 80027f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80027f6:	4649      	mov	r1, r9
 80027f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80027fc:	f04f 0200 	mov.w	r2, #0
 8002800:	f04f 0300 	mov.w	r3, #0
 8002804:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002808:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800280c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002810:	ebb2 040a 	subs.w	r4, r2, sl
 8002814:	eb63 050b 	sbc.w	r5, r3, fp
 8002818:	f04f 0200 	mov.w	r2, #0
 800281c:	f04f 0300 	mov.w	r3, #0
 8002820:	00eb      	lsls	r3, r5, #3
 8002822:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002826:	00e2      	lsls	r2, r4, #3
 8002828:	4614      	mov	r4, r2
 800282a:	461d      	mov	r5, r3
 800282c:	4643      	mov	r3, r8
 800282e:	18e3      	adds	r3, r4, r3
 8002830:	603b      	str	r3, [r7, #0]
 8002832:	464b      	mov	r3, r9
 8002834:	eb45 0303 	adc.w	r3, r5, r3
 8002838:	607b      	str	r3, [r7, #4]
 800283a:	f04f 0200 	mov.w	r2, #0
 800283e:	f04f 0300 	mov.w	r3, #0
 8002842:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002846:	4629      	mov	r1, r5
 8002848:	028b      	lsls	r3, r1, #10
 800284a:	4621      	mov	r1, r4
 800284c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002850:	4621      	mov	r1, r4
 8002852:	028a      	lsls	r2, r1, #10
 8002854:	4610      	mov	r0, r2
 8002856:	4619      	mov	r1, r3
 8002858:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800285a:	2200      	movs	r2, #0
 800285c:	61bb      	str	r3, [r7, #24]
 800285e:	61fa      	str	r2, [r7, #28]
 8002860:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002864:	f7fd fd1c 	bl	80002a0 <__aeabi_uldivmod>
 8002868:	4602      	mov	r2, r0
 800286a:	460b      	mov	r3, r1
 800286c:	4613      	mov	r3, r2
 800286e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002870:	4b0b      	ldr	r3, [pc, #44]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	0c1b      	lsrs	r3, r3, #16
 8002876:	f003 0303 	and.w	r3, r3, #3
 800287a:	3301      	adds	r3, #1
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002880:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002882:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002884:	fbb2 f3f3 	udiv	r3, r2, r3
 8002888:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800288a:	e002      	b.n	8002892 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800288c:	4b05      	ldr	r3, [pc, #20]	@ (80028a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800288e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002890:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002892:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002894:	4618      	mov	r0, r3
 8002896:	3750      	adds	r7, #80	@ 0x50
 8002898:	46bd      	mov	sp, r7
 800289a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800289e:	bf00      	nop
 80028a0:	40023800 	.word	0x40023800
 80028a4:	00f42400 	.word	0x00f42400
 80028a8:	007a1200 	.word	0x007a1200

080028ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028b0:	4b03      	ldr	r3, [pc, #12]	@ (80028c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80028b2:	681b      	ldr	r3, [r3, #0]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	20000000 	.word	0x20000000

080028c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028c8:	f7ff fff0 	bl	80028ac <HAL_RCC_GetHCLKFreq>
 80028cc:	4602      	mov	r2, r0
 80028ce:	4b05      	ldr	r3, [pc, #20]	@ (80028e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	0a9b      	lsrs	r3, r3, #10
 80028d4:	f003 0307 	and.w	r3, r3, #7
 80028d8:	4903      	ldr	r1, [pc, #12]	@ (80028e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028da:	5ccb      	ldrb	r3, [r1, r3]
 80028dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	40023800 	.word	0x40023800
 80028e8:	08004e5c 	.word	0x08004e5c

080028ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028f0:	f7ff ffdc 	bl	80028ac <HAL_RCC_GetHCLKFreq>
 80028f4:	4602      	mov	r2, r0
 80028f6:	4b05      	ldr	r3, [pc, #20]	@ (800290c <HAL_RCC_GetPCLK2Freq+0x20>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	0b5b      	lsrs	r3, r3, #13
 80028fc:	f003 0307 	and.w	r3, r3, #7
 8002900:	4903      	ldr	r1, [pc, #12]	@ (8002910 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002902:	5ccb      	ldrb	r3, [r1, r3]
 8002904:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002908:	4618      	mov	r0, r3
 800290a:	bd80      	pop	{r7, pc}
 800290c:	40023800 	.word	0x40023800
 8002910:	08004e5c 	.word	0x08004e5c

08002914 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e041      	b.n	80029aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d106      	bne.n	8002940 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f7fe f9a4 	bl	8000c88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2202      	movs	r2, #2
 8002944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	3304      	adds	r3, #4
 8002950:	4619      	mov	r1, r3
 8002952:	4610      	mov	r0, r2
 8002954:	f000 fb32 	bl	8002fbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3708      	adds	r7, #8
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b082      	sub	sp, #8
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d101      	bne.n	80029c4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e041      	b.n	8002a48 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d106      	bne.n	80029de <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f000 f839 	bl	8002a50 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2202      	movs	r2, #2
 80029e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	3304      	adds	r3, #4
 80029ee:	4619      	mov	r1, r3
 80029f0:	4610      	mov	r0, r2
 80029f2:	f000 fae3 	bl	8002fbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2201      	movs	r2, #1
 8002a12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2201      	movs	r2, #1
 8002a32:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2201      	movs	r2, #1
 8002a42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3708      	adds	r7, #8
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d020      	beq.n	8002ac8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f003 0302 	and.w	r3, r3, #2
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d01b      	beq.n	8002ac8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f06f 0202 	mvn.w	r2, #2
 8002a98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	f003 0303 	and.w	r3, r3, #3
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d003      	beq.n	8002ab6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 fa65 	bl	8002f7e <HAL_TIM_IC_CaptureCallback>
 8002ab4:	e005      	b.n	8002ac2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 fa57 	bl	8002f6a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f000 fa68 	bl	8002f92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	f003 0304 	and.w	r3, r3, #4
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d020      	beq.n	8002b14 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f003 0304 	and.w	r3, r3, #4
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d01b      	beq.n	8002b14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f06f 0204 	mvn.w	r2, #4
 8002ae4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2202      	movs	r2, #2
 8002aea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d003      	beq.n	8002b02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 fa3f 	bl	8002f7e <HAL_TIM_IC_CaptureCallback>
 8002b00:	e005      	b.n	8002b0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 fa31 	bl	8002f6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f000 fa42 	bl	8002f92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	f003 0308 	and.w	r3, r3, #8
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d020      	beq.n	8002b60 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f003 0308 	and.w	r3, r3, #8
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d01b      	beq.n	8002b60 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f06f 0208 	mvn.w	r2, #8
 8002b30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2204      	movs	r2, #4
 8002b36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	69db      	ldr	r3, [r3, #28]
 8002b3e:	f003 0303 	and.w	r3, r3, #3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d003      	beq.n	8002b4e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 fa19 	bl	8002f7e <HAL_TIM_IC_CaptureCallback>
 8002b4c:	e005      	b.n	8002b5a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 fa0b 	bl	8002f6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f000 fa1c 	bl	8002f92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	f003 0310 	and.w	r3, r3, #16
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d020      	beq.n	8002bac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f003 0310 	and.w	r3, r3, #16
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d01b      	beq.n	8002bac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f06f 0210 	mvn.w	r2, #16
 8002b7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2208      	movs	r2, #8
 8002b82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	69db      	ldr	r3, [r3, #28]
 8002b8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d003      	beq.n	8002b9a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 f9f3 	bl	8002f7e <HAL_TIM_IC_CaptureCallback>
 8002b98:	e005      	b.n	8002ba6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 f9e5 	bl	8002f6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f000 f9f6 	bl	8002f92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00c      	beq.n	8002bd0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d007      	beq.n	8002bd0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f06f 0201 	mvn.w	r2, #1
 8002bc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 f9c3 	bl	8002f56 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00c      	beq.n	8002bf4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d007      	beq.n	8002bf4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002bec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 fd60 	bl	80036b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00c      	beq.n	8002c18 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d007      	beq.n	8002c18 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 f9c7 	bl	8002fa6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	f003 0320 	and.w	r3, r3, #32
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00c      	beq.n	8002c3c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f003 0320 	and.w	r3, r3, #32
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d007      	beq.n	8002c3c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f06f 0220 	mvn.w	r2, #32
 8002c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 fd32 	bl	80036a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c3c:	bf00      	nop
 8002c3e:	3710      	adds	r7, #16
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c50:	2300      	movs	r3, #0
 8002c52:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d101      	bne.n	8002c62 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002c5e:	2302      	movs	r3, #2
 8002c60:	e0ae      	b.n	8002dc0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2201      	movs	r2, #1
 8002c66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2b0c      	cmp	r3, #12
 8002c6e:	f200 809f 	bhi.w	8002db0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002c72:	a201      	add	r2, pc, #4	@ (adr r2, 8002c78 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c78:	08002cad 	.word	0x08002cad
 8002c7c:	08002db1 	.word	0x08002db1
 8002c80:	08002db1 	.word	0x08002db1
 8002c84:	08002db1 	.word	0x08002db1
 8002c88:	08002ced 	.word	0x08002ced
 8002c8c:	08002db1 	.word	0x08002db1
 8002c90:	08002db1 	.word	0x08002db1
 8002c94:	08002db1 	.word	0x08002db1
 8002c98:	08002d2f 	.word	0x08002d2f
 8002c9c:	08002db1 	.word	0x08002db1
 8002ca0:	08002db1 	.word	0x08002db1
 8002ca4:	08002db1 	.word	0x08002db1
 8002ca8:	08002d6f 	.word	0x08002d6f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68b9      	ldr	r1, [r7, #8]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f000 fa2e 	bl	8003114 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	699a      	ldr	r2, [r3, #24]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f042 0208 	orr.w	r2, r2, #8
 8002cc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	699a      	ldr	r2, [r3, #24]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f022 0204 	bic.w	r2, r2, #4
 8002cd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6999      	ldr	r1, [r3, #24]
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	691a      	ldr	r2, [r3, #16]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	619a      	str	r2, [r3, #24]
      break;
 8002cea:	e064      	b.n	8002db6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68b9      	ldr	r1, [r7, #8]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f000 fa7e 	bl	80031f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	699a      	ldr	r2, [r3, #24]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	699a      	ldr	r2, [r3, #24]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	6999      	ldr	r1, [r3, #24]
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	021a      	lsls	r2, r3, #8
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	619a      	str	r2, [r3, #24]
      break;
 8002d2c:	e043      	b.n	8002db6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68b9      	ldr	r1, [r7, #8]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f000 fad3 	bl	80032e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	69da      	ldr	r2, [r3, #28]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f042 0208 	orr.w	r2, r2, #8
 8002d48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	69da      	ldr	r2, [r3, #28]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f022 0204 	bic.w	r2, r2, #4
 8002d58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	69d9      	ldr	r1, [r3, #28]
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	691a      	ldr	r2, [r3, #16]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	61da      	str	r2, [r3, #28]
      break;
 8002d6c:	e023      	b.n	8002db6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68b9      	ldr	r1, [r7, #8]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f000 fb27 	bl	80033c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	69da      	ldr	r2, [r3, #28]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	69da      	ldr	r2, [r3, #28]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	69d9      	ldr	r1, [r3, #28]
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	021a      	lsls	r2, r3, #8
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	430a      	orrs	r2, r1
 8002dac:	61da      	str	r2, [r3, #28]
      break;
 8002dae:	e002      	b.n	8002db6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	75fb      	strb	r3, [r7, #23]
      break;
 8002db4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002dbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3718      	adds	r7, #24
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d101      	bne.n	8002de4 <HAL_TIM_ConfigClockSource+0x1c>
 8002de0:	2302      	movs	r3, #2
 8002de2:	e0b4      	b.n	8002f4e <HAL_TIM_ConfigClockSource+0x186>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2202      	movs	r2, #2
 8002df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002e02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002e0a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68ba      	ldr	r2, [r7, #8]
 8002e12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e1c:	d03e      	beq.n	8002e9c <HAL_TIM_ConfigClockSource+0xd4>
 8002e1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e22:	f200 8087 	bhi.w	8002f34 <HAL_TIM_ConfigClockSource+0x16c>
 8002e26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e2a:	f000 8086 	beq.w	8002f3a <HAL_TIM_ConfigClockSource+0x172>
 8002e2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e32:	d87f      	bhi.n	8002f34 <HAL_TIM_ConfigClockSource+0x16c>
 8002e34:	2b70      	cmp	r3, #112	@ 0x70
 8002e36:	d01a      	beq.n	8002e6e <HAL_TIM_ConfigClockSource+0xa6>
 8002e38:	2b70      	cmp	r3, #112	@ 0x70
 8002e3a:	d87b      	bhi.n	8002f34 <HAL_TIM_ConfigClockSource+0x16c>
 8002e3c:	2b60      	cmp	r3, #96	@ 0x60
 8002e3e:	d050      	beq.n	8002ee2 <HAL_TIM_ConfigClockSource+0x11a>
 8002e40:	2b60      	cmp	r3, #96	@ 0x60
 8002e42:	d877      	bhi.n	8002f34 <HAL_TIM_ConfigClockSource+0x16c>
 8002e44:	2b50      	cmp	r3, #80	@ 0x50
 8002e46:	d03c      	beq.n	8002ec2 <HAL_TIM_ConfigClockSource+0xfa>
 8002e48:	2b50      	cmp	r3, #80	@ 0x50
 8002e4a:	d873      	bhi.n	8002f34 <HAL_TIM_ConfigClockSource+0x16c>
 8002e4c:	2b40      	cmp	r3, #64	@ 0x40
 8002e4e:	d058      	beq.n	8002f02 <HAL_TIM_ConfigClockSource+0x13a>
 8002e50:	2b40      	cmp	r3, #64	@ 0x40
 8002e52:	d86f      	bhi.n	8002f34 <HAL_TIM_ConfigClockSource+0x16c>
 8002e54:	2b30      	cmp	r3, #48	@ 0x30
 8002e56:	d064      	beq.n	8002f22 <HAL_TIM_ConfigClockSource+0x15a>
 8002e58:	2b30      	cmp	r3, #48	@ 0x30
 8002e5a:	d86b      	bhi.n	8002f34 <HAL_TIM_ConfigClockSource+0x16c>
 8002e5c:	2b20      	cmp	r3, #32
 8002e5e:	d060      	beq.n	8002f22 <HAL_TIM_ConfigClockSource+0x15a>
 8002e60:	2b20      	cmp	r3, #32
 8002e62:	d867      	bhi.n	8002f34 <HAL_TIM_ConfigClockSource+0x16c>
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d05c      	beq.n	8002f22 <HAL_TIM_ConfigClockSource+0x15a>
 8002e68:	2b10      	cmp	r3, #16
 8002e6a:	d05a      	beq.n	8002f22 <HAL_TIM_ConfigClockSource+0x15a>
 8002e6c:	e062      	b.n	8002f34 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e7e:	f000 fb73 	bl	8003568 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002e90:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	68ba      	ldr	r2, [r7, #8]
 8002e98:	609a      	str	r2, [r3, #8]
      break;
 8002e9a:	e04f      	b.n	8002f3c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002eac:	f000 fb5c 	bl	8003568 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	689a      	ldr	r2, [r3, #8]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002ebe:	609a      	str	r2, [r3, #8]
      break;
 8002ec0:	e03c      	b.n	8002f3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ece:	461a      	mov	r2, r3
 8002ed0:	f000 fad0 	bl	8003474 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2150      	movs	r1, #80	@ 0x50
 8002eda:	4618      	mov	r0, r3
 8002edc:	f000 fb29 	bl	8003532 <TIM_ITRx_SetConfig>
      break;
 8002ee0:	e02c      	b.n	8002f3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002eee:	461a      	mov	r2, r3
 8002ef0:	f000 faef 	bl	80034d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2160      	movs	r1, #96	@ 0x60
 8002efa:	4618      	mov	r0, r3
 8002efc:	f000 fb19 	bl	8003532 <TIM_ITRx_SetConfig>
      break;
 8002f00:	e01c      	b.n	8002f3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f0e:	461a      	mov	r2, r3
 8002f10:	f000 fab0 	bl	8003474 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2140      	movs	r1, #64	@ 0x40
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f000 fb09 	bl	8003532 <TIM_ITRx_SetConfig>
      break;
 8002f20:	e00c      	b.n	8002f3c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	4610      	mov	r0, r2
 8002f2e:	f000 fb00 	bl	8003532 <TIM_ITRx_SetConfig>
      break;
 8002f32:	e003      	b.n	8002f3c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	73fb      	strb	r3, [r7, #15]
      break;
 8002f38:	e000      	b.n	8002f3c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002f3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f56:	b480      	push	{r7}
 8002f58:	b083      	sub	sp, #12
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002f5e:	bf00      	nop
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr

08002f6a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	b083      	sub	sp, #12
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f72:	bf00      	nop
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr

08002f7e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f7e:	b480      	push	{r7}
 8002f80:	b083      	sub	sp, #12
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f86:	bf00      	nop
 8002f88:	370c      	adds	r7, #12
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr

08002f92 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f92:	b480      	push	{r7}
 8002f94:	b083      	sub	sp, #12
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f9a:	bf00      	nop
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr

08002fa6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	b083      	sub	sp, #12
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002fae:	bf00      	nop
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
	...

08002fbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b085      	sub	sp, #20
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a46      	ldr	r2, [pc, #280]	@ (80030e8 <TIM_Base_SetConfig+0x12c>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d013      	beq.n	8002ffc <TIM_Base_SetConfig+0x40>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fda:	d00f      	beq.n	8002ffc <TIM_Base_SetConfig+0x40>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4a43      	ldr	r2, [pc, #268]	@ (80030ec <TIM_Base_SetConfig+0x130>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d00b      	beq.n	8002ffc <TIM_Base_SetConfig+0x40>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4a42      	ldr	r2, [pc, #264]	@ (80030f0 <TIM_Base_SetConfig+0x134>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d007      	beq.n	8002ffc <TIM_Base_SetConfig+0x40>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	4a41      	ldr	r2, [pc, #260]	@ (80030f4 <TIM_Base_SetConfig+0x138>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d003      	beq.n	8002ffc <TIM_Base_SetConfig+0x40>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4a40      	ldr	r2, [pc, #256]	@ (80030f8 <TIM_Base_SetConfig+0x13c>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d108      	bne.n	800300e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003002:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	4313      	orrs	r3, r2
 800300c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a35      	ldr	r2, [pc, #212]	@ (80030e8 <TIM_Base_SetConfig+0x12c>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d02b      	beq.n	800306e <TIM_Base_SetConfig+0xb2>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800301c:	d027      	beq.n	800306e <TIM_Base_SetConfig+0xb2>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a32      	ldr	r2, [pc, #200]	@ (80030ec <TIM_Base_SetConfig+0x130>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d023      	beq.n	800306e <TIM_Base_SetConfig+0xb2>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a31      	ldr	r2, [pc, #196]	@ (80030f0 <TIM_Base_SetConfig+0x134>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d01f      	beq.n	800306e <TIM_Base_SetConfig+0xb2>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a30      	ldr	r2, [pc, #192]	@ (80030f4 <TIM_Base_SetConfig+0x138>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d01b      	beq.n	800306e <TIM_Base_SetConfig+0xb2>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a2f      	ldr	r2, [pc, #188]	@ (80030f8 <TIM_Base_SetConfig+0x13c>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d017      	beq.n	800306e <TIM_Base_SetConfig+0xb2>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a2e      	ldr	r2, [pc, #184]	@ (80030fc <TIM_Base_SetConfig+0x140>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d013      	beq.n	800306e <TIM_Base_SetConfig+0xb2>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a2d      	ldr	r2, [pc, #180]	@ (8003100 <TIM_Base_SetConfig+0x144>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d00f      	beq.n	800306e <TIM_Base_SetConfig+0xb2>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a2c      	ldr	r2, [pc, #176]	@ (8003104 <TIM_Base_SetConfig+0x148>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d00b      	beq.n	800306e <TIM_Base_SetConfig+0xb2>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a2b      	ldr	r2, [pc, #172]	@ (8003108 <TIM_Base_SetConfig+0x14c>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d007      	beq.n	800306e <TIM_Base_SetConfig+0xb2>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a2a      	ldr	r2, [pc, #168]	@ (800310c <TIM_Base_SetConfig+0x150>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d003      	beq.n	800306e <TIM_Base_SetConfig+0xb2>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a29      	ldr	r2, [pc, #164]	@ (8003110 <TIM_Base_SetConfig+0x154>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d108      	bne.n	8003080 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003074:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	68fa      	ldr	r2, [r7, #12]
 800307c:	4313      	orrs	r3, r2
 800307e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	4313      	orrs	r3, r2
 800308c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	68fa      	ldr	r2, [r7, #12]
 8003092:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	689a      	ldr	r2, [r3, #8]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	4a10      	ldr	r2, [pc, #64]	@ (80030e8 <TIM_Base_SetConfig+0x12c>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d003      	beq.n	80030b4 <TIM_Base_SetConfig+0xf8>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4a12      	ldr	r2, [pc, #72]	@ (80030f8 <TIM_Base_SetConfig+0x13c>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d103      	bne.n	80030bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	691a      	ldr	r2, [r3, #16]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d105      	bne.n	80030da <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	f023 0201 	bic.w	r2, r3, #1
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	611a      	str	r2, [r3, #16]
  }
}
 80030da:	bf00      	nop
 80030dc:	3714      	adds	r7, #20
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	40010000 	.word	0x40010000
 80030ec:	40000400 	.word	0x40000400
 80030f0:	40000800 	.word	0x40000800
 80030f4:	40000c00 	.word	0x40000c00
 80030f8:	40010400 	.word	0x40010400
 80030fc:	40014000 	.word	0x40014000
 8003100:	40014400 	.word	0x40014400
 8003104:	40014800 	.word	0x40014800
 8003108:	40001800 	.word	0x40001800
 800310c:	40001c00 	.word	0x40001c00
 8003110:	40002000 	.word	0x40002000

08003114 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003114:	b480      	push	{r7}
 8003116:	b087      	sub	sp, #28
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a1b      	ldr	r3, [r3, #32]
 8003122:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a1b      	ldr	r3, [r3, #32]
 8003128:	f023 0201 	bic.w	r2, r3, #1
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f023 0303 	bic.w	r3, r3, #3
 800314a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	4313      	orrs	r3, r2
 8003154:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	f023 0302 	bic.w	r3, r3, #2
 800315c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	697a      	ldr	r2, [r7, #20]
 8003164:	4313      	orrs	r3, r2
 8003166:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a20      	ldr	r2, [pc, #128]	@ (80031ec <TIM_OC1_SetConfig+0xd8>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d003      	beq.n	8003178 <TIM_OC1_SetConfig+0x64>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a1f      	ldr	r2, [pc, #124]	@ (80031f0 <TIM_OC1_SetConfig+0xdc>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d10c      	bne.n	8003192 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	f023 0308 	bic.w	r3, r3, #8
 800317e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	697a      	ldr	r2, [r7, #20]
 8003186:	4313      	orrs	r3, r2
 8003188:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	f023 0304 	bic.w	r3, r3, #4
 8003190:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a15      	ldr	r2, [pc, #84]	@ (80031ec <TIM_OC1_SetConfig+0xd8>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d003      	beq.n	80031a2 <TIM_OC1_SetConfig+0x8e>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a14      	ldr	r2, [pc, #80]	@ (80031f0 <TIM_OC1_SetConfig+0xdc>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d111      	bne.n	80031c6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80031a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80031b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	693a      	ldr	r2, [r7, #16]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	693a      	ldr	r2, [r7, #16]
 80031ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	685a      	ldr	r2, [r3, #4]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	697a      	ldr	r2, [r7, #20]
 80031de:	621a      	str	r2, [r3, #32]
}
 80031e0:	bf00      	nop
 80031e2:	371c      	adds	r7, #28
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr
 80031ec:	40010000 	.word	0x40010000
 80031f0:	40010400 	.word	0x40010400

080031f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b087      	sub	sp, #28
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a1b      	ldr	r3, [r3, #32]
 8003208:	f023 0210 	bic.w	r2, r3, #16
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	699b      	ldr	r3, [r3, #24]
 800321a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003222:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800322a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	021b      	lsls	r3, r3, #8
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	4313      	orrs	r3, r2
 8003236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	f023 0320 	bic.w	r3, r3, #32
 800323e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	011b      	lsls	r3, r3, #4
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	4313      	orrs	r3, r2
 800324a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	4a22      	ldr	r2, [pc, #136]	@ (80032d8 <TIM_OC2_SetConfig+0xe4>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d003      	beq.n	800325c <TIM_OC2_SetConfig+0x68>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a21      	ldr	r2, [pc, #132]	@ (80032dc <TIM_OC2_SetConfig+0xe8>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d10d      	bne.n	8003278 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003262:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	011b      	lsls	r3, r3, #4
 800326a:	697a      	ldr	r2, [r7, #20]
 800326c:	4313      	orrs	r3, r2
 800326e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003276:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a17      	ldr	r2, [pc, #92]	@ (80032d8 <TIM_OC2_SetConfig+0xe4>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d003      	beq.n	8003288 <TIM_OC2_SetConfig+0x94>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a16      	ldr	r2, [pc, #88]	@ (80032dc <TIM_OC2_SetConfig+0xe8>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d113      	bne.n	80032b0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800328e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003296:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	693a      	ldr	r2, [r7, #16]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	693a      	ldr	r2, [r7, #16]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	693a      	ldr	r2, [r7, #16]
 80032b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685a      	ldr	r2, [r3, #4]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	697a      	ldr	r2, [r7, #20]
 80032c8:	621a      	str	r2, [r3, #32]
}
 80032ca:	bf00      	nop
 80032cc:	371c      	adds	r7, #28
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	40010000 	.word	0x40010000
 80032dc:	40010400 	.word	0x40010400

080032e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b087      	sub	sp, #28
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a1b      	ldr	r3, [r3, #32]
 80032ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a1b      	ldr	r3, [r3, #32]
 80032f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	69db      	ldr	r3, [r3, #28]
 8003306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800330e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f023 0303 	bic.w	r3, r3, #3
 8003316:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68fa      	ldr	r2, [r7, #12]
 800331e:	4313      	orrs	r3, r2
 8003320:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003328:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	021b      	lsls	r3, r3, #8
 8003330:	697a      	ldr	r2, [r7, #20]
 8003332:	4313      	orrs	r3, r2
 8003334:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a21      	ldr	r2, [pc, #132]	@ (80033c0 <TIM_OC3_SetConfig+0xe0>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d003      	beq.n	8003346 <TIM_OC3_SetConfig+0x66>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a20      	ldr	r2, [pc, #128]	@ (80033c4 <TIM_OC3_SetConfig+0xe4>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d10d      	bne.n	8003362 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800334c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	021b      	lsls	r3, r3, #8
 8003354:	697a      	ldr	r2, [r7, #20]
 8003356:	4313      	orrs	r3, r2
 8003358:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003360:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a16      	ldr	r2, [pc, #88]	@ (80033c0 <TIM_OC3_SetConfig+0xe0>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d003      	beq.n	8003372 <TIM_OC3_SetConfig+0x92>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a15      	ldr	r2, [pc, #84]	@ (80033c4 <TIM_OC3_SetConfig+0xe4>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d113      	bne.n	800339a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003378:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003380:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	011b      	lsls	r3, r3, #4
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	4313      	orrs	r3, r2
 800338c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	011b      	lsls	r3, r3, #4
 8003394:	693a      	ldr	r2, [r7, #16]
 8003396:	4313      	orrs	r3, r2
 8003398:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685a      	ldr	r2, [r3, #4]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	697a      	ldr	r2, [r7, #20]
 80033b2:	621a      	str	r2, [r3, #32]
}
 80033b4:	bf00      	nop
 80033b6:	371c      	adds	r7, #28
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr
 80033c0:	40010000 	.word	0x40010000
 80033c4:	40010400 	.word	0x40010400

080033c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b087      	sub	sp, #28
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a1b      	ldr	r3, [r3, #32]
 80033d6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a1b      	ldr	r3, [r3, #32]
 80033dc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	69db      	ldr	r3, [r3, #28]
 80033ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80033f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	021b      	lsls	r3, r3, #8
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	4313      	orrs	r3, r2
 800340a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003412:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	031b      	lsls	r3, r3, #12
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	4313      	orrs	r3, r2
 800341e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a12      	ldr	r2, [pc, #72]	@ (800346c <TIM_OC4_SetConfig+0xa4>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d003      	beq.n	8003430 <TIM_OC4_SetConfig+0x68>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4a11      	ldr	r2, [pc, #68]	@ (8003470 <TIM_OC4_SetConfig+0xa8>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d109      	bne.n	8003444 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003436:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	695b      	ldr	r3, [r3, #20]
 800343c:	019b      	lsls	r3, r3, #6
 800343e:	697a      	ldr	r2, [r7, #20]
 8003440:	4313      	orrs	r3, r2
 8003442:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	697a      	ldr	r2, [r7, #20]
 8003448:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685a      	ldr	r2, [r3, #4]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	693a      	ldr	r2, [r7, #16]
 800345c:	621a      	str	r2, [r3, #32]
}
 800345e:	bf00      	nop
 8003460:	371c      	adds	r7, #28
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	40010000 	.word	0x40010000
 8003470:	40010400 	.word	0x40010400

08003474 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003474:	b480      	push	{r7}
 8003476:	b087      	sub	sp, #28
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6a1b      	ldr	r3, [r3, #32]
 8003484:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	f023 0201 	bic.w	r2, r3, #1
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800349e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	011b      	lsls	r3, r3, #4
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	f023 030a 	bic.w	r3, r3, #10
 80034b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	697a      	ldr	r2, [r7, #20]
 80034c4:	621a      	str	r2, [r3, #32]
}
 80034c6:	bf00      	nop
 80034c8:	371c      	adds	r7, #28
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr

080034d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034d2:	b480      	push	{r7}
 80034d4:	b087      	sub	sp, #28
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	60f8      	str	r0, [r7, #12]
 80034da:	60b9      	str	r1, [r7, #8]
 80034dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6a1b      	ldr	r3, [r3, #32]
 80034e8:	f023 0210 	bic.w	r2, r3, #16
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	699b      	ldr	r3, [r3, #24]
 80034f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80034fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	031b      	lsls	r3, r3, #12
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	4313      	orrs	r3, r2
 8003506:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800350e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	011b      	lsls	r3, r3, #4
 8003514:	697a      	ldr	r2, [r7, #20]
 8003516:	4313      	orrs	r3, r2
 8003518:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	693a      	ldr	r2, [r7, #16]
 800351e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	697a      	ldr	r2, [r7, #20]
 8003524:	621a      	str	r2, [r3, #32]
}
 8003526:	bf00      	nop
 8003528:	371c      	adds	r7, #28
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr

08003532 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003532:	b480      	push	{r7}
 8003534:	b085      	sub	sp, #20
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
 800353a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003548:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800354a:	683a      	ldr	r2, [r7, #0]
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	4313      	orrs	r3, r2
 8003550:	f043 0307 	orr.w	r3, r3, #7
 8003554:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	609a      	str	r2, [r3, #8]
}
 800355c:	bf00      	nop
 800355e:	3714      	adds	r7, #20
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003568:	b480      	push	{r7}
 800356a:	b087      	sub	sp, #28
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
 8003574:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003582:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	021a      	lsls	r2, r3, #8
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	431a      	orrs	r2, r3
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	4313      	orrs	r3, r2
 8003590:	697a      	ldr	r2, [r7, #20]
 8003592:	4313      	orrs	r3, r2
 8003594:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	697a      	ldr	r2, [r7, #20]
 800359a:	609a      	str	r2, [r3, #8]
}
 800359c:	bf00      	nop
 800359e:	371c      	adds	r7, #28
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b085      	sub	sp, #20
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d101      	bne.n	80035c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035bc:	2302      	movs	r3, #2
 80035be:	e05a      	b.n	8003676 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2202      	movs	r2, #2
 80035cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68fa      	ldr	r2, [r7, #12]
 80035f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a21      	ldr	r2, [pc, #132]	@ (8003684 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d022      	beq.n	800364a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800360c:	d01d      	beq.n	800364a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a1d      	ldr	r2, [pc, #116]	@ (8003688 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d018      	beq.n	800364a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a1b      	ldr	r2, [pc, #108]	@ (800368c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d013      	beq.n	800364a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a1a      	ldr	r2, [pc, #104]	@ (8003690 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d00e      	beq.n	800364a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a18      	ldr	r2, [pc, #96]	@ (8003694 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d009      	beq.n	800364a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a17      	ldr	r2, [pc, #92]	@ (8003698 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d004      	beq.n	800364a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a15      	ldr	r2, [pc, #84]	@ (800369c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d10c      	bne.n	8003664 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003650:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	68ba      	ldr	r2, [r7, #8]
 8003658:	4313      	orrs	r3, r2
 800365a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68ba      	ldr	r2, [r7, #8]
 8003662:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3714      	adds	r7, #20
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	40010000 	.word	0x40010000
 8003688:	40000400 	.word	0x40000400
 800368c:	40000800 	.word	0x40000800
 8003690:	40000c00 	.word	0x40000c00
 8003694:	40010400 	.word	0x40010400
 8003698:	40014000 	.word	0x40014000
 800369c:	40001800 	.word	0x40001800

080036a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036a8:	bf00      	nop
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036bc:	bf00      	nop
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e042      	b.n	8003760 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d106      	bne.n	80036f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f7fd fb2c 	bl	8000d4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2224      	movs	r2, #36	@ 0x24
 80036f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	68da      	ldr	r2, [r3, #12]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800370a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f000 f973 	bl	80039f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	691a      	ldr	r2, [r3, #16]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003720:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	695a      	ldr	r2, [r3, #20]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003730:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68da      	ldr	r2, [r3, #12]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003740:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2220      	movs	r2, #32
 800374c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2220      	movs	r2, #32
 8003754:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	3708      	adds	r7, #8
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b08a      	sub	sp, #40	@ 0x28
 800376c:	af02      	add	r7, sp, #8
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	603b      	str	r3, [r7, #0]
 8003774:	4613      	mov	r3, r2
 8003776:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003778:	2300      	movs	r3, #0
 800377a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003782:	b2db      	uxtb	r3, r3
 8003784:	2b20      	cmp	r3, #32
 8003786:	d175      	bne.n	8003874 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d002      	beq.n	8003794 <HAL_UART_Transmit+0x2c>
 800378e:	88fb      	ldrh	r3, [r7, #6]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d101      	bne.n	8003798 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e06e      	b.n	8003876 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2221      	movs	r2, #33	@ 0x21
 80037a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037a6:	f7fd fc85 	bl	80010b4 <HAL_GetTick>
 80037aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	88fa      	ldrh	r2, [r7, #6]
 80037b0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	88fa      	ldrh	r2, [r7, #6]
 80037b6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037c0:	d108      	bne.n	80037d4 <HAL_UART_Transmit+0x6c>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d104      	bne.n	80037d4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80037ca:	2300      	movs	r3, #0
 80037cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	61bb      	str	r3, [r7, #24]
 80037d2:	e003      	b.n	80037dc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037d8:	2300      	movs	r3, #0
 80037da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80037dc:	e02e      	b.n	800383c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	9300      	str	r3, [sp, #0]
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	2200      	movs	r2, #0
 80037e6:	2180      	movs	r1, #128	@ 0x80
 80037e8:	68f8      	ldr	r0, [r7, #12]
 80037ea:	f000 f848 	bl	800387e <UART_WaitOnFlagUntilTimeout>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d005      	beq.n	8003800 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2220      	movs	r2, #32
 80037f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e03a      	b.n	8003876 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d10b      	bne.n	800381e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	881b      	ldrh	r3, [r3, #0]
 800380a:	461a      	mov	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003814:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	3302      	adds	r3, #2
 800381a:	61bb      	str	r3, [r7, #24]
 800381c:	e007      	b.n	800382e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	781a      	ldrb	r2, [r3, #0]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	3301      	adds	r3, #1
 800382c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003832:	b29b      	uxth	r3, r3
 8003834:	3b01      	subs	r3, #1
 8003836:	b29a      	uxth	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003840:	b29b      	uxth	r3, r3
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1cb      	bne.n	80037de <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	9300      	str	r3, [sp, #0]
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	2200      	movs	r2, #0
 800384e:	2140      	movs	r1, #64	@ 0x40
 8003850:	68f8      	ldr	r0, [r7, #12]
 8003852:	f000 f814 	bl	800387e <UART_WaitOnFlagUntilTimeout>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d005      	beq.n	8003868 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2220      	movs	r2, #32
 8003860:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	e006      	b.n	8003876 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2220      	movs	r2, #32
 800386c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003870:	2300      	movs	r3, #0
 8003872:	e000      	b.n	8003876 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003874:	2302      	movs	r3, #2
  }
}
 8003876:	4618      	mov	r0, r3
 8003878:	3720      	adds	r7, #32
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}

0800387e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800387e:	b580      	push	{r7, lr}
 8003880:	b086      	sub	sp, #24
 8003882:	af00      	add	r7, sp, #0
 8003884:	60f8      	str	r0, [r7, #12]
 8003886:	60b9      	str	r1, [r7, #8]
 8003888:	603b      	str	r3, [r7, #0]
 800388a:	4613      	mov	r3, r2
 800388c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800388e:	e03b      	b.n	8003908 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003890:	6a3b      	ldr	r3, [r7, #32]
 8003892:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003896:	d037      	beq.n	8003908 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003898:	f7fd fc0c 	bl	80010b4 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	6a3a      	ldr	r2, [r7, #32]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d302      	bcc.n	80038ae <UART_WaitOnFlagUntilTimeout+0x30>
 80038a8:	6a3b      	ldr	r3, [r7, #32]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e03a      	b.n	8003928 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	f003 0304 	and.w	r3, r3, #4
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d023      	beq.n	8003908 <UART_WaitOnFlagUntilTimeout+0x8a>
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	2b80      	cmp	r3, #128	@ 0x80
 80038c4:	d020      	beq.n	8003908 <UART_WaitOnFlagUntilTimeout+0x8a>
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	2b40      	cmp	r3, #64	@ 0x40
 80038ca:	d01d      	beq.n	8003908 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0308 	and.w	r3, r3, #8
 80038d6:	2b08      	cmp	r3, #8
 80038d8:	d116      	bne.n	8003908 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80038da:	2300      	movs	r3, #0
 80038dc:	617b      	str	r3, [r7, #20]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	617b      	str	r3, [r7, #20]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	617b      	str	r3, [r7, #20]
 80038ee:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80038f0:	68f8      	ldr	r0, [r7, #12]
 80038f2:	f000 f81d 	bl	8003930 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2208      	movs	r2, #8
 80038fa:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e00f      	b.n	8003928 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	4013      	ands	r3, r2
 8003912:	68ba      	ldr	r2, [r7, #8]
 8003914:	429a      	cmp	r2, r3
 8003916:	bf0c      	ite	eq
 8003918:	2301      	moveq	r3, #1
 800391a:	2300      	movne	r3, #0
 800391c:	b2db      	uxtb	r3, r3
 800391e:	461a      	mov	r2, r3
 8003920:	79fb      	ldrb	r3, [r7, #7]
 8003922:	429a      	cmp	r2, r3
 8003924:	d0b4      	beq.n	8003890 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003926:	2300      	movs	r3, #0
}
 8003928:	4618      	mov	r0, r3
 800392a:	3718      	adds	r7, #24
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003930:	b480      	push	{r7}
 8003932:	b095      	sub	sp, #84	@ 0x54
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	330c      	adds	r3, #12
 800393e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003940:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003942:	e853 3f00 	ldrex	r3, [r3]
 8003946:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800394a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800394e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	330c      	adds	r3, #12
 8003956:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003958:	643a      	str	r2, [r7, #64]	@ 0x40
 800395a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800395c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800395e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003960:	e841 2300 	strex	r3, r2, [r1]
 8003964:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1e5      	bne.n	8003938 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	3314      	adds	r3, #20
 8003972:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003974:	6a3b      	ldr	r3, [r7, #32]
 8003976:	e853 3f00 	ldrex	r3, [r3]
 800397a:	61fb      	str	r3, [r7, #28]
   return(result);
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	f023 0301 	bic.w	r3, r3, #1
 8003982:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	3314      	adds	r3, #20
 800398a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800398c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800398e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003990:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003992:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003994:	e841 2300 	strex	r3, r2, [r1]
 8003998:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800399a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800399c:	2b00      	cmp	r3, #0
 800399e:	d1e5      	bne.n	800396c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d119      	bne.n	80039dc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	330c      	adds	r3, #12
 80039ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	e853 3f00 	ldrex	r3, [r3]
 80039b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	f023 0310 	bic.w	r3, r3, #16
 80039be:	647b      	str	r3, [r7, #68]	@ 0x44
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	330c      	adds	r3, #12
 80039c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80039c8:	61ba      	str	r2, [r7, #24]
 80039ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039cc:	6979      	ldr	r1, [r7, #20]
 80039ce:	69ba      	ldr	r2, [r7, #24]
 80039d0:	e841 2300 	strex	r3, r2, [r1]
 80039d4:	613b      	str	r3, [r7, #16]
   return(result);
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d1e5      	bne.n	80039a8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2220      	movs	r2, #32
 80039e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80039ea:	bf00      	nop
 80039ec:	3754      	adds	r7, #84	@ 0x54
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
	...

080039f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039fc:	b0c0      	sub	sp, #256	@ 0x100
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	691b      	ldr	r3, [r3, #16]
 8003a0c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a14:	68d9      	ldr	r1, [r3, #12]
 8003a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	ea40 0301 	orr.w	r3, r0, r1
 8003a20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a26:	689a      	ldr	r2, [r3, #8]
 8003a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a34:	695b      	ldr	r3, [r3, #20]
 8003a36:	431a      	orrs	r2, r3
 8003a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a3c:	69db      	ldr	r3, [r3, #28]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003a50:	f021 010c 	bic.w	r1, r1, #12
 8003a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003a5e:	430b      	orrs	r3, r1
 8003a60:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003a6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a72:	6999      	ldr	r1, [r3, #24]
 8003a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	ea40 0301 	orr.w	r3, r0, r1
 8003a7e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	4b8f      	ldr	r3, [pc, #572]	@ (8003cc4 <UART_SetConfig+0x2cc>)
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d005      	beq.n	8003a98 <UART_SetConfig+0xa0>
 8003a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	4b8d      	ldr	r3, [pc, #564]	@ (8003cc8 <UART_SetConfig+0x2d0>)
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d104      	bne.n	8003aa2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a98:	f7fe ff28 	bl	80028ec <HAL_RCC_GetPCLK2Freq>
 8003a9c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003aa0:	e003      	b.n	8003aaa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003aa2:	f7fe ff0f 	bl	80028c4 <HAL_RCC_GetPCLK1Freq>
 8003aa6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aae:	69db      	ldr	r3, [r3, #28]
 8003ab0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ab4:	f040 810c 	bne.w	8003cd0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ab8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003abc:	2200      	movs	r2, #0
 8003abe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003ac2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003ac6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003aca:	4622      	mov	r2, r4
 8003acc:	462b      	mov	r3, r5
 8003ace:	1891      	adds	r1, r2, r2
 8003ad0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003ad2:	415b      	adcs	r3, r3
 8003ad4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003ad6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003ada:	4621      	mov	r1, r4
 8003adc:	eb12 0801 	adds.w	r8, r2, r1
 8003ae0:	4629      	mov	r1, r5
 8003ae2:	eb43 0901 	adc.w	r9, r3, r1
 8003ae6:	f04f 0200 	mov.w	r2, #0
 8003aea:	f04f 0300 	mov.w	r3, #0
 8003aee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003af2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003af6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003afa:	4690      	mov	r8, r2
 8003afc:	4699      	mov	r9, r3
 8003afe:	4623      	mov	r3, r4
 8003b00:	eb18 0303 	adds.w	r3, r8, r3
 8003b04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003b08:	462b      	mov	r3, r5
 8003b0a:	eb49 0303 	adc.w	r3, r9, r3
 8003b0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003b1e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003b22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003b26:	460b      	mov	r3, r1
 8003b28:	18db      	adds	r3, r3, r3
 8003b2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	eb42 0303 	adc.w	r3, r2, r3
 8003b32:	657b      	str	r3, [r7, #84]	@ 0x54
 8003b34:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003b38:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003b3c:	f7fc fbb0 	bl	80002a0 <__aeabi_uldivmod>
 8003b40:	4602      	mov	r2, r0
 8003b42:	460b      	mov	r3, r1
 8003b44:	4b61      	ldr	r3, [pc, #388]	@ (8003ccc <UART_SetConfig+0x2d4>)
 8003b46:	fba3 2302 	umull	r2, r3, r3, r2
 8003b4a:	095b      	lsrs	r3, r3, #5
 8003b4c:	011c      	lsls	r4, r3, #4
 8003b4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b52:	2200      	movs	r2, #0
 8003b54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003b58:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003b5c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003b60:	4642      	mov	r2, r8
 8003b62:	464b      	mov	r3, r9
 8003b64:	1891      	adds	r1, r2, r2
 8003b66:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003b68:	415b      	adcs	r3, r3
 8003b6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b6c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003b70:	4641      	mov	r1, r8
 8003b72:	eb12 0a01 	adds.w	sl, r2, r1
 8003b76:	4649      	mov	r1, r9
 8003b78:	eb43 0b01 	adc.w	fp, r3, r1
 8003b7c:	f04f 0200 	mov.w	r2, #0
 8003b80:	f04f 0300 	mov.w	r3, #0
 8003b84:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b88:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b90:	4692      	mov	sl, r2
 8003b92:	469b      	mov	fp, r3
 8003b94:	4643      	mov	r3, r8
 8003b96:	eb1a 0303 	adds.w	r3, sl, r3
 8003b9a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b9e:	464b      	mov	r3, r9
 8003ba0:	eb4b 0303 	adc.w	r3, fp, r3
 8003ba4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003bb4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003bb8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	18db      	adds	r3, r3, r3
 8003bc0:	643b      	str	r3, [r7, #64]	@ 0x40
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	eb42 0303 	adc.w	r3, r2, r3
 8003bc8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003bce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003bd2:	f7fc fb65 	bl	80002a0 <__aeabi_uldivmod>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	460b      	mov	r3, r1
 8003bda:	4611      	mov	r1, r2
 8003bdc:	4b3b      	ldr	r3, [pc, #236]	@ (8003ccc <UART_SetConfig+0x2d4>)
 8003bde:	fba3 2301 	umull	r2, r3, r3, r1
 8003be2:	095b      	lsrs	r3, r3, #5
 8003be4:	2264      	movs	r2, #100	@ 0x64
 8003be6:	fb02 f303 	mul.w	r3, r2, r3
 8003bea:	1acb      	subs	r3, r1, r3
 8003bec:	00db      	lsls	r3, r3, #3
 8003bee:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003bf2:	4b36      	ldr	r3, [pc, #216]	@ (8003ccc <UART_SetConfig+0x2d4>)
 8003bf4:	fba3 2302 	umull	r2, r3, r3, r2
 8003bf8:	095b      	lsrs	r3, r3, #5
 8003bfa:	005b      	lsls	r3, r3, #1
 8003bfc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003c00:	441c      	add	r4, r3
 8003c02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c06:	2200      	movs	r2, #0
 8003c08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c0c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003c10:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003c14:	4642      	mov	r2, r8
 8003c16:	464b      	mov	r3, r9
 8003c18:	1891      	adds	r1, r2, r2
 8003c1a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003c1c:	415b      	adcs	r3, r3
 8003c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003c24:	4641      	mov	r1, r8
 8003c26:	1851      	adds	r1, r2, r1
 8003c28:	6339      	str	r1, [r7, #48]	@ 0x30
 8003c2a:	4649      	mov	r1, r9
 8003c2c:	414b      	adcs	r3, r1
 8003c2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c30:	f04f 0200 	mov.w	r2, #0
 8003c34:	f04f 0300 	mov.w	r3, #0
 8003c38:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003c3c:	4659      	mov	r1, fp
 8003c3e:	00cb      	lsls	r3, r1, #3
 8003c40:	4651      	mov	r1, sl
 8003c42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c46:	4651      	mov	r1, sl
 8003c48:	00ca      	lsls	r2, r1, #3
 8003c4a:	4610      	mov	r0, r2
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	4603      	mov	r3, r0
 8003c50:	4642      	mov	r2, r8
 8003c52:	189b      	adds	r3, r3, r2
 8003c54:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003c58:	464b      	mov	r3, r9
 8003c5a:	460a      	mov	r2, r1
 8003c5c:	eb42 0303 	adc.w	r3, r2, r3
 8003c60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003c70:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003c74:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003c78:	460b      	mov	r3, r1
 8003c7a:	18db      	adds	r3, r3, r3
 8003c7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c7e:	4613      	mov	r3, r2
 8003c80:	eb42 0303 	adc.w	r3, r2, r3
 8003c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003c8a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003c8e:	f7fc fb07 	bl	80002a0 <__aeabi_uldivmod>
 8003c92:	4602      	mov	r2, r0
 8003c94:	460b      	mov	r3, r1
 8003c96:	4b0d      	ldr	r3, [pc, #52]	@ (8003ccc <UART_SetConfig+0x2d4>)
 8003c98:	fba3 1302 	umull	r1, r3, r3, r2
 8003c9c:	095b      	lsrs	r3, r3, #5
 8003c9e:	2164      	movs	r1, #100	@ 0x64
 8003ca0:	fb01 f303 	mul.w	r3, r1, r3
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	00db      	lsls	r3, r3, #3
 8003ca8:	3332      	adds	r3, #50	@ 0x32
 8003caa:	4a08      	ldr	r2, [pc, #32]	@ (8003ccc <UART_SetConfig+0x2d4>)
 8003cac:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb0:	095b      	lsrs	r3, r3, #5
 8003cb2:	f003 0207 	and.w	r2, r3, #7
 8003cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4422      	add	r2, r4
 8003cbe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003cc0:	e106      	b.n	8003ed0 <UART_SetConfig+0x4d8>
 8003cc2:	bf00      	nop
 8003cc4:	40011000 	.word	0x40011000
 8003cc8:	40011400 	.word	0x40011400
 8003ccc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003cd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003cda:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003cde:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003ce2:	4642      	mov	r2, r8
 8003ce4:	464b      	mov	r3, r9
 8003ce6:	1891      	adds	r1, r2, r2
 8003ce8:	6239      	str	r1, [r7, #32]
 8003cea:	415b      	adcs	r3, r3
 8003cec:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003cf2:	4641      	mov	r1, r8
 8003cf4:	1854      	adds	r4, r2, r1
 8003cf6:	4649      	mov	r1, r9
 8003cf8:	eb43 0501 	adc.w	r5, r3, r1
 8003cfc:	f04f 0200 	mov.w	r2, #0
 8003d00:	f04f 0300 	mov.w	r3, #0
 8003d04:	00eb      	lsls	r3, r5, #3
 8003d06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d0a:	00e2      	lsls	r2, r4, #3
 8003d0c:	4614      	mov	r4, r2
 8003d0e:	461d      	mov	r5, r3
 8003d10:	4643      	mov	r3, r8
 8003d12:	18e3      	adds	r3, r4, r3
 8003d14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003d18:	464b      	mov	r3, r9
 8003d1a:	eb45 0303 	adc.w	r3, r5, r3
 8003d1e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003d22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003d2e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003d32:	f04f 0200 	mov.w	r2, #0
 8003d36:	f04f 0300 	mov.w	r3, #0
 8003d3a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003d3e:	4629      	mov	r1, r5
 8003d40:	008b      	lsls	r3, r1, #2
 8003d42:	4621      	mov	r1, r4
 8003d44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d48:	4621      	mov	r1, r4
 8003d4a:	008a      	lsls	r2, r1, #2
 8003d4c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003d50:	f7fc faa6 	bl	80002a0 <__aeabi_uldivmod>
 8003d54:	4602      	mov	r2, r0
 8003d56:	460b      	mov	r3, r1
 8003d58:	4b60      	ldr	r3, [pc, #384]	@ (8003edc <UART_SetConfig+0x4e4>)
 8003d5a:	fba3 2302 	umull	r2, r3, r3, r2
 8003d5e:	095b      	lsrs	r3, r3, #5
 8003d60:	011c      	lsls	r4, r3, #4
 8003d62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d66:	2200      	movs	r2, #0
 8003d68:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003d6c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003d70:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003d74:	4642      	mov	r2, r8
 8003d76:	464b      	mov	r3, r9
 8003d78:	1891      	adds	r1, r2, r2
 8003d7a:	61b9      	str	r1, [r7, #24]
 8003d7c:	415b      	adcs	r3, r3
 8003d7e:	61fb      	str	r3, [r7, #28]
 8003d80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d84:	4641      	mov	r1, r8
 8003d86:	1851      	adds	r1, r2, r1
 8003d88:	6139      	str	r1, [r7, #16]
 8003d8a:	4649      	mov	r1, r9
 8003d8c:	414b      	adcs	r3, r1
 8003d8e:	617b      	str	r3, [r7, #20]
 8003d90:	f04f 0200 	mov.w	r2, #0
 8003d94:	f04f 0300 	mov.w	r3, #0
 8003d98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d9c:	4659      	mov	r1, fp
 8003d9e:	00cb      	lsls	r3, r1, #3
 8003da0:	4651      	mov	r1, sl
 8003da2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003da6:	4651      	mov	r1, sl
 8003da8:	00ca      	lsls	r2, r1, #3
 8003daa:	4610      	mov	r0, r2
 8003dac:	4619      	mov	r1, r3
 8003dae:	4603      	mov	r3, r0
 8003db0:	4642      	mov	r2, r8
 8003db2:	189b      	adds	r3, r3, r2
 8003db4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003db8:	464b      	mov	r3, r9
 8003dba:	460a      	mov	r2, r1
 8003dbc:	eb42 0303 	adc.w	r3, r2, r3
 8003dc0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003dce:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003dd0:	f04f 0200 	mov.w	r2, #0
 8003dd4:	f04f 0300 	mov.w	r3, #0
 8003dd8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003ddc:	4649      	mov	r1, r9
 8003dde:	008b      	lsls	r3, r1, #2
 8003de0:	4641      	mov	r1, r8
 8003de2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003de6:	4641      	mov	r1, r8
 8003de8:	008a      	lsls	r2, r1, #2
 8003dea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003dee:	f7fc fa57 	bl	80002a0 <__aeabi_uldivmod>
 8003df2:	4602      	mov	r2, r0
 8003df4:	460b      	mov	r3, r1
 8003df6:	4611      	mov	r1, r2
 8003df8:	4b38      	ldr	r3, [pc, #224]	@ (8003edc <UART_SetConfig+0x4e4>)
 8003dfa:	fba3 2301 	umull	r2, r3, r3, r1
 8003dfe:	095b      	lsrs	r3, r3, #5
 8003e00:	2264      	movs	r2, #100	@ 0x64
 8003e02:	fb02 f303 	mul.w	r3, r2, r3
 8003e06:	1acb      	subs	r3, r1, r3
 8003e08:	011b      	lsls	r3, r3, #4
 8003e0a:	3332      	adds	r3, #50	@ 0x32
 8003e0c:	4a33      	ldr	r2, [pc, #204]	@ (8003edc <UART_SetConfig+0x4e4>)
 8003e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e12:	095b      	lsrs	r3, r3, #5
 8003e14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e18:	441c      	add	r4, r3
 8003e1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e1e:	2200      	movs	r2, #0
 8003e20:	673b      	str	r3, [r7, #112]	@ 0x70
 8003e22:	677a      	str	r2, [r7, #116]	@ 0x74
 8003e24:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003e28:	4642      	mov	r2, r8
 8003e2a:	464b      	mov	r3, r9
 8003e2c:	1891      	adds	r1, r2, r2
 8003e2e:	60b9      	str	r1, [r7, #8]
 8003e30:	415b      	adcs	r3, r3
 8003e32:	60fb      	str	r3, [r7, #12]
 8003e34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e38:	4641      	mov	r1, r8
 8003e3a:	1851      	adds	r1, r2, r1
 8003e3c:	6039      	str	r1, [r7, #0]
 8003e3e:	4649      	mov	r1, r9
 8003e40:	414b      	adcs	r3, r1
 8003e42:	607b      	str	r3, [r7, #4]
 8003e44:	f04f 0200 	mov.w	r2, #0
 8003e48:	f04f 0300 	mov.w	r3, #0
 8003e4c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003e50:	4659      	mov	r1, fp
 8003e52:	00cb      	lsls	r3, r1, #3
 8003e54:	4651      	mov	r1, sl
 8003e56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e5a:	4651      	mov	r1, sl
 8003e5c:	00ca      	lsls	r2, r1, #3
 8003e5e:	4610      	mov	r0, r2
 8003e60:	4619      	mov	r1, r3
 8003e62:	4603      	mov	r3, r0
 8003e64:	4642      	mov	r2, r8
 8003e66:	189b      	adds	r3, r3, r2
 8003e68:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e6a:	464b      	mov	r3, r9
 8003e6c:	460a      	mov	r2, r1
 8003e6e:	eb42 0303 	adc.w	r3, r2, r3
 8003e72:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e7e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003e80:	f04f 0200 	mov.w	r2, #0
 8003e84:	f04f 0300 	mov.w	r3, #0
 8003e88:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003e8c:	4649      	mov	r1, r9
 8003e8e:	008b      	lsls	r3, r1, #2
 8003e90:	4641      	mov	r1, r8
 8003e92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e96:	4641      	mov	r1, r8
 8003e98:	008a      	lsls	r2, r1, #2
 8003e9a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003e9e:	f7fc f9ff 	bl	80002a0 <__aeabi_uldivmod>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8003edc <UART_SetConfig+0x4e4>)
 8003ea8:	fba3 1302 	umull	r1, r3, r3, r2
 8003eac:	095b      	lsrs	r3, r3, #5
 8003eae:	2164      	movs	r1, #100	@ 0x64
 8003eb0:	fb01 f303 	mul.w	r3, r1, r3
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	011b      	lsls	r3, r3, #4
 8003eb8:	3332      	adds	r3, #50	@ 0x32
 8003eba:	4a08      	ldr	r2, [pc, #32]	@ (8003edc <UART_SetConfig+0x4e4>)
 8003ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ec0:	095b      	lsrs	r3, r3, #5
 8003ec2:	f003 020f 	and.w	r2, r3, #15
 8003ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4422      	add	r2, r4
 8003ece:	609a      	str	r2, [r3, #8]
}
 8003ed0:	bf00      	nop
 8003ed2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003edc:	51eb851f 	.word	0x51eb851f

08003ee0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ee0:	b084      	sub	sp, #16
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b084      	sub	sp, #16
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
 8003eea:	f107 001c 	add.w	r0, r7, #28
 8003eee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003ef2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d123      	bne.n	8003f42 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003efe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003f0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003f22:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d105      	bne.n	8003f36 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 faa0 	bl	800447c <USB_CoreReset>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	73fb      	strb	r3, [r7, #15]
 8003f40:	e01b      	b.n	8003f7a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 fa94 	bl	800447c <USB_CoreReset>
 8003f54:	4603      	mov	r3, r0
 8003f56:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003f58:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d106      	bne.n	8003f6e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f64:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	639a      	str	r2, [r3, #56]	@ 0x38
 8003f6c:	e005      	b.n	8003f7a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f72:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003f7a:	7fbb      	ldrb	r3, [r7, #30]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d10b      	bne.n	8003f98 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f043 0206 	orr.w	r2, r3, #6
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	f043 0220 	orr.w	r2, r3, #32
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003fa4:	b004      	add	sp, #16
 8003fa6:	4770      	bx	lr

08003fa8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f023 0201 	bic.w	r2, r3, #1
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	370c      	adds	r7, #12
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr

08003fca <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	b084      	sub	sp, #16
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003fe6:	78fb      	ldrb	r3, [r7, #3]
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d115      	bne.n	8004018 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003ff8:	200a      	movs	r0, #10
 8003ffa:	f7fd f867 	bl	80010cc <HAL_Delay>
      ms += 10U;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	330a      	adds	r3, #10
 8004002:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f000 fa2b 	bl	8004460 <USB_GetMode>
 800400a:	4603      	mov	r3, r0
 800400c:	2b01      	cmp	r3, #1
 800400e:	d01e      	beq.n	800404e <USB_SetCurrentMode+0x84>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2bc7      	cmp	r3, #199	@ 0xc7
 8004014:	d9f0      	bls.n	8003ff8 <USB_SetCurrentMode+0x2e>
 8004016:	e01a      	b.n	800404e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004018:	78fb      	ldrb	r3, [r7, #3]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d115      	bne.n	800404a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800402a:	200a      	movs	r0, #10
 800402c:	f7fd f84e 	bl	80010cc <HAL_Delay>
      ms += 10U;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	330a      	adds	r3, #10
 8004034:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 fa12 	bl	8004460 <USB_GetMode>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d005      	beq.n	800404e <USB_SetCurrentMode+0x84>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2bc7      	cmp	r3, #199	@ 0xc7
 8004046:	d9f0      	bls.n	800402a <USB_SetCurrentMode+0x60>
 8004048:	e001      	b.n	800404e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e005      	b.n	800405a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2bc8      	cmp	r3, #200	@ 0xc8
 8004052:	d101      	bne.n	8004058 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e000      	b.n	800405a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3710      	adds	r7, #16
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
	...

08004064 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004064:	b084      	sub	sp, #16
 8004066:	b580      	push	{r7, lr}
 8004068:	b086      	sub	sp, #24
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
 800406e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004072:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004076:	2300      	movs	r3, #0
 8004078:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800407e:	2300      	movs	r3, #0
 8004080:	613b      	str	r3, [r7, #16]
 8004082:	e009      	b.n	8004098 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	3340      	adds	r3, #64	@ 0x40
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	4413      	add	r3, r2
 800408e:	2200      	movs	r2, #0
 8004090:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	3301      	adds	r3, #1
 8004096:	613b      	str	r3, [r7, #16]
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	2b0e      	cmp	r3, #14
 800409c:	d9f2      	bls.n	8004084 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800409e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d11c      	bne.n	80040e0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80040b4:	f043 0302 	orr.w	r3, r3, #2
 80040b8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040be:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040ca:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040d6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	639a      	str	r2, [r3, #56]	@ 0x38
 80040de:	e00b      	b.n	80040f8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040e4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040f0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80040fe:	461a      	mov	r2, r3
 8004100:	2300      	movs	r3, #0
 8004102:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004104:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004108:	2b01      	cmp	r3, #1
 800410a:	d10d      	bne.n	8004128 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800410c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004110:	2b00      	cmp	r3, #0
 8004112:	d104      	bne.n	800411e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004114:	2100      	movs	r1, #0
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 f968 	bl	80043ec <USB_SetDevSpeed>
 800411c:	e008      	b.n	8004130 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800411e:	2101      	movs	r1, #1
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f000 f963 	bl	80043ec <USB_SetDevSpeed>
 8004126:	e003      	b.n	8004130 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004128:	2103      	movs	r1, #3
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 f95e 	bl	80043ec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004130:	2110      	movs	r1, #16
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 f8fa 	bl	800432c <USB_FlushTxFifo>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d001      	beq.n	8004142 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 f924 	bl	8004390 <USB_FlushRxFifo>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d001      	beq.n	8004152 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004158:	461a      	mov	r2, r3
 800415a:	2300      	movs	r3, #0
 800415c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004164:	461a      	mov	r2, r3
 8004166:	2300      	movs	r3, #0
 8004168:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004170:	461a      	mov	r2, r3
 8004172:	2300      	movs	r3, #0
 8004174:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004176:	2300      	movs	r3, #0
 8004178:	613b      	str	r3, [r7, #16]
 800417a:	e043      	b.n	8004204 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	015a      	lsls	r2, r3, #5
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	4413      	add	r3, r2
 8004184:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800418e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004192:	d118      	bne.n	80041c6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d10a      	bne.n	80041b0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	015a      	lsls	r2, r3, #5
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	4413      	add	r3, r2
 80041a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041a6:	461a      	mov	r2, r3
 80041a8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80041ac:	6013      	str	r3, [r2, #0]
 80041ae:	e013      	b.n	80041d8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	015a      	lsls	r2, r3, #5
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	4413      	add	r3, r2
 80041b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041bc:	461a      	mov	r2, r3
 80041be:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80041c2:	6013      	str	r3, [r2, #0]
 80041c4:	e008      	b.n	80041d8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	015a      	lsls	r2, r3, #5
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	4413      	add	r3, r2
 80041ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041d2:	461a      	mov	r2, r3
 80041d4:	2300      	movs	r3, #0
 80041d6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	015a      	lsls	r2, r3, #5
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	4413      	add	r3, r2
 80041e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041e4:	461a      	mov	r2, r3
 80041e6:	2300      	movs	r3, #0
 80041e8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	015a      	lsls	r2, r3, #5
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	4413      	add	r3, r2
 80041f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80041f6:	461a      	mov	r2, r3
 80041f8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80041fc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	3301      	adds	r3, #1
 8004202:	613b      	str	r3, [r7, #16]
 8004204:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004208:	461a      	mov	r2, r3
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	4293      	cmp	r3, r2
 800420e:	d3b5      	bcc.n	800417c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004210:	2300      	movs	r3, #0
 8004212:	613b      	str	r3, [r7, #16]
 8004214:	e043      	b.n	800429e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	015a      	lsls	r2, r3, #5
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	4413      	add	r3, r2
 800421e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004228:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800422c:	d118      	bne.n	8004260 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d10a      	bne.n	800424a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	015a      	lsls	r2, r3, #5
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	4413      	add	r3, r2
 800423c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004240:	461a      	mov	r2, r3
 8004242:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004246:	6013      	str	r3, [r2, #0]
 8004248:	e013      	b.n	8004272 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	015a      	lsls	r2, r3, #5
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	4413      	add	r3, r2
 8004252:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004256:	461a      	mov	r2, r3
 8004258:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800425c:	6013      	str	r3, [r2, #0]
 800425e:	e008      	b.n	8004272 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	015a      	lsls	r2, r3, #5
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	4413      	add	r3, r2
 8004268:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800426c:	461a      	mov	r2, r3
 800426e:	2300      	movs	r3, #0
 8004270:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	015a      	lsls	r2, r3, #5
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	4413      	add	r3, r2
 800427a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800427e:	461a      	mov	r2, r3
 8004280:	2300      	movs	r3, #0
 8004282:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	015a      	lsls	r2, r3, #5
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	4413      	add	r3, r2
 800428c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004290:	461a      	mov	r2, r3
 8004292:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004296:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	3301      	adds	r3, #1
 800429c:	613b      	str	r3, [r7, #16]
 800429e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80042a2:	461a      	mov	r2, r3
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d3b5      	bcc.n	8004216 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80042b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042bc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80042ca:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80042cc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d105      	bne.n	80042e0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	699b      	ldr	r3, [r3, #24]
 80042d8:	f043 0210 	orr.w	r2, r3, #16
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	699a      	ldr	r2, [r3, #24]
 80042e4:	4b10      	ldr	r3, [pc, #64]	@ (8004328 <USB_DevInit+0x2c4>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80042ec:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d005      	beq.n	8004300 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	699b      	ldr	r3, [r3, #24]
 80042f8:	f043 0208 	orr.w	r2, r3, #8
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004300:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004304:	2b01      	cmp	r3, #1
 8004306:	d107      	bne.n	8004318 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	699b      	ldr	r3, [r3, #24]
 800430c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004310:	f043 0304 	orr.w	r3, r3, #4
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004318:	7dfb      	ldrb	r3, [r7, #23]
}
 800431a:	4618      	mov	r0, r3
 800431c:	3718      	adds	r7, #24
 800431e:	46bd      	mov	sp, r7
 8004320:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004324:	b004      	add	sp, #16
 8004326:	4770      	bx	lr
 8004328:	803c3800 	.word	0x803c3800

0800432c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800432c:	b480      	push	{r7}
 800432e:	b085      	sub	sp, #20
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004336:	2300      	movs	r3, #0
 8004338:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	3301      	adds	r3, #1
 800433e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004346:	d901      	bls.n	800434c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e01b      	b.n	8004384 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	2b00      	cmp	r3, #0
 8004352:	daf2      	bge.n	800433a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004354:	2300      	movs	r3, #0
 8004356:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	019b      	lsls	r3, r3, #6
 800435c:	f043 0220 	orr.w	r2, r3, #32
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	3301      	adds	r3, #1
 8004368:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004370:	d901      	bls.n	8004376 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e006      	b.n	8004384 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	f003 0320 	and.w	r3, r3, #32
 800437e:	2b20      	cmp	r3, #32
 8004380:	d0f0      	beq.n	8004364 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004382:	2300      	movs	r3, #0
}
 8004384:	4618      	mov	r0, r3
 8004386:	3714      	adds	r7, #20
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr

08004390 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004390:	b480      	push	{r7}
 8004392:	b085      	sub	sp, #20
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004398:	2300      	movs	r3, #0
 800439a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	3301      	adds	r3, #1
 80043a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80043a8:	d901      	bls.n	80043ae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e018      	b.n	80043e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	daf2      	bge.n	800439c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80043b6:	2300      	movs	r3, #0
 80043b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2210      	movs	r2, #16
 80043be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	3301      	adds	r3, #1
 80043c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80043cc:	d901      	bls.n	80043d2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e006      	b.n	80043e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	f003 0310 	and.w	r3, r3, #16
 80043da:	2b10      	cmp	r3, #16
 80043dc:	d0f0      	beq.n	80043c0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80043de:	2300      	movs	r3, #0
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3714      	adds	r7, #20
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b085      	sub	sp, #20
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	460b      	mov	r3, r1
 80043f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	78fb      	ldrb	r3, [r7, #3]
 8004406:	68f9      	ldr	r1, [r7, #12]
 8004408:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800440c:	4313      	orrs	r3, r2
 800440e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3714      	adds	r7, #20
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr

0800441e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800441e:	b480      	push	{r7}
 8004420:	b085      	sub	sp, #20
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004438:	f023 0303 	bic.w	r3, r3, #3
 800443c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800444c:	f043 0302 	orr.w	r3, r3, #2
 8004450:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3714      	adds	r7, #20
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	695b      	ldr	r3, [r3, #20]
 800446c:	f003 0301 	and.w	r3, r3, #1
}
 8004470:	4618      	mov	r0, r3
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800447c:	b480      	push	{r7}
 800447e:	b085      	sub	sp, #20
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004484:	2300      	movs	r3, #0
 8004486:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	3301      	adds	r3, #1
 800448c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004494:	d901      	bls.n	800449a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e01b      	b.n	80044d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	daf2      	bge.n	8004488 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80044a2:	2300      	movs	r3, #0
 80044a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	f043 0201 	orr.w	r2, r3, #1
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	3301      	adds	r3, #1
 80044b6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80044be:	d901      	bls.n	80044c4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e006      	b.n	80044d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	f003 0301 	and.w	r3, r3, #1
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d0f0      	beq.n	80044b2 <USB_CoreReset+0x36>

  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3714      	adds	r7, #20
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
	...

080044e0 <siprintf>:
 80044e0:	b40e      	push	{r1, r2, r3}
 80044e2:	b500      	push	{lr}
 80044e4:	b09c      	sub	sp, #112	@ 0x70
 80044e6:	ab1d      	add	r3, sp, #116	@ 0x74
 80044e8:	9002      	str	r0, [sp, #8]
 80044ea:	9006      	str	r0, [sp, #24]
 80044ec:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80044f0:	4809      	ldr	r0, [pc, #36]	@ (8004518 <siprintf+0x38>)
 80044f2:	9107      	str	r1, [sp, #28]
 80044f4:	9104      	str	r1, [sp, #16]
 80044f6:	4909      	ldr	r1, [pc, #36]	@ (800451c <siprintf+0x3c>)
 80044f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80044fc:	9105      	str	r1, [sp, #20]
 80044fe:	6800      	ldr	r0, [r0, #0]
 8004500:	9301      	str	r3, [sp, #4]
 8004502:	a902      	add	r1, sp, #8
 8004504:	f000 f994 	bl	8004830 <_svfiprintf_r>
 8004508:	9b02      	ldr	r3, [sp, #8]
 800450a:	2200      	movs	r2, #0
 800450c:	701a      	strb	r2, [r3, #0]
 800450e:	b01c      	add	sp, #112	@ 0x70
 8004510:	f85d eb04 	ldr.w	lr, [sp], #4
 8004514:	b003      	add	sp, #12
 8004516:	4770      	bx	lr
 8004518:	2000000c 	.word	0x2000000c
 800451c:	ffff0208 	.word	0xffff0208

08004520 <memset>:
 8004520:	4402      	add	r2, r0
 8004522:	4603      	mov	r3, r0
 8004524:	4293      	cmp	r3, r2
 8004526:	d100      	bne.n	800452a <memset+0xa>
 8004528:	4770      	bx	lr
 800452a:	f803 1b01 	strb.w	r1, [r3], #1
 800452e:	e7f9      	b.n	8004524 <memset+0x4>

08004530 <__errno>:
 8004530:	4b01      	ldr	r3, [pc, #4]	@ (8004538 <__errno+0x8>)
 8004532:	6818      	ldr	r0, [r3, #0]
 8004534:	4770      	bx	lr
 8004536:	bf00      	nop
 8004538:	2000000c 	.word	0x2000000c

0800453c <__libc_init_array>:
 800453c:	b570      	push	{r4, r5, r6, lr}
 800453e:	4d0d      	ldr	r5, [pc, #52]	@ (8004574 <__libc_init_array+0x38>)
 8004540:	4c0d      	ldr	r4, [pc, #52]	@ (8004578 <__libc_init_array+0x3c>)
 8004542:	1b64      	subs	r4, r4, r5
 8004544:	10a4      	asrs	r4, r4, #2
 8004546:	2600      	movs	r6, #0
 8004548:	42a6      	cmp	r6, r4
 800454a:	d109      	bne.n	8004560 <__libc_init_array+0x24>
 800454c:	4d0b      	ldr	r5, [pc, #44]	@ (800457c <__libc_init_array+0x40>)
 800454e:	4c0c      	ldr	r4, [pc, #48]	@ (8004580 <__libc_init_array+0x44>)
 8004550:	f000 fc66 	bl	8004e20 <_init>
 8004554:	1b64      	subs	r4, r4, r5
 8004556:	10a4      	asrs	r4, r4, #2
 8004558:	2600      	movs	r6, #0
 800455a:	42a6      	cmp	r6, r4
 800455c:	d105      	bne.n	800456a <__libc_init_array+0x2e>
 800455e:	bd70      	pop	{r4, r5, r6, pc}
 8004560:	f855 3b04 	ldr.w	r3, [r5], #4
 8004564:	4798      	blx	r3
 8004566:	3601      	adds	r6, #1
 8004568:	e7ee      	b.n	8004548 <__libc_init_array+0xc>
 800456a:	f855 3b04 	ldr.w	r3, [r5], #4
 800456e:	4798      	blx	r3
 8004570:	3601      	adds	r6, #1
 8004572:	e7f2      	b.n	800455a <__libc_init_array+0x1e>
 8004574:	08004ea0 	.word	0x08004ea0
 8004578:	08004ea0 	.word	0x08004ea0
 800457c:	08004ea0 	.word	0x08004ea0
 8004580:	08004ea4 	.word	0x08004ea4

08004584 <__retarget_lock_acquire_recursive>:
 8004584:	4770      	bx	lr

08004586 <__retarget_lock_release_recursive>:
 8004586:	4770      	bx	lr

08004588 <_free_r>:
 8004588:	b538      	push	{r3, r4, r5, lr}
 800458a:	4605      	mov	r5, r0
 800458c:	2900      	cmp	r1, #0
 800458e:	d041      	beq.n	8004614 <_free_r+0x8c>
 8004590:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004594:	1f0c      	subs	r4, r1, #4
 8004596:	2b00      	cmp	r3, #0
 8004598:	bfb8      	it	lt
 800459a:	18e4      	addlt	r4, r4, r3
 800459c:	f000 f8e0 	bl	8004760 <__malloc_lock>
 80045a0:	4a1d      	ldr	r2, [pc, #116]	@ (8004618 <_free_r+0x90>)
 80045a2:	6813      	ldr	r3, [r2, #0]
 80045a4:	b933      	cbnz	r3, 80045b4 <_free_r+0x2c>
 80045a6:	6063      	str	r3, [r4, #4]
 80045a8:	6014      	str	r4, [r2, #0]
 80045aa:	4628      	mov	r0, r5
 80045ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045b0:	f000 b8dc 	b.w	800476c <__malloc_unlock>
 80045b4:	42a3      	cmp	r3, r4
 80045b6:	d908      	bls.n	80045ca <_free_r+0x42>
 80045b8:	6820      	ldr	r0, [r4, #0]
 80045ba:	1821      	adds	r1, r4, r0
 80045bc:	428b      	cmp	r3, r1
 80045be:	bf01      	itttt	eq
 80045c0:	6819      	ldreq	r1, [r3, #0]
 80045c2:	685b      	ldreq	r3, [r3, #4]
 80045c4:	1809      	addeq	r1, r1, r0
 80045c6:	6021      	streq	r1, [r4, #0]
 80045c8:	e7ed      	b.n	80045a6 <_free_r+0x1e>
 80045ca:	461a      	mov	r2, r3
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	b10b      	cbz	r3, 80045d4 <_free_r+0x4c>
 80045d0:	42a3      	cmp	r3, r4
 80045d2:	d9fa      	bls.n	80045ca <_free_r+0x42>
 80045d4:	6811      	ldr	r1, [r2, #0]
 80045d6:	1850      	adds	r0, r2, r1
 80045d8:	42a0      	cmp	r0, r4
 80045da:	d10b      	bne.n	80045f4 <_free_r+0x6c>
 80045dc:	6820      	ldr	r0, [r4, #0]
 80045de:	4401      	add	r1, r0
 80045e0:	1850      	adds	r0, r2, r1
 80045e2:	4283      	cmp	r3, r0
 80045e4:	6011      	str	r1, [r2, #0]
 80045e6:	d1e0      	bne.n	80045aa <_free_r+0x22>
 80045e8:	6818      	ldr	r0, [r3, #0]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	6053      	str	r3, [r2, #4]
 80045ee:	4408      	add	r0, r1
 80045f0:	6010      	str	r0, [r2, #0]
 80045f2:	e7da      	b.n	80045aa <_free_r+0x22>
 80045f4:	d902      	bls.n	80045fc <_free_r+0x74>
 80045f6:	230c      	movs	r3, #12
 80045f8:	602b      	str	r3, [r5, #0]
 80045fa:	e7d6      	b.n	80045aa <_free_r+0x22>
 80045fc:	6820      	ldr	r0, [r4, #0]
 80045fe:	1821      	adds	r1, r4, r0
 8004600:	428b      	cmp	r3, r1
 8004602:	bf04      	itt	eq
 8004604:	6819      	ldreq	r1, [r3, #0]
 8004606:	685b      	ldreq	r3, [r3, #4]
 8004608:	6063      	str	r3, [r4, #4]
 800460a:	bf04      	itt	eq
 800460c:	1809      	addeq	r1, r1, r0
 800460e:	6021      	streq	r1, [r4, #0]
 8004610:	6054      	str	r4, [r2, #4]
 8004612:	e7ca      	b.n	80045aa <_free_r+0x22>
 8004614:	bd38      	pop	{r3, r4, r5, pc}
 8004616:	bf00      	nop
 8004618:	20000990 	.word	0x20000990

0800461c <sbrk_aligned>:
 800461c:	b570      	push	{r4, r5, r6, lr}
 800461e:	4e0f      	ldr	r6, [pc, #60]	@ (800465c <sbrk_aligned+0x40>)
 8004620:	460c      	mov	r4, r1
 8004622:	6831      	ldr	r1, [r6, #0]
 8004624:	4605      	mov	r5, r0
 8004626:	b911      	cbnz	r1, 800462e <sbrk_aligned+0x12>
 8004628:	f000 fba6 	bl	8004d78 <_sbrk_r>
 800462c:	6030      	str	r0, [r6, #0]
 800462e:	4621      	mov	r1, r4
 8004630:	4628      	mov	r0, r5
 8004632:	f000 fba1 	bl	8004d78 <_sbrk_r>
 8004636:	1c43      	adds	r3, r0, #1
 8004638:	d103      	bne.n	8004642 <sbrk_aligned+0x26>
 800463a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800463e:	4620      	mov	r0, r4
 8004640:	bd70      	pop	{r4, r5, r6, pc}
 8004642:	1cc4      	adds	r4, r0, #3
 8004644:	f024 0403 	bic.w	r4, r4, #3
 8004648:	42a0      	cmp	r0, r4
 800464a:	d0f8      	beq.n	800463e <sbrk_aligned+0x22>
 800464c:	1a21      	subs	r1, r4, r0
 800464e:	4628      	mov	r0, r5
 8004650:	f000 fb92 	bl	8004d78 <_sbrk_r>
 8004654:	3001      	adds	r0, #1
 8004656:	d1f2      	bne.n	800463e <sbrk_aligned+0x22>
 8004658:	e7ef      	b.n	800463a <sbrk_aligned+0x1e>
 800465a:	bf00      	nop
 800465c:	2000098c 	.word	0x2000098c

08004660 <_malloc_r>:
 8004660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004664:	1ccd      	adds	r5, r1, #3
 8004666:	f025 0503 	bic.w	r5, r5, #3
 800466a:	3508      	adds	r5, #8
 800466c:	2d0c      	cmp	r5, #12
 800466e:	bf38      	it	cc
 8004670:	250c      	movcc	r5, #12
 8004672:	2d00      	cmp	r5, #0
 8004674:	4606      	mov	r6, r0
 8004676:	db01      	blt.n	800467c <_malloc_r+0x1c>
 8004678:	42a9      	cmp	r1, r5
 800467a:	d904      	bls.n	8004686 <_malloc_r+0x26>
 800467c:	230c      	movs	r3, #12
 800467e:	6033      	str	r3, [r6, #0]
 8004680:	2000      	movs	r0, #0
 8004682:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004686:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800475c <_malloc_r+0xfc>
 800468a:	f000 f869 	bl	8004760 <__malloc_lock>
 800468e:	f8d8 3000 	ldr.w	r3, [r8]
 8004692:	461c      	mov	r4, r3
 8004694:	bb44      	cbnz	r4, 80046e8 <_malloc_r+0x88>
 8004696:	4629      	mov	r1, r5
 8004698:	4630      	mov	r0, r6
 800469a:	f7ff ffbf 	bl	800461c <sbrk_aligned>
 800469e:	1c43      	adds	r3, r0, #1
 80046a0:	4604      	mov	r4, r0
 80046a2:	d158      	bne.n	8004756 <_malloc_r+0xf6>
 80046a4:	f8d8 4000 	ldr.w	r4, [r8]
 80046a8:	4627      	mov	r7, r4
 80046aa:	2f00      	cmp	r7, #0
 80046ac:	d143      	bne.n	8004736 <_malloc_r+0xd6>
 80046ae:	2c00      	cmp	r4, #0
 80046b0:	d04b      	beq.n	800474a <_malloc_r+0xea>
 80046b2:	6823      	ldr	r3, [r4, #0]
 80046b4:	4639      	mov	r1, r7
 80046b6:	4630      	mov	r0, r6
 80046b8:	eb04 0903 	add.w	r9, r4, r3
 80046bc:	f000 fb5c 	bl	8004d78 <_sbrk_r>
 80046c0:	4581      	cmp	r9, r0
 80046c2:	d142      	bne.n	800474a <_malloc_r+0xea>
 80046c4:	6821      	ldr	r1, [r4, #0]
 80046c6:	1a6d      	subs	r5, r5, r1
 80046c8:	4629      	mov	r1, r5
 80046ca:	4630      	mov	r0, r6
 80046cc:	f7ff ffa6 	bl	800461c <sbrk_aligned>
 80046d0:	3001      	adds	r0, #1
 80046d2:	d03a      	beq.n	800474a <_malloc_r+0xea>
 80046d4:	6823      	ldr	r3, [r4, #0]
 80046d6:	442b      	add	r3, r5
 80046d8:	6023      	str	r3, [r4, #0]
 80046da:	f8d8 3000 	ldr.w	r3, [r8]
 80046de:	685a      	ldr	r2, [r3, #4]
 80046e0:	bb62      	cbnz	r2, 800473c <_malloc_r+0xdc>
 80046e2:	f8c8 7000 	str.w	r7, [r8]
 80046e6:	e00f      	b.n	8004708 <_malloc_r+0xa8>
 80046e8:	6822      	ldr	r2, [r4, #0]
 80046ea:	1b52      	subs	r2, r2, r5
 80046ec:	d420      	bmi.n	8004730 <_malloc_r+0xd0>
 80046ee:	2a0b      	cmp	r2, #11
 80046f0:	d917      	bls.n	8004722 <_malloc_r+0xc2>
 80046f2:	1961      	adds	r1, r4, r5
 80046f4:	42a3      	cmp	r3, r4
 80046f6:	6025      	str	r5, [r4, #0]
 80046f8:	bf18      	it	ne
 80046fa:	6059      	strne	r1, [r3, #4]
 80046fc:	6863      	ldr	r3, [r4, #4]
 80046fe:	bf08      	it	eq
 8004700:	f8c8 1000 	streq.w	r1, [r8]
 8004704:	5162      	str	r2, [r4, r5]
 8004706:	604b      	str	r3, [r1, #4]
 8004708:	4630      	mov	r0, r6
 800470a:	f000 f82f 	bl	800476c <__malloc_unlock>
 800470e:	f104 000b 	add.w	r0, r4, #11
 8004712:	1d23      	adds	r3, r4, #4
 8004714:	f020 0007 	bic.w	r0, r0, #7
 8004718:	1ac2      	subs	r2, r0, r3
 800471a:	bf1c      	itt	ne
 800471c:	1a1b      	subne	r3, r3, r0
 800471e:	50a3      	strne	r3, [r4, r2]
 8004720:	e7af      	b.n	8004682 <_malloc_r+0x22>
 8004722:	6862      	ldr	r2, [r4, #4]
 8004724:	42a3      	cmp	r3, r4
 8004726:	bf0c      	ite	eq
 8004728:	f8c8 2000 	streq.w	r2, [r8]
 800472c:	605a      	strne	r2, [r3, #4]
 800472e:	e7eb      	b.n	8004708 <_malloc_r+0xa8>
 8004730:	4623      	mov	r3, r4
 8004732:	6864      	ldr	r4, [r4, #4]
 8004734:	e7ae      	b.n	8004694 <_malloc_r+0x34>
 8004736:	463c      	mov	r4, r7
 8004738:	687f      	ldr	r7, [r7, #4]
 800473a:	e7b6      	b.n	80046aa <_malloc_r+0x4a>
 800473c:	461a      	mov	r2, r3
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	42a3      	cmp	r3, r4
 8004742:	d1fb      	bne.n	800473c <_malloc_r+0xdc>
 8004744:	2300      	movs	r3, #0
 8004746:	6053      	str	r3, [r2, #4]
 8004748:	e7de      	b.n	8004708 <_malloc_r+0xa8>
 800474a:	230c      	movs	r3, #12
 800474c:	6033      	str	r3, [r6, #0]
 800474e:	4630      	mov	r0, r6
 8004750:	f000 f80c 	bl	800476c <__malloc_unlock>
 8004754:	e794      	b.n	8004680 <_malloc_r+0x20>
 8004756:	6005      	str	r5, [r0, #0]
 8004758:	e7d6      	b.n	8004708 <_malloc_r+0xa8>
 800475a:	bf00      	nop
 800475c:	20000990 	.word	0x20000990

08004760 <__malloc_lock>:
 8004760:	4801      	ldr	r0, [pc, #4]	@ (8004768 <__malloc_lock+0x8>)
 8004762:	f7ff bf0f 	b.w	8004584 <__retarget_lock_acquire_recursive>
 8004766:	bf00      	nop
 8004768:	20000988 	.word	0x20000988

0800476c <__malloc_unlock>:
 800476c:	4801      	ldr	r0, [pc, #4]	@ (8004774 <__malloc_unlock+0x8>)
 800476e:	f7ff bf0a 	b.w	8004586 <__retarget_lock_release_recursive>
 8004772:	bf00      	nop
 8004774:	20000988 	.word	0x20000988

08004778 <__ssputs_r>:
 8004778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800477c:	688e      	ldr	r6, [r1, #8]
 800477e:	461f      	mov	r7, r3
 8004780:	42be      	cmp	r6, r7
 8004782:	680b      	ldr	r3, [r1, #0]
 8004784:	4682      	mov	sl, r0
 8004786:	460c      	mov	r4, r1
 8004788:	4690      	mov	r8, r2
 800478a:	d82d      	bhi.n	80047e8 <__ssputs_r+0x70>
 800478c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004790:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004794:	d026      	beq.n	80047e4 <__ssputs_r+0x6c>
 8004796:	6965      	ldr	r5, [r4, #20]
 8004798:	6909      	ldr	r1, [r1, #16]
 800479a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800479e:	eba3 0901 	sub.w	r9, r3, r1
 80047a2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80047a6:	1c7b      	adds	r3, r7, #1
 80047a8:	444b      	add	r3, r9
 80047aa:	106d      	asrs	r5, r5, #1
 80047ac:	429d      	cmp	r5, r3
 80047ae:	bf38      	it	cc
 80047b0:	461d      	movcc	r5, r3
 80047b2:	0553      	lsls	r3, r2, #21
 80047b4:	d527      	bpl.n	8004806 <__ssputs_r+0x8e>
 80047b6:	4629      	mov	r1, r5
 80047b8:	f7ff ff52 	bl	8004660 <_malloc_r>
 80047bc:	4606      	mov	r6, r0
 80047be:	b360      	cbz	r0, 800481a <__ssputs_r+0xa2>
 80047c0:	6921      	ldr	r1, [r4, #16]
 80047c2:	464a      	mov	r2, r9
 80047c4:	f000 fae8 	bl	8004d98 <memcpy>
 80047c8:	89a3      	ldrh	r3, [r4, #12]
 80047ca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80047ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047d2:	81a3      	strh	r3, [r4, #12]
 80047d4:	6126      	str	r6, [r4, #16]
 80047d6:	6165      	str	r5, [r4, #20]
 80047d8:	444e      	add	r6, r9
 80047da:	eba5 0509 	sub.w	r5, r5, r9
 80047de:	6026      	str	r6, [r4, #0]
 80047e0:	60a5      	str	r5, [r4, #8]
 80047e2:	463e      	mov	r6, r7
 80047e4:	42be      	cmp	r6, r7
 80047e6:	d900      	bls.n	80047ea <__ssputs_r+0x72>
 80047e8:	463e      	mov	r6, r7
 80047ea:	6820      	ldr	r0, [r4, #0]
 80047ec:	4632      	mov	r2, r6
 80047ee:	4641      	mov	r1, r8
 80047f0:	f000 faa8 	bl	8004d44 <memmove>
 80047f4:	68a3      	ldr	r3, [r4, #8]
 80047f6:	1b9b      	subs	r3, r3, r6
 80047f8:	60a3      	str	r3, [r4, #8]
 80047fa:	6823      	ldr	r3, [r4, #0]
 80047fc:	4433      	add	r3, r6
 80047fe:	6023      	str	r3, [r4, #0]
 8004800:	2000      	movs	r0, #0
 8004802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004806:	462a      	mov	r2, r5
 8004808:	f000 fad4 	bl	8004db4 <_realloc_r>
 800480c:	4606      	mov	r6, r0
 800480e:	2800      	cmp	r0, #0
 8004810:	d1e0      	bne.n	80047d4 <__ssputs_r+0x5c>
 8004812:	6921      	ldr	r1, [r4, #16]
 8004814:	4650      	mov	r0, sl
 8004816:	f7ff feb7 	bl	8004588 <_free_r>
 800481a:	230c      	movs	r3, #12
 800481c:	f8ca 3000 	str.w	r3, [sl]
 8004820:	89a3      	ldrh	r3, [r4, #12]
 8004822:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004826:	81a3      	strh	r3, [r4, #12]
 8004828:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800482c:	e7e9      	b.n	8004802 <__ssputs_r+0x8a>
	...

08004830 <_svfiprintf_r>:
 8004830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004834:	4698      	mov	r8, r3
 8004836:	898b      	ldrh	r3, [r1, #12]
 8004838:	061b      	lsls	r3, r3, #24
 800483a:	b09d      	sub	sp, #116	@ 0x74
 800483c:	4607      	mov	r7, r0
 800483e:	460d      	mov	r5, r1
 8004840:	4614      	mov	r4, r2
 8004842:	d510      	bpl.n	8004866 <_svfiprintf_r+0x36>
 8004844:	690b      	ldr	r3, [r1, #16]
 8004846:	b973      	cbnz	r3, 8004866 <_svfiprintf_r+0x36>
 8004848:	2140      	movs	r1, #64	@ 0x40
 800484a:	f7ff ff09 	bl	8004660 <_malloc_r>
 800484e:	6028      	str	r0, [r5, #0]
 8004850:	6128      	str	r0, [r5, #16]
 8004852:	b930      	cbnz	r0, 8004862 <_svfiprintf_r+0x32>
 8004854:	230c      	movs	r3, #12
 8004856:	603b      	str	r3, [r7, #0]
 8004858:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800485c:	b01d      	add	sp, #116	@ 0x74
 800485e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004862:	2340      	movs	r3, #64	@ 0x40
 8004864:	616b      	str	r3, [r5, #20]
 8004866:	2300      	movs	r3, #0
 8004868:	9309      	str	r3, [sp, #36]	@ 0x24
 800486a:	2320      	movs	r3, #32
 800486c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004870:	f8cd 800c 	str.w	r8, [sp, #12]
 8004874:	2330      	movs	r3, #48	@ 0x30
 8004876:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004a14 <_svfiprintf_r+0x1e4>
 800487a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800487e:	f04f 0901 	mov.w	r9, #1
 8004882:	4623      	mov	r3, r4
 8004884:	469a      	mov	sl, r3
 8004886:	f813 2b01 	ldrb.w	r2, [r3], #1
 800488a:	b10a      	cbz	r2, 8004890 <_svfiprintf_r+0x60>
 800488c:	2a25      	cmp	r2, #37	@ 0x25
 800488e:	d1f9      	bne.n	8004884 <_svfiprintf_r+0x54>
 8004890:	ebba 0b04 	subs.w	fp, sl, r4
 8004894:	d00b      	beq.n	80048ae <_svfiprintf_r+0x7e>
 8004896:	465b      	mov	r3, fp
 8004898:	4622      	mov	r2, r4
 800489a:	4629      	mov	r1, r5
 800489c:	4638      	mov	r0, r7
 800489e:	f7ff ff6b 	bl	8004778 <__ssputs_r>
 80048a2:	3001      	adds	r0, #1
 80048a4:	f000 80a7 	beq.w	80049f6 <_svfiprintf_r+0x1c6>
 80048a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80048aa:	445a      	add	r2, fp
 80048ac:	9209      	str	r2, [sp, #36]	@ 0x24
 80048ae:	f89a 3000 	ldrb.w	r3, [sl]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	f000 809f 	beq.w	80049f6 <_svfiprintf_r+0x1c6>
 80048b8:	2300      	movs	r3, #0
 80048ba:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80048be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048c2:	f10a 0a01 	add.w	sl, sl, #1
 80048c6:	9304      	str	r3, [sp, #16]
 80048c8:	9307      	str	r3, [sp, #28]
 80048ca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80048ce:	931a      	str	r3, [sp, #104]	@ 0x68
 80048d0:	4654      	mov	r4, sl
 80048d2:	2205      	movs	r2, #5
 80048d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048d8:	484e      	ldr	r0, [pc, #312]	@ (8004a14 <_svfiprintf_r+0x1e4>)
 80048da:	f7fb fc91 	bl	8000200 <memchr>
 80048de:	9a04      	ldr	r2, [sp, #16]
 80048e0:	b9d8      	cbnz	r0, 800491a <_svfiprintf_r+0xea>
 80048e2:	06d0      	lsls	r0, r2, #27
 80048e4:	bf44      	itt	mi
 80048e6:	2320      	movmi	r3, #32
 80048e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80048ec:	0711      	lsls	r1, r2, #28
 80048ee:	bf44      	itt	mi
 80048f0:	232b      	movmi	r3, #43	@ 0x2b
 80048f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80048f6:	f89a 3000 	ldrb.w	r3, [sl]
 80048fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80048fc:	d015      	beq.n	800492a <_svfiprintf_r+0xfa>
 80048fe:	9a07      	ldr	r2, [sp, #28]
 8004900:	4654      	mov	r4, sl
 8004902:	2000      	movs	r0, #0
 8004904:	f04f 0c0a 	mov.w	ip, #10
 8004908:	4621      	mov	r1, r4
 800490a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800490e:	3b30      	subs	r3, #48	@ 0x30
 8004910:	2b09      	cmp	r3, #9
 8004912:	d94b      	bls.n	80049ac <_svfiprintf_r+0x17c>
 8004914:	b1b0      	cbz	r0, 8004944 <_svfiprintf_r+0x114>
 8004916:	9207      	str	r2, [sp, #28]
 8004918:	e014      	b.n	8004944 <_svfiprintf_r+0x114>
 800491a:	eba0 0308 	sub.w	r3, r0, r8
 800491e:	fa09 f303 	lsl.w	r3, r9, r3
 8004922:	4313      	orrs	r3, r2
 8004924:	9304      	str	r3, [sp, #16]
 8004926:	46a2      	mov	sl, r4
 8004928:	e7d2      	b.n	80048d0 <_svfiprintf_r+0xa0>
 800492a:	9b03      	ldr	r3, [sp, #12]
 800492c:	1d19      	adds	r1, r3, #4
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	9103      	str	r1, [sp, #12]
 8004932:	2b00      	cmp	r3, #0
 8004934:	bfbb      	ittet	lt
 8004936:	425b      	neglt	r3, r3
 8004938:	f042 0202 	orrlt.w	r2, r2, #2
 800493c:	9307      	strge	r3, [sp, #28]
 800493e:	9307      	strlt	r3, [sp, #28]
 8004940:	bfb8      	it	lt
 8004942:	9204      	strlt	r2, [sp, #16]
 8004944:	7823      	ldrb	r3, [r4, #0]
 8004946:	2b2e      	cmp	r3, #46	@ 0x2e
 8004948:	d10a      	bne.n	8004960 <_svfiprintf_r+0x130>
 800494a:	7863      	ldrb	r3, [r4, #1]
 800494c:	2b2a      	cmp	r3, #42	@ 0x2a
 800494e:	d132      	bne.n	80049b6 <_svfiprintf_r+0x186>
 8004950:	9b03      	ldr	r3, [sp, #12]
 8004952:	1d1a      	adds	r2, r3, #4
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	9203      	str	r2, [sp, #12]
 8004958:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800495c:	3402      	adds	r4, #2
 800495e:	9305      	str	r3, [sp, #20]
 8004960:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004a24 <_svfiprintf_r+0x1f4>
 8004964:	7821      	ldrb	r1, [r4, #0]
 8004966:	2203      	movs	r2, #3
 8004968:	4650      	mov	r0, sl
 800496a:	f7fb fc49 	bl	8000200 <memchr>
 800496e:	b138      	cbz	r0, 8004980 <_svfiprintf_r+0x150>
 8004970:	9b04      	ldr	r3, [sp, #16]
 8004972:	eba0 000a 	sub.w	r0, r0, sl
 8004976:	2240      	movs	r2, #64	@ 0x40
 8004978:	4082      	lsls	r2, r0
 800497a:	4313      	orrs	r3, r2
 800497c:	3401      	adds	r4, #1
 800497e:	9304      	str	r3, [sp, #16]
 8004980:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004984:	4824      	ldr	r0, [pc, #144]	@ (8004a18 <_svfiprintf_r+0x1e8>)
 8004986:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800498a:	2206      	movs	r2, #6
 800498c:	f7fb fc38 	bl	8000200 <memchr>
 8004990:	2800      	cmp	r0, #0
 8004992:	d036      	beq.n	8004a02 <_svfiprintf_r+0x1d2>
 8004994:	4b21      	ldr	r3, [pc, #132]	@ (8004a1c <_svfiprintf_r+0x1ec>)
 8004996:	bb1b      	cbnz	r3, 80049e0 <_svfiprintf_r+0x1b0>
 8004998:	9b03      	ldr	r3, [sp, #12]
 800499a:	3307      	adds	r3, #7
 800499c:	f023 0307 	bic.w	r3, r3, #7
 80049a0:	3308      	adds	r3, #8
 80049a2:	9303      	str	r3, [sp, #12]
 80049a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049a6:	4433      	add	r3, r6
 80049a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80049aa:	e76a      	b.n	8004882 <_svfiprintf_r+0x52>
 80049ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80049b0:	460c      	mov	r4, r1
 80049b2:	2001      	movs	r0, #1
 80049b4:	e7a8      	b.n	8004908 <_svfiprintf_r+0xd8>
 80049b6:	2300      	movs	r3, #0
 80049b8:	3401      	adds	r4, #1
 80049ba:	9305      	str	r3, [sp, #20]
 80049bc:	4619      	mov	r1, r3
 80049be:	f04f 0c0a 	mov.w	ip, #10
 80049c2:	4620      	mov	r0, r4
 80049c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049c8:	3a30      	subs	r2, #48	@ 0x30
 80049ca:	2a09      	cmp	r2, #9
 80049cc:	d903      	bls.n	80049d6 <_svfiprintf_r+0x1a6>
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d0c6      	beq.n	8004960 <_svfiprintf_r+0x130>
 80049d2:	9105      	str	r1, [sp, #20]
 80049d4:	e7c4      	b.n	8004960 <_svfiprintf_r+0x130>
 80049d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80049da:	4604      	mov	r4, r0
 80049dc:	2301      	movs	r3, #1
 80049de:	e7f0      	b.n	80049c2 <_svfiprintf_r+0x192>
 80049e0:	ab03      	add	r3, sp, #12
 80049e2:	9300      	str	r3, [sp, #0]
 80049e4:	462a      	mov	r2, r5
 80049e6:	4b0e      	ldr	r3, [pc, #56]	@ (8004a20 <_svfiprintf_r+0x1f0>)
 80049e8:	a904      	add	r1, sp, #16
 80049ea:	4638      	mov	r0, r7
 80049ec:	f3af 8000 	nop.w
 80049f0:	1c42      	adds	r2, r0, #1
 80049f2:	4606      	mov	r6, r0
 80049f4:	d1d6      	bne.n	80049a4 <_svfiprintf_r+0x174>
 80049f6:	89ab      	ldrh	r3, [r5, #12]
 80049f8:	065b      	lsls	r3, r3, #25
 80049fa:	f53f af2d 	bmi.w	8004858 <_svfiprintf_r+0x28>
 80049fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004a00:	e72c      	b.n	800485c <_svfiprintf_r+0x2c>
 8004a02:	ab03      	add	r3, sp, #12
 8004a04:	9300      	str	r3, [sp, #0]
 8004a06:	462a      	mov	r2, r5
 8004a08:	4b05      	ldr	r3, [pc, #20]	@ (8004a20 <_svfiprintf_r+0x1f0>)
 8004a0a:	a904      	add	r1, sp, #16
 8004a0c:	4638      	mov	r0, r7
 8004a0e:	f000 f879 	bl	8004b04 <_printf_i>
 8004a12:	e7ed      	b.n	80049f0 <_svfiprintf_r+0x1c0>
 8004a14:	08004e64 	.word	0x08004e64
 8004a18:	08004e6e 	.word	0x08004e6e
 8004a1c:	00000000 	.word	0x00000000
 8004a20:	08004779 	.word	0x08004779
 8004a24:	08004e6a 	.word	0x08004e6a

08004a28 <_printf_common>:
 8004a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a2c:	4616      	mov	r6, r2
 8004a2e:	4698      	mov	r8, r3
 8004a30:	688a      	ldr	r2, [r1, #8]
 8004a32:	690b      	ldr	r3, [r1, #16]
 8004a34:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	bfb8      	it	lt
 8004a3c:	4613      	movlt	r3, r2
 8004a3e:	6033      	str	r3, [r6, #0]
 8004a40:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004a44:	4607      	mov	r7, r0
 8004a46:	460c      	mov	r4, r1
 8004a48:	b10a      	cbz	r2, 8004a4e <_printf_common+0x26>
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	6033      	str	r3, [r6, #0]
 8004a4e:	6823      	ldr	r3, [r4, #0]
 8004a50:	0699      	lsls	r1, r3, #26
 8004a52:	bf42      	ittt	mi
 8004a54:	6833      	ldrmi	r3, [r6, #0]
 8004a56:	3302      	addmi	r3, #2
 8004a58:	6033      	strmi	r3, [r6, #0]
 8004a5a:	6825      	ldr	r5, [r4, #0]
 8004a5c:	f015 0506 	ands.w	r5, r5, #6
 8004a60:	d106      	bne.n	8004a70 <_printf_common+0x48>
 8004a62:	f104 0a19 	add.w	sl, r4, #25
 8004a66:	68e3      	ldr	r3, [r4, #12]
 8004a68:	6832      	ldr	r2, [r6, #0]
 8004a6a:	1a9b      	subs	r3, r3, r2
 8004a6c:	42ab      	cmp	r3, r5
 8004a6e:	dc26      	bgt.n	8004abe <_printf_common+0x96>
 8004a70:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004a74:	6822      	ldr	r2, [r4, #0]
 8004a76:	3b00      	subs	r3, #0
 8004a78:	bf18      	it	ne
 8004a7a:	2301      	movne	r3, #1
 8004a7c:	0692      	lsls	r2, r2, #26
 8004a7e:	d42b      	bmi.n	8004ad8 <_printf_common+0xb0>
 8004a80:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004a84:	4641      	mov	r1, r8
 8004a86:	4638      	mov	r0, r7
 8004a88:	47c8      	blx	r9
 8004a8a:	3001      	adds	r0, #1
 8004a8c:	d01e      	beq.n	8004acc <_printf_common+0xa4>
 8004a8e:	6823      	ldr	r3, [r4, #0]
 8004a90:	6922      	ldr	r2, [r4, #16]
 8004a92:	f003 0306 	and.w	r3, r3, #6
 8004a96:	2b04      	cmp	r3, #4
 8004a98:	bf02      	ittt	eq
 8004a9a:	68e5      	ldreq	r5, [r4, #12]
 8004a9c:	6833      	ldreq	r3, [r6, #0]
 8004a9e:	1aed      	subeq	r5, r5, r3
 8004aa0:	68a3      	ldr	r3, [r4, #8]
 8004aa2:	bf0c      	ite	eq
 8004aa4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004aa8:	2500      	movne	r5, #0
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	bfc4      	itt	gt
 8004aae:	1a9b      	subgt	r3, r3, r2
 8004ab0:	18ed      	addgt	r5, r5, r3
 8004ab2:	2600      	movs	r6, #0
 8004ab4:	341a      	adds	r4, #26
 8004ab6:	42b5      	cmp	r5, r6
 8004ab8:	d11a      	bne.n	8004af0 <_printf_common+0xc8>
 8004aba:	2000      	movs	r0, #0
 8004abc:	e008      	b.n	8004ad0 <_printf_common+0xa8>
 8004abe:	2301      	movs	r3, #1
 8004ac0:	4652      	mov	r2, sl
 8004ac2:	4641      	mov	r1, r8
 8004ac4:	4638      	mov	r0, r7
 8004ac6:	47c8      	blx	r9
 8004ac8:	3001      	adds	r0, #1
 8004aca:	d103      	bne.n	8004ad4 <_printf_common+0xac>
 8004acc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004ad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ad4:	3501      	adds	r5, #1
 8004ad6:	e7c6      	b.n	8004a66 <_printf_common+0x3e>
 8004ad8:	18e1      	adds	r1, r4, r3
 8004ada:	1c5a      	adds	r2, r3, #1
 8004adc:	2030      	movs	r0, #48	@ 0x30
 8004ade:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004ae2:	4422      	add	r2, r4
 8004ae4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004ae8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004aec:	3302      	adds	r3, #2
 8004aee:	e7c7      	b.n	8004a80 <_printf_common+0x58>
 8004af0:	2301      	movs	r3, #1
 8004af2:	4622      	mov	r2, r4
 8004af4:	4641      	mov	r1, r8
 8004af6:	4638      	mov	r0, r7
 8004af8:	47c8      	blx	r9
 8004afa:	3001      	adds	r0, #1
 8004afc:	d0e6      	beq.n	8004acc <_printf_common+0xa4>
 8004afe:	3601      	adds	r6, #1
 8004b00:	e7d9      	b.n	8004ab6 <_printf_common+0x8e>
	...

08004b04 <_printf_i>:
 8004b04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b08:	7e0f      	ldrb	r7, [r1, #24]
 8004b0a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004b0c:	2f78      	cmp	r7, #120	@ 0x78
 8004b0e:	4691      	mov	r9, r2
 8004b10:	4680      	mov	r8, r0
 8004b12:	460c      	mov	r4, r1
 8004b14:	469a      	mov	sl, r3
 8004b16:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004b1a:	d807      	bhi.n	8004b2c <_printf_i+0x28>
 8004b1c:	2f62      	cmp	r7, #98	@ 0x62
 8004b1e:	d80a      	bhi.n	8004b36 <_printf_i+0x32>
 8004b20:	2f00      	cmp	r7, #0
 8004b22:	f000 80d2 	beq.w	8004cca <_printf_i+0x1c6>
 8004b26:	2f58      	cmp	r7, #88	@ 0x58
 8004b28:	f000 80b9 	beq.w	8004c9e <_printf_i+0x19a>
 8004b2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b30:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004b34:	e03a      	b.n	8004bac <_printf_i+0xa8>
 8004b36:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004b3a:	2b15      	cmp	r3, #21
 8004b3c:	d8f6      	bhi.n	8004b2c <_printf_i+0x28>
 8004b3e:	a101      	add	r1, pc, #4	@ (adr r1, 8004b44 <_printf_i+0x40>)
 8004b40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b44:	08004b9d 	.word	0x08004b9d
 8004b48:	08004bb1 	.word	0x08004bb1
 8004b4c:	08004b2d 	.word	0x08004b2d
 8004b50:	08004b2d 	.word	0x08004b2d
 8004b54:	08004b2d 	.word	0x08004b2d
 8004b58:	08004b2d 	.word	0x08004b2d
 8004b5c:	08004bb1 	.word	0x08004bb1
 8004b60:	08004b2d 	.word	0x08004b2d
 8004b64:	08004b2d 	.word	0x08004b2d
 8004b68:	08004b2d 	.word	0x08004b2d
 8004b6c:	08004b2d 	.word	0x08004b2d
 8004b70:	08004cb1 	.word	0x08004cb1
 8004b74:	08004bdb 	.word	0x08004bdb
 8004b78:	08004c6b 	.word	0x08004c6b
 8004b7c:	08004b2d 	.word	0x08004b2d
 8004b80:	08004b2d 	.word	0x08004b2d
 8004b84:	08004cd3 	.word	0x08004cd3
 8004b88:	08004b2d 	.word	0x08004b2d
 8004b8c:	08004bdb 	.word	0x08004bdb
 8004b90:	08004b2d 	.word	0x08004b2d
 8004b94:	08004b2d 	.word	0x08004b2d
 8004b98:	08004c73 	.word	0x08004c73
 8004b9c:	6833      	ldr	r3, [r6, #0]
 8004b9e:	1d1a      	adds	r2, r3, #4
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	6032      	str	r2, [r6, #0]
 8004ba4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ba8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004bac:	2301      	movs	r3, #1
 8004bae:	e09d      	b.n	8004cec <_printf_i+0x1e8>
 8004bb0:	6833      	ldr	r3, [r6, #0]
 8004bb2:	6820      	ldr	r0, [r4, #0]
 8004bb4:	1d19      	adds	r1, r3, #4
 8004bb6:	6031      	str	r1, [r6, #0]
 8004bb8:	0606      	lsls	r6, r0, #24
 8004bba:	d501      	bpl.n	8004bc0 <_printf_i+0xbc>
 8004bbc:	681d      	ldr	r5, [r3, #0]
 8004bbe:	e003      	b.n	8004bc8 <_printf_i+0xc4>
 8004bc0:	0645      	lsls	r5, r0, #25
 8004bc2:	d5fb      	bpl.n	8004bbc <_printf_i+0xb8>
 8004bc4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004bc8:	2d00      	cmp	r5, #0
 8004bca:	da03      	bge.n	8004bd4 <_printf_i+0xd0>
 8004bcc:	232d      	movs	r3, #45	@ 0x2d
 8004bce:	426d      	negs	r5, r5
 8004bd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004bd4:	4859      	ldr	r0, [pc, #356]	@ (8004d3c <_printf_i+0x238>)
 8004bd6:	230a      	movs	r3, #10
 8004bd8:	e011      	b.n	8004bfe <_printf_i+0xfa>
 8004bda:	6821      	ldr	r1, [r4, #0]
 8004bdc:	6833      	ldr	r3, [r6, #0]
 8004bde:	0608      	lsls	r0, r1, #24
 8004be0:	f853 5b04 	ldr.w	r5, [r3], #4
 8004be4:	d402      	bmi.n	8004bec <_printf_i+0xe8>
 8004be6:	0649      	lsls	r1, r1, #25
 8004be8:	bf48      	it	mi
 8004bea:	b2ad      	uxthmi	r5, r5
 8004bec:	2f6f      	cmp	r7, #111	@ 0x6f
 8004bee:	4853      	ldr	r0, [pc, #332]	@ (8004d3c <_printf_i+0x238>)
 8004bf0:	6033      	str	r3, [r6, #0]
 8004bf2:	bf14      	ite	ne
 8004bf4:	230a      	movne	r3, #10
 8004bf6:	2308      	moveq	r3, #8
 8004bf8:	2100      	movs	r1, #0
 8004bfa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004bfe:	6866      	ldr	r6, [r4, #4]
 8004c00:	60a6      	str	r6, [r4, #8]
 8004c02:	2e00      	cmp	r6, #0
 8004c04:	bfa2      	ittt	ge
 8004c06:	6821      	ldrge	r1, [r4, #0]
 8004c08:	f021 0104 	bicge.w	r1, r1, #4
 8004c0c:	6021      	strge	r1, [r4, #0]
 8004c0e:	b90d      	cbnz	r5, 8004c14 <_printf_i+0x110>
 8004c10:	2e00      	cmp	r6, #0
 8004c12:	d04b      	beq.n	8004cac <_printf_i+0x1a8>
 8004c14:	4616      	mov	r6, r2
 8004c16:	fbb5 f1f3 	udiv	r1, r5, r3
 8004c1a:	fb03 5711 	mls	r7, r3, r1, r5
 8004c1e:	5dc7      	ldrb	r7, [r0, r7]
 8004c20:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004c24:	462f      	mov	r7, r5
 8004c26:	42bb      	cmp	r3, r7
 8004c28:	460d      	mov	r5, r1
 8004c2a:	d9f4      	bls.n	8004c16 <_printf_i+0x112>
 8004c2c:	2b08      	cmp	r3, #8
 8004c2e:	d10b      	bne.n	8004c48 <_printf_i+0x144>
 8004c30:	6823      	ldr	r3, [r4, #0]
 8004c32:	07df      	lsls	r7, r3, #31
 8004c34:	d508      	bpl.n	8004c48 <_printf_i+0x144>
 8004c36:	6923      	ldr	r3, [r4, #16]
 8004c38:	6861      	ldr	r1, [r4, #4]
 8004c3a:	4299      	cmp	r1, r3
 8004c3c:	bfde      	ittt	le
 8004c3e:	2330      	movle	r3, #48	@ 0x30
 8004c40:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004c44:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004c48:	1b92      	subs	r2, r2, r6
 8004c4a:	6122      	str	r2, [r4, #16]
 8004c4c:	f8cd a000 	str.w	sl, [sp]
 8004c50:	464b      	mov	r3, r9
 8004c52:	aa03      	add	r2, sp, #12
 8004c54:	4621      	mov	r1, r4
 8004c56:	4640      	mov	r0, r8
 8004c58:	f7ff fee6 	bl	8004a28 <_printf_common>
 8004c5c:	3001      	adds	r0, #1
 8004c5e:	d14a      	bne.n	8004cf6 <_printf_i+0x1f2>
 8004c60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004c64:	b004      	add	sp, #16
 8004c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c6a:	6823      	ldr	r3, [r4, #0]
 8004c6c:	f043 0320 	orr.w	r3, r3, #32
 8004c70:	6023      	str	r3, [r4, #0]
 8004c72:	4833      	ldr	r0, [pc, #204]	@ (8004d40 <_printf_i+0x23c>)
 8004c74:	2778      	movs	r7, #120	@ 0x78
 8004c76:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004c7a:	6823      	ldr	r3, [r4, #0]
 8004c7c:	6831      	ldr	r1, [r6, #0]
 8004c7e:	061f      	lsls	r7, r3, #24
 8004c80:	f851 5b04 	ldr.w	r5, [r1], #4
 8004c84:	d402      	bmi.n	8004c8c <_printf_i+0x188>
 8004c86:	065f      	lsls	r7, r3, #25
 8004c88:	bf48      	it	mi
 8004c8a:	b2ad      	uxthmi	r5, r5
 8004c8c:	6031      	str	r1, [r6, #0]
 8004c8e:	07d9      	lsls	r1, r3, #31
 8004c90:	bf44      	itt	mi
 8004c92:	f043 0320 	orrmi.w	r3, r3, #32
 8004c96:	6023      	strmi	r3, [r4, #0]
 8004c98:	b11d      	cbz	r5, 8004ca2 <_printf_i+0x19e>
 8004c9a:	2310      	movs	r3, #16
 8004c9c:	e7ac      	b.n	8004bf8 <_printf_i+0xf4>
 8004c9e:	4827      	ldr	r0, [pc, #156]	@ (8004d3c <_printf_i+0x238>)
 8004ca0:	e7e9      	b.n	8004c76 <_printf_i+0x172>
 8004ca2:	6823      	ldr	r3, [r4, #0]
 8004ca4:	f023 0320 	bic.w	r3, r3, #32
 8004ca8:	6023      	str	r3, [r4, #0]
 8004caa:	e7f6      	b.n	8004c9a <_printf_i+0x196>
 8004cac:	4616      	mov	r6, r2
 8004cae:	e7bd      	b.n	8004c2c <_printf_i+0x128>
 8004cb0:	6833      	ldr	r3, [r6, #0]
 8004cb2:	6825      	ldr	r5, [r4, #0]
 8004cb4:	6961      	ldr	r1, [r4, #20]
 8004cb6:	1d18      	adds	r0, r3, #4
 8004cb8:	6030      	str	r0, [r6, #0]
 8004cba:	062e      	lsls	r6, r5, #24
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	d501      	bpl.n	8004cc4 <_printf_i+0x1c0>
 8004cc0:	6019      	str	r1, [r3, #0]
 8004cc2:	e002      	b.n	8004cca <_printf_i+0x1c6>
 8004cc4:	0668      	lsls	r0, r5, #25
 8004cc6:	d5fb      	bpl.n	8004cc0 <_printf_i+0x1bc>
 8004cc8:	8019      	strh	r1, [r3, #0]
 8004cca:	2300      	movs	r3, #0
 8004ccc:	6123      	str	r3, [r4, #16]
 8004cce:	4616      	mov	r6, r2
 8004cd0:	e7bc      	b.n	8004c4c <_printf_i+0x148>
 8004cd2:	6833      	ldr	r3, [r6, #0]
 8004cd4:	1d1a      	adds	r2, r3, #4
 8004cd6:	6032      	str	r2, [r6, #0]
 8004cd8:	681e      	ldr	r6, [r3, #0]
 8004cda:	6862      	ldr	r2, [r4, #4]
 8004cdc:	2100      	movs	r1, #0
 8004cde:	4630      	mov	r0, r6
 8004ce0:	f7fb fa8e 	bl	8000200 <memchr>
 8004ce4:	b108      	cbz	r0, 8004cea <_printf_i+0x1e6>
 8004ce6:	1b80      	subs	r0, r0, r6
 8004ce8:	6060      	str	r0, [r4, #4]
 8004cea:	6863      	ldr	r3, [r4, #4]
 8004cec:	6123      	str	r3, [r4, #16]
 8004cee:	2300      	movs	r3, #0
 8004cf0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004cf4:	e7aa      	b.n	8004c4c <_printf_i+0x148>
 8004cf6:	6923      	ldr	r3, [r4, #16]
 8004cf8:	4632      	mov	r2, r6
 8004cfa:	4649      	mov	r1, r9
 8004cfc:	4640      	mov	r0, r8
 8004cfe:	47d0      	blx	sl
 8004d00:	3001      	adds	r0, #1
 8004d02:	d0ad      	beq.n	8004c60 <_printf_i+0x15c>
 8004d04:	6823      	ldr	r3, [r4, #0]
 8004d06:	079b      	lsls	r3, r3, #30
 8004d08:	d413      	bmi.n	8004d32 <_printf_i+0x22e>
 8004d0a:	68e0      	ldr	r0, [r4, #12]
 8004d0c:	9b03      	ldr	r3, [sp, #12]
 8004d0e:	4298      	cmp	r0, r3
 8004d10:	bfb8      	it	lt
 8004d12:	4618      	movlt	r0, r3
 8004d14:	e7a6      	b.n	8004c64 <_printf_i+0x160>
 8004d16:	2301      	movs	r3, #1
 8004d18:	4632      	mov	r2, r6
 8004d1a:	4649      	mov	r1, r9
 8004d1c:	4640      	mov	r0, r8
 8004d1e:	47d0      	blx	sl
 8004d20:	3001      	adds	r0, #1
 8004d22:	d09d      	beq.n	8004c60 <_printf_i+0x15c>
 8004d24:	3501      	adds	r5, #1
 8004d26:	68e3      	ldr	r3, [r4, #12]
 8004d28:	9903      	ldr	r1, [sp, #12]
 8004d2a:	1a5b      	subs	r3, r3, r1
 8004d2c:	42ab      	cmp	r3, r5
 8004d2e:	dcf2      	bgt.n	8004d16 <_printf_i+0x212>
 8004d30:	e7eb      	b.n	8004d0a <_printf_i+0x206>
 8004d32:	2500      	movs	r5, #0
 8004d34:	f104 0619 	add.w	r6, r4, #25
 8004d38:	e7f5      	b.n	8004d26 <_printf_i+0x222>
 8004d3a:	bf00      	nop
 8004d3c:	08004e75 	.word	0x08004e75
 8004d40:	08004e86 	.word	0x08004e86

08004d44 <memmove>:
 8004d44:	4288      	cmp	r0, r1
 8004d46:	b510      	push	{r4, lr}
 8004d48:	eb01 0402 	add.w	r4, r1, r2
 8004d4c:	d902      	bls.n	8004d54 <memmove+0x10>
 8004d4e:	4284      	cmp	r4, r0
 8004d50:	4623      	mov	r3, r4
 8004d52:	d807      	bhi.n	8004d64 <memmove+0x20>
 8004d54:	1e43      	subs	r3, r0, #1
 8004d56:	42a1      	cmp	r1, r4
 8004d58:	d008      	beq.n	8004d6c <memmove+0x28>
 8004d5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004d62:	e7f8      	b.n	8004d56 <memmove+0x12>
 8004d64:	4402      	add	r2, r0
 8004d66:	4601      	mov	r1, r0
 8004d68:	428a      	cmp	r2, r1
 8004d6a:	d100      	bne.n	8004d6e <memmove+0x2a>
 8004d6c:	bd10      	pop	{r4, pc}
 8004d6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004d72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004d76:	e7f7      	b.n	8004d68 <memmove+0x24>

08004d78 <_sbrk_r>:
 8004d78:	b538      	push	{r3, r4, r5, lr}
 8004d7a:	4d06      	ldr	r5, [pc, #24]	@ (8004d94 <_sbrk_r+0x1c>)
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	4604      	mov	r4, r0
 8004d80:	4608      	mov	r0, r1
 8004d82:	602b      	str	r3, [r5, #0]
 8004d84:	f7fc f8be 	bl	8000f04 <_sbrk>
 8004d88:	1c43      	adds	r3, r0, #1
 8004d8a:	d102      	bne.n	8004d92 <_sbrk_r+0x1a>
 8004d8c:	682b      	ldr	r3, [r5, #0]
 8004d8e:	b103      	cbz	r3, 8004d92 <_sbrk_r+0x1a>
 8004d90:	6023      	str	r3, [r4, #0]
 8004d92:	bd38      	pop	{r3, r4, r5, pc}
 8004d94:	20000984 	.word	0x20000984

08004d98 <memcpy>:
 8004d98:	440a      	add	r2, r1
 8004d9a:	4291      	cmp	r1, r2
 8004d9c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004da0:	d100      	bne.n	8004da4 <memcpy+0xc>
 8004da2:	4770      	bx	lr
 8004da4:	b510      	push	{r4, lr}
 8004da6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004daa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004dae:	4291      	cmp	r1, r2
 8004db0:	d1f9      	bne.n	8004da6 <memcpy+0xe>
 8004db2:	bd10      	pop	{r4, pc}

08004db4 <_realloc_r>:
 8004db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004db8:	4680      	mov	r8, r0
 8004dba:	4615      	mov	r5, r2
 8004dbc:	460c      	mov	r4, r1
 8004dbe:	b921      	cbnz	r1, 8004dca <_realloc_r+0x16>
 8004dc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004dc4:	4611      	mov	r1, r2
 8004dc6:	f7ff bc4b 	b.w	8004660 <_malloc_r>
 8004dca:	b92a      	cbnz	r2, 8004dd8 <_realloc_r+0x24>
 8004dcc:	f7ff fbdc 	bl	8004588 <_free_r>
 8004dd0:	2400      	movs	r4, #0
 8004dd2:	4620      	mov	r0, r4
 8004dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004dd8:	f000 f81a 	bl	8004e10 <_malloc_usable_size_r>
 8004ddc:	4285      	cmp	r5, r0
 8004dde:	4606      	mov	r6, r0
 8004de0:	d802      	bhi.n	8004de8 <_realloc_r+0x34>
 8004de2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004de6:	d8f4      	bhi.n	8004dd2 <_realloc_r+0x1e>
 8004de8:	4629      	mov	r1, r5
 8004dea:	4640      	mov	r0, r8
 8004dec:	f7ff fc38 	bl	8004660 <_malloc_r>
 8004df0:	4607      	mov	r7, r0
 8004df2:	2800      	cmp	r0, #0
 8004df4:	d0ec      	beq.n	8004dd0 <_realloc_r+0x1c>
 8004df6:	42b5      	cmp	r5, r6
 8004df8:	462a      	mov	r2, r5
 8004dfa:	4621      	mov	r1, r4
 8004dfc:	bf28      	it	cs
 8004dfe:	4632      	movcs	r2, r6
 8004e00:	f7ff ffca 	bl	8004d98 <memcpy>
 8004e04:	4621      	mov	r1, r4
 8004e06:	4640      	mov	r0, r8
 8004e08:	f7ff fbbe 	bl	8004588 <_free_r>
 8004e0c:	463c      	mov	r4, r7
 8004e0e:	e7e0      	b.n	8004dd2 <_realloc_r+0x1e>

08004e10 <_malloc_usable_size_r>:
 8004e10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e14:	1f18      	subs	r0, r3, #4
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	bfbc      	itt	lt
 8004e1a:	580b      	ldrlt	r3, [r1, r0]
 8004e1c:	18c0      	addlt	r0, r0, r3
 8004e1e:	4770      	bx	lr

08004e20 <_init>:
 8004e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e22:	bf00      	nop
 8004e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e26:	bc08      	pop	{r3}
 8004e28:	469e      	mov	lr, r3
 8004e2a:	4770      	bx	lr

08004e2c <_fini>:
 8004e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e2e:	bf00      	nop
 8004e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e32:	bc08      	pop	{r3}
 8004e34:	469e      	mov	lr, r3
 8004e36:	4770      	bx	lr
